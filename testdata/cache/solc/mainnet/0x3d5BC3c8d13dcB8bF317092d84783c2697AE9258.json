{"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/ComptrollerStorage.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CToken.sol\";\nimport \"./PriceOracle.sol\";\n\ncontract UnitrollerAdminStorage {\n    /**\n    * @notice Administrator for this contract\n    */\n    address public admin;\n\n    /**\n    * @notice Pending administrator for this contract\n    */\n    address public pendingAdmin;\n\n    /**\n    * @notice Active brains of Unitroller\n    */\n    address public comptrollerImplementation;\n\n    /**\n    * @notice Pending brains of Unitroller\n    */\n    address public pendingComptrollerImplementation;\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n\n    /**\n     * @notice Oracle which gives the price of any given asset\n     */\n    PriceOracle public oracle;\n\n    /**\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n     */\n    uint public closeFactorMantissa;\n\n    /**\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\n     */\n    uint public liquidationIncentiveMantissa;\n\n    /**\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n     */\n    uint public maxAssets;\n\n    /**\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n     */\n    mapping(address => CToken[]) public accountAssets;\n\n}\n\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\n    struct Market {\n        /// @notice Whether or not this market is listed\n        bool isListed;\n\n        /**\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\n         *  Must be between 0 and 1, and stored as a mantissa.\n         */\n        uint collateralFactorMantissa;\n\n        /// @notice Per-market mapping of \"accounts in this asset\"\n        mapping(address => bool) accountMembership;\n\n        /// @notice Whether or not this market receives COMP\n        bool isComped;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n\n    /**\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n     *  Actions which allow users to remove their own assets cannot be paused.\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\n     */\n    address public pauseGuardian;\n    bool public _mintGuardianPaused;\n    bool public _borrowGuardianPaused;\n    bool public transferGuardianPaused;\n    bool public seizeGuardianPaused;\n    mapping(address => bool) public mintGuardianPaused;\n    mapping(address => bool) public borrowGuardianPaused;\n}\n\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\n    struct CompMarketState {\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n        uint224 index;\n\n        /// @notice The block number the index was last updated at\n        uint32 block;\n    }\n\n    /// @notice A list of all markets\n    CToken[] public allMarkets;\n\n    /// @notice The rate at which the flywheel distributes COMP, per block\n    uint public compRate;\n\n    /// @notice The portion of compRate that each market currently receives\n    mapping(address => uint) public compSpeeds;\n\n    /// @notice The COMP market supply state for each market\n    mapping(address => CompMarketState) public compSupplyState;\n\n    /// @notice The COMP market borrow state for each market\n    mapping(address => CompMarketState) public compBorrowState;\n\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\n\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\n\n    /// @notice The COMP accrued but not yet transferred to each user\n    mapping(address => uint) public compAccrued;\n}\n"},"contracts/Exponential.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CarefulMath.sol\";\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract Exponential is CarefulMath {\n    uint constant expScale = 1e18;\n    uint constant doubleScale = 1e36;\n    uint constant halfExpScale = expScale/2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    struct Double {\n        uint mantissa;\n    }\n\n    /**\n     * @dev Creates an exponential from numerator and denominator values.\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n     *            or if `denom` is zero.\n     */\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n    }\n\n    /**\n     * @dev Adds two exponentials, returning a new exponential.\n     */\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Subtracts two exponentials, returning a new exponential.\n     */\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\n     */\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(product));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return addUInt(truncate(product), addend);\n    }\n\n    /**\n     * @dev Divide an Exp by a scalar, returning a new Exp.\n     */\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, returning a new Exp.\n     */\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n        /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n        return getExp(numerator, divisor.mantissa);\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n     */\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(fraction));\n    }\n\n    /**\n     * @dev Multiplies two exponentials, returning a new exponential.\n     */\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        // We add half the scale before dividing so that we get rounding instead of truncation.\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n        assert(err2 == MathError.NO_ERROR);\n\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\n    }\n\n    /**\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n     */\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n    }\n\n    /**\n     * @dev Multiplies three exponentials, returning a new exponential.\n     */\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n        (MathError err, Exp memory ab) = mulExp(a, b);\n        if (err != MathError.NO_ERROR) {\n            return (err, ab);\n        }\n        return mulExp(ab, c);\n    }\n\n    /**\n     * @dev Divides two exponentials, returning a new exponential.\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n     */\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        return getExp(a.mantissa, b.mantissa);\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory exp) pure internal returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa < right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa <= right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa > right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\n        return value.mantissa == 0;\n    }\n\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\n        require(n < 2**224, errorMessage);\n        return uint224(n);\n    }\n\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(uint a, uint b) pure internal returns (uint) {\n        return add_(a, b, \"addition overflow\");\n    }\n\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        uint c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(uint a, uint b) pure internal returns (uint) {\n        return sub_(a, b, \"subtraction underflow\");\n    }\n\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n    }\n\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / expScale;\n    }\n\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n    }\n\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / doubleScale;\n    }\n\n    function mul_(uint a, uint b) pure internal returns (uint) {\n        return mul_(a, b, \"multiplication overflow\");\n    }\n\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, errorMessage);\n        return c;\n    }\n\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n    }\n\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\n        return div_(mul_(a, expScale), b.mantissa);\n    }\n\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n    }\n\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Double memory b) pure internal returns (uint) {\n        return div_(mul_(a, doubleScale), b.mantissa);\n    }\n\n    function div_(uint a, uint b) pure internal returns (uint) {\n        return div_(a, b, \"divide by zero\");\n    }\n\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\n    }\n}\n"},"contracts/CTokenInterfaces.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./InterestRateModel.sol\";\n\ncontract CTokenStorage {\n    /**\n     * @dev Guard variable for re-entrancy checks\n     */\n    bool internal _notEntered;\n\n    /**\n     * @notice EIP-20 token name for this token\n     */\n    string public name;\n\n    /**\n     * @notice EIP-20 token symbol for this token\n     */\n    string public symbol;\n\n    /**\n     * @notice EIP-20 token decimals for this token\n     */\n    uint8 public decimals;\n\n    /**\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\n     */\n\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n\n    /**\n     * @notice Maximum fraction of interest that can be set aside for reserves\n     */\n    uint internal constant reserveFactorMaxMantissa = 1e18;\n\n    /**\n     * @notice Administrator for this contract\n     */\n    address payable public admin;\n\n    /**\n     * @notice Pending administrator for this contract\n     */\n    address payable public pendingAdmin;\n\n    /**\n     * @notice Contract which oversees inter-cToken operations\n     */\n    ComptrollerInterface public comptroller;\n\n    /**\n     * @notice Model which tells what the current interest rate should be\n     */\n    InterestRateModel public interestRateModel;\n\n    /**\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n     */\n    uint internal initialExchangeRateMantissa;\n\n    /**\n     * @notice Fraction of interest currently set aside for reserves\n     */\n    uint public reserveFactorMantissa;\n\n    /**\n     * @notice Block number that interest was last accrued at\n     */\n    uint public accrualBlockNumber;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the opening of the market\n     */\n    uint public borrowIndex;\n\n    /**\n     * @notice Total amount of outstanding borrows of the underlying in this market\n     */\n    uint public totalBorrows;\n\n    /**\n     * @notice Total amount of reserves of the underlying held in this market\n     */\n    uint public totalReserves;\n\n    /**\n     * @notice Total number of tokens in circulation\n     */\n    uint public totalSupply;\n\n    /**\n     * @notice Official record of token balances for each account\n     */\n    mapping (address => uint) internal accountTokens;\n\n    /**\n     * @notice Approved token transfer amounts on behalf of others\n     */\n    mapping (address => mapping (address => uint)) internal transferAllowances;\n\n    /**\n     * @notice Container for borrow balance information\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n     */\n    struct BorrowSnapshot {\n        uint principal;\n        uint interestIndex;\n    }\n\n    /**\n     * @notice Mapping of account addresses to outstanding borrow balances\n     */\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n}\n\ncontract CTokenInterface is CTokenStorage {\n    /**\n     * @notice Indicator that this is a CToken contract (for inspection)\n     */\n    bool public constant isCToken = true;\n\n\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address minter, uint mintAmount, uint mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\n\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when comptroller is changed\n     */\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\n\n    /**\n     * @notice Event emitted when interestRateModel is changed\n     */\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(address indexed owner, address indexed spender, uint amount);\n\n    /**\n     * @notice Failure event\n     */\n    event Failure(uint error, uint info, uint detail);\n\n\n    /*** User Interface ***/\n\n    function transfer(address dst, uint amount) external returns (bool);\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n    function approve(address spender, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n    function borrowRatePerBlock() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function borrowBalanceStored(address account) public view returns (uint);\n    function exchangeRateCurrent() public returns (uint);\n    function exchangeRateStored() public view returns (uint);\n    function getCash() external view returns (uint);\n    function accrueInterest() public returns (uint);\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\n\n\n    /*** Admin Functions ***/\n\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n    function _acceptAdmin() external returns (uint);\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n    function _reduceReserves(uint reduceAmount) external returns (uint);\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n}\n\ncontract CErc20Storage {\n    /**\n     * @notice Underlying asset for this CToken\n     */\n    address public underlying;\n}\n\ncontract CErc20Interface is CErc20Storage {\n\n    /*** User Interface ***/\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\n\n\n    /*** Admin Functions ***/\n\n    function _addReserves(uint addAmount) external returns (uint);\n}\n\ncontract CDelegationStorage {\n    /**\n     * @notice Implementation address for this contract\n     */\n    address public implementation;\n}\n\ncontract CDelegatorInterface is CDelegationStorage {\n    /**\n     * @notice Emitted when implementation is changed\n     */\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n     */\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n}\n\ncontract CDelegateInterface is CDelegationStorage {\n    /**\n     * @notice Called by the delegator on a delegate to initialize it for duty\n     * @dev Should revert if any issues arise which make it unfit for delegation\n     * @param data The encoded bytes data for any initialization\n     */\n    function _becomeImplementation(bytes memory data) public;\n\n    /**\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\n     */\n    function _resignImplementation() public;\n}\n"},"contracts/ComptrollerInterface.sol":{"content":"pragma solidity ^0.5.16;\n\ncontract ComptrollerInterface {\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\n    bool public constant isComptroller = true;\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\n\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint borrowerIndex) external;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        uint seizeTokens) external;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external returns (uint);\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external;\n\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint repayAmount) external view returns (uint, uint);\n}\n"},"contracts/EIP20Interface.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    /**\n      * @notice Get the total number of tokens in circulation\n      * @return The supply of tokens\n      */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return Whether or not the transfer succeeded\n      */\n    function transfer(address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Transfer `amount` tokens from `src` to `dst`\n      * @param src The address of the source account\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return Whether or not the transfer succeeded\n      */\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n      * @dev This will overwrite the approval amount for `spender`\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n      * @param spender The address of the account which may transfer tokens\n      * @param amount The number of tokens that are approved (-1 means infinite)\n      * @return Whether or not the approval succeeded\n      */\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Get the current allowance from `owner` for `spender`\n      * @param owner The address of the account which owns the tokens to be spent\n      * @param spender The address of the account which may transfer tokens\n      * @return The number of tokens allowed to be spent (-1 means infinite)\n      */\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"},"contracts/CarefulMath.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n  * @title Careful Math\n  * @author Compound\n  * @notice Derived from OpenZeppelin's SafeMath library\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n  */\ncontract CarefulMath {\n\n    /**\n     * @dev Possible error codes that we can return\n     */\n    enum MathError {\n        NO_ERROR,\n        DIVISION_BY_ZERO,\n        INTEGER_OVERFLOW,\n        INTEGER_UNDERFLOW\n    }\n\n    /**\n    * @dev Multiplies two numbers, returns an error on overflow.\n    */\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n\n    /**\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b <= a) {\n            return (MathError.NO_ERROR, a - b);\n        } else {\n            return (MathError.INTEGER_UNDERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, returns an error on overflow.\n    */\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        uint c = a + b;\n\n        if (c >= a) {\n            return (MathError.NO_ERROR, c);\n        } else {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev add a and b and then subtract c\n    */\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n        (MathError err0, uint sum) = addUInt(a, b);\n\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, 0);\n        }\n\n        return subUInt(sum, c);\n    }\n}"},"contracts/Unitroller.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ErrorReporter.sol\";\nimport \"./ComptrollerStorage.sol\";\n/**\n * @title ComptrollerCore\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\n * CTokens should reference this contract as their comptroller.\n */\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n\n    /**\n      * @notice Emitted when pendingComptrollerImplementation is changed\n      */\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n\n    /**\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n      */\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /**\n      * @notice Emitted when pendingAdmin is changed\n      */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n      */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    constructor() public {\n        // Set admin to caller\n        admin = msg.sender;\n    }\n\n    /*** Admin Functions ***/\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n        }\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n    * @dev Admin function for new implementation to accept it's role as implementation\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n    */\n    function _acceptImplementation() public returns (uint) {\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldImplementation = comptrollerImplementation;\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = address(0);\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n        return uint(Error.NO_ERROR);\n    }\n\n\n    /**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _acceptAdmin() public returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * It returns to the external caller whatever the implementation returns\n     * or forwards reverts.\n     */\n    function () payable external {\n        // delegate all other functions to current implementation\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n        assembly {\n              let free_mem_ptr := mload(0x40)\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n              switch success\n              case 0 { revert(free_mem_ptr, returndatasize) }\n              default { return(free_mem_ptr, returndatasize) }\n        }\n    }\n}\n"},"contracts/ErrorReporter.sol":{"content":"pragma solidity ^0.5.16;\n\ncontract ComptrollerErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        COMPTROLLER_MISMATCH,\n        INSUFFICIENT_SHORTFALL,\n        INSUFFICIENT_LIQUIDITY,\n        INVALID_CLOSE_FACTOR,\n        INVALID_COLLATERAL_FACTOR,\n        INVALID_LIQUIDATION_INCENTIVE,\n        MARKET_NOT_ENTERED, // no longer possible\n        MARKET_NOT_LISTED,\n        MARKET_ALREADY_LISTED,\n        MATH_ERROR,\n        NONZERO_BORROW_BALANCE,\n        PRICE_ERROR,\n        REJECTION,\n        SNAPSHOT_ERROR,\n        TOO_MANY_ASSETS,\n        TOO_MUCH_REPAY\n    }\n\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n        EXIT_MARKET_BALANCE_OWED,\n        EXIT_MARKET_REJECTION,\n        SET_CLOSE_FACTOR_OWNER_CHECK,\n        SET_CLOSE_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n        SET_IMPLEMENTATION_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n        SET_PRICE_ORACLE_OWNER_CHECK,\n        SUPPORT_MARKET_EXISTS,\n        SUPPORT_MARKET_OWNER_CHECK,\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\n    }\n\n    /**\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n      **/\n    event Failure(uint error, uint info, uint detail);\n\n    /**\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n      */\n    function fail(Error err, FailureInfo info) internal returns (uint) {\n        emit Failure(uint(err), uint(info), 0);\n\n        return uint(err);\n    }\n\n    /**\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n      */\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n        emit Failure(uint(err), uint(info), opaqueError);\n\n        return uint(err);\n    }\n}\n\ncontract TokenErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        BAD_INPUT,\n        COMPTROLLER_REJECTION,\n        COMPTROLLER_CALCULATION_ERROR,\n        INTEREST_RATE_MODEL_ERROR,\n        INVALID_ACCOUNT_PAIR,\n        INVALID_CLOSE_AMOUNT_REQUESTED,\n        INVALID_COLLATERAL_FACTOR,\n        MATH_ERROR,\n        MARKET_NOT_FRESH,\n        MARKET_NOT_LISTED,\n        TOKEN_INSUFFICIENT_ALLOWANCE,\n        TOKEN_INSUFFICIENT_BALANCE,\n        TOKEN_INSUFFICIENT_CASH,\n        TOKEN_TRANSFER_IN_FAILED,\n        TOKEN_TRANSFER_OUT_FAILED\n    }\n\n    /*\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\n     *       This is because FailureInfo grows significantly faster, and\n     *       the order of Error has some meaning, while the order of FailureInfo\n     *       is entirely arbitrary.\n     */\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        BORROW_ACCRUE_INTEREST_FAILED,\n        BORROW_CASH_NOT_AVAILABLE,\n        BORROW_FRESHNESS_CHECK,\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        BORROW_MARKET_NOT_LISTED,\n        BORROW_COMPTROLLER_REJECTION,\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n        LIQUIDATE_COMPTROLLER_REJECTION,\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n        LIQUIDATE_FRESHNESS_CHECK,\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_SEIZE_TOO_MUCH,\n        MINT_ACCRUE_INTEREST_FAILED,\n        MINT_COMPTROLLER_REJECTION,\n        MINT_EXCHANGE_CALCULATION_FAILED,\n        MINT_EXCHANGE_RATE_READ_FAILED,\n        MINT_FRESHNESS_CHECK,\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        MINT_TRANSFER_IN_FAILED,\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\n        REDEEM_ACCRUE_INTEREST_FAILED,\n        REDEEM_COMPTROLLER_REJECTION,\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\n        REDEEM_FRESHNESS_CHECK,\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n        REDUCE_RESERVES_ADMIN_CHECK,\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n        REDUCE_RESERVES_FRESH_CHECK,\n        REDUCE_RESERVES_VALIDATION,\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_COMPTROLLER_REJECTION,\n        REPAY_BORROW_FRESHNESS_CHECK,\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COMPTROLLER_OWNER_CHECK,\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_ORACLE_MARKET_NOT_LISTED,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\n        SET_RESERVE_FACTOR_FRESH_CHECK,\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\n        TRANSFER_COMPTROLLER_REJECTION,\n        TRANSFER_NOT_ALLOWED,\n        TRANSFER_NOT_ENOUGH,\n        TRANSFER_TOO_MUCH,\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n        ADD_RESERVES_FRESH_CHECK,\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\n    }\n\n    /**\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n      **/\n    event Failure(uint error, uint info, uint detail);\n\n    /**\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n      */\n    function fail(Error err, FailureInfo info) internal returns (uint) {\n        emit Failure(uint(err), uint(info), 0);\n\n        return uint(err);\n    }\n\n    /**\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n      */\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n        emit Failure(uint(err), uint(info), opaqueError);\n\n        return uint(err);\n    }\n}"},"contracts/EIP20NonStandardInterface.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n * @title EIP20NonStandardInterface\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ninterface EIP20NonStandardInterface {\n\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      */\n    function transfer(address dst, uint256 amount) external;\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n      * @notice Transfer `amount` tokens from `src` to `dst`\n      * @param src The address of the source account\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      */\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n    /**\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n      * @dev This will overwrite the approval amount for `spender`\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n      * @param spender The address of the account which may transfer tokens\n      * @param amount The number of tokens that are approved\n      * @return Whether or not the approval succeeded\n      */\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Get the current allowance from `owner` for `spender`\n      * @param owner The address of the account which owns the tokens to be spent\n      * @param spender The address of the account which may transfer tokens\n      * @return The number of tokens allowed to be spent\n      */\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"},"contracts/PriceOracle.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CToken.sol\";\n\ncontract PriceOracle {\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n    bool public constant isPriceOracle = true;\n\n    /**\n      * @notice Get the underlying price of a cToken asset\n      * @param cToken The cToken to get the underlying price of\n      * @return The underlying asset price mantissa (scaled by 1e18).\n      *  Zero means the price is unavailable.\n      */\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\n}\n"},"contracts/InterestRateModel.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n  * @title Compound's InterestRateModel Interface\n  * @author Compound\n  */\ncontract InterestRateModel {\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n      * @notice Calculates the current borrow interest rate per block\n      * @param cash The total amount of cash the market has\n      * @param borrows The total amount of borrows the market has outstanding\n      * @param reserves The total amnount of reserves the market has\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n      */\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\n\n    /**\n      * @notice Calculates the current supply interest rate per block\n      * @param cash The total amount of cash the market has\n      * @param borrows The total amount of borrows the market has outstanding\n      * @param reserves The total amnount of reserves the market has\n      * @param reserveFactorMantissa The current reserve factor the market has\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\n      */\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\n\n}\n"},"contracts/CToken.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./CTokenInterfaces.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./EIP20NonStandardInterface.sol\";\nimport \"./InterestRateModel.sol\";\n\n/**\n * @title Compound's CToken Contract\n * @notice Abstract base for CTokens\n * @author Compound\n */\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\n    /**\n     * @notice Initialize the money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ EIP-20 name of this token\n     * @param symbol_ EIP-20 symbol of this token\n     * @param decimals_ EIP-20 decimal precision of this token\n     */\n    function initialize(ComptrollerInterface comptroller_,\n                        InterestRateModel interestRateModel_,\n                        uint initialExchangeRateMantissa_,\n                        string memory name_,\n                        string memory symbol_,\n                        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }\n\n    /**\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n     * @dev Called by both `transfer` and `transferFrom` internally\n     * @param spender The address of the account performing the transfer\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param tokens The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n        /* Fail if transfer not allowed */\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Do not allow self-transfers */\n        if (src == dst) {\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        /* Get the allowance, infinite for the account owner */\n        uint startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = uint(-1);\n        } else {\n            startingAllowance = transferAllowances[src][spender];\n        }\n\n        /* Do the calculations, checking for {under,over}flow */\n        MathError mathErr;\n        uint allowanceNew;\n        uint srcTokensNew;\n        uint dstTokensNew;\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n        }\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        accountTokens[src] = srcTokensNew;\n        accountTokens[dst] = dstTokensNew;\n\n        /* Eat some of the allowance (if necessary) */\n        if (startingAllowance != uint(-1)) {\n            transferAllowances[src][spender] = allowanceNew;\n        }\n\n        /* We emit a Transfer event */\n        emit Transfer(src, dst, tokens);\n\n        comptroller.transferVerify(address(this), src, dst, tokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount) external returns (bool) {\n        address src = msg.sender;\n        transferAllowances[src][spender] = amount;\n        emit Approval(src, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return transferAllowances[owner][spender];\n    }\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view returns (uint256) {\n        return accountTokens[owner];\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint) {\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\n        require(mErr == MathError.NO_ERROR, \"balance could not be calculated\");\n        return balance;\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\n        uint cTokenBalance = accountTokens[account];\n        uint borrowBalance;\n        uint exchangeRateMantissa;\n\n        MathError mErr;\n\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\n        if (mErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (mErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\n    }\n\n    /**\n     * @dev Function to simply retrieve block number\n     *  This exists mainly for inheriting test contracts to stub this result.\n     */\n    function getBlockNumber() internal view returns (uint) {\n        return block.number;\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view returns (uint) {\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view returns (uint) {\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return totalBorrows;\n    }\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return borrowBalanceStored(account);\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(address account) public view returns (uint) {\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\n        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n        return result;\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\n     */\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\n        /* Note: we do not assert that the market is up to date */\n        MathError mathErr;\n        uint principalTimesIndex;\n        uint result;\n\n        /* Get borrowBalance and borrowIndex */\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n         */\n        if (borrowSnapshot.principal == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        /* Calculate new borrow balance using the interest index:\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n         */\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        return (MathError.NO_ERROR, result);\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return exchangeRateStored();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view returns (uint) {\n        (MathError err, uint result) = exchangeRateStoredInternal();\n        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n        return result;\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return (error code, calculated exchange rate scaled by 1e18)\n     */\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\n        uint _totalSupply = totalSupply;\n        if (_totalSupply == 0) {\n            /*\n             * If there are no tokens minted:\n             *  exchangeRate = initialExchangeRate\n             */\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\n        } else {\n            /*\n             * Otherwise:\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n             */\n            uint totalCash = getCashPrior();\n            uint cashPlusBorrowsMinusReserves;\n            Exp memory exchangeRate;\n            MathError mathErr;\n\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\n        }\n    }\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view returns (uint) {\n        return getCashPrior();\n    }\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves\n     * @dev This calculates interest accrued from the last checkpointed block\n     *   up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() public returns (uint) {\n        /* Remember the initial block number */\n        uint currentBlockNumber = getBlockNumber();\n        uint accrualBlockNumberPrior = accrualBlockNumber;\n\n        /* Short-circuit accumulating 0 interest */\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n            return uint(Error.NO_ERROR);\n        }\n\n        /* Read the previous values out of storage */\n        uint cashPrior = getCashPrior();\n        uint borrowsPrior = totalBorrows;\n        uint reservesPrior = totalReserves;\n        uint borrowIndexPrior = borrowIndex;\n\n        /* Calculate the current borrow interest rate */\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n\n        /* Calculate the number of blocks elapsed since the last accrual */\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\n        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n\n        /*\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n         *  simpleInterestFactor = borrowRate * blockDelta\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n         */\n\n        Exp memory simpleInterestFactor;\n        uint interestAccumulated;\n        uint totalBorrowsNew;\n        uint totalReservesNew;\n        uint borrowIndexNew;\n\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the previously calculated values into storage */\n        accrualBlockNumber = currentBlockNumber;\n        borrowIndex = borrowIndexNew;\n        totalBorrows = totalBorrowsNew;\n        totalReserves = totalReservesNew;\n\n        /* We emit an AccrueInterest event */\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n        return mintFresh(msg.sender, mintAmount);\n    }\n\n    struct MintLocalVars {\n        Error err;\n        MathError mathErr;\n        uint exchangeRateMantissa;\n        uint mintTokens;\n        uint totalSupplyNew;\n        uint accountTokensNew;\n        uint actualMintAmount;\n    }\n\n    /**\n     * @notice User supplies assets into the market and receives cTokens in exchange\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param minter The address of the account which is supplying the assets\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n        /* Fail if mint not allowed */\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\n        }\n\n        MintLocalVars memory vars;\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         *  We call `doTransferIn` for the minter and the mintAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n         *  side-effects occurred. The function returns the amount actually transferred,\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n         *  of cash.\n         */\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n        /*\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\n         *  mintTokens = actualMintAmount / exchangeRate\n         */\n\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n\n        /*\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n         *  totalSupplyNew = totalSupply + mintTokens\n         *  accountTokensNew = accountTokens[minter] + mintTokens\n         */\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n\n        /* We write previously calculated values into storage */\n        totalSupply = vars.totalSupplyNew;\n        accountTokens[minter] = vars.accountTokensNew;\n\n        /* We emit a Mint event, and a Transfer event */\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n        emit Transfer(address(this), minter, vars.mintTokens);\n\n        /* We call the defense hook */\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n        }\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        return redeemFresh(msg.sender, redeemTokens, 0);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n        }\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        return redeemFresh(msg.sender, 0, redeemAmount);\n    }\n\n    struct RedeemLocalVars {\n        Error err;\n        MathError mathErr;\n        uint exchangeRateMantissa;\n        uint redeemTokens;\n        uint redeemAmount;\n        uint totalSupplyNew;\n        uint accountTokensNew;\n    }\n\n    /**\n     * @notice User redeems cTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param redeemer The address of the account which is redeeming the tokens\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n        RedeemLocalVars memory vars;\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n        }\n\n        /* If redeemTokensIn > 0: */\n        if (redeemTokensIn > 0) {\n            /*\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n             *  redeemTokens = redeemTokensIn\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n             */\n            vars.redeemTokens = redeemTokensIn;\n\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n            if (vars.mathErr != MathError.NO_ERROR) {\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n            }\n        } else {\n            /*\n             * We get the current exchange rate and calculate the amount to be redeemed:\n             *  redeemTokens = redeemAmountIn / exchangeRate\n             *  redeemAmount = redeemAmountIn\n             */\n\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n            if (vars.mathErr != MathError.NO_ERROR) {\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n            }\n\n            vars.redeemAmount = redeemAmountIn;\n        }\n\n        /* Fail if redeem not allowed */\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n        }\n\n        /*\n         * We calculate the new total supply and redeemer balance, checking for underflow:\n         *  totalSupplyNew = totalSupply - redeemTokens\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n         */\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        /* Fail gracefully if protocol has insufficient cash */\n        if (getCashPrior() < vars.redeemAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken has redeemAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(redeemer, vars.redeemAmount);\n\n        /* We write previously calculated values into storage */\n        totalSupply = vars.totalSupplyNew;\n        accountTokens[redeemer] = vars.accountTokensNew;\n\n        /* We emit a Transfer event, and a Redeem event */\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n        /* We call the defense hook */\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sender borrows assets from the protocol to their own address\n      * @param borrowAmount The amount of the underlying asset to borrow\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n        }\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n        return borrowFresh(msg.sender, borrowAmount);\n    }\n\n    struct BorrowLocalVars {\n        MathError mathErr;\n        uint accountBorrows;\n        uint accountBorrowsNew;\n        uint totalBorrowsNew;\n    }\n\n    /**\n      * @notice Users borrow assets from the protocol to their own address\n      * @param borrowAmount The amount of the underlying asset to borrow\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\n        /* Fail if borrow not allowed */\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n        }\n\n        /* Fail gracefully if protocol has insufficient underlying cash */\n        if (getCashPrior() < borrowAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n        }\n\n        BorrowLocalVars memory vars;\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on overflow:\n         *  accountBorrowsNew = accountBorrows + borrowAmount\n         *  totalBorrowsNew = totalBorrows + borrowAmount\n         */\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken borrowAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(borrower, borrowAmount);\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        /* We emit a Borrow event */\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n        /* We call the defense hook */\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\n    }\n\n    struct RepayBorrowLocalVars {\n        Error err;\n        MathError mathErr;\n        uint repayAmount;\n        uint borrowerIndex;\n        uint accountBorrows;\n        uint accountBorrowsNew;\n        uint totalBorrowsNew;\n        uint actualRepayAmount;\n    }\n\n    /**\n     * @notice Borrows are repaid by another user (possibly the borrower).\n     * @param payer the account paying off the borrow\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount the amount of undelrying tokens being returned\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\n        /* Fail if repayBorrow not allowed */\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\n        }\n\n        RepayBorrowLocalVars memory vars;\n\n        /* We remember the original borrowerIndex for verification purposes */\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n        /* We fetch the amount the borrower owes, with accumulated interest */\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\n        }\n\n        /* If repayAmount == -1, repayAmount = accountBorrows */\n        if (repayAmount == uint(-1)) {\n            vars.repayAmount = vars.accountBorrows;\n        } else {\n            vars.repayAmount = repayAmount;\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the payer and the repayAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional repayAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *   it returns the amount actually transferred, in case of a fee.\n         */\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n         */\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        /* We emit a RepayBorrow event */\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n        /* We call the defense hook */\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\n        }\n\n        error = cTokenCollateral.accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\n        }\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\n    }\n\n    /**\n     * @notice The liquidator liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param liquidator The address repaying the borrow and seizing collateral\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\n        /* Fail if liquidate not allowed */\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\n        }\n\n        /* Verify cTokenCollateral market's block number equals current block number */\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\n        }\n\n        /* Fail if repayAmount = 0 */\n        if (repayAmount == 0) {\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\n        }\n\n        /* Fail if repayAmount = -1 */\n        if (repayAmount == uint(-1)) {\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\n        }\n\n\n        /* Fail if repayBorrow fails */\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We calculate the number of collateral tokens that will be seized */\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\n        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n\n        /* Revert if borrower collateral token balance < seizeTokens */\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\n\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\n        uint seizeError;\n        if (address(cTokenCollateral) == address(this)) {\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\n        } else {\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\n        }\n\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\n        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");\n\n        /* We emit a LiquidateBorrow event */\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\n\n        /* We call the defense hook */\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\n\n        return (uint(Error.NO_ERROR), actualRepayAmount);\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Will fail unless called by another cToken during the process of liquidation.\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\n        /* Fail if seize not allowed */\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n        }\n\n        MathError mathErr;\n        uint borrowerTokensNew;\n        uint liquidatorTokensNew;\n\n        /*\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n         */\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\n        }\n\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the previously calculated values into storage */\n        accountTokens[borrower] = borrowerTokensNew;\n        accountTokens[liquidator] = liquidatorTokensNew;\n\n        /* Emit a Transfer event */\n        emit Transfer(borrower, liquidator, seizeTokens);\n\n        /* We call the defense hook */\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n\n    /*** Admin Functions ***/\n\n    /**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _acceptAdmin() external returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets a new comptroller for the market\n      * @dev Admin function to set a new comptroller\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n        }\n\n        ComptrollerInterface oldComptroller = comptroller;\n        // Ensure invoke comptroller.isComptroller() returns true\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n        // Set market's comptroller to newComptroller\n        comptroller = newComptroller;\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n        emit NewComptroller(oldComptroller, newComptroller);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n      * @dev Admin function to accrue interest and set a new reserve factor\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n        }\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n    }\n\n    /**\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n      * @dev Admin function to set a new reserve factor\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n        }\n\n        // Verify market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n        }\n\n        // Check newReserveFactor ≤ maxReserveFactor\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n        }\n\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\n     * @param addAmount Amount of addition to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n        }\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n        (error, ) = _addReservesFresh(addAmount);\n        return error;\n    }\n\n    /**\n     * @notice Add reserves by transferring from caller\n     * @dev Requires fresh interest accrual\n     * @param addAmount Amount of addition to reserves\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\n     */\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\n        // totalReserves + actualAddAmount\n        uint totalReservesNew;\n        uint actualAddAmount;\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the caller and the addAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional addAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *  it returns the amount actually transferred, in case of a fee.\n         */\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n        /* Revert on overflow */\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\n        totalReserves = totalReservesNew;\n\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n        /* Return (NO_ERROR, actualAddAmount) */\n        return (uint(Error.NO_ERROR), actualAddAmount);\n    }\n\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring to admin\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n        }\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n        return _reduceReservesFresh(reduceAmount);\n    }\n\n    /**\n     * @notice Reduces reserves by transferring to admin\n     * @dev Requires fresh interest accrual\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\n        // totalReserves - reduceAmount\n        uint totalReservesNew;\n\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n        }\n\n        // Fail gracefully if protocol has insufficient underlying cash\n        if (getCashPrior() < reduceAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n        }\n\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\n        if (reduceAmount > totalReserves) {\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        totalReservesNew = totalReserves - reduceAmount;\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n\n        // Store reserves[n+1] = reserves[n] - reduceAmount\n        totalReserves = totalReservesNew;\n\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n        doTransferOut(admin, reduceAmount);\n\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n     * @dev Admin function to accrue interest and update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n        }\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n        return _setInterestRateModelFresh(newInterestRateModel);\n    }\n\n    /**\n     * @notice updates the interest rate model (*requires fresh interest accrual)\n     * @dev Admin function to update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n        // Used to store old model for use in the event that is emitted on success\n        InterestRateModel oldInterestRateModel;\n\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n        }\n\n        // Track the market's current interest rate model\n        oldInterestRateModel = interestRateModel;\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n        // Set the interest rate model to newInterestRateModel\n        interestRateModel = newInterestRateModel;\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying owned by this contract\n     */\n    function getCashPrior() internal view returns (uint);\n\n    /**\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n     *  This may revert due to insufficient balance or insufficient allowance.\n     */\n    function doTransferIn(address from, uint amount) internal returns (uint);\n\n    /**\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n     */\n    function doTransferOut(address payable to, uint amount) internal;\n\n\n    /*** Reentrancy Guard ***/\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {\n        require(_notEntered, \"re-entered\");\n        _notEntered = false;\n        _;\n        _notEntered = true; // get a gas-refund post-Istanbul\n    }\n}\n"}},"settings":{"evmVersion":"istanbul","libraries":{},"metadata":{"useLiteralContent":true},"optimizer":{"enabled":true,"runs":200},"remappings":[],"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}}}},"ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Unitroller","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":1,"Runs":200,"ConstructorArguments":"0x","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":1,"Implementation":"0x7aa375f1fe5e04e18a6b02b4294cfd57ca9f53ba","SwarmSource":""},{"contracts/CToken.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./CTokenInterfaces.sol\";\nimport \"./ErrorReporter.sol\";\nimport \"./Exponential.sol\";\nimport \"./EIP20Interface.sol\";\nimport \"./EIP20NonStandardInterface.sol\";\nimport \"./InterestRateModel.sol\";\n\n/**\n * @title Compound's CToken Contract\n * @notice Abstract base for CTokens\n * @author Compound\n */\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\n    /**\n     * @notice Initialize the money market\n     * @param comptroller_ The address of the Comptroller\n     * @param interestRateModel_ The address of the interest rate model\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n     * @param name_ EIP-20 name of this token\n     * @param symbol_ EIP-20 symbol of this token\n     * @param decimals_ EIP-20 decimal precision of this token\n     */\n    function initialize(ComptrollerInterface comptroller_,\n                        InterestRateModel interestRateModel_,\n                        uint initialExchangeRateMantissa_,\n                        string memory name_,\n                        string memory symbol_,\n                        uint8 decimals_) public {\n        require(msg.sender == admin, \"only admin may initialize the market\");\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\n        // Set initial exchange rate\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\n        require(initialExchangeRateMantissa > 0, \"initial exchange rate must be greater than zero.\");\n\n        // Set the comptroller\n        uint err = _setComptroller(comptroller_);\n        require(err == uint(Error.NO_ERROR), \"setting comptroller failed\");\n\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\n        accrualBlockNumber = getBlockNumber();\n        borrowIndex = mantissaOne;\n\n        // Set the interest rate model (depends on block number / borrow index)\n        err = _setInterestRateModelFresh(interestRateModel_);\n        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\n\n        name = name_;\n        symbol = symbol_;\n        decimals = decimals_;\n\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\n        _notEntered = true;\n    }\n\n    /**\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n     * @dev Called by both `transfer` and `transferFrom` internally\n     * @param spender The address of the account performing the transfer\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param tokens The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\n        /* Fail if transfer not allowed */\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Do not allow self-transfers */\n        if (src == dst) {\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        /* Get the allowance, infinite for the account owner */\n        uint startingAllowance = 0;\n        if (spender == src) {\n            startingAllowance = uint(-1);\n        } else {\n            startingAllowance = transferAllowances[src][spender];\n        }\n\n        /* Do the calculations, checking for {under,over}flow */\n        MathError mathErr;\n        uint allowanceNew;\n        uint srcTokensNew;\n        uint dstTokensNew;\n\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\n        }\n\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\n        }\n\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        accountTokens[src] = srcTokensNew;\n        accountTokens[dst] = dstTokensNew;\n\n        /* Eat some of the allowance (if necessary) */\n        if (startingAllowance != uint(-1)) {\n            transferAllowances[src][spender] = allowanceNew;\n        }\n\n        /* We emit a Transfer event */\n        emit Transfer(src, dst, tokens);\n\n        comptroller.transferVerify(address(this), src, dst, tokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param amount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param amount The number of tokens that are approved (-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 amount) external returns (bool) {\n        address src = msg.sender;\n        transferAllowances[src][spender] = amount;\n        emit Approval(src, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the current allowance from `owner` for `spender`\n     * @param owner The address of the account which owns the tokens to be spent\n     * @param spender The address of the account which may transfer tokens\n     * @return The number of tokens allowed to be spent (-1 means infinite)\n     */\n    function allowance(address owner, address spender) external view returns (uint256) {\n        return transferAllowances[owner][spender];\n    }\n\n    /**\n     * @notice Get the token balance of the `owner`\n     * @param owner The address of the account to query\n     * @return The number of tokens owned by `owner`\n     */\n    function balanceOf(address owner) external view returns (uint256) {\n        return accountTokens[owner];\n    }\n\n    /**\n     * @notice Get the underlying balance of the `owner`\n     * @dev This also accrues interest in a transaction\n     * @param owner The address of the account to query\n     * @return The amount of underlying owned by `owner`\n     */\n    function balanceOfUnderlying(address owner) external returns (uint) {\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\n        require(mErr == MathError.NO_ERROR, \"balance could not be calculated\");\n        return balance;\n    }\n\n    /**\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\n     * @param account Address of the account to snapshot\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\n     */\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\n        uint cTokenBalance = accountTokens[account];\n        uint borrowBalance;\n        uint exchangeRateMantissa;\n\n        MathError mErr;\n\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\n        if (mErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (mErr != MathError.NO_ERROR) {\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\n        }\n\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\n    }\n\n    /**\n     * @dev Function to simply retrieve block number\n     *  This exists mainly for inheriting test contracts to stub this result.\n     */\n    function getBlockNumber() internal view returns (uint) {\n        return block.number;\n    }\n\n    /**\n     * @notice Returns the current per-block borrow interest rate for this cToken\n     * @return The borrow interest rate per block, scaled by 1e18\n     */\n    function borrowRatePerBlock() external view returns (uint) {\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\n    }\n\n    /**\n     * @notice Returns the current per-block supply interest rate for this cToken\n     * @return The supply interest rate per block, scaled by 1e18\n     */\n    function supplyRatePerBlock() external view returns (uint) {\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\n    }\n\n    /**\n     * @notice Returns the current total borrows plus accrued interest\n     * @return The total borrows with interest\n     */\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return totalBorrows;\n    }\n\n    /**\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n     * @param account The address whose balance should be calculated after updating borrowIndex\n     * @return The calculated balance\n     */\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return borrowBalanceStored(account);\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return The calculated balance\n     */\n    function borrowBalanceStored(address account) public view returns (uint) {\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\n        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\n        return result;\n    }\n\n    /**\n     * @notice Return the borrow balance of account based on stored data\n     * @param account The address whose balance should be calculated\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\n     */\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\n        /* Note: we do not assert that the market is up to date */\n        MathError mathErr;\n        uint principalTimesIndex;\n        uint result;\n\n        /* Get borrowBalance and borrowIndex */\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\n\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\n         */\n        if (borrowSnapshot.principal == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        /* Calculate new borrow balance using the interest index:\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\n         */\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\n        if (mathErr != MathError.NO_ERROR) {\n            return (mathErr, 0);\n        }\n\n        return (MathError.NO_ERROR, result);\n    }\n\n    /**\n     * @notice Accrue interest then return the up-to-date exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\n        require(accrueInterest() == uint(Error.NO_ERROR), \"accrue interest failed\");\n        return exchangeRateStored();\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return Calculated exchange rate scaled by 1e18\n     */\n    function exchangeRateStored() public view returns (uint) {\n        (MathError err, uint result) = exchangeRateStoredInternal();\n        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\n        return result;\n    }\n\n    /**\n     * @notice Calculates the exchange rate from the underlying to the CToken\n     * @dev This function does not accrue interest before calculating the exchange rate\n     * @return (error code, calculated exchange rate scaled by 1e18)\n     */\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\n        uint _totalSupply = totalSupply;\n        if (_totalSupply == 0) {\n            /*\n             * If there are no tokens minted:\n             *  exchangeRate = initialExchangeRate\n             */\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\n        } else {\n            /*\n             * Otherwise:\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\n             */\n            uint totalCash = getCashPrior();\n            uint cashPlusBorrowsMinusReserves;\n            Exp memory exchangeRate;\n            MathError mathErr;\n\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\n            if (mathErr != MathError.NO_ERROR) {\n                return (mathErr, 0);\n            }\n\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\n        }\n    }\n\n    /**\n     * @notice Get cash balance of this cToken in the underlying asset\n     * @return The quantity of underlying asset owned by this contract\n     */\n    function getCash() external view returns (uint) {\n        return getCashPrior();\n    }\n\n    /**\n     * @notice Applies accrued interest to total borrows and reserves\n     * @dev This calculates interest accrued from the last checkpointed block\n     *   up to the current block and writes new checkpoint to storage.\n     */\n    function accrueInterest() public returns (uint) {\n        /* Remember the initial block number */\n        uint currentBlockNumber = getBlockNumber();\n        uint accrualBlockNumberPrior = accrualBlockNumber;\n\n        /* Short-circuit accumulating 0 interest */\n        if (accrualBlockNumberPrior == currentBlockNumber) {\n            return uint(Error.NO_ERROR);\n        }\n\n        /* Read the previous values out of storage */\n        uint cashPrior = getCashPrior();\n        uint borrowsPrior = totalBorrows;\n        uint reservesPrior = totalReserves;\n        uint borrowIndexPrior = borrowIndex;\n\n        /* Calculate the current borrow interest rate */\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \"borrow rate is absurdly high\");\n\n        /* Calculate the number of blocks elapsed since the last accrual */\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\n        require(mathErr == MathError.NO_ERROR, \"could not calculate block delta\");\n\n        /*\n         * Calculate the interest accumulated into borrows and reserves and the new index:\n         *  simpleInterestFactor = borrowRate * blockDelta\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\n         */\n\n        Exp memory simpleInterestFactor;\n        uint interestAccumulated;\n        uint totalBorrowsNew;\n        uint totalReservesNew;\n        uint borrowIndexNew;\n\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the previously calculated values into storage */\n        accrualBlockNumber = currentBlockNumber;\n        borrowIndex = borrowIndexNew;\n        totalBorrows = totalBorrowsNew;\n        totalReserves = totalReservesNew;\n\n        /* We emit an AccrueInterest event */\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\n        return mintFresh(msg.sender, mintAmount);\n    }\n\n    struct MintLocalVars {\n        Error err;\n        MathError mathErr;\n        uint exchangeRateMantissa;\n        uint mintTokens;\n        uint totalSupplyNew;\n        uint accountTokensNew;\n        uint actualMintAmount;\n    }\n\n    /**\n     * @notice User supplies assets into the market and receives cTokens in exchange\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param minter The address of the account which is supplying the assets\n     * @param mintAmount The amount of the underlying asset to supply\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\n     */\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\n        /* Fail if mint not allowed */\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\n        }\n\n        MintLocalVars memory vars;\n\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         *  We call `doTransferIn` for the minter and the mintAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\n         *  side-effects occurred. The function returns the amount actually transferred,\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\n         *  of cash.\n         */\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\n\n        /*\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\n         *  mintTokens = actualMintAmount / exchangeRate\n         */\n\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_EXCHANGE_CALCULATION_FAILED\");\n\n        /*\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\n         *  totalSupplyNew = totalSupply + mintTokens\n         *  accountTokensNew = accountTokens[minter] + mintTokens\n         */\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\n\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\n        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\n\n        /* We write previously calculated values into storage */\n        totalSupply = vars.totalSupplyNew;\n        accountTokens[minter] = vars.accountTokensNew;\n\n        /* We emit a Mint event, and a Transfer event */\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\n        emit Transfer(address(this), minter, vars.mintTokens);\n\n        /* We call the defense hook */\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\n\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for the underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemTokens The number of cTokens to redeem into underlying\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n        }\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        return redeemFresh(msg.sender, redeemTokens, 0);\n    }\n\n    /**\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\n        }\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\n        return redeemFresh(msg.sender, 0, redeemAmount);\n    }\n\n    struct RedeemLocalVars {\n        Error err;\n        MathError mathErr;\n        uint exchangeRateMantissa;\n        uint redeemTokens;\n        uint redeemAmount;\n        uint totalSupplyNew;\n        uint accountTokensNew;\n    }\n\n    /**\n     * @notice User redeems cTokens in exchange for the underlying asset\n     * @dev Assumes interest has already been accrued up to the current block\n     * @param redeemer The address of the account which is redeeming the tokens\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\n\n        RedeemLocalVars memory vars;\n\n        /* exchangeRate = invoke Exchange Rate Stored() */\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\n        }\n\n        /* If redeemTokensIn > 0: */\n        if (redeemTokensIn > 0) {\n            /*\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\n             *  redeemTokens = redeemTokensIn\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\n             */\n            vars.redeemTokens = redeemTokensIn;\n\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\n            if (vars.mathErr != MathError.NO_ERROR) {\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\n            }\n        } else {\n            /*\n             * We get the current exchange rate and calculate the amount to be redeemed:\n             *  redeemTokens = redeemAmountIn / exchangeRate\n             *  redeemAmount = redeemAmountIn\n             */\n\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\n            if (vars.mathErr != MathError.NO_ERROR) {\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\n            }\n\n            vars.redeemAmount = redeemAmountIn;\n        }\n\n        /* Fail if redeem not allowed */\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\n        }\n\n        /*\n         * We calculate the new total supply and redeemer balance, checking for underflow:\n         *  totalSupplyNew = totalSupply - redeemTokens\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\n         */\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        /* Fail gracefully if protocol has insufficient cash */\n        if (getCashPrior() < vars.redeemAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken has redeemAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(redeemer, vars.redeemAmount);\n\n        /* We write previously calculated values into storage */\n        totalSupply = vars.totalSupplyNew;\n        accountTokens[redeemer] = vars.accountTokensNew;\n\n        /* We emit a Transfer event, and a Redeem event */\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\n\n        /* We call the defense hook */\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sender borrows assets from the protocol to their own address\n      * @param borrowAmount The amount of the underlying asset to borrow\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\n        }\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\n        return borrowFresh(msg.sender, borrowAmount);\n    }\n\n    struct BorrowLocalVars {\n        MathError mathErr;\n        uint accountBorrows;\n        uint accountBorrowsNew;\n        uint totalBorrowsNew;\n    }\n\n    /**\n      * @notice Users borrow assets from the protocol to their own address\n      * @param borrowAmount The amount of the underlying asset to borrow\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\n        /* Fail if borrow not allowed */\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\n        }\n\n        /* Fail gracefully if protocol has insufficient underlying cash */\n        if (getCashPrior() < borrowAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\n        }\n\n        BorrowLocalVars memory vars;\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on overflow:\n         *  accountBorrowsNew = accountBorrows + borrowAmount\n         *  totalBorrowsNew = totalBorrows + borrowAmount\n         */\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We invoke doTransferOut for the borrower and the borrowAmount.\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken borrowAmount less of cash.\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         */\n        doTransferOut(borrower, borrowAmount);\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        /* We emit a Borrow event */\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n        /* We call the defense hook */\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Sender repays their own borrow\n     * @param repayAmount The amount to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\n    }\n\n    /**\n     * @notice Sender repays a borrow belonging to borrower\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount The amount to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\n        }\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\n    }\n\n    struct RepayBorrowLocalVars {\n        Error err;\n        MathError mathErr;\n        uint repayAmount;\n        uint borrowerIndex;\n        uint accountBorrows;\n        uint accountBorrowsNew;\n        uint totalBorrowsNew;\n        uint actualRepayAmount;\n    }\n\n    /**\n     * @notice Borrows are repaid by another user (possibly the borrower).\n     * @param payer the account paying off the borrow\n     * @param borrower the account with the debt being payed off\n     * @param repayAmount the amount of undelrying tokens being returned\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\n        /* Fail if repayBorrow not allowed */\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\n        }\n\n        RepayBorrowLocalVars memory vars;\n\n        /* We remember the original borrowerIndex for verification purposes */\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\n\n        /* We fetch the amount the borrower owes, with accumulated interest */\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\n        if (vars.mathErr != MathError.NO_ERROR) {\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\n        }\n\n        /* If repayAmount == -1, repayAmount = accountBorrows */\n        if (repayAmount == uint(-1)) {\n            vars.repayAmount = vars.accountBorrows;\n        } else {\n            vars.repayAmount = repayAmount;\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the payer and the repayAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional repayAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *   it returns the amount actually transferred, in case of a fee.\n         */\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\n\n        /*\n         * We calculate the new borrower and total borrow balances, failing on underflow:\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\n         */\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\n\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\n        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\n\n        /* We write the previously calculated values into storage */\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\n        accountBorrows[borrower].interestIndex = borrowIndex;\n        totalBorrows = vars.totalBorrowsNew;\n\n        /* We emit a RepayBorrow event */\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\n\n        /* We call the defense hook */\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\n\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\n    }\n\n    /**\n     * @notice The sender liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\n        }\n\n        error = cTokenCollateral.accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\n        }\n\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\n    }\n\n    /**\n     * @notice The liquidator liquidates the borrowers collateral.\n     *  The collateral seized is transferred to the liquidator.\n     * @param borrower The borrower of this cToken to be liquidated\n     * @param liquidator The address repaying the borrow and seizing collateral\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\n     * @param repayAmount The amount of the underlying borrowed asset to repay\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\n     */\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\n        /* Fail if liquidate not allowed */\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\n        if (allowed != 0) {\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\n        }\n\n        /* Verify market's block number equals current block number */\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\n        }\n\n        /* Verify cTokenCollateral market's block number equals current block number */\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\n        }\n\n        /* Fail if repayAmount = 0 */\n        if (repayAmount == 0) {\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\n        }\n\n        /* Fail if repayAmount = -1 */\n        if (repayAmount == uint(-1)) {\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\n        }\n\n\n        /* Fail if repayBorrow fails */\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We calculate the number of collateral tokens that will be seized */\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\n        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\n\n        /* Revert if borrower collateral token balance < seizeTokens */\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \"LIQUIDATE_SEIZE_TOO_MUCH\");\n\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\n        uint seizeError;\n        if (address(cTokenCollateral) == address(this)) {\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\n        } else {\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\n        }\n\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\n        require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\");\n\n        /* We emit a LiquidateBorrow event */\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\n\n        /* We call the defense hook */\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\n\n        return (uint(Error.NO_ERROR), actualRepayAmount);\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Will fail unless called by another cToken during the process of liquidation.\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\n    }\n\n    /**\n     * @notice Transfers collateral tokens (this market) to the liquidator.\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n     * @param liquidator The account receiving seized collateral\n     * @param borrower The account having collateral seized\n     * @param seizeTokens The number of cTokens to seize\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\n        /* Fail if seize not allowed */\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\n        if (allowed != 0) {\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\n        }\n\n        /* Fail if borrower = liquidator */\n        if (borrower == liquidator) {\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\n        }\n\n        MathError mathErr;\n        uint borrowerTokensNew;\n        uint liquidatorTokensNew;\n\n        /*\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\n         */\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\n        }\n\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\n        if (mathErr != MathError.NO_ERROR) {\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /* We write the previously calculated values into storage */\n        accountTokens[borrower] = borrowerTokensNew;\n        accountTokens[liquidator] = liquidatorTokensNew;\n\n        /* Emit a Transfer event */\n        emit Transfer(borrower, liquidator, seizeTokens);\n\n        /* We call the defense hook */\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\n\n        return uint(Error.NO_ERROR);\n    }\n\n\n    /*** Admin Functions ***/\n\n    /**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _acceptAdmin() external returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Sets a new comptroller for the market\n      * @dev Admin function to set a new comptroller\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\n        }\n\n        ComptrollerInterface oldComptroller = comptroller;\n        // Ensure invoke comptroller.isComptroller() returns true\n        require(newComptroller.isComptroller(), \"marker method returned false\");\n\n        // Set market's comptroller to newComptroller\n        comptroller = newComptroller;\n\n        // Emit NewComptroller(oldComptroller, newComptroller)\n        emit NewComptroller(oldComptroller, newComptroller);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n      * @dev Admin function to accrue interest and set a new reserve factor\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\n        }\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\n        return _setReserveFactorFresh(newReserveFactorMantissa);\n    }\n\n    /**\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n      * @dev Admin function to set a new reserve factor\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\n        }\n\n        // Verify market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\n        }\n\n        // Check newReserveFactor ≤ maxReserveFactor\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\n        }\n\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\n        reserveFactorMantissa = newReserveFactorMantissa;\n\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\n     * @param addAmount Amount of addition to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\n        }\n\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\n        (error, ) = _addReservesFresh(addAmount);\n        return error;\n    }\n\n    /**\n     * @notice Add reserves by transferring from caller\n     * @dev Requires fresh interest accrual\n     * @param addAmount Amount of addition to reserves\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\n     */\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\n        // totalReserves + actualAddAmount\n        uint totalReservesNew;\n        uint actualAddAmount;\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        /*\n         * We call doTransferIn for the caller and the addAmount\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\n         *  On success, the cToken holds an additional addAmount of cash.\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\n         *  it returns the amount actually transferred, in case of a fee.\n         */\n\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\n\n        totalReservesNew = totalReserves + actualAddAmount;\n\n        /* Revert on overflow */\n        require(totalReservesNew >= totalReserves, \"add reserves unexpected overflow\");\n\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\n        totalReserves = totalReservesNew;\n\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\n\n        /* Return (NO_ERROR, actualAddAmount) */\n        return (uint(Error.NO_ERROR), actualAddAmount);\n    }\n\n\n    /**\n     * @notice Accrues interest and reduces reserves by transferring to admin\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\n        }\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\n        return _reduceReservesFresh(reduceAmount);\n    }\n\n    /**\n     * @notice Reduces reserves by transferring to admin\n     * @dev Requires fresh interest accrual\n     * @param reduceAmount Amount of reduction to reserves\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\n        // totalReserves - reduceAmount\n        uint totalReservesNew;\n\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\n        }\n\n        // Fail gracefully if protocol has insufficient underlying cash\n        if (getCashPrior() < reduceAmount) {\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\n        }\n\n        // Check reduceAmount ≤ reserves[n] (totalReserves)\n        if (reduceAmount > totalReserves) {\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\n        }\n\n        /////////////////////////\n        // EFFECTS & INTERACTIONS\n        // (No safe failures beyond this point)\n\n        totalReservesNew = totalReserves - reduceAmount;\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\n        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\");\n\n        // Store reserves[n+1] = reserves[n] - reduceAmount\n        totalReserves = totalReservesNew;\n\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\n        doTransferOut(admin, reduceAmount);\n\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n     * @dev Admin function to accrue interest and update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\n        uint error = accrueInterest();\n        if (error != uint(Error.NO_ERROR)) {\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\n        }\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\n        return _setInterestRateModelFresh(newInterestRateModel);\n    }\n\n    /**\n     * @notice updates the interest rate model (*requires fresh interest accrual)\n     * @dev Admin function to update the interest rate model\n     * @param newInterestRateModel the new interest rate model to use\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n     */\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\n\n        // Used to store old model for use in the event that is emitted on success\n        InterestRateModel oldInterestRateModel;\n\n        // Check caller is admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\n        }\n\n        // We fail gracefully unless market's block number equals current block number\n        if (accrualBlockNumber != getBlockNumber()) {\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\n        }\n\n        // Track the market's current interest rate model\n        oldInterestRateModel = interestRateModel;\n\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\n        require(newInterestRateModel.isInterestRateModel(), \"marker method returned false\");\n\n        // Set the interest rate model to newInterestRateModel\n        interestRateModel = newInterestRateModel;\n\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /*** Safe Token ***/\n\n    /**\n     * @notice Gets balance of this contract in terms of the underlying\n     * @dev This excludes the value of the current message, if any\n     * @return The quantity of underlying owned by this contract\n     */\n    function getCashPrior() internal view returns (uint);\n\n    /**\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n     *  This may revert due to insufficient balance or insufficient allowance.\n     */\n    function doTransferIn(address from, uint amount) internal returns (uint);\n\n    /**\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\n     */\n    function doTransferOut(address payable to, uint amount) internal;\n\n\n    /*** Reentrancy Guard ***/\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     */\n    modifier nonReentrant() {\n        require(_notEntered, \"re-entered\");\n        _notEntered = false;\n        _;\n        _notEntered = true; // get a gas-refund post-Istanbul\n    }\n}\n"},"contracts/CTokenInterfaces.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ComptrollerInterface.sol\";\nimport \"./InterestRateModel.sol\";\n\ncontract CTokenStorage {\n    /**\n     * @dev Guard variable for re-entrancy checks\n     */\n    bool internal _notEntered;\n\n    /**\n     * @notice EIP-20 token name for this token\n     */\n    string public name;\n\n    /**\n     * @notice EIP-20 token symbol for this token\n     */\n    string public symbol;\n\n    /**\n     * @notice EIP-20 token decimals for this token\n     */\n    uint8 public decimals;\n\n    /**\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\n     */\n\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n\n    /**\n     * @notice Maximum fraction of interest that can be set aside for reserves\n     */\n    uint internal constant reserveFactorMaxMantissa = 1e18;\n\n    /**\n     * @notice Administrator for this contract\n     */\n    address payable public admin;\n\n    /**\n     * @notice Pending administrator for this contract\n     */\n    address payable public pendingAdmin;\n\n    /**\n     * @notice Contract which oversees inter-cToken operations\n     */\n    ComptrollerInterface public comptroller;\n\n    /**\n     * @notice Model which tells what the current interest rate should be\n     */\n    InterestRateModel public interestRateModel;\n\n    /**\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\n     */\n    uint internal initialExchangeRateMantissa;\n\n    /**\n     * @notice Fraction of interest currently set aside for reserves\n     */\n    uint public reserveFactorMantissa;\n\n    /**\n     * @notice Block number that interest was last accrued at\n     */\n    uint public accrualBlockNumber;\n\n    /**\n     * @notice Accumulator of the total earned interest rate since the opening of the market\n     */\n    uint public borrowIndex;\n\n    /**\n     * @notice Total amount of outstanding borrows of the underlying in this market\n     */\n    uint public totalBorrows;\n\n    /**\n     * @notice Total amount of reserves of the underlying held in this market\n     */\n    uint public totalReserves;\n\n    /**\n     * @notice Total number of tokens in circulation\n     */\n    uint public totalSupply;\n\n    /**\n     * @notice Official record of token balances for each account\n     */\n    mapping (address => uint) internal accountTokens;\n\n    /**\n     * @notice Approved token transfer amounts on behalf of others\n     */\n    mapping (address => mapping (address => uint)) internal transferAllowances;\n\n    /**\n     * @notice Container for borrow balance information\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n     */\n    struct BorrowSnapshot {\n        uint principal;\n        uint interestIndex;\n    }\n\n    /**\n     * @notice Mapping of account addresses to outstanding borrow balances\n     */\n    mapping(address => BorrowSnapshot) internal accountBorrows;\n}\n\ncontract CTokenInterface is CTokenStorage {\n    /**\n     * @notice Indicator that this is a CToken contract (for inspection)\n     */\n    bool public constant isCToken = true;\n\n\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address minter, uint mintAmount, uint mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\n\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when comptroller is changed\n     */\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\n\n    /**\n     * @notice Event emitted when interestRateModel is changed\n     */\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(address indexed owner, address indexed spender, uint amount);\n\n    /**\n     * @notice Failure event\n     */\n    event Failure(uint error, uint info, uint detail);\n\n\n    /*** User Interface ***/\n\n    function transfer(address dst, uint amount) external returns (bool);\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\n    function approve(address spender, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function balanceOfUnderlying(address owner) external returns (uint);\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\n    function borrowRatePerBlock() external view returns (uint);\n    function supplyRatePerBlock() external view returns (uint);\n    function totalBorrowsCurrent() external returns (uint);\n    function borrowBalanceCurrent(address account) external returns (uint);\n    function borrowBalanceStored(address account) public view returns (uint);\n    function exchangeRateCurrent() public returns (uint);\n    function exchangeRateStored() public view returns (uint);\n    function getCash() external view returns (uint);\n    function accrueInterest() public returns (uint);\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\n\n\n    /*** Admin Functions ***/\n\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\n    function _acceptAdmin() external returns (uint);\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\n    function _reduceReserves(uint reduceAmount) external returns (uint);\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\n}\n\ncontract CErc20Storage {\n    /**\n     * @notice Underlying asset for this CToken\n     */\n    address public underlying;\n}\n\ncontract CErc20Interface is CErc20Storage {\n\n    /*** User Interface ***/\n\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function borrow(uint borrowAmount) external returns (uint);\n    function repayBorrow(uint repayAmount) external returns (uint);\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\n\n\n    /*** Admin Functions ***/\n\n    function _addReserves(uint addAmount) external returns (uint);\n}\n\ncontract CDelegationStorage {\n    /**\n     * @notice Implementation address for this contract\n     */\n    address public implementation;\n}\n\ncontract CDelegatorInterface is CDelegationStorage {\n    /**\n     * @notice Emitted when implementation is changed\n     */\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\n     */\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\n}\n\ncontract CDelegateInterface is CDelegationStorage {\n    /**\n     * @notice Called by the delegator on a delegate to initialize it for duty\n     * @dev Should revert if any issues arise which make it unfit for delegation\n     * @param data The encoded bytes data for any initialization\n     */\n    function _becomeImplementation(bytes memory data) public;\n\n    /**\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\n     */\n    function _resignImplementation() public;\n}\n"},"contracts/CarefulMath.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n  * @title Careful Math\n  * @author Compound\n  * @notice Derived from OpenZeppelin's SafeMath library\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n  */\ncontract CarefulMath {\n\n    /**\n     * @dev Possible error codes that we can return\n     */\n    enum MathError {\n        NO_ERROR,\n        DIVISION_BY_ZERO,\n        INTEGER_OVERFLOW,\n        INTEGER_UNDERFLOW\n    }\n\n    /**\n    * @dev Multiplies two numbers, returns an error on overflow.\n    */\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (a == 0) {\n            return (MathError.NO_ERROR, 0);\n        }\n\n        uint c = a * b;\n\n        if (c / a != b) {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        } else {\n            return (MathError.NO_ERROR, c);\n        }\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b == 0) {\n            return (MathError.DIVISION_BY_ZERO, 0);\n        }\n\n        return (MathError.NO_ERROR, a / b);\n    }\n\n    /**\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        if (b <= a) {\n            return (MathError.NO_ERROR, a - b);\n        } else {\n            return (MathError.INTEGER_UNDERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev Adds two numbers, returns an error on overflow.\n    */\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n        uint c = a + b;\n\n        if (c >= a) {\n            return (MathError.NO_ERROR, c);\n        } else {\n            return (MathError.INTEGER_OVERFLOW, 0);\n        }\n    }\n\n    /**\n    * @dev add a and b and then subtract c\n    */\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n        (MathError err0, uint sum) = addUInt(a, b);\n\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, 0);\n        }\n\n        return subUInt(sum, c);\n    }\n}"},"contracts/ComptrollerInterface.sol":{"content":"pragma solidity ^0.5.16;\n\ncontract ComptrollerInterface {\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\n    bool public constant isComptroller = true;\n\n    /*** Assets You Are In ***/\n\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n    function exitMarket(address cToken) external returns (uint);\n\n    /*** Policy Hooks ***/\n\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\n\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\n\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\n\n    function repayBorrowAllowed(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function repayBorrowVerify(\n        address cToken,\n        address payer,\n        address borrower,\n        uint repayAmount,\n        uint borrowerIndex) external;\n\n    function liquidateBorrowAllowed(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount) external returns (uint);\n    function liquidateBorrowVerify(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        address liquidator,\n        address borrower,\n        uint repayAmount,\n        uint seizeTokens) external;\n\n    function seizeAllowed(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external returns (uint);\n    function seizeVerify(\n        address cTokenCollateral,\n        address cTokenBorrowed,\n        address liquidator,\n        address borrower,\n        uint seizeTokens) external;\n\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\n\n    /*** Liquidity/Liquidation Calculations ***/\n\n    function liquidateCalculateSeizeTokens(\n        address cTokenBorrowed,\n        address cTokenCollateral,\n        uint repayAmount) external view returns (uint, uint);\n}\n"},"contracts/ComptrollerStorage.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CToken.sol\";\nimport \"./PriceOracle.sol\";\n\ncontract UnitrollerAdminStorage {\n    /**\n    * @notice Administrator for this contract\n    */\n    address public admin;\n\n    /**\n    * @notice Pending administrator for this contract\n    */\n    address public pendingAdmin;\n\n    /**\n    * @notice Active brains of Unitroller\n    */\n    address public comptrollerImplementation;\n\n    /**\n    * @notice Pending brains of Unitroller\n    */\n    address public pendingComptrollerImplementation;\n}\n\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\n\n    /**\n     * @notice Oracle which gives the price of any given asset\n     */\n    PriceOracle public oracle;\n\n    /**\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n     */\n    uint public closeFactorMantissa;\n\n    /**\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\n     */\n    uint public liquidationIncentiveMantissa;\n\n    /**\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n     */\n    uint public maxAssets;\n\n    /**\n     * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n     */\n    mapping(address => CToken[]) public accountAssets;\n\n}\n\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\n    struct Market {\n        /// @notice Whether or not this market is listed\n        bool isListed;\n\n        /**\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\n         *  Must be between 0 and 1, and stored as a mantissa.\n         */\n        uint collateralFactorMantissa;\n\n        /// @notice Per-market mapping of \"accounts in this asset\"\n        mapping(address => bool) accountMembership;\n\n        /// @notice Whether or not this market receives COMP\n        bool isComped;\n    }\n\n    /**\n     * @notice Official mapping of cTokens -> Market metadata\n     * @dev Used e.g. to determine if a market is supported\n     */\n    mapping(address => Market) public markets;\n\n\n    /**\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n     *  Actions which allow users to remove their own assets cannot be paused.\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\n     */\n    address public pauseGuardian;\n    bool public _mintGuardianPaused;\n    bool public _borrowGuardianPaused;\n    bool public transferGuardianPaused;\n    bool public seizeGuardianPaused;\n    mapping(address => bool) public mintGuardianPaused;\n    mapping(address => bool) public borrowGuardianPaused;\n}\n\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\n    struct CompMarketState {\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n        uint224 index;\n\n        /// @notice The block number the index was last updated at\n        uint32 block;\n    }\n\n    /// @notice A list of all markets\n    CToken[] public allMarkets;\n\n    /// @notice The rate at which the flywheel distributes COMP, per block\n    uint public compRate;\n\n    /// @notice The portion of compRate that each market currently receives\n    mapping(address => uint) public compSpeeds;\n\n    /// @notice The COMP market supply state for each market\n    mapping(address => CompMarketState) public compSupplyState;\n\n    /// @notice The COMP market borrow state for each market\n    mapping(address => CompMarketState) public compBorrowState;\n\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\n\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\n\n    /// @notice The COMP accrued but not yet transferred to each user\n    mapping(address => uint) public compAccrued;\n}\n"},"contracts/EIP20Interface.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n * @title ERC 20 Token Standard Interface\n *  https://eips.ethereum.org/EIPS/eip-20\n */\ninterface EIP20Interface {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n\n    /**\n      * @notice Get the total number of tokens in circulation\n      * @return The supply of tokens\n      */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return Whether or not the transfer succeeded\n      */\n    function transfer(address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Transfer `amount` tokens from `src` to `dst`\n      * @param src The address of the source account\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      * @return Whether or not the transfer succeeded\n      */\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n      * @dev This will overwrite the approval amount for `spender`\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n      * @param spender The address of the account which may transfer tokens\n      * @param amount The number of tokens that are approved (-1 means infinite)\n      * @return Whether or not the approval succeeded\n      */\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Get the current allowance from `owner` for `spender`\n      * @param owner The address of the account which owns the tokens to be spent\n      * @param spender The address of the account which may transfer tokens\n      * @return The number of tokens allowed to be spent (-1 means infinite)\n      */\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"},"contracts/EIP20NonStandardInterface.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n * @title EIP20NonStandardInterface\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n */\ninterface EIP20NonStandardInterface {\n\n    /**\n     * @notice Get the total number of tokens in circulation\n     * @return The supply of tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @notice Gets the balance of the specified address\n     * @param owner The address from which the balance will be retrieved\n     * @return The balance\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      */\n    function transfer(address dst, uint256 amount) external;\n\n    ///\n    /// !!!!!!!!!!!!!!\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\n    /// !!!!!!!!!!!!!!\n    ///\n\n    /**\n      * @notice Transfer `amount` tokens from `src` to `dst`\n      * @param src The address of the source account\n      * @param dst The address of the destination account\n      * @param amount The number of tokens to transfer\n      */\n    function transferFrom(address src, address dst, uint256 amount) external;\n\n    /**\n      * @notice Approve `spender` to transfer up to `amount` from `src`\n      * @dev This will overwrite the approval amount for `spender`\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n      * @param spender The address of the account which may transfer tokens\n      * @param amount The number of tokens that are approved\n      * @return Whether or not the approval succeeded\n      */\n    function approve(address spender, uint256 amount) external returns (bool success);\n\n    /**\n      * @notice Get the current allowance from `owner` for `spender`\n      * @param owner The address of the account which owns the tokens to be spent\n      * @param spender The address of the account which may transfer tokens\n      * @return The number of tokens allowed to be spent\n      */\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n}\n"},"contracts/ErrorReporter.sol":{"content":"pragma solidity ^0.5.16;\n\ncontract ComptrollerErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        COMPTROLLER_MISMATCH,\n        INSUFFICIENT_SHORTFALL,\n        INSUFFICIENT_LIQUIDITY,\n        INVALID_CLOSE_FACTOR,\n        INVALID_COLLATERAL_FACTOR,\n        INVALID_LIQUIDATION_INCENTIVE,\n        MARKET_NOT_ENTERED, // no longer possible\n        MARKET_NOT_LISTED,\n        MARKET_ALREADY_LISTED,\n        MATH_ERROR,\n        NONZERO_BORROW_BALANCE,\n        PRICE_ERROR,\n        REJECTION,\n        SNAPSHOT_ERROR,\n        TOO_MANY_ASSETS,\n        TOO_MUCH_REPAY\n    }\n\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n        EXIT_MARKET_BALANCE_OWED,\n        EXIT_MARKET_REJECTION,\n        SET_CLOSE_FACTOR_OWNER_CHECK,\n        SET_CLOSE_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n        SET_IMPLEMENTATION_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n        SET_PRICE_ORACLE_OWNER_CHECK,\n        SUPPORT_MARKET_EXISTS,\n        SUPPORT_MARKET_OWNER_CHECK,\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\n    }\n\n    /**\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n      **/\n    event Failure(uint error, uint info, uint detail);\n\n    /**\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n      */\n    function fail(Error err, FailureInfo info) internal returns (uint) {\n        emit Failure(uint(err), uint(info), 0);\n\n        return uint(err);\n    }\n\n    /**\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n      */\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n        emit Failure(uint(err), uint(info), opaqueError);\n\n        return uint(err);\n    }\n}\n\ncontract TokenErrorReporter {\n    enum Error {\n        NO_ERROR,\n        UNAUTHORIZED,\n        BAD_INPUT,\n        COMPTROLLER_REJECTION,\n        COMPTROLLER_CALCULATION_ERROR,\n        INTEREST_RATE_MODEL_ERROR,\n        INVALID_ACCOUNT_PAIR,\n        INVALID_CLOSE_AMOUNT_REQUESTED,\n        INVALID_COLLATERAL_FACTOR,\n        MATH_ERROR,\n        MARKET_NOT_FRESH,\n        MARKET_NOT_LISTED,\n        TOKEN_INSUFFICIENT_ALLOWANCE,\n        TOKEN_INSUFFICIENT_BALANCE,\n        TOKEN_INSUFFICIENT_CASH,\n        TOKEN_TRANSFER_IN_FAILED,\n        TOKEN_TRANSFER_OUT_FAILED\n    }\n\n    /*\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\n     *       This is because FailureInfo grows significantly faster, and\n     *       the order of Error has some meaning, while the order of FailureInfo\n     *       is entirely arbitrary.\n     */\n    enum FailureInfo {\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        BORROW_ACCRUE_INTEREST_FAILED,\n        BORROW_CASH_NOT_AVAILABLE,\n        BORROW_FRESHNESS_CHECK,\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        BORROW_MARKET_NOT_LISTED,\n        BORROW_COMPTROLLER_REJECTION,\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n        LIQUIDATE_COMPTROLLER_REJECTION,\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n        LIQUIDATE_FRESHNESS_CHECK,\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n        LIQUIDATE_SEIZE_TOO_MUCH,\n        MINT_ACCRUE_INTEREST_FAILED,\n        MINT_COMPTROLLER_REJECTION,\n        MINT_EXCHANGE_CALCULATION_FAILED,\n        MINT_EXCHANGE_RATE_READ_FAILED,\n        MINT_FRESHNESS_CHECK,\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        MINT_TRANSFER_IN_FAILED,\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\n        REDEEM_ACCRUE_INTEREST_FAILED,\n        REDEEM_COMPTROLLER_REJECTION,\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\n        REDEEM_FRESHNESS_CHECK,\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n        REDUCE_RESERVES_ADMIN_CHECK,\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n        REDUCE_RESERVES_FRESH_CHECK,\n        REDUCE_RESERVES_VALIDATION,\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_COMPTROLLER_REJECTION,\n        REPAY_BORROW_FRESHNESS_CHECK,\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n        SET_COLLATERAL_FACTOR_VALIDATION,\n        SET_COMPTROLLER_OWNER_CHECK,\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n        SET_MAX_ASSETS_OWNER_CHECK,\n        SET_ORACLE_MARKET_NOT_LISTED,\n        SET_PENDING_ADMIN_OWNER_CHECK,\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\n        SET_RESERVE_FACTOR_FRESH_CHECK,\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\n        TRANSFER_COMPTROLLER_REJECTION,\n        TRANSFER_NOT_ALLOWED,\n        TRANSFER_NOT_ENOUGH,\n        TRANSFER_TOO_MUCH,\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n        ADD_RESERVES_FRESH_CHECK,\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\n    }\n\n    /**\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n      **/\n    event Failure(uint error, uint info, uint detail);\n\n    /**\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n      */\n    function fail(Error err, FailureInfo info) internal returns (uint) {\n        emit Failure(uint(err), uint(info), 0);\n\n        return uint(err);\n    }\n\n    /**\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n      */\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n        emit Failure(uint(err), uint(info), opaqueError);\n\n        return uint(err);\n    }\n}"},"contracts/Exponential.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CarefulMath.sol\";\n\n/**\n * @title Exponential module for storing fixed-precision decimals\n * @author Compound\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n *         `Exp({mantissa: 5100000000000000000})`.\n */\ncontract Exponential is CarefulMath {\n    uint constant expScale = 1e18;\n    uint constant doubleScale = 1e36;\n    uint constant halfExpScale = expScale/2;\n    uint constant mantissaOne = expScale;\n\n    struct Exp {\n        uint mantissa;\n    }\n\n    struct Double {\n        uint mantissa;\n    }\n\n    /**\n     * @dev Creates an exponential from numerator and denominator values.\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n     *            or if `denom` is zero.\n     */\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n    }\n\n    /**\n     * @dev Adds two exponentials, returning a new exponential.\n     */\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Subtracts two exponentials, returning a new exponential.\n     */\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n\n        return (error, Exp({mantissa: result}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\n     */\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n     */\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(product));\n    }\n\n    /**\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n     */\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return addUInt(truncate(product), addend);\n    }\n\n    /**\n     * @dev Divide an Exp by a scalar, returning a new Exp.\n     */\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, returning a new Exp.\n     */\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n        /*\n          We are doing this as:\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n\n          How it works:\n          Exp = a / b;\n          Scalar = s;\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n        */\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n        return getExp(numerator, divisor.mantissa);\n    }\n\n    /**\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n     */\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\n        if (err != MathError.NO_ERROR) {\n            return (err, 0);\n        }\n\n        return (MathError.NO_ERROR, truncate(fraction));\n    }\n\n    /**\n     * @dev Multiplies two exponentials, returning a new exponential.\n     */\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n        if (err0 != MathError.NO_ERROR) {\n            return (err0, Exp({mantissa: 0}));\n        }\n\n        // We add half the scale before dividing so that we get rounding instead of truncation.\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n        if (err1 != MathError.NO_ERROR) {\n            return (err1, Exp({mantissa: 0}));\n        }\n\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n        assert(err2 == MathError.NO_ERROR);\n\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\n    }\n\n    /**\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n     */\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n    }\n\n    /**\n     * @dev Multiplies three exponentials, returning a new exponential.\n     */\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n        (MathError err, Exp memory ab) = mulExp(a, b);\n        if (err != MathError.NO_ERROR) {\n            return (err, ab);\n        }\n        return mulExp(ab, c);\n    }\n\n    /**\n     * @dev Divides two exponentials, returning a new exponential.\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n     */\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n        return getExp(a.mantissa, b.mantissa);\n    }\n\n    /**\n     * @dev Truncates the given exp to a whole number value.\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n     */\n    function truncate(Exp memory exp) pure internal returns (uint) {\n        // Note: We are not using careful math here as we're performing a division that cannot fail\n        return exp.mantissa / expScale;\n    }\n\n    /**\n     * @dev Checks if first Exp is less than second Exp.\n     */\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa < right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp <= right Exp.\n     */\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa <= right.mantissa;\n    }\n\n    /**\n     * @dev Checks if left Exp > right Exp.\n     */\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n        return left.mantissa > right.mantissa;\n    }\n\n    /**\n     * @dev returns true if Exp is exactly zero\n     */\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\n        return value.mantissa == 0;\n    }\n\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\n        require(n < 2**224, errorMessage);\n        return uint224(n);\n    }\n\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n    }\n\n    function add_(uint a, uint b) pure internal returns (uint) {\n        return add_(a, b, \"addition overflow\");\n    }\n\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        uint c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n    }\n\n    function sub_(uint a, uint b) pure internal returns (uint) {\n        return sub_(a, b, \"subtraction underflow\");\n    }\n\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n    }\n\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / expScale;\n    }\n\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n    }\n\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: mul_(a.mantissa, b)});\n    }\n\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\n        return mul_(a, b.mantissa) / doubleScale;\n    }\n\n    function mul_(uint a, uint b) pure internal returns (uint) {\n        return mul_(a, b, \"multiplication overflow\");\n    }\n\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        uint c = a * b;\n        require(c / a == b, errorMessage);\n        return c;\n    }\n\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n    }\n\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\n        return Exp({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\n        return div_(mul_(a, expScale), b.mantissa);\n    }\n\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n    }\n\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(a.mantissa, b)});\n    }\n\n    function div_(uint a, Double memory b) pure internal returns (uint) {\n        return div_(mul_(a, doubleScale), b.mantissa);\n    }\n\n    function div_(uint a, uint b) pure internal returns (uint) {\n        return div_(a, b, \"divide by zero\");\n    }\n\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\n    }\n}\n"},"contracts/InterestRateModel.sol":{"content":"pragma solidity ^0.5.16;\n\n/**\n  * @title Compound's InterestRateModel Interface\n  * @author Compound\n  */\ncontract InterestRateModel {\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n    bool public constant isInterestRateModel = true;\n\n    /**\n      * @notice Calculates the current borrow interest rate per block\n      * @param cash The total amount of cash the market has\n      * @param borrows The total amount of borrows the market has outstanding\n      * @param reserves The total amnount of reserves the market has\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n      */\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\n\n    /**\n      * @notice Calculates the current supply interest rate per block\n      * @param cash The total amount of cash the market has\n      * @param borrows The total amount of borrows the market has outstanding\n      * @param reserves The total amnount of reserves the market has\n      * @param reserveFactorMantissa The current reserve factor the market has\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\n      */\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\n\n}\n"},"contracts/PriceOracle.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./CToken.sol\";\n\ncontract PriceOracle {\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n    bool public constant isPriceOracle = true;\n\n    /**\n      * @notice Get the underlying price of a cToken asset\n      * @param cToken The cToken to get the underlying price of\n      * @return The underlying asset price mantissa (scaled by 1e18).\n      *  Zero means the price is unavailable.\n      */\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\n}\n"},"contracts/Unitroller.sol":{"content":"pragma solidity ^0.5.16;\n\nimport \"./ErrorReporter.sol\";\nimport \"./ComptrollerStorage.sol\";\n/**\n * @title ComptrollerCore\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\n * CTokens should reference this contract as their comptroller.\n */\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n\n    /**\n      * @notice Emitted when pendingComptrollerImplementation is changed\n      */\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n\n    /**\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n      */\n    event NewImplementation(address oldImplementation, address newImplementation);\n\n    /**\n      * @notice Emitted when pendingAdmin is changed\n      */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n      */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    constructor() public {\n        // Set admin to caller\n        admin = msg.sender;\n    }\n\n    /*** Admin Functions ***/\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n        }\n\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = newPendingImplementation;\n\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n    * @dev Admin function for new implementation to accept it's role as implementation\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n    */\n    function _acceptImplementation() public returns (uint) {\n        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldImplementation = comptrollerImplementation;\n        address oldPendingImplementation = pendingComptrollerImplementation;\n\n        comptrollerImplementation = pendingComptrollerImplementation;\n\n        pendingComptrollerImplementation = address(0);\n\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n\n        return uint(Error.NO_ERROR);\n    }\n\n\n    /**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n        // Check caller = admin\n        if (msg.sender != admin) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n        }\n\n        // Save current value, if any, for inclusion in log\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store pendingAdmin with value newPendingAdmin\n        pendingAdmin = newPendingAdmin;\n\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n      */\n    function _acceptAdmin() public returns (uint) {\n        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n        }\n\n        // Save current values for inclusion in log\n        address oldAdmin = admin;\n        address oldPendingAdmin = pendingAdmin;\n\n        // Store admin with value pendingAdmin\n        admin = pendingAdmin;\n\n        // Clear the pending value\n        pendingAdmin = address(0);\n\n        emit NewAdmin(oldAdmin, admin);\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n\n        return uint(Error.NO_ERROR);\n    }\n\n    /**\n     * @dev Delegates execution to an implementation contract.\n     * It returns to the external caller whatever the implementation returns\n     * or forwards reverts.\n     */\n    function () payable external {\n        // delegate all other functions to current implementation\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n\n        assembly {\n              let free_mem_ptr := mload(0x40)\n              returndatacopy(free_mem_ptr, 0, returndatasize)\n\n              switch success\n              case 0 { revert(free_mem_ptr, returndatasize) }\n              default { return(free_mem_ptr, returndatasize) }\n        }\n    }\n}\n"}},{"sources":{"contracts/CToken.sol":{"id":0,"ast":{"absolutePath":"contracts/CToken.sol","id":3505,"exportedSymbols":{"CToken":[3504]},"nodeType":"SourceUnit","src":"0:64709:0","nodes":[{"id":1,"nodeType":"PragmaDirective","src":"0:24:0","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":2,"nodeType":"ImportDirective","src":"26:36:0","nodes":[],"absolutePath":"contracts/ComptrollerInterface.sol","file":"./ComptrollerInterface.sol","scope":3505,"sourceUnit":4358,"symbolAliases":[],"unitAlias":""},{"id":3,"nodeType":"ImportDirective","src":"63:32:0","nodes":[],"absolutePath":"contracts/CTokenInterfaces.sol","file":"./CTokenInterfaces.sol","scope":3505,"sourceUnit":3966,"symbolAliases":[],"unitAlias":""},{"id":4,"nodeType":"ImportDirective","src":"96:29:0","nodes":[],"absolutePath":"contracts/ErrorReporter.sol","file":"./ErrorReporter.sol","scope":3505,"sourceUnit":4873,"symbolAliases":[],"unitAlias":""},{"id":5,"nodeType":"ImportDirective","src":"126:27:0","nodes":[],"absolutePath":"contracts/Exponential.sol","file":"./Exponential.sol","scope":3505,"sourceUnit":6037,"symbolAliases":[],"unitAlias":""},{"id":6,"nodeType":"ImportDirective","src":"154:30:0","nodes":[],"absolutePath":"contracts/EIP20Interface.sol","file":"./EIP20Interface.sol","scope":3505,"sourceUnit":4548,"symbolAliases":[],"unitAlias":""},{"id":7,"nodeType":"ImportDirective","src":"185:41:0","nodes":[],"absolutePath":"contracts/EIP20NonStandardInterface.sol","file":"./EIP20NonStandardInterface.sol","scope":3505,"sourceUnit":4613,"symbolAliases":[],"unitAlias":""},{"id":8,"nodeType":"ImportDirective","src":"227:33:0","nodes":[],"absolutePath":"contracts/InterestRateModel.sol","file":"./InterestRateModel.sol","scope":3505,"sourceUnit":6067,"symbolAliases":[],"unitAlias":""},{"id":3504,"nodeType":"ContractDefinition","src":"364:64344:0","nodes":[{"id":117,"nodeType":"FunctionDefinition","src":"871:1498:0","nodes":[],"body":{"id":116,"nodeType":"Block","src":"1187:1182:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":30,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"1205:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":31,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1205:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":32,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"1219:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1205:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6f6e6c792061646d696e206d617920696e697469616c697a6520746865206d61726b6574","id":34,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1226:38:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0d998648c97be54311575d3a2c41b4b9b1a42ee050ec72752cd3e44128c6d6c6","typeString":"literal_string \"only admin may initialize the market\""},"value":"only admin may initialize the market"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d998648c97be54311575d3a2c41b4b9b1a42ee050ec72752cd3e44128c6d6c6","typeString":"literal_string \"only admin may initialize the market\""}],"id":29,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"1197:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1197:68:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":36,"nodeType":"ExpressionStatement","src":"1197:68:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":38,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"1283:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":39,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1305:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1283:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":41,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"1310:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":42,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1310:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1283:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6d61726b6574206d6179206f6e6c7920626520696e697469616c697a6564206f6e6365","id":45,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1328:37:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_1bebca39b478e42a6b88dcff87467d0e08b422ebc72c3d074bd236265624e814","typeString":"literal_string \"market may only be initialized once\""},"value":"market may only be initialized once"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1bebca39b478e42a6b88dcff87467d0e08b422ebc72c3d074bd236265624e814","typeString":"literal_string \"market may only be initialized once\""}],"id":37,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"1275:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1275:91:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"ExpressionStatement","src":"1275:91:0"},{"expression":{"argumentTypes":null,"id":50,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":48,"name":"initialExchangeRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"1414:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":49,"name":"initialExchangeRateMantissa_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":20,"src":"1444:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1414:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":51,"nodeType":"ExpressionStatement","src":"1414:58:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":53,"name":"initialExchangeRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"1490:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":54,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1520:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1490:31:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"696e697469616c2065786368616e67652072617465206d7573742062652067726561746572207468616e207a65726f2e","id":56,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1523:50:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_427426a02e699ec0d6d6d22f3254c7e686696e18d2de7af9416d6b5cc786ff6c","typeString":"literal_string \"initial exchange rate must be greater than zero.\""},"value":"initial exchange rate must be greater than zero."}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_427426a02e699ec0d6d6d22f3254c7e686696e18d2de7af9416d6b5cc786ff6c","typeString":"literal_string \"initial exchange rate must be greater than zero.\""}],"id":52,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"1482:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1482:92:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"ExpressionStatement","src":"1482:92:0"},{"assignments":[60],"declarations":[{"constant":false,"id":60,"name":"err","nodeType":"VariableDeclaration","scope":116,"src":"1616:8:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":59,"name":"uint","nodeType":"ElementaryTypeName","src":"1616:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":64,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":62,"name":"comptroller_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"1643:12:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}],"id":61,"name":"_setComptroller","nodeType":"Identifier","overloadedDeclarations":[3031],"referencedDeclaration":3031,"src":"1627:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_ComptrollerInterface_$4357_$returns$_t_uint256_$","typeString":"function (contract ComptrollerInterface) returns (uint256)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1627:29:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1616:40:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":66,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1674:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":68,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"1686:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1686:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":67,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1681:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":70,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1681:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1674:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"73657474696e6720636f6d7074726f6c6c6572206661696c6564","id":72,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1703:28:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b20ca7ca5fb4cb4511b58e112cf8b8663096873b0029b9b6aeb6bb29723b6450","typeString":"literal_string \"setting comptroller failed\""},"value":"setting comptroller failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b20ca7ca5fb4cb4511b58e112cf8b8663096873b0029b9b6aeb6bb29723b6450","typeString":"literal_string \"setting comptroller failed\""}],"id":65,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"1666:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1666:66:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":74,"nodeType":"ExpressionStatement","src":"1666:66:0"},{"expression":{"argumentTypes":null,"id":78,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":75,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"1848:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":76,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"1869:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":77,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1869:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1848:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":79,"nodeType":"ExpressionStatement","src":"1848:37:0"},{"expression":{"argumentTypes":null,"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":80,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"1895:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":81,"name":"mantissaOne","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"1909:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1895:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":83,"nodeType":"ExpressionStatement","src":"1895:25:0"},{"expression":{"argumentTypes":null,"id":88,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":84,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"2011:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":86,"name":"interestRateModel_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"2044:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}],"id":85,"name":"_setInterestRateModelFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"2017:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_InterestRateModel_$6066_$returns$_t_uint256_$","typeString":"function (contract InterestRateModel) returns (uint256)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2017:46:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2011:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":89,"nodeType":"ExpressionStatement","src":"2011:52:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":91,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"2081:3:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":93,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"2093:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2093:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":92,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2088:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2088:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2081:27:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"73657474696e6720696e7465726573742072617465206d6f64656c206661696c6564","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2110:36:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_59076c676f223cb9d4de55d807fe5a438ed31bccfb7626e1e7791e8e0eec7464","typeString":"literal_string \"setting interest rate model failed\""},"value":"setting interest rate model failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_59076c676f223cb9d4de55d807fe5a438ed31bccfb7626e1e7791e8e0eec7464","typeString":"literal_string \"setting interest rate model failed\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"2073:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2073:74:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2073:74:0"},{"expression":{"argumentTypes":null,"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":100,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3512,"src":"2158:4:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":101,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"2165:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2158:12:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":103,"nodeType":"ExpressionStatement","src":"2158:12:0"},{"expression":{"argumentTypes":null,"id":106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":104,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3514,"src":"2180:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":105,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"2189:7:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2180:16:0","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":107,"nodeType":"ExpressionStatement","src":"2180:16:0"},{"expression":{"argumentTypes":null,"id":110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":108,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3516,"src":"2206:8:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":109,"name":"decimals_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2217:9:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"2206:20:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":111,"nodeType":"ExpressionStatement","src":"2206:20:0"},{"expression":{"argumentTypes":null,"id":114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":112,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"2344:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2358:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2344:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":115,"nodeType":"ExpressionStatement","src":"2344:18:0"}]},"documentation":"@notice Initialize the money market\n@param comptroller_ The address of the Comptroller\n@param interestRateModel_ The address of the interest rate model\n@param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\n@param name_ EIP-20 name of this token\n@param symbol_ EIP-20 symbol of this token\n@param decimals_ EIP-20 decimal precision of this token","implemented":true,"kind":"function","modifiers":[],"name":"initialize","parameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":16,"name":"comptroller_","nodeType":"VariableDeclaration","scope":117,"src":"891:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":15,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"891:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"},{"constant":false,"id":18,"name":"interestRateModel_","nodeType":"VariableDeclaration","scope":117,"src":"950:36:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":17,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"950:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"},{"constant":false,"id":20,"name":"initialExchangeRateMantissa_","nodeType":"VariableDeclaration","scope":117,"src":"1012:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":19,"name":"uint","nodeType":"ElementaryTypeName","src":"1012:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":22,"name":"name_","nodeType":"VariableDeclaration","scope":117,"src":"1071:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":21,"name":"string","nodeType":"ElementaryTypeName","src":"1071:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"},{"constant":false,"id":24,"name":"symbol_","nodeType":"VariableDeclaration","scope":117,"src":"1116:21:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":23,"name":"string","nodeType":"ElementaryTypeName","src":"1116:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"},{"constant":false,"id":26,"name":"decimals_","nodeType":"VariableDeclaration","scope":117,"src":"1163:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":25,"name":"uint8","nodeType":"ElementaryTypeName","src":"1163:5:0","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"src":"890:289:0"},"returnParameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"1187:0:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":325,"nodeType":"FunctionDefinition","src":"2821:2157:0","nodes":[],"body":{"id":324,"nodeType":"Block","src":"2925:2053:0","nodes":[],"statements":[{"assignments":[131],"declarations":[{"constant":false,"id":131,"name":"allowed","nodeType":"VariableDeclaration","scope":324,"src":"2978:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint","nodeType":"ElementaryTypeName","src":"2978:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":141,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":135,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"3029:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3021:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3021:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":137,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"3036:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":138,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3041:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":139,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"3046:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":132,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"2993:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferAllowed","nodeType":"MemberAccess","referencedDeclaration":4332,"src":"2993:27:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) external returns (uint256)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2993:60:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2978:75:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":142,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3067:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3078:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3067:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":154,"nodeType":"IfStatement","src":"3063:142:0","trueBody":{"id":153,"nodeType":"Block","src":"3081:124:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":146,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3113:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3113:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":148,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"3142:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TRANSFER_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3142:42:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":150,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"3186:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":145,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"3102:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3102:92:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":152,"nodeType":"Return","src":"3095:99:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":155,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"3261:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":156,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"3268:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3261:10:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":166,"nodeType":"IfStatement","src":"3257:103:0","trueBody":{"id":165,"nodeType":"Block","src":"3273:87:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":159,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3299:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BAD_INPUT","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3299:15:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":161,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"3316:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TRANSFER_NOT_ALLOWED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3316:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":158,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"3294:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3294:55:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":164,"nodeType":"Return","src":"3287:62:0"}]}},{"assignments":[168],"declarations":[{"constant":false,"id":168,"name":"startingAllowance","nodeType":"VariableDeclaration","scope":324,"src":"3434:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":167,"name":"uint","nodeType":"ElementaryTypeName","src":"3434:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":170,"initialValue":{"argumentTypes":null,"hexValue":"30","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3459:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3434:26:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":171,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"3474:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":172,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"3485:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3474:14:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":190,"nodeType":"Block","src":"3549:77:0","statements":[{"expression":{"argumentTypes":null,"id":188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":182,"name":"startingAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"3563:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":183,"name":"transferAllowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"3583:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":185,"indexExpression":{"argumentTypes":null,"id":184,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"3602:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3583:23:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":187,"indexExpression":{"argumentTypes":null,"id":186,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"3607:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3583:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3563:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":189,"nodeType":"ExpressionStatement","src":"3563:52:0"}]},"id":191,"nodeType":"IfStatement","src":"3470:156:0","trueBody":{"id":181,"nodeType":"Block","src":"3490:53:0","statements":[{"expression":{"argumentTypes":null,"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":174,"name":"startingAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"3504:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"3529:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3530:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3524:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3524:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3504:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":180,"nodeType":"ExpressionStatement","src":"3504:28:0"}]}},{"assignments":[193],"declarations":[{"constant":false,"id":193,"name":"mathErr","nodeType":"VariableDeclaration","scope":324,"src":"3701:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":192,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3701:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"}],"id":194,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"3701:17:0"},{"assignments":[196],"declarations":[{"constant":false,"id":196,"name":"allowanceNew","nodeType":"VariableDeclaration","scope":324,"src":"3728:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":195,"name":"uint","nodeType":"ElementaryTypeName","src":"3728:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":197,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"3728:17:0"},{"assignments":[199],"declarations":[{"constant":false,"id":199,"name":"srcTokensNew","nodeType":"VariableDeclaration","scope":324,"src":"3755:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":198,"name":"uint","nodeType":"ElementaryTypeName","src":"3755:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":200,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"3755:17:0"},{"assignments":[202],"declarations":[{"constant":false,"id":202,"name":"dstTokensNew","nodeType":"VariableDeclaration","scope":324,"src":"3782:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":201,"name":"uint","nodeType":"ElementaryTypeName","src":"3782:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":203,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"3782:17:0"},{"expression":{"argumentTypes":null,"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":204,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3811:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":205,"name":"allowanceNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"3820:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":206,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"3810:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":208,"name":"startingAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"3844:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":209,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"3863:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":207,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"3836:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3836:34:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"3810:60:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":212,"nodeType":"ExpressionStatement","src":"3810:60:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":213,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3884:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":214,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"3895:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3895:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"3884:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":225,"nodeType":"IfStatement","src":"3880:123:0","trueBody":{"id":224,"nodeType":"Block","src":"3915:88:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":218,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"3941:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3941:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":220,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"3959:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TRANSFER_NOT_ALLOWED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3959:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":217,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"3936:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3936:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":223,"nodeType":"Return","src":"3929:63:0"}]}},{"expression":{"argumentTypes":null,"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":226,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4014:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":227,"name":"srcTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4023:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":228,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4013:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":230,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4047:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":232,"indexExpression":{"argumentTypes":null,"id":231,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4061:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4047:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":233,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"4067:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":229,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"4039:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4039:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"4013:61:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":236,"nodeType":"ExpressionStatement","src":"4013:61:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":237,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4088:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":238,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4099:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4099:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"4088:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":249,"nodeType":"IfStatement","src":"4084:122:0","trueBody":{"id":248,"nodeType":"Block","src":"4119:87:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":242,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"4145:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4145:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":244,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"4163:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TRANSFER_NOT_ENOUGH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4163:31:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":241,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"4140:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4140:55:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":247,"nodeType":"Return","src":"4133:62:0"}]}},{"expression":{"argumentTypes":null,"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":250,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4217:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":251,"name":"dstTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"4226:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":252,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"4216:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":254,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4250:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":256,"indexExpression":{"argumentTypes":null,"id":255,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"4264:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4250:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":257,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"4270:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":253,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"4242:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4242:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"4216:61:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":260,"nodeType":"ExpressionStatement","src":"4216:61:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":261,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"4291:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":262,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4302:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4302:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"4291:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":273,"nodeType":"IfStatement","src":"4287:120:0","trueBody":{"id":272,"nodeType":"Block","src":"4322:85:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":266,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"4348:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":267,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4348:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":268,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"4366:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TRANSFER_TOO_MUCH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4366:29:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":265,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"4343:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4343:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":271,"nodeType":"Return","src":"4336:60:0"}]}},{"expression":{"argumentTypes":null,"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":274,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4534:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":276,"indexExpression":{"argumentTypes":null,"id":275,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4548:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4534:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":277,"name":"srcTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4555:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4534:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":279,"nodeType":"ExpressionStatement","src":"4534:33:0"},{"expression":{"argumentTypes":null,"id":284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":280,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"4577:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":282,"indexExpression":{"argumentTypes":null,"id":281,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"4591:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4577:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":283,"name":"dstTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"4598:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4577:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":285,"nodeType":"ExpressionStatement","src":"4577:33:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":286,"name":"startingAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"4680:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"4706:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4707:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4701:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4701:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4680:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":301,"nodeType":"IfStatement","src":"4676:107:0","trueBody":{"id":300,"nodeType":"Block","src":"4711:72:0","statements":[{"expression":{"argumentTypes":null,"id":298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":292,"name":"transferAllowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"4725:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":295,"indexExpression":{"argumentTypes":null,"id":293,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4744:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4725:23:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":296,"indexExpression":{"argumentTypes":null,"id":294,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"4749:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4725:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":297,"name":"allowanceNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"4760:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4725:47:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":299,"nodeType":"ExpressionStatement","src":"4725:47:0"}]}},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":303,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4846:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":304,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"4851:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":305,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"4856:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":302,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"4837:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4837:26:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":307,"nodeType":"EmitStatement","src":"4832:31:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":312,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"4909:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4901:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4901:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":314,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"4916:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":315,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"4921:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":316,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"4926:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":308,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"4874:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferVerify","nodeType":"MemberAccess","referencedDeclaration":4343,"src":"4874:26:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256) external"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4874:59:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":318,"nodeType":"ExpressionStatement","src":"4874:59:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":320,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"4956:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4956:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4951:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4951:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":129,"id":323,"nodeType":"Return","src":"4944:27:0"}]},"documentation":"@notice Transfer `tokens` tokens from `src` to `dst` by `spender`\n@dev Called by both `transfer` and `transferFrom` internally\n@param spender The address of the account performing the transfer\n@param src The address of the source account\n@param dst The address of the destination account\n@param tokens The number of tokens to transfer\n@return Whether or not the transfer succeeded","implemented":true,"kind":"function","modifiers":[],"name":"transferTokens","parameters":{"id":126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"name":"spender","nodeType":"VariableDeclaration","scope":325,"src":"2845:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"2845:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":121,"name":"src","nodeType":"VariableDeclaration","scope":325,"src":"2862:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"2862:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":123,"name":"dst","nodeType":"VariableDeclaration","scope":325,"src":"2875:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"2875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":125,"name":"tokens","nodeType":"VariableDeclaration","scope":325,"src":"2888:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint","nodeType":"ElementaryTypeName","src":"2888:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2844:56:0"},"returnParameters":{"id":129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"name":"","nodeType":"VariableDeclaration","scope":325,"src":"2919:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint","nodeType":"ElementaryTypeName","src":"2919:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2918:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":351,"nodeType":"FunctionDefinition","src":"5231:183:0","nodes":[],"body":{"id":350,"nodeType":"Block","src":"5315:99:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":337,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"5347:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5347:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":339,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"5359:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5359:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":341,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"5371:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":342,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":329,"src":"5376:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":336,"name":"transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"5332:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) returns (uint256)"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5332:51:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":345,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"5392:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5392:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5387:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5387:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5332:75:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":335,"id":349,"nodeType":"Return","src":"5325:82:0"}]},"documentation":"@notice Transfer `amount` tokens from `msg.sender` to `dst`\n@param dst The address of the destination account\n@param amount The number of tokens to transfer\n@return Whether or not the transfer succeeded","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":332,"modifierName":{"argumentTypes":null,"id":331,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"5287:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5287:12:0"}],"name":"transfer","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"name":"dst","nodeType":"VariableDeclaration","scope":351,"src":"5249:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"5249:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":329,"name":"amount","nodeType":"VariableDeclaration","scope":351,"src":"5262:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"5262:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5248:29:0"},"returnParameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"name":"","nodeType":"VariableDeclaration","scope":351,"src":"5309:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":333,"name":"bool","nodeType":"ElementaryTypeName","src":"5309:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5308:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3708,"visibility":"external"},{"id":378,"nodeType":"FunctionDefinition","src":"5712:193:0","nodes":[],"body":{"id":377,"nodeType":"Block","src":"5813:92:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":365,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"5845:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5845:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":367,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"5857:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":368,"name":"dst","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":355,"src":"5862:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":369,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"5867:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":364,"name":"transferTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":325,"src":"5830:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) returns (uint256)"}},"id":370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5830:44:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":372,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"5883:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5883:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5878:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5878:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5830:68:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":363,"id":376,"nodeType":"Return","src":"5823:75:0"}]},"documentation":"@notice Transfer `amount` tokens from `src` to `dst`\n@param src The address of the source account\n@param dst The address of the destination account\n@param amount The number of tokens to transfer\n@return Whether or not the transfer succeeded","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":360,"modifierName":{"argumentTypes":null,"id":359,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"5785:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"5785:12:0"}],"name":"transferFrom","parameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"name":"src","nodeType":"VariableDeclaration","scope":378,"src":"5734:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":352,"name":"address","nodeType":"ElementaryTypeName","src":"5734:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":355,"name":"dst","nodeType":"VariableDeclaration","scope":378,"src":"5747:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"5747:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":357,"name":"amount","nodeType":"VariableDeclaration","scope":378,"src":"5760:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"5760:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5733:42:0"},"returnParameters":{"id":363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"name":"","nodeType":"VariableDeclaration","scope":378,"src":"5807:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":361,"name":"bool","nodeType":"ElementaryTypeName","src":"5807:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5806:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3719,"visibility":"external"},{"id":409,"nodeType":"FunctionDefinition","src":"6365:232:0","nodes":[],"body":{"id":408,"nodeType":"Block","src":"6439:158:0","nodes":[],"statements":[{"assignments":[388],"declarations":[{"constant":false,"id":388,"name":"src","nodeType":"VariableDeclaration","scope":408,"src":"6449:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":387,"name":"address","nodeType":"ElementaryTypeName","src":"6449:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":391,"initialValue":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":389,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"6463:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6463:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"6449:24:0"},{"expression":{"argumentTypes":null,"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":392,"name":"transferAllowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"6483:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":395,"indexExpression":{"argumentTypes":null,"id":393,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"6502:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6483:23:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":396,"indexExpression":{"argumentTypes":null,"id":394,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"6507:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6483:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":397,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"6518:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6483:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":399,"nodeType":"ExpressionStatement","src":"6483:41:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":401,"name":"src","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"6548:3:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":402,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"6553:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":403,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"6562:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":400,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3691,"src":"6539:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6539:30:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"EmitStatement","src":"6534:35:0"},{"expression":{"argumentTypes":null,"hexValue":"74727565","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6586:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":386,"id":407,"nodeType":"Return","src":"6579:11:0"}]},"documentation":"@notice Approve `spender` to transfer up to `amount` from `src`\n@dev This will overwrite the approval amount for `spender`\n and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n@param spender The address of the account which may transfer tokens\n@param amount The number of tokens that are approved (-1 means infinite)\n@return Whether or not the approval succeeded","implemented":true,"kind":"function","modifiers":[],"name":"approve","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"name":"spender","nodeType":"VariableDeclaration","scope":409,"src":"6382:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":379,"name":"address","nodeType":"ElementaryTypeName","src":"6382:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":382,"name":"amount","nodeType":"VariableDeclaration","scope":409,"src":"6399:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":381,"name":"uint256","nodeType":"ElementaryTypeName","src":"6399:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6381:33:0"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"name":"","nodeType":"VariableDeclaration","scope":409,"src":"6433:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":384,"name":"bool","nodeType":"ElementaryTypeName","src":"6433:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"6432:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3728,"visibility":"external"},{"id":425,"nodeType":"FunctionDefinition","src":"6919:141:0","nodes":[],"body":{"id":424,"nodeType":"Block","src":"7002:58:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":418,"name":"transferAllowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"7019:18:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":420,"indexExpression":{"argumentTypes":null,"id":419,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"7038:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7019:25:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":422,"indexExpression":{"argumentTypes":null,"id":421,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"7045:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7019:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":417,"id":423,"nodeType":"Return","src":"7012:41:0"}]},"documentation":"@notice Get the current allowance from `owner` for `spender`\n@param owner The address of the account which owns the tokens to be spent\n@param spender The address of the account which may transfer tokens\n@return The number of tokens allowed to be spent (-1 means infinite)","implemented":true,"kind":"function","modifiers":[],"name":"allowance","parameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"name":"owner","nodeType":"VariableDeclaration","scope":425,"src":"6938:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":410,"name":"address","nodeType":"ElementaryTypeName","src":"6938:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":413,"name":"spender","nodeType":"VariableDeclaration","scope":425,"src":"6953:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":412,"name":"address","nodeType":"ElementaryTypeName","src":"6953:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6937:32:0"},"returnParameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":416,"name":"","nodeType":"VariableDeclaration","scope":425,"src":"6993:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":415,"name":"uint256","nodeType":"ElementaryTypeName","src":"6993:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6992:9:0"},"scope":3504,"stateMutability":"view","superFunction":3737,"visibility":"external"},{"id":437,"nodeType":"FunctionDefinition","src":"7243:110:0","nodes":[],"body":{"id":436,"nodeType":"Block","src":"7309:44:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":432,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"7326:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":434,"indexExpression":{"argumentTypes":null,"id":433,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"7340:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7326:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":431,"id":435,"nodeType":"Return","src":"7319:27:0"}]},"documentation":"@notice Get the token balance of the `owner`\n@param owner The address of the account to query\n@return The number of tokens owned by `owner`","implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","parameters":{"id":428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"name":"owner","nodeType":"VariableDeclaration","scope":437,"src":"7262:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"7262:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"7261:15:0"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"name":"","nodeType":"VariableDeclaration","scope":437,"src":"7300:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":429,"name":"uint256","nodeType":"ElementaryTypeName","src":"7300:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7299:9:0"},"scope":3504,"stateMutability":"view","superFunction":3744,"visibility":"external"},{"id":473,"nodeType":"FunctionDefinition","src":"7601:349:0","nodes":[],"body":{"id":472,"nodeType":"Block","src":"7669:281:0","nodes":[],"statements":[{"assignments":[445],"declarations":[{"constant":false,"id":445,"name":"exchangeRate","nodeType":"VariableDeclaration","scope":472,"src":"7679:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":444,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7679:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":450,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":447,"name":"exchangeRateCurrent","nodeType":"Identifier","overloadedDeclarations":[769],"referencedDeclaration":769,"src":"7720:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7720:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":446,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"7705:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"7705:38:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"nodeType":"VariableDeclarationStatement","src":"7679:64:0"},{"assignments":[452,454],"declarations":[{"constant":false,"id":452,"name":"mErr","nodeType":"VariableDeclaration","scope":472,"src":"7754:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":451,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"7754:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":454,"name":"balance","nodeType":"VariableDeclaration","scope":472,"src":"7770:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint","nodeType":"ElementaryTypeName","src":"7770:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":461,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":456,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":445,"src":"7804:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":457,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"7818:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":459,"indexExpression":{"argumentTypes":null,"id":458,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":439,"src":"7832:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7818:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":455,"name":"mulScalarTruncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"7786:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7786:53:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7753:86:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":463,"name":"mErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"7857:4:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":464,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"7865:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"7865:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"7857:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"62616c616e636520636f756c64206e6f742062652063616c63756c61746564","id":467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7885:33:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0e9121cb20ef6f48056bdb2f264782f64eb300ccc77c144db27a677810cb10a1","typeString":"literal_string \"balance could not be calculated\""},"value":"balance could not be calculated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e9121cb20ef6f48056bdb2f264782f64eb300ccc77c144db27a677810cb10a1","typeString":"literal_string \"balance could not be calculated\""}],"id":462,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"7849:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7849:70:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":469,"nodeType":"ExpressionStatement","src":"7849:70:0"},{"expression":{"argumentTypes":null,"id":470,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"7936:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":443,"id":471,"nodeType":"Return","src":"7929:14:0"}]},"documentation":"@notice Get the underlying balance of the `owner`\n@dev This also accrues interest in a transaction\n@param owner The address of the account to query\n@return The amount of underlying owned by `owner`","implemented":true,"kind":"function","modifiers":[],"name":"balanceOfUnderlying","parameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"name":"owner","nodeType":"VariableDeclaration","scope":473,"src":"7630:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":438,"name":"address","nodeType":"ElementaryTypeName","src":"7630:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"7629:15:0"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":442,"name":"","nodeType":"VariableDeclaration","scope":473,"src":"7663:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint","nodeType":"ElementaryTypeName","src":"7663:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7662:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3751,"visibility":"external"},{"id":556,"nodeType":"FunctionDefinition","src":"8288:685:0","nodes":[],"body":{"id":555,"nodeType":"Block","src":"8380:593:0","nodes":[],"statements":[{"assignments":[487],"declarations":[{"constant":false,"id":487,"name":"cTokenBalance","nodeType":"VariableDeclaration","scope":555,"src":"8390:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":486,"name":"uint","nodeType":"ElementaryTypeName","src":"8390:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":491,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":488,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"8411:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":490,"indexExpression":{"argumentTypes":null,"id":489,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"8425:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8411:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8390:43:0"},{"assignments":[493],"declarations":[{"constant":false,"id":493,"name":"borrowBalance","nodeType":"VariableDeclaration","scope":555,"src":"8443:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":492,"name":"uint","nodeType":"ElementaryTypeName","src":"8443:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":494,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"8443:18:0"},{"assignments":[496],"declarations":[{"constant":false,"id":496,"name":"exchangeRateMantissa","nodeType":"VariableDeclaration","scope":555,"src":"8471:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":495,"name":"uint","nodeType":"ElementaryTypeName","src":"8471:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":497,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"8471:25:0"},{"assignments":[499],"declarations":[{"constant":false,"id":499,"name":"mErr","nodeType":"VariableDeclaration","scope":555,"src":"8507:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":498,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"8507:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"}],"id":500,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"8507:14:0"},{"expression":{"argumentTypes":null,"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":501,"name":"mErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8533:4:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":502,"name":"borrowBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"8539:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":503,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8532:21:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":505,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"8584:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":504,"name":"borrowBalanceStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"8556:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (address) view returns (enum CarefulMath.MathError,uint256)"}},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8556:36:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"8532:60:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":508,"nodeType":"ExpressionStatement","src":"8532:60:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":509,"name":"mErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8606:4:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":510,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"8614:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8614:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"8606:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":523,"nodeType":"IfStatement","src":"8602:97:0","trueBody":{"id":522,"nodeType":"Block","src":"8634:65:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":514,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"8661:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":515,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8661:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8680:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"hexValue":"30","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8683:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"hexValue":"30","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8686:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":520,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8655:33:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0,int_const 0,int_const 0)"}},"functionReturnParameters":485,"id":521,"nodeType":"Return","src":"8648:40:0"}]}},{"expression":{"argumentTypes":null,"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":524,"name":"mErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8710:4:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":525,"name":"exchangeRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"8716:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":526,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"8709:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":527,"name":"exchangeRateStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"8740:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function () view returns (enum CarefulMath.MathError,uint256)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8740:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"8709:59:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":530,"nodeType":"ExpressionStatement","src":"8709:59:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":531,"name":"mErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"8782:4:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":532,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"8790:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8790:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"8782:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":545,"nodeType":"IfStatement","src":"8778:97:0","trueBody":{"id":544,"nodeType":"Block","src":"8810:65:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":536,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"8837:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8837:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8832:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8832:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8856:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"hexValue":"30","id":540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8859:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"hexValue":"30","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8862:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"8831:33:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$_t_rational_0_by_1_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0,int_const 0,int_const 0)"}},"functionReturnParameters":485,"id":543,"nodeType":"Return","src":"8824:40:0"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":547,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"8898:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"8898:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8893:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8893:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":550,"name":"cTokenBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"8915:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":551,"name":"borrowBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"8930:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":552,"name":"exchangeRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":496,"src":"8945:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":553,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8892:74:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256,uint256,uint256)"}},"functionReturnParameters":485,"id":554,"nodeType":"Return","src":"8885:81:0"}]},"documentation":"@notice Get a snapshot of the account's balances, and the cached exchange rate\n@dev This is used by comptroller to more efficiently perform liquidity checks.\n@param account Address of the account to snapshot\n@return (possible error, token balance, borrow balance, exchange rate mantissa)","implemented":true,"kind":"function","modifiers":[],"name":"getAccountSnapshot","parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"name":"account","nodeType":"VariableDeclaration","scope":556,"src":"8316:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":474,"name":"address","nodeType":"ElementaryTypeName","src":"8316:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"8315:17:0"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":478,"name":"","nodeType":"VariableDeclaration","scope":556,"src":"8356:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint","nodeType":"ElementaryTypeName","src":"8356:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":480,"name":"","nodeType":"VariableDeclaration","scope":556,"src":"8362:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":479,"name":"uint","nodeType":"ElementaryTypeName","src":"8362:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":482,"name":"","nodeType":"VariableDeclaration","scope":556,"src":"8368:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":481,"name":"uint","nodeType":"ElementaryTypeName","src":"8368:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":484,"name":"","nodeType":"VariableDeclaration","scope":556,"src":"8374:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":483,"name":"uint","nodeType":"ElementaryTypeName","src":"8374:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8355:24:0"},"scope":3504,"stateMutability":"view","superFunction":3764,"visibility":"external"},{"id":565,"nodeType":"FunctionDefinition","src":"9126:91:0","nodes":[],"body":{"id":564,"nodeType":"Block","src":"9181:36:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":561,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6335,"src":"9198:5:0","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"number","nodeType":"MemberAccess","referencedDeclaration":null,"src":"9198:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":560,"id":563,"nodeType":"Return","src":"9191:19:0"}]},"documentation":"@dev Function to simply retrieve block number\n This exists mainly for inheriting test contracts to stub this result.","implemented":true,"kind":"function","modifiers":[],"name":"getBlockNumber","parameters":{"id":557,"nodeType":"ParameterList","parameters":[],"src":"9149:2:0"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"name":"","nodeType":"VariableDeclaration","scope":565,"src":"9175:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint","nodeType":"ElementaryTypeName","src":"9175:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9174:6:0"},"scope":3504,"stateMutability":"view","superFunction":null,"visibility":"internal"},{"id":579,"nodeType":"FunctionDefinition","src":"9387:159:0","nodes":[],"body":{"id":578,"nodeType":"Block","src":"9446:100:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":572,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"9495:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9495:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":574,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"9511:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":575,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"9525:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":570,"name":"interestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"9463:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBorrowRate","nodeType":"MemberAccess","referencedDeclaration":6052,"src":"9463:31:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view external returns (uint256)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9463:76:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":569,"id":577,"nodeType":"Return","src":"9456:83:0"}]},"documentation":"@notice Returns the current per-block borrow interest rate for this cToken\n@return The borrow interest rate per block, scaled by 1e18","implemented":true,"kind":"function","modifiers":[],"name":"borrowRatePerBlock","parameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"9414:2:0"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"name":"","nodeType":"VariableDeclaration","scope":579,"src":"9440:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":567,"name":"uint","nodeType":"ElementaryTypeName","src":"9440:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9439:6:0"},"scope":3504,"stateMutability":"view","superFunction":3769,"visibility":"external"},{"id":594,"nodeType":"FunctionDefinition","src":"9716:182:0","nodes":[],"body":{"id":593,"nodeType":"Block","src":"9775:123:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":586,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"9824:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9824:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":588,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"9840:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":589,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"9854:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":590,"name":"reserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"9869:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":584,"name":"interestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"9792:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getSupplyRate","nodeType":"MemberAccess","referencedDeclaration":6065,"src":"9792:31:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256,uint256) view external returns (uint256)"}},"id":591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9792:99:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":583,"id":592,"nodeType":"Return","src":"9785:106:0"}]},"documentation":"@notice Returns the current per-block supply interest rate for this cToken\n@return The supply interest rate per block, scaled by 1e18","implemented":true,"kind":"function","modifiers":[],"name":"supplyRatePerBlock","parameters":{"id":580,"nodeType":"ParameterList","parameters":[],"src":"9743:2:0"},"returnParameters":{"id":583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":582,"name":"","nodeType":"VariableDeclaration","scope":594,"src":"9769:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":581,"name":"uint","nodeType":"ElementaryTypeName","src":"9769:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9768:6:0"},"scope":3504,"stateMutability":"view","superFunction":3774,"visibility":"external"},{"id":615,"nodeType":"FunctionDefinition","src":"10038:189:0","nodes":[],"body":{"id":614,"nodeType":"Block","src":"10106:121:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":602,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"10124:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10124:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":605,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"10149:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10149:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10144:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10144:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10124:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"61636372756520696e746572657374206661696c6564","id":609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10166:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""},"value":"accrue interest failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""}],"id":601,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"10116:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10116:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":611,"nodeType":"ExpressionStatement","src":"10116:75:0"},{"expression":{"argumentTypes":null,"id":612,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"10208:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":600,"id":613,"nodeType":"Return","src":"10201:19:0"}]},"documentation":"@notice Returns the current total borrows plus accrued interest\n@return The total borrows with interest","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":597,"modifierName":{"argumentTypes":null,"id":596,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"10078:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"10078:12:0"}],"name":"totalBorrowsCurrent","parameters":{"id":595,"nodeType":"ParameterList","parameters":[],"src":"10066:2:0"},"returnParameters":{"id":600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"name":"","nodeType":"VariableDeclaration","scope":615,"src":"10100:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":598,"name":"uint","nodeType":"ElementaryTypeName","src":"10100:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10099:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3779,"visibility":"external"},{"id":640,"nodeType":"FunctionDefinition","src":"10511:221:0","nodes":[],"body":{"id":639,"nodeType":"Block","src":"10595:137:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":625,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"10613:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10613:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":628,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"10638:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"10638:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10633:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10633:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10613:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"61636372756520696e746572657374206661696c6564","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10655:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""},"value":"accrue interest failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""}],"id":624,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"10605:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10605:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":634,"nodeType":"ExpressionStatement","src":"10605:75:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":636,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"10717:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":635,"name":"borrowBalanceStored","nodeType":"Identifier","overloadedDeclarations":[666],"referencedDeclaration":666,"src":"10697:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10697:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":623,"id":638,"nodeType":"Return","src":"10690:35:0"}]},"documentation":"@notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\n@param account The address whose balance should be calculated after updating borrowIndex\n@return The calculated balance","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":620,"modifierName":{"argumentTypes":null,"id":619,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"10567:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"10567:12:0"}],"name":"borrowBalanceCurrent","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":617,"name":"account","nodeType":"VariableDeclaration","scope":640,"src":"10541:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":616,"name":"address","nodeType":"ElementaryTypeName","src":"10541:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"10540:17:0"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"name":"","nodeType":"VariableDeclaration","scope":640,"src":"10589:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":621,"name":"uint","nodeType":"ElementaryTypeName","src":"10589:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10588:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3786,"visibility":"external"},{"id":666,"nodeType":"FunctionDefinition","src":"10934:283:0","nodes":[],"body":{"id":665,"nodeType":"Block","src":"11007:210:0","nodes":[],"statements":[{"assignments":[648,650],"declarations":[{"constant":false,"id":648,"name":"err","nodeType":"VariableDeclaration","scope":665,"src":"11018:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":647,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"11018:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":650,"name":"result","nodeType":"VariableDeclaration","scope":665,"src":"11033:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":649,"name":"uint","nodeType":"ElementaryTypeName","src":"11033:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":654,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":652,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"11076:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":651,"name":"borrowBalanceStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"11048:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (address) view returns (enum CarefulMath.MathError,uint256)"}},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11048:36:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"11017:67:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":656,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"11102:3:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":657,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"11109:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"11109:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"11102:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"626f72726f7742616c616e636553746f7265643a20626f72726f7742616c616e636553746f726564496e7465726e616c206661696c6564","id":660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11129:57:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8825dc702edb5f60088d39fa3a6dc2db62be3613ea83047e025f5e671831b860","typeString":"literal_string \"borrowBalanceStored: borrowBalanceStoredInternal failed\""},"value":"borrowBalanceStored: borrowBalanceStoredInternal failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8825dc702edb5f60088d39fa3a6dc2db62be3613ea83047e025f5e671831b860","typeString":"literal_string \"borrowBalanceStored: borrowBalanceStoredInternal failed\""}],"id":655,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"11094:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11094:93:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":662,"nodeType":"ExpressionStatement","src":"11094:93:0"},{"expression":{"argumentTypes":null,"id":663,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"11204:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":646,"id":664,"nodeType":"Return","src":"11197:13:0"}]},"documentation":"@notice Return the borrow balance of account based on stored data\n@param account The address whose balance should be calculated\n@return The calculated balance","implemented":true,"kind":"function","modifiers":[],"name":"borrowBalanceStored","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"name":"account","nodeType":"VariableDeclaration","scope":666,"src":"10963:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"10963:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"10962:17:0"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":645,"name":"","nodeType":"VariableDeclaration","scope":666,"src":"11001:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":644,"name":"uint","nodeType":"ElementaryTypeName","src":"11001:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11000:6:0"},"scope":3504,"stateMutability":"view","superFunction":3793,"visibility":"public"},{"id":747,"nodeType":"FunctionDefinition","src":"11464:1238:0","nodes":[],"body":{"id":746,"nodeType":"Block","src":"11558:1144:0","nodes":[],"statements":[{"assignments":[676],"declarations":[{"constant":false,"id":676,"name":"mathErr","nodeType":"VariableDeclaration","scope":746,"src":"11635:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":675,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"11635:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"}],"id":677,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"11635:17:0"},{"assignments":[679],"declarations":[{"constant":false,"id":679,"name":"principalTimesIndex","nodeType":"VariableDeclaration","scope":746,"src":"11662:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint","nodeType":"ElementaryTypeName","src":"11662:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":680,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"11662:24:0"},{"assignments":[682],"declarations":[{"constant":false,"id":682,"name":"result","nodeType":"VariableDeclaration","scope":746,"src":"11696:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":681,"name":"uint","nodeType":"ElementaryTypeName","src":"11696:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":683,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"11696:11:0"},{"assignments":[685],"declarations":[{"constant":false,"id":685,"name":"borrowSnapshot","nodeType":"VariableDeclaration","scope":746,"src":"11766:37:0","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot"},"typeName":{"contractScope":null,"id":684,"name":"BorrowSnapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":3559,"src":"11766:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot"}},"value":null,"visibility":"internal"}],"id":689,"initialValue":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":686,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"11806:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":688,"indexExpression":{"argumentTypes":null,"id":687,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"11821:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11806:23:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11766:63:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":690,"name":"borrowSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12030:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot storage pointer"}},"id":691,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"principal","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"12030:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":692,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12058:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12030:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":700,"nodeType":"IfStatement","src":"12026:90:0","trueBody":{"id":699,"nodeType":"Block","src":"12061:55:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":694,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"12083:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12083:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12103:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":697,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"12082:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":674,"id":698,"nodeType":"Return","src":"12075:30:0"}]}},{"expression":{"argumentTypes":null,"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":701,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12306:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":702,"name":"principalTimesIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"12315:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":703,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"12305:30:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":705,"name":"borrowSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12346:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot storage pointer"}},"id":706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"principal","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"12346:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":707,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"12372:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":704,"name":"mulUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"12338:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12338:46:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"12305:79:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"ExpressionStatement","src":"12305:79:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":711,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12398:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":712,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"12409:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12409:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"12398:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":720,"nodeType":"IfStatement","src":"12394:79:0","trueBody":{"id":719,"nodeType":"Block","src":"12429:44:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":715,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12451:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12460:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":717,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12450:12:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":674,"id":718,"nodeType":"Return","src":"12443:19:0"}]}},{"expression":{"argumentTypes":null,"id":729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":721,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12484:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"12493:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":723,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"12483:17:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":725,"name":"principalTimesIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"12511:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":726,"name":"borrowSnapshot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"12532:14:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot storage pointer"}},"id":727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"interestIndex","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"12532:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":724,"name":"divUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"12503:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12503:58:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"12483:78:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":730,"nodeType":"ExpressionStatement","src":"12483:78:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":731,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12575:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":732,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"12586:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12586:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"12575:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":740,"nodeType":"IfStatement","src":"12571:79:0","trueBody":{"id":739,"nodeType":"Block","src":"12606:44:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":735,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"12628:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12637:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":737,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12627:12:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":674,"id":738,"nodeType":"Return","src":"12620:19:0"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":741,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"12668:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12668:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":743,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"12688:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":744,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12667:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":674,"id":745,"nodeType":"Return","src":"12660:35:0"}]},"documentation":"@notice Return the borrow balance of account based on stored data\n@param account The address whose balance should be calculated\n@return (error code, the calculated balance or 0 if error code is non-zero)","implemented":true,"kind":"function","modifiers":[],"name":"borrowBalanceStoredInternal","parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"name":"account","nodeType":"VariableDeclaration","scope":747,"src":"11501:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":667,"name":"address","nodeType":"ElementaryTypeName","src":"11501:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"11500:17:0"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"name":"","nodeType":"VariableDeclaration","scope":747,"src":"11541:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":670,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"11541:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":673,"name":"","nodeType":"VariableDeclaration","scope":747,"src":"11552:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":672,"name":"uint","nodeType":"ElementaryTypeName","src":"11552:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11540:17:0"},"scope":3504,"stateMutability":"view","superFunction":null,"visibility":"internal"},{"id":769,"nodeType":"FunctionDefinition","src":"12851:195:0","nodes":[],"body":{"id":768,"nodeType":"Block","src":"12917:129:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":755,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"12935:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12935:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":758,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"12960:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"12960:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12955:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12955:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12935:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"61636372756520696e746572657374206661696c6564","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12977:24:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""},"value":"accrue interest failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0ae1c3a6990b014f49c6cecca4c55d4276bada05d5796bb1e12f259b29f3de8e","typeString":"literal_string \"accrue interest failed\""}],"id":754,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"12927:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12927:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":764,"nodeType":"ExpressionStatement","src":"12927:75:0"},{"expression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":765,"name":"exchangeRateStored","nodeType":"Identifier","overloadedDeclarations":[792],"referencedDeclaration":792,"src":"13019:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13019:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":753,"id":767,"nodeType":"Return","src":"13012:27:0"}]},"documentation":"@notice Accrue interest then return the up-to-date exchange rate\n@return Calculated exchange rate scaled by 1e18","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":750,"modifierName":{"argumentTypes":null,"id":749,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"12889:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"12889:12:0"}],"name":"exchangeRateCurrent","parameters":{"id":748,"nodeType":"ParameterList","parameters":[],"src":"12879:2:0"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"name":"","nodeType":"VariableDeclaration","scope":769,"src":"12911:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint","nodeType":"ElementaryTypeName","src":"12911:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12910:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3798,"visibility":"public"},{"id":792,"nodeType":"FunctionDefinition","src":"13289:257:0","nodes":[],"body":{"id":791,"nodeType":"Block","src":"13346:200:0","nodes":[],"statements":[{"assignments":[775,777],"declarations":[{"constant":false,"id":775,"name":"err","nodeType":"VariableDeclaration","scope":791,"src":"13357:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":774,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"13357:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":777,"name":"result","nodeType":"VariableDeclaration","scope":791,"src":"13372:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint","nodeType":"ElementaryTypeName","src":"13372:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":780,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":778,"name":"exchangeRateStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"13387:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function () view returns (enum CarefulMath.MathError,uint256)"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13387:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"13356:59:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":782,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"13433:3:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":783,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"13440:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"13440:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"13433:25:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"65786368616e67655261746553746f7265643a2065786368616e67655261746553746f726564496e7465726e616c206661696c6564","id":786,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13460:55:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_dbb9242fc3facb546962a4d074b33f7d1e2606e6817021a0c962231003173b9b","typeString":"literal_string \"exchangeRateStored: exchangeRateStoredInternal failed\""},"value":"exchangeRateStored: exchangeRateStoredInternal failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dbb9242fc3facb546962a4d074b33f7d1e2606e6817021a0c962231003173b9b","typeString":"literal_string \"exchangeRateStored: exchangeRateStoredInternal failed\""}],"id":781,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"13425:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13425:91:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":788,"nodeType":"ExpressionStatement","src":"13425:91:0"},{"expression":{"argumentTypes":null,"id":789,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"13533:6:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":773,"id":790,"nodeType":"Return","src":"13526:13:0"}]},"documentation":"@notice Calculates the exchange rate from the underlying to the CToken\n@dev This function does not accrue interest before calculating the exchange rate\n@return Calculated exchange rate scaled by 1e18","implemented":true,"kind":"function","modifiers":[],"name":"exchangeRateStored","parameters":{"id":770,"nodeType":"ParameterList","parameters":[],"src":"13316:2:0"},"returnParameters":{"id":773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":772,"name":"","nodeType":"VariableDeclaration","scope":792,"src":"13340:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint","nodeType":"ElementaryTypeName","src":"13340:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"13339:6:0"},"scope":3504,"stateMutability":"view","superFunction":3803,"visibility":"public"},{"id":874,"nodeType":"FunctionDefinition","src":"13803:1156:0","nodes":[],"body":{"id":873,"nodeType":"Block","src":"13881:1078:0","nodes":[],"statements":[{"assignments":[800],"declarations":[{"constant":false,"id":800,"name":"_totalSupply","nodeType":"VariableDeclaration","scope":873,"src":"13891:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":799,"name":"uint","nodeType":"ElementaryTypeName","src":"13891:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":802,"initialValue":{"argumentTypes":null,"id":801,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"13911:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13891:31:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":803,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"13936:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13952:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13936:17:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":871,"nodeType":"Block","src":"14170:783:0","statements":[{"assignments":[813],"declarations":[{"constant":false,"id":813,"name":"totalCash","nodeType":"VariableDeclaration","scope":871,"src":"14329:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint","nodeType":"ElementaryTypeName","src":"14329:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":816,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":814,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"14346:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14346:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14329:31:0"},{"assignments":[818],"declarations":[{"constant":false,"id":818,"name":"cashPlusBorrowsMinusReserves","nodeType":"VariableDeclaration","scope":871,"src":"14374:33:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":817,"name":"uint","nodeType":"ElementaryTypeName","src":"14374:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":819,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"14374:33:0"},{"assignments":[821],"declarations":[{"constant":false,"id":821,"name":"exchangeRate","nodeType":"VariableDeclaration","scope":871,"src":"14421:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":820,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"14421:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":822,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"14421:23:0"},{"assignments":[824],"declarations":[{"constant":false,"id":824,"name":"mathErr","nodeType":"VariableDeclaration","scope":871,"src":"14458:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":823,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"14458:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"}],"id":825,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"14458:17:0"},{"expression":{"argumentTypes":null,"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":826,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14491:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":827,"name":"cashPlusBorrowsMinusReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"14500:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":828,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14490:39:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":830,"name":"totalCash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"14547:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":831,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"14558:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":832,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"14572:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":829,"name":"addThenSubUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4149,"src":"14532:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14532:54:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"14490:96:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":835,"nodeType":"ExpressionStatement","src":"14490:96:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":836,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14604:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":837,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"14615:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":838,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"14615:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"14604:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":845,"nodeType":"IfStatement","src":"14600:87:0","trueBody":{"id":844,"nodeType":"Block","src":"14635:52:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":840,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14661:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14670:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14660:12:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":798,"id":843,"nodeType":"Return","src":"14653:19:0"}]}},{"expression":{"argumentTypes":null,"id":853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":846,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14702:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":847,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"14711:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"id":848,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"14701:23:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":850,"name":"cashPlusBorrowsMinusReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"14734:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":851,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"14764:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":849,"name":"getExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"14727:6:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14727:50:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"src":"14701:76:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":854,"nodeType":"ExpressionStatement","src":"14701:76:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":855,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14795:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":856,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"14806:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"14806:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"14795:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":864,"nodeType":"IfStatement","src":"14791:87:0","trueBody":{"id":863,"nodeType":"Block","src":"14826:52:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":859,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"14852:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14861:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":861,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14851:12:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":798,"id":862,"nodeType":"Return","src":"14844:19:0"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":865,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"14900:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"14900:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":867,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"14920:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"14920:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":869,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14899:43:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":798,"id":870,"nodeType":"Return","src":"14892:50:0"}]},"id":872,"nodeType":"IfStatement","src":"13932:1021:0","trueBody":{"id":811,"nodeType":"Block","src":"13955:209:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":806,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"14105:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":807,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"14105:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":808,"name":"initialExchangeRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3532,"src":"14125:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":809,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14104:49:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":798,"id":810,"nodeType":"Return","src":"14097:56:0"}]}}]},"documentation":"@notice Calculates the exchange rate from the underlying to the CToken\n@dev This function does not accrue interest before calculating the exchange rate\n@return (error code, calculated exchange rate scaled by 1e18)","implemented":true,"kind":"function","modifiers":[],"name":"exchangeRateStoredInternal","parameters":{"id":793,"nodeType":"ParameterList","parameters":[],"src":"13838:2:0"},"returnParameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"name":"","nodeType":"VariableDeclaration","scope":874,"src":"13864:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":794,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"13864:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":797,"name":"","nodeType":"VariableDeclaration","scope":874,"src":"13875:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint","nodeType":"ElementaryTypeName","src":"13875:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"13863:17:0"},"scope":3504,"stateMutability":"view","superFunction":null,"visibility":"internal"},{"id":883,"nodeType":"FunctionDefinition","src":"15123:86:0","nodes":[],"body":{"id":882,"nodeType":"Block","src":"15171:38:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":879,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"15188:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15188:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":878,"id":881,"nodeType":"Return","src":"15181:21:0"}]},"documentation":"@notice Get cash balance of this cToken in the underlying asset\n@return The quantity of underlying asset owned by this contract","implemented":true,"kind":"function","modifiers":[],"name":"getCash","parameters":{"id":875,"nodeType":"ParameterList","parameters":[],"src":"15139:2:0"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"name":"","nodeType":"VariableDeclaration","scope":883,"src":"15165:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":876,"name":"uint","nodeType":"ElementaryTypeName","src":"15165:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"15164:6:0"},"scope":3504,"stateMutability":"view","superFunction":3808,"visibility":"external"},{"id":1132,"nodeType":"FunctionDefinition","src":"15450:3774:0","nodes":[],"body":{"id":1131,"nodeType":"Block","src":"15498:3726:0","nodes":[],"statements":[{"assignments":[889],"declarations":[{"constant":false,"id":889,"name":"currentBlockNumber","nodeType":"VariableDeclaration","scope":1131,"src":"15556:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint","nodeType":"ElementaryTypeName","src":"15556:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":892,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":890,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"15582:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15582:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15556:42:0"},{"assignments":[894],"declarations":[{"constant":false,"id":894,"name":"accrualBlockNumberPrior","nodeType":"VariableDeclaration","scope":1131,"src":"15608:28:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":893,"name":"uint","nodeType":"ElementaryTypeName","src":"15608:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":896,"initialValue":{"argumentTypes":null,"id":895,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"15639:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15608:49:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":897,"name":"accrualBlockNumberPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"15724:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":898,"name":"currentBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"15751:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15724:45:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":906,"nodeType":"IfStatement","src":"15720:103:0","trueBody":{"id":905,"nodeType":"Block","src":"15771:52:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":901,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"15797:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"15797:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15792:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15792:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":904,"nodeType":"Return","src":"15785:27:0"}]}},{"assignments":[908],"declarations":[{"constant":false,"id":908,"name":"cashPrior","nodeType":"VariableDeclaration","scope":1131,"src":"15887:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":907,"name":"uint","nodeType":"ElementaryTypeName","src":"15887:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":911,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":909,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"15904:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"15904:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15887:31:0"},{"assignments":[913],"declarations":[{"constant":false,"id":913,"name":"borrowsPrior","nodeType":"VariableDeclaration","scope":1131,"src":"15928:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint","nodeType":"ElementaryTypeName","src":"15928:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":915,"initialValue":{"argumentTypes":null,"id":914,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"15948:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15928:32:0"},{"assignments":[917],"declarations":[{"constant":false,"id":917,"name":"reservesPrior","nodeType":"VariableDeclaration","scope":1131,"src":"15970:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":916,"name":"uint","nodeType":"ElementaryTypeName","src":"15970:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":919,"initialValue":{"argumentTypes":null,"id":918,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"15991:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15970:34:0"},{"assignments":[921],"declarations":[{"constant":false,"id":921,"name":"borrowIndexPrior","nodeType":"VariableDeclaration","scope":1131,"src":"16014:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":920,"name":"uint","nodeType":"ElementaryTypeName","src":"16014:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":923,"initialValue":{"argumentTypes":null,"id":922,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"16038:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16014:35:0"},{"assignments":[925],"declarations":[{"constant":false,"id":925,"name":"borrowRateMantissa","nodeType":"VariableDeclaration","scope":1131,"src":"16117:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":924,"name":"uint","nodeType":"ElementaryTypeName","src":"16117:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":932,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":928,"name":"cashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"16175:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":929,"name":"borrowsPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"16186:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":930,"name":"reservesPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"16200:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":926,"name":"interestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"16143:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getBorrowRate","nodeType":"MemberAccess","referencedDeclaration":6052,"src":"16143:31:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) view external returns (uint256)"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16143:71:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16117:97:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":934,"name":"borrowRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"16232:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":935,"name":"borrowRateMaxMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"16254:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16232:43:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"626f72726f772072617465206973206162737572646c792068696768","id":937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16277:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9ab90068dc5fe9f7def6aab4ae887ed8eff65c4b83c1b9ba6beb99101f1ae8ea","typeString":"literal_string \"borrow rate is absurdly high\""},"value":"borrow rate is absurdly high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ab90068dc5fe9f7def6aab4ae887ed8eff65c4b83c1b9ba6beb99101f1ae8ea","typeString":"literal_string \"borrow rate is absurdly high\""}],"id":933,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"16224:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16224:84:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":939,"nodeType":"ExpressionStatement","src":"16224:84:0"},{"assignments":[941,943],"declarations":[{"constant":false,"id":941,"name":"mathErr","nodeType":"VariableDeclaration","scope":1131,"src":"16396:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":940,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"16396:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":943,"name":"blockDelta","nodeType":"VariableDeclaration","scope":1131,"src":"16415:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":942,"name":"uint","nodeType":"ElementaryTypeName","src":"16415:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":948,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":945,"name":"currentBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"16442:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":946,"name":"accrualBlockNumberPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"16462:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":944,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"16434:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16434:52:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"16395:91:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":950,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"16504:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":951,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"16515:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"16515:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"16504:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"636f756c64206e6f742063616c63756c61746520626c6f636b2064656c7461","id":954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16535:33:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_a9394539211404f7ee7a2fcf6f9f3bc093b89da93c049201dda15bb0023741df","typeString":"literal_string \"could not calculate block delta\""},"value":"could not calculate block delta"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a9394539211404f7ee7a2fcf6f9f3bc093b89da93c049201dda15bb0023741df","typeString":"literal_string \"could not calculate block delta\""}],"id":949,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"16496:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"16496:73:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":956,"nodeType":"ExpressionStatement","src":"16496:73:0"},{"assignments":[958],"declarations":[{"constant":false,"id":958,"name":"simpleInterestFactor","nodeType":"VariableDeclaration","scope":1131,"src":"17050:31:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":957,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"17050:3:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":959,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17050:31:0"},{"assignments":[961],"declarations":[{"constant":false,"id":961,"name":"interestAccumulated","nodeType":"VariableDeclaration","scope":1131,"src":"17091:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":960,"name":"uint","nodeType":"ElementaryTypeName","src":"17091:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":962,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17091:24:0"},{"assignments":[964],"declarations":[{"constant":false,"id":964,"name":"totalBorrowsNew","nodeType":"VariableDeclaration","scope":1131,"src":"17125:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint","nodeType":"ElementaryTypeName","src":"17125:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":965,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17125:20:0"},{"assignments":[967],"declarations":[{"constant":false,"id":967,"name":"totalReservesNew","nodeType":"VariableDeclaration","scope":1131,"src":"17155:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":966,"name":"uint","nodeType":"ElementaryTypeName","src":"17155:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":968,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17155:21:0"},{"assignments":[970],"declarations":[{"constant":false,"id":970,"name":"borrowIndexNew","nodeType":"VariableDeclaration","scope":1131,"src":"17186:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint","nodeType":"ElementaryTypeName","src":"17186:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":971,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"17186:19:0"},{"expression":{"argumentTypes":null,"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":972,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17217:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":973,"name":"simpleInterestFactor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"17226:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"id":974,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17216:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":977,"name":"borrowRateMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"17275:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":976,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"17260:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"17260:35:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":979,"name":"blockDelta","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"17297:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":975,"name":"mulScalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"17250:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17250:58:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"src":"17216:92:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"17216:92:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":983,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17322:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":984,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"17333:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17333:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"17322:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":998,"nodeType":"IfStatement","src":"17318:181:0","trueBody":{"id":997,"nodeType":"Block","src":"17353:146:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":988,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"17385:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17385:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":990,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"17403:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17403:69:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":993,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17479:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17474:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17474:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":987,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"17374:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17374:114:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":996,"nodeType":"Return","src":"17367:121:0"}]}},{"expression":{"argumentTypes":null,"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":999,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17510:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":1000,"name":"interestAccumulated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"17519:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1001,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17509:30:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1003,"name":"simpleInterestFactor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"17560:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":1004,"name":"borrowsPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"17582:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1002,"name":"mulScalarTruncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"17542:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17542:53:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"17509:86:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1007,"nodeType":"ExpressionStatement","src":"17509:86:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1008,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17609:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1009,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"17620:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1010,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17620:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"17609:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1023,"nodeType":"IfStatement","src":"17605:179:0","trueBody":{"id":1022,"nodeType":"Block","src":"17640:144:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1013,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"17672:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17672:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1015,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"17690:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17690:67:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1018,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17764:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1017,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17759:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17759:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1012,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"17661:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17661:112:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1021,"nodeType":"Return","src":"17654:119:0"}]}},{"expression":{"argumentTypes":null,"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1024,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17795:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":1025,"name":"totalBorrowsNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"17804:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1026,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"17794:26:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1028,"name":"interestAccumulated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"17831:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1029,"name":"borrowsPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"17852:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1027,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"17823:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17823:42:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"17794:71:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1032,"nodeType":"ExpressionStatement","src":"17794:71:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1033,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"17879:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1034,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"17890:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17890:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"17879:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1048,"nodeType":"IfStatement","src":"17875:176:0","trueBody":{"id":1047,"nodeType":"Block","src":"17910:141:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1038,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"17942:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17942:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1040,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"17960:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"17960:64:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1043,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18031:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18026:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18026:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1037,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"17931:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"17931:109:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1046,"nodeType":"Return","src":"17924:116:0"}]}},{"expression":{"argumentTypes":null,"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1049,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18062:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":1050,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"18071:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1051,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18061:27:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1054,"name":"reserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"18131:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1053,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"18116:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"18116:38:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":1056,"name":"interestAccumulated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"18156:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1057,"name":"reservesPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"18177:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1052,"name":"mulScalarTruncateAddUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"18091:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (struct Exponential.Exp memory,uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18091:100:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"18061:130:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1060,"nodeType":"ExpressionStatement","src":"18061:130:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1061,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18205:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1062,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"18216:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18216:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"18205:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1076,"nodeType":"IfStatement","src":"18201:177:0","trueBody":{"id":1075,"nodeType":"Block","src":"18236:142:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1066,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"18268:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18268:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1068,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"18286:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18286:65:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1071,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18358:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18353:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18353:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1065,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"18257:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18257:110:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1074,"nodeType":"Return","src":"18250:117:0"}]}},{"expression":{"argumentTypes":null,"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":1077,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18389:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":1078,"name":"borrowIndexNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"18398:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1079,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"18388:25:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1081,"name":"simpleInterestFactor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"18441:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":1082,"name":"borrowIndexPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"18463:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1083,"name":"borrowIndexPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":921,"src":"18481:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1080,"name":"mulScalarTruncateAddUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5135,"src":"18416:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (struct Exponential.Exp memory,uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18416:82:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"18388:110:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1086,"nodeType":"ExpressionStatement","src":"18388:110:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1087,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18512:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1088,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"18523:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18523:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"18512:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1102,"nodeType":"IfStatement","src":"18508:175:0","trueBody":{"id":1101,"nodeType":"Block","src":"18543:140:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1092,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"18575:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18575:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1094,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"18593:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"18593:63:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1097,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"18663:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1096,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18658:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18658:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1091,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"18564:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"18564:108:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1100,"nodeType":"Return","src":"18557:115:0"}]}},{"expression":{"argumentTypes":null,"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1103,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"18879:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1104,"name":"currentBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"18900:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18879:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1106,"nodeType":"ExpressionStatement","src":"18879:39:0"},{"expression":{"argumentTypes":null,"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1107,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"18928:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1108,"name":"borrowIndexNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"18942:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18928:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1110,"nodeType":"ExpressionStatement","src":"18928:28:0"},{"expression":{"argumentTypes":null,"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1111,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"18966:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1112,"name":"totalBorrowsNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"18981:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18966:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1114,"nodeType":"ExpressionStatement","src":"18966:30:0"},{"expression":{"argumentTypes":null,"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1115,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"19006:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1116,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":967,"src":"19022:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19006:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1118,"nodeType":"ExpressionStatement","src":"19006:32:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1120,"name":"cashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"19115:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1121,"name":"interestAccumulated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":961,"src":"19126:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1122,"name":"borrowIndexNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"19147:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1123,"name":"totalBorrowsNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"19163:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1119,"name":"AccrueInterest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3579,"src":"19100:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256,uint256)"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19100:79:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1125,"nodeType":"EmitStatement","src":"19095:84:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1127,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"19202:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"19202:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19197:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19197:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1130,"nodeType":"Return","src":"19190:27:0"}]},"documentation":"@notice Applies accrued interest to total borrows and reserves\n@dev This calculates interest accrued from the last checkpointed block\n  up to the current block and writes new checkpoint to storage.","implemented":true,"kind":"function","modifiers":[],"name":"accrueInterest","parameters":{"id":884,"nodeType":"ParameterList","parameters":[],"src":"15473:2:0"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"name":"","nodeType":"VariableDeclaration","scope":1132,"src":"15492:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint","nodeType":"ElementaryTypeName","src":"15492:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"15491:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3813,"visibility":"public"},{"id":1173,"nodeType":"FunctionDefinition","src":"19614:539:0","nodes":[],"body":{"id":1172,"nodeType":"Block","src":"19696:457:0","nodes":[],"statements":[{"assignments":[1144],"declarations":[{"constant":false,"id":1144,"name":"error","nodeType":"VariableDeclaration","scope":1172,"src":"19706:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint","nodeType":"ElementaryTypeName","src":"19706:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1147,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1145,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"19719:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19719:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19706:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1148,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"19749:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1150,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"19763:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1151,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"19763:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19758:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19758:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19749:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1165,"nodeType":"IfStatement","src":"19745:249:0","trueBody":{"id":1164,"nodeType":"Block","src":"19780:214:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1156,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"19931:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1155,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"19925:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19925:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1158,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"19939:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MINT_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"19939:39:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1154,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"19920:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"19920:59:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":1161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19981:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1162,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19919:64:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":1142,"id":1163,"nodeType":"Return","src":"19912:71:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1167,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"20123:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"20123:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1169,"name":"mintAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1134,"src":"20135:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1166,"name":"mintFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"20113:9:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,uint256) returns (uint256,uint256)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20113:33:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1142,"id":1171,"nodeType":"Return","src":"20106:40:0"}]},"documentation":"@notice Sender supplies assets into the market and receives cTokens in exchange\n@dev Accrues interest whether or not the operation succeeds, unless reverted\n@param mintAmount The amount of the underlying asset to supply\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1137,"modifierName":{"argumentTypes":null,"id":1136,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"19662:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"19662:12:0"}],"name":"mintInternal","parameters":{"id":1135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1134,"name":"mintAmount","nodeType":"VariableDeclaration","scope":1173,"src":"19636:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1133,"name":"uint","nodeType":"ElementaryTypeName","src":"19636:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"19635:17:0"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"name":"","nodeType":"VariableDeclaration","scope":1173,"src":"19684:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint","nodeType":"ElementaryTypeName","src":"19684:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1141,"name":"","nodeType":"VariableDeclaration","scope":1173,"src":"19690:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint","nodeType":"ElementaryTypeName","src":"19690:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"19683:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1188,"nodeType":"StructDefinition","src":"20159:225:0","nodes":[],"canonicalName":"CToken.MintLocalVars","members":[{"constant":false,"id":1175,"name":"err","nodeType":"VariableDeclaration","scope":1188,"src":"20190:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},"typeName":{"contractScope":null,"id":1174,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4731,"src":"20190:5:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":1177,"name":"mathErr","nodeType":"VariableDeclaration","scope":1188,"src":"20209:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":1176,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"20209:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":1179,"name":"exchangeRateMantissa","nodeType":"VariableDeclaration","scope":1188,"src":"20236:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint","nodeType":"ElementaryTypeName","src":"20236:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1181,"name":"mintTokens","nodeType":"VariableDeclaration","scope":1188,"src":"20271:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint","nodeType":"ElementaryTypeName","src":"20271:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1183,"name":"totalSupplyNew","nodeType":"VariableDeclaration","scope":1188,"src":"20296:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1182,"name":"uint","nodeType":"ElementaryTypeName","src":"20296:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1185,"name":"accountTokensNew","nodeType":"VariableDeclaration","scope":1188,"src":"20325:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint","nodeType":"ElementaryTypeName","src":"20325:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1187,"name":"actualMintAmount","nodeType":"VariableDeclaration","scope":1188,"src":"20356:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1186,"name":"uint","nodeType":"ElementaryTypeName","src":"20356:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"MintLocalVars","scope":3504,"visibility":"public"},{"id":1404,"nodeType":"FunctionDefinition","src":"20844:3112:0","nodes":[],"body":{"id":1403,"nodeType":"Block","src":"20926:3030:0","nodes":[],"statements":[{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"name":"allowed","nodeType":"VariableDeclaration","scope":1403,"src":"20975:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint","nodeType":"ElementaryTypeName","src":"20975:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1209,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1204,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"21022:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21014:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21014:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1206,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"21029:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1207,"name":"mintAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"21037:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1201,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"20990:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mintAllowed","nodeType":"MemberAccess","referencedDeclaration":4182,"src":"20990:23:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) external returns (uint256)"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"20990:58:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20975:73:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1210,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"21062:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21073:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21062:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1224,"nodeType":"IfStatement","src":"21058:143:0","trueBody":{"id":1223,"nodeType":"Block","src":"21076:125:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1214,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"21109:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21109:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1216,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"21138:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MINT_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21138:38:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":1218,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"21178:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1213,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"21098:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21098:88:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21188:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1221,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21097:93:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":1198,"id":1222,"nodeType":"Return","src":"21090:100:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1225,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"21286:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1226,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"21308:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21308:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21286:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1239,"nodeType":"IfStatement","src":"21282:143:0","trueBody":{"id":1238,"nodeType":"Block","src":"21326:99:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1230,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"21353:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21353:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1232,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"21377:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MINT_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21377:32:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1229,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"21348:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21348:62:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21412:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21347:67:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":1198,"id":1237,"nodeType":"Return","src":"21340:74:0"}]}},{"assignments":[1241],"declarations":[{"constant":false,"id":1241,"name":"vars","nodeType":"VariableDeclaration","scope":1403,"src":"21435:25:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars"},"typeName":{"contractScope":null,"id":1240,"name":"MintLocalVars","nodeType":"UserDefinedTypeName","referencedDeclaration":1188,"src":"21435:13:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_storage_ptr","typeString":"struct CToken.MintLocalVars"}},"value":null,"visibility":"internal"}],"id":1242,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"21435:25:0"},{"expression":{"argumentTypes":null,"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1243,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"21472:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"21472:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1246,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"21486:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1247,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"exchangeRateMantissa","nodeType":"MemberAccess","referencedDeclaration":1179,"src":"21486:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1248,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"21471:41:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1249,"name":"exchangeRateStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"21515:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function () view returns (enum CarefulMath.MathError,uint256)"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21515:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"21471:72:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1252,"nodeType":"ExpressionStatement","src":"21471:72:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1253,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"21557:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"21557:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1255,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"21573:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21573:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"21557:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1272,"nodeType":"IfStatement","src":"21553:169:0","trueBody":{"id":1271,"nodeType":"Block","src":"21593:129:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1259,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"21626:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21626:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1261,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"21644:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MINT_EXCHANGE_RATE_READ_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"21644:42:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1264,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"21693:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1265,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"21693:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21688:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21688:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1258,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"21615:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"21615:92:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":1268,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21709:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1269,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"21614:97:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":1198,"id":1270,"nodeType":"Return","src":"21607:104:0"}]}},{"expression":{"argumentTypes":null,"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1273,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22316:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1275,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"actualMintAmount","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"22316:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1277,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"22353:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1278,"name":"mintAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"22361:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1276,"name":"doTransferIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"22340:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22340:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22316:56:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1281,"nodeType":"ExpressionStatement","src":"22316:56:0"},{"expression":{"argumentTypes":null,"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1282,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22559:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"22559:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1285,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22573:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1286,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"22573:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1287,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"22558:31:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1289,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22615:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1290,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualMintAmount","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"22615:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1292,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22653:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"exchangeRateMantissa","nodeType":"MemberAccess","referencedDeclaration":1179,"src":"22653:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1291,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"22638:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"22638:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}],"id":1288,"name":"divScalarByExpTruncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"22592:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22592:89:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"22558:123:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1297,"nodeType":"ExpressionStatement","src":"22558:123:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1299,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22699:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"22699:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1301,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"22715:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"22715:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"22699:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d494e545f45584348414e47455f43414c43554c4154494f4e5f4641494c4544","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22735:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_c48189364ca7cfdfc0faf603c41135e9f68c6122de6aa1a6596ee6aadc6c96f3","typeString":"literal_string \"MINT_EXCHANGE_CALCULATION_FAILED\""},"value":"MINT_EXCHANGE_CALCULATION_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c48189364ca7cfdfc0faf603c41135e9f68c6122de6aa1a6596ee6aadc6c96f3","typeString":"literal_string \"MINT_EXCHANGE_CALCULATION_FAILED\""}],"id":1298,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"22691:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"22691:79:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1306,"nodeType":"ExpressionStatement","src":"22691:79:0"},{"expression":{"argumentTypes":null,"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1307,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23030:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"23030:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1310,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23044:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"totalSupplyNew","nodeType":"MemberAccess","referencedDeclaration":1183,"src":"23044:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1312,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"23029:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1314,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"23075:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1315,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23088:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"23088:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1313,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"23067:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23067:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"23029:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1319,"nodeType":"ExpressionStatement","src":"23029:75:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1321,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23122:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"23122:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1323,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"23138:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"23138:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"23122:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d494e545f4e45575f544f54414c5f535550504c595f43414c43554c4154494f4e5f4641494c4544","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23158:42:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_dbbd05cd7b16e0fadd5c20b6eb5d174d07fdf1edd0fb487e7b655bb2883b04f6","typeString":"literal_string \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\""},"value":"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_dbbd05cd7b16e0fadd5c20b6eb5d174d07fdf1edd0fb487e7b655bb2883b04f6","typeString":"literal_string \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\""}],"id":1320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"23114:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23114:87:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1328,"nodeType":"ExpressionStatement","src":"23114:87:0"},{"expression":{"argumentTypes":null,"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1329,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23213:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"23213:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1332,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23227:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountTokensNew","nodeType":"MemberAccess","referencedDeclaration":1185,"src":"23227:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1334,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"23212:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1336,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"23260:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1338,"indexExpression":{"argumentTypes":null,"id":1337,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23274:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23260:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1339,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23283:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"23283:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1335,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"23252:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23252:47:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"23212:87:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1343,"nodeType":"ExpressionStatement","src":"23212:87:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1345,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23317:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1177,"src":"23317:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1347,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"23333:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1348,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"23333:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"23317:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4d494e545f4e45575f4143434f554e545f42414c414e43455f43414c43554c4154494f4e5f4641494c4544","id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"23353:45:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_7ab8796f30f3336ad44796782c8c52d9d5bc7aa2d8a134f8482aee6e4a194a95","typeString":"literal_string \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\""},"value":"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7ab8796f30f3336ad44796782c8c52d9d5bc7aa2d8a134f8482aee6e4a194a95","typeString":"literal_string \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\""}],"id":1344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"23309:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1351,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23309:90:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1352,"nodeType":"ExpressionStatement","src":"23309:90:0"},{"expression":{"argumentTypes":null,"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1353,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"23475:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1354,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23489:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalSupplyNew","nodeType":"MemberAccess","referencedDeclaration":1183,"src":"23489:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23475:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1357,"nodeType":"ExpressionStatement","src":"23475:33:0"},{"expression":{"argumentTypes":null,"id":1363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1358,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"23518:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1360,"indexExpression":{"argumentTypes":null,"id":1359,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23532:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23518:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1361,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23542:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1362,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountTokensNew","nodeType":"MemberAccess","referencedDeclaration":1185,"src":"23542:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23518:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1364,"nodeType":"ExpressionStatement","src":"23518:45:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1366,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23641:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1367,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23649:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualMintAmount","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"23649:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1369,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23672:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"23672:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1365,"name":"Mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3587,"src":"23636:4:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23636:52:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1372,"nodeType":"EmitStatement","src":"23631:57:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1375,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"23720:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23712:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23712:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1377,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23727:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1378,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23735:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"23735:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1373,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"23703:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23703:48:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1381,"nodeType":"EmitStatement","src":"23698:53:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1386,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"23832:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23824:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23824:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1388,"name":"minter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"23839:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1389,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23847:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualMintAmount","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"23847:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1391,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23870:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1392,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mintTokens","nodeType":"MemberAccess","referencedDeclaration":1181,"src":"23870:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1382,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"23801:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"mintVerify","nodeType":"MemberAccess","referencedDeclaration":4193,"src":"23801:22:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) external"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23801:85:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1394,"nodeType":"ExpressionStatement","src":"23801:85:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1396,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"23910:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"23910:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23905:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"23905:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1399,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"23927:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_MintLocalVars_$1188_memory_ptr","typeString":"struct CToken.MintLocalVars memory"}},"id":1400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualMintAmount","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"23927:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1401,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23904:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":1198,"id":1402,"nodeType":"Return","src":"23897:52:0"}]},"documentation":"@notice User supplies assets into the market and receives cTokens in exchange\n@dev Assumes interest has already been accrued up to the current block\n@param minter The address of the account which is supplying the assets\n@param mintAmount The amount of the underlying asset to supply\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.","implemented":true,"kind":"function","modifiers":[],"name":"mintFresh","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"name":"minter","nodeType":"VariableDeclaration","scope":1404,"src":"20863:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"20863:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":1192,"name":"mintAmount","nodeType":"VariableDeclaration","scope":1404,"src":"20879:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint","nodeType":"ElementaryTypeName","src":"20879:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"20862:33:0"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"name":"","nodeType":"VariableDeclaration","scope":1404,"src":"20914:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1194,"name":"uint","nodeType":"ElementaryTypeName","src":"20914:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1197,"name":"","nodeType":"VariableDeclaration","scope":1404,"src":"20920:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1196,"name":"uint","nodeType":"ElementaryTypeName","src":"20920:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"20913:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1442,"nodeType":"FunctionDefinition","src":"24299:519:0","nodes":[],"body":{"id":1441,"nodeType":"Block","src":"24379:439:0","nodes":[],"statements":[{"assignments":[1414],"declarations":[{"constant":false,"id":1414,"name":"error","nodeType":"VariableDeclaration","scope":1441,"src":"24389:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint","nodeType":"ElementaryTypeName","src":"24389:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1417,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1415,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"24402:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24402:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24389:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1418,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"24432:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1420,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"24446:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"24446:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24441:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24441:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24432:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1433,"nodeType":"IfStatement","src":"24428:246:0","trueBody":{"id":1432,"nodeType":"Block","src":"24463:211:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1426,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"24613:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1425,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"24607:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24607:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1428,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"24621:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1429,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"24621:41:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1424,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"24602:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24602:61:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1412,"id":1431,"nodeType":"Return","src":"24595:68:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1435,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"24783:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"24783:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1437,"name":"redeemTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1406,"src":"24795:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24809:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1434,"name":"redeemFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"24771:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address payable,uint256,uint256) returns (uint256)"}},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"24771:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1412,"id":1440,"nodeType":"Return","src":"24764:47:0"}]},"documentation":"@notice Sender redeems cTokens in exchange for the underlying asset\n@dev Accrues interest whether or not the operation succeeds, unless reverted\n@param redeemTokens The number of cTokens to redeem into underlying\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1409,"modifierName":{"argumentTypes":null,"id":1408,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"24351:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"24351:12:0"}],"name":"redeemInternal","parameters":{"id":1407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1406,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":1442,"src":"24323:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1405,"name":"uint","nodeType":"ElementaryTypeName","src":"24323:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"24322:19:0"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"name":"","nodeType":"VariableDeclaration","scope":1442,"src":"24373:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint","nodeType":"ElementaryTypeName","src":"24373:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"24372:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1480,"nodeType":"FunctionDefinition","src":"25190:529:0","nodes":[],"body":{"id":1479,"nodeType":"Block","src":"25280:439:0","nodes":[],"statements":[{"assignments":[1452],"declarations":[{"constant":false,"id":1452,"name":"error","nodeType":"VariableDeclaration","scope":1479,"src":"25290:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1451,"name":"uint","nodeType":"ElementaryTypeName","src":"25290:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1455,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1453,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"25303:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25303:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25290:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1456,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"25333:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1458,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"25347:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25347:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25342:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25342:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25333:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1471,"nodeType":"IfStatement","src":"25329:246:0","trueBody":{"id":1470,"nodeType":"Block","src":"25364:211:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1464,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"25514:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1463,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"25508:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25508:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1466,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"25522:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25522:41:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1462,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"25503:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25503:61:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1450,"id":1469,"nodeType":"Return","src":"25496:68:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1473,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"25684:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"25684:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"hexValue":"30","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25696:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"argumentTypes":null,"id":1476,"name":"redeemAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"25699:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1472,"name":"redeemFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"25672:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address payable,uint256,uint256) returns (uint256)"}},"id":1477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"25672:40:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1450,"id":1478,"nodeType":"Return","src":"25665:47:0"}]},"documentation":"@notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n@dev Accrues interest whether or not the operation succeeds, unless reverted\n@param redeemAmount The amount of underlying to receive from redeeming cTokens\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1447,"modifierName":{"argumentTypes":null,"id":1446,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"25252:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"25252:12:0"}],"name":"redeemUnderlyingInternal","parameters":{"id":1445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1444,"name":"redeemAmount","nodeType":"VariableDeclaration","scope":1480,"src":"25224:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1443,"name":"uint","nodeType":"ElementaryTypeName","src":"25224:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"25223:19:0"},"returnParameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"name":"","nodeType":"VariableDeclaration","scope":1480,"src":"25274:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1448,"name":"uint","nodeType":"ElementaryTypeName","src":"25274:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"25273:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1495,"nodeType":"StructDefinition","src":"25725:225:0","nodes":[],"canonicalName":"CToken.RedeemLocalVars","members":[{"constant":false,"id":1482,"name":"err","nodeType":"VariableDeclaration","scope":1495,"src":"25758:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},"typeName":{"contractScope":null,"id":1481,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4731,"src":"25758:5:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":1484,"name":"mathErr","nodeType":"VariableDeclaration","scope":1495,"src":"25777:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":1483,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"25777:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":1486,"name":"exchangeRateMantissa","nodeType":"VariableDeclaration","scope":1495,"src":"25804:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint","nodeType":"ElementaryTypeName","src":"25804:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1488,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":1495,"src":"25839:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1487,"name":"uint","nodeType":"ElementaryTypeName","src":"25839:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1490,"name":"redeemAmount","nodeType":"VariableDeclaration","scope":1495,"src":"25866:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint","nodeType":"ElementaryTypeName","src":"25866:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1492,"name":"totalSupplyNew","nodeType":"VariableDeclaration","scope":1495,"src":"25893:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1491,"name":"uint","nodeType":"ElementaryTypeName","src":"25893:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1494,"name":"accountTokensNew","nodeType":"VariableDeclaration","scope":1495,"src":"25922:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1493,"name":"uint","nodeType":"ElementaryTypeName","src":"25922:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"RedeemLocalVars","scope":3504,"visibility":"public"},{"id":1802,"nodeType":"FunctionDefinition","src":"26588:4504:0","nodes":[],"body":{"id":1801,"nodeType":"Block","src":"26701:4391:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1507,"name":"redeemTokensIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"26719:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26737:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26719:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1510,"name":"redeemAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"26742:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26760:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26742:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"26719:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6f6e65206f662072656465656d546f6b656e73496e206f722072656465656d416d6f756e74496e206d757374206265207a65726f","id":1514,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"26763:54:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_e7cef2e7b515a83b650bc43dbe7230ede3601779d8be25fbf237261dccd3d9f2","typeString":"literal_string \"one of redeemTokensIn or redeemAmountIn must be zero\""},"value":"one of redeemTokensIn or redeemAmountIn must be zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7cef2e7b515a83b650bc43dbe7230ede3601779d8be25fbf237261dccd3d9f2","typeString":"literal_string \"one of redeemTokensIn or redeemAmountIn must be zero\""}],"id":1506,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"26711:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26711:107:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1516,"nodeType":"ExpressionStatement","src":"26711:107:0"},{"assignments":[1518],"declarations":[{"constant":false,"id":1518,"name":"vars","nodeType":"VariableDeclaration","scope":1801,"src":"26829:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars"},"typeName":{"contractScope":null,"id":1517,"name":"RedeemLocalVars","nodeType":"UserDefinedTypeName","referencedDeclaration":1495,"src":"26829:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_storage_ptr","typeString":"struct CToken.RedeemLocalVars"}},"value":null,"visibility":"internal"}],"id":1519,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"26829:27:0"},{"expression":{"argumentTypes":null,"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1520,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"26927:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1522,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"26927:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1523,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"26941:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1524,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"exchangeRateMantissa","nodeType":"MemberAccess","referencedDeclaration":1486,"src":"26941:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1525,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"26926:41:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1526,"name":"exchangeRateStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"26970:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function () view returns (enum CarefulMath.MathError,uint256)"}},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"26970:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"26926:72:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1529,"nodeType":"ExpressionStatement","src":"26926:72:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1530,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27012:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"27012:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1532,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"27028:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27028:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"27012:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1547,"nodeType":"IfStatement","src":"27008:166:0","trueBody":{"id":1546,"nodeType":"Block","src":"27048:126:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1536,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"27080:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27080:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1538,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"27098:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_EXCHANGE_RATE_READ_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27098:44:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1541,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27149:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1542,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"27149:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1540,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27144:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27144:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1535,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"27069:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27069:94:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1545,"nodeType":"Return","src":"27062:101:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1548,"name":"redeemTokensIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"27225:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27242:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27225:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1630,"nodeType":"Block","src":"27870:616:0","statements":[{"expression":{"argumentTypes":null,"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1591,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28113:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1593,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"28113:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1594,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28127:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"28127:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1596,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"28112:33:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1598,"name":"redeemAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"28171:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1600,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28202:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"exchangeRateMantissa","nodeType":"MemberAccess","referencedDeclaration":1486,"src":"28202:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1599,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"28187:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"28187:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}],"id":1597,"name":"divScalarByExpTruncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5253,"src":"28148:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28148:82:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"28112:118:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1605,"nodeType":"ExpressionStatement","src":"28112:118:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1606,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28248:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1607,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"28248:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1608,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"28264:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28264:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"28248:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1623,"nodeType":"IfStatement","src":"28244:183:0","trueBody":{"id":1622,"nodeType":"Block","src":"28284:143:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1612,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"28320:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28320:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1614,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"28338:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28338:53:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1617,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28398:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1618,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"28398:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28393:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28393:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1611,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"28309:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28309:103:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1621,"nodeType":"Return","src":"28302:110:0"}]}},{"expression":{"argumentTypes":null,"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1624,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28441:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1626,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"28441:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1627,"name":"redeemAmountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1501,"src":"28461:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28441:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1629,"nodeType":"ExpressionStatement","src":"28441:34:0"}]},"id":1631,"nodeType":"IfStatement","src":"27221:1265:0","trueBody":{"id":1590,"nodeType":"Block","src":"27245:619:0","statements":[{"expression":{"argumentTypes":null,"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1551,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27495:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1553,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"27495:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":1554,"name":"redeemTokensIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"27515:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27495:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1556,"nodeType":"ExpressionStatement","src":"27495:34:0"},{"expression":{"argumentTypes":null,"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1557,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27545:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1559,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"27545:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1560,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27559:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"27559:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1562,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"27544:33:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1565,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27613:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1566,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"exchangeRateMantissa","nodeType":"MemberAccess","referencedDeclaration":1486,"src":"27613:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1564,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"27598:3:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"27598:42:0","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":1568,"name":"redeemTokensIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"27642:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1563,"name":"mulScalarTruncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5095,"src":"27580:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27580:77:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"27544:113:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1571,"nodeType":"ExpressionStatement","src":"27544:113:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1572,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27675:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1573,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"27675:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1574,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"27691:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27691:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"27675:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1589,"nodeType":"IfStatement","src":"27671:183:0","trueBody":{"id":1588,"nodeType":"Block","src":"27711:143:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1578,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"27747:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27747:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1580,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"27765:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"27765:53:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1583,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"27825:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1584,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"27825:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"27820:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27820:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1577,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"27736:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"27736:103:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1587,"nodeType":"Return","src":"27729:110:0"}]}}]}},{"assignments":[1633],"declarations":[{"constant":false,"id":1633,"name":"allowed","nodeType":"VariableDeclaration","scope":1801,"src":"28537:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1632,"name":"uint","nodeType":"ElementaryTypeName","src":"28537:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1643,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1637,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"28586:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28578:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28578:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1639,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"28593:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1640,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"28603:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"28603:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1634,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"28552:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"redeemAllowed","nodeType":"MemberAccess","referencedDeclaration":4204,"src":"28552:25:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) external returns (uint256)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28552:69:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"28537:84:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1644,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"28635:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28646:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"28635:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1656,"nodeType":"IfStatement","src":"28631:140:0","trueBody":{"id":1655,"nodeType":"Block","src":"28649:122:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1648,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"28681:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28681:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1650,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"28710:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28710:40:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":1652,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1633,"src":"28752:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1647,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"28670:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28670:90:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1654,"nodeType":"Return","src":"28663:97:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1657,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"28856:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1658,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"28878:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28878:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28856:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1669,"nodeType":"IfStatement","src":"28852:140:0","trueBody":{"id":1668,"nodeType":"Block","src":"28896:96:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1662,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"28922:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28922:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1664,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"28946:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"28946:34:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1661,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"28917:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"28917:64:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1667,"nodeType":"Return","src":"28910:71:0"}]}},{"expression":{"argumentTypes":null,"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1670,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29243:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1672,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29243:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1673,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29257:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1674,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"totalSupplyNew","nodeType":"MemberAccess","referencedDeclaration":1492,"src":"29257:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1675,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"29242:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1677,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"29288:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1678,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29301:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1679,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"29301:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1676,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"29280:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29280:39:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"29242:77:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1682,"nodeType":"ExpressionStatement","src":"29242:77:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1683,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29333:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1684,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29333:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1685,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"29349:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29349:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"29333:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1700,"nodeType":"IfStatement","src":"29329:176:0","trueBody":{"id":1699,"nodeType":"Block","src":"29369:136:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1689,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"29401:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29401:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1691,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"29419:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29419:54:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1694,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29480:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29480:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1693,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29475:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29475:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1688,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"29390:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29390:104:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1698,"nodeType":"Return","src":"29383:111:0"}]}},{"expression":{"argumentTypes":null,"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1701,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29516:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1703,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29516:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1704,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29530:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1705,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountTokensNew","nodeType":"MemberAccess","referencedDeclaration":1494,"src":"29530:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1706,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"29515:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1708,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"29563:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1710,"indexExpression":{"argumentTypes":null,"id":1709,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"29577:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29563:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1711,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29588:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"29588:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1707,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"29555:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29555:51:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"29515:91:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1715,"nodeType":"ExpressionStatement","src":"29515:91:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1716,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29620:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29620:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1718,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"29636:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29636:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"29620:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1733,"nodeType":"IfStatement","src":"29616:179:0","trueBody":{"id":1732,"nodeType":"Block","src":"29656:139:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1722,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"29688:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29688:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1724,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"29706:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29706:57:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1727,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29770:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1484,"src":"29770:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1726,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"29765:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29765:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1721,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"29677:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29677:107:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1731,"nodeType":"Return","src":"29670:114:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1734,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"29873:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29873:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1736,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"29890:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1737,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"29890:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29873:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1747,"nodeType":"IfStatement","src":"29869:153:0","trueBody":{"id":1746,"nodeType":"Block","src":"29909:113:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1740,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"29935:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TOKEN_INSUFFICIENT_CASH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29935:29:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1742,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"29966:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDEEM_TRANSFER_OUT_NOT_POSSIBLE","nodeType":"MemberAccess","referencedDeclaration":null,"src":"29966:44:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1739,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"29930:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"29930:81:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1745,"nodeType":"Return","src":"29923:88:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1749,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"30520:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1750,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30530:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"30530:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1748,"name":"doTransferOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"30506:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (address payable,uint256)"}},"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30506:42:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1753,"nodeType":"ExpressionStatement","src":"30506:42:0"},{"expression":{"argumentTypes":null,"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":1754,"name":"totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"30624:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1755,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30638:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalSupplyNew","nodeType":"MemberAccess","referencedDeclaration":1492,"src":"30638:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30624:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1758,"nodeType":"ExpressionStatement","src":"30624:33:0"},{"expression":{"argumentTypes":null,"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":1759,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"30667:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1761,"indexExpression":{"argumentTypes":null,"id":1760,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"30681:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"30667:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1762,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30693:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountTokensNew","nodeType":"MemberAccess","referencedDeclaration":1494,"src":"30693:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30667:47:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1765,"nodeType":"ExpressionStatement","src":"30667:47:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1767,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"30798:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1769,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"30816:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30808:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30808:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1771,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30823:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"30823:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1766,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"30789:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30789:52:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1774,"nodeType":"EmitStatement","src":"30784:57:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1776,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"30863:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1777,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30873:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"30873:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1779,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"30892:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"30892:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1775,"name":"Redeem","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"30856:6:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30856:54:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1782,"nodeType":"EmitStatement","src":"30851:59:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1787,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"30993:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1786,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30985:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30985:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1789,"name":"redeemer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1497,"src":"31000:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1790,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"31010:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1791,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemAmount","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"31010:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1792,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"31029:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RedeemLocalVars_$1495_memory_ptr","typeString":"struct CToken.RedeemLocalVars memory"}},"id":1793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"redeemTokens","nodeType":"MemberAccess","referencedDeclaration":1488,"src":"31029:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1783,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"30960:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"redeemVerify","nodeType":"MemberAccess","referencedDeclaration":4215,"src":"30960:24:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) external"}},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"30960:87:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1795,"nodeType":"ExpressionStatement","src":"30960:87:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1797,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"31070:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31070:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31065:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31065:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1505,"id":1800,"nodeType":"Return","src":"31058:27:0"}]},"documentation":"@notice User redeems cTokens in exchange for the underlying asset\n@dev Assumes interest has already been accrued up to the current block\n@param redeemer The address of the account which is redeeming the tokens\n@param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n@param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"redeemFresh","parameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1497,"name":"redeemer","nodeType":"VariableDeclaration","scope":1802,"src":"26609:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1496,"name":"address","nodeType":"ElementaryTypeName","src":"26609:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"},{"constant":false,"id":1499,"name":"redeemTokensIn","nodeType":"VariableDeclaration","scope":1802,"src":"26635:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1498,"name":"uint","nodeType":"ElementaryTypeName","src":"26635:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1501,"name":"redeemAmountIn","nodeType":"VariableDeclaration","scope":1802,"src":"26656:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1500,"name":"uint","nodeType":"ElementaryTypeName","src":"26656:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"26608:68:0"},"returnParameters":{"id":1505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1504,"name":"","nodeType":"VariableDeclaration","scope":1802,"src":"26695:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1503,"name":"uint","nodeType":"ElementaryTypeName","src":"26695:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"26694:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1839,"nodeType":"FunctionDefinition","src":"31353:516:0","nodes":[],"body":{"id":1838,"nodeType":"Block","src":"31433:436:0","nodes":[],"statements":[{"assignments":[1812],"declarations":[{"constant":false,"id":1812,"name":"error","nodeType":"VariableDeclaration","scope":1838,"src":"31443:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1811,"name":"uint","nodeType":"ElementaryTypeName","src":"31443:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1815,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1813,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"31456:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31456:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31443:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1816,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"31486:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1818,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"31500:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31500:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":1817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31495:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31495:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31486:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1831,"nodeType":"IfStatement","src":"31482:246:0","trueBody":{"id":1830,"nodeType":"Block","src":"31517:211:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1824,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"31667:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1823,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"31661:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31661:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1826,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"31675:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31675:41:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1822,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"31656:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31656:61:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1810,"id":1829,"nodeType":"Return","src":"31649:68:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1833,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"31837:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"31837:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1835,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1804,"src":"31849:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1832,"name":"borrowFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"31825:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address payable,uint256) returns (uint256)"}},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"31825:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1810,"id":1837,"nodeType":"Return","src":"31818:44:0"}]},"documentation":"@notice Sender borrows assets from the protocol to their own address\n@param borrowAmount The amount of the underlying asset to borrow\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":1807,"modifierName":{"argumentTypes":null,"id":1806,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"31405:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"31405:12:0"}],"name":"borrowInternal","parameters":{"id":1805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1804,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":1839,"src":"31377:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1803,"name":"uint","nodeType":"ElementaryTypeName","src":"31377:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"31376:19:0"},"returnParameters":{"id":1810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1809,"name":"","nodeType":"VariableDeclaration","scope":1839,"src":"31427:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1808,"name":"uint","nodeType":"ElementaryTypeName","src":"31427:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"31426:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":1848,"nodeType":"StructDefinition","src":"31875:148:0","nodes":[],"canonicalName":"CToken.BorrowLocalVars","members":[{"constant":false,"id":1841,"name":"mathErr","nodeType":"VariableDeclaration","scope":1848,"src":"31908:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":1840,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"31908:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":1843,"name":"accountBorrows","nodeType":"VariableDeclaration","scope":1848,"src":"31935:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1842,"name":"uint","nodeType":"ElementaryTypeName","src":"31935:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1845,"name":"accountBorrowsNew","nodeType":"VariableDeclaration","scope":1848,"src":"31964:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint","nodeType":"ElementaryTypeName","src":"31964:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":1847,"name":"totalBorrowsNew","nodeType":"VariableDeclaration","scope":1848,"src":"31996:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1846,"name":"uint","nodeType":"ElementaryTypeName","src":"31996:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"BorrowLocalVars","scope":3504,"visibility":"public"},{"id":2050,"nodeType":"FunctionDefinition","src":"32282:2971:0","nodes":[],"body":{"id":2049,"nodeType":"Block","src":"32372:2881:0","nodes":[],"statements":[{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"name":"allowed","nodeType":"VariableDeclaration","scope":2049,"src":"32423:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint","nodeType":"ElementaryTypeName","src":"32423:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":1867,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1862,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"32472:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":1861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32464:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32464:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":1864,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"32479:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":1865,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"32489:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":1859,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"32438:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"borrowAllowed","nodeType":"MemberAccess","referencedDeclaration":4226,"src":"32438:25:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) external returns (uint256)"}},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32438:64:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32423:79:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1868,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"32516:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":1869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32527:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"32516:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1880,"nodeType":"IfStatement","src":"32512:140:0","trueBody":{"id":1879,"nodeType":"Block","src":"32530:122:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1872,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"32562:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1873,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"32562:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1874,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"32591:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"32591:40:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":1876,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"32633:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1871,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"32551:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32551:90:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1878,"nodeType":"Return","src":"32544:97:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":1881,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"32737:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1882,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"32759:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32759:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32737:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1893,"nodeType":"IfStatement","src":"32733:140:0","trueBody":{"id":1892,"nodeType":"Block","src":"32777:96:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1886,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"32803:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"32803:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1888,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"32827:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"32827:34:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1885,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"32798:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32798:64:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1891,"nodeType":"Return","src":"32791:71:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":1894,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"32962:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"32962:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":1896,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"32979:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32962:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1906,"nodeType":"IfStatement","src":"32958:141:0","trueBody":{"id":1905,"nodeType":"Block","src":"32993:106:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1899,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"33019:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TOKEN_INSUFFICIENT_CASH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33019:29:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1901,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"33050:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_CASH_NOT_AVAILABLE","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33050:37:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":1898,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"33014:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33014:74:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1904,"nodeType":"Return","src":"33007:81:0"}]}},{"assignments":[1908],"declarations":[{"constant":false,"id":1908,"name":"vars","nodeType":"VariableDeclaration","scope":2049,"src":"33109:27:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars"},"typeName":{"contractScope":null,"id":1907,"name":"BorrowLocalVars","nodeType":"UserDefinedTypeName","referencedDeclaration":1848,"src":"33109:15:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_storage_ptr","typeString":"struct CToken.BorrowLocalVars"}},"value":null,"visibility":"internal"}],"id":1909,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"33109:27:0"},{"expression":{"argumentTypes":null,"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1910,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33380:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1912,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33380:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1913,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33394:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountBorrows","nodeType":"MemberAccess","referencedDeclaration":1843,"src":"33394:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1915,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"33379:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1917,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"33445:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":1916,"name":"borrowBalanceStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"33417:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (address) view returns (enum CarefulMath.MathError,uint256)"}},"id":1918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33417:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"33379:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1920,"nodeType":"ExpressionStatement","src":"33379:75:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1921,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33468:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1922,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33468:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1923,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"33484:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1924,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33484:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"33468:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1938,"nodeType":"IfStatement","src":"33464:179:0","trueBody":{"id":1937,"nodeType":"Block","src":"33504:139:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1927,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"33536:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33536:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1929,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"33554:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33554:57:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1932,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33618:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33618:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1931,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33613:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33613:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1926,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"33525:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33525:107:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1936,"nodeType":"Return","src":"33518:114:0"}]}},{"expression":{"argumentTypes":null,"id":1950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1939,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33654:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33654:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1942,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33668:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1943,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1845,"src":"33668:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1944,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"33653:38:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1946,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33702:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrows","nodeType":"MemberAccess","referencedDeclaration":1843,"src":"33702:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1948,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"33723:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1945,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"33694:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33694:42:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"33653:83:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1951,"nodeType":"ExpressionStatement","src":"33653:83:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1952,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33750:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33750:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1954,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"33766:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33766:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"33750:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1969,"nodeType":"IfStatement","src":"33746:186:0","trueBody":{"id":1968,"nodeType":"Block","src":"33786:146:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1958,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"33818:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33818:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1960,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"33836:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"33836:64:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1963,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33907:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33907:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"33902:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33902:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1957,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"33807:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33807:114:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1967,"nodeType":"Return","src":"33800:121:0"}]}},{"expression":{"argumentTypes":null,"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1970,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33943:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"33943:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1973,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"33957:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1974,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1847,"src":"33957:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1975,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"33942:36:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":1977,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"33989:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":1978,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"34003:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1976,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"33981:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"33981:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"33942:74:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1981,"nodeType":"ExpressionStatement","src":"33942:74:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":1986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1982,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"34030:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1983,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"34030:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1984,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"34046:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"34046:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"34030:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":1999,"nodeType":"IfStatement","src":"34026:177:0","trueBody":{"id":1998,"nodeType":"Block","src":"34066:137:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1988,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"34098:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"34098:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1990,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"34116:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":1991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"34116:55:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":1993,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"34178:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":1994,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":1841,"src":"34178:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":1992,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"34173:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34173:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1987,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"34087:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34087:105:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":1997,"nodeType":"Return","src":"34080:112:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2001,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"34697:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2002,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"34707:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2000,"name":"doTransferOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"34683:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (address payable,uint256)"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"34683:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2004,"nodeType":"ExpressionStatement","src":"34683:37:0"},{"expression":{"argumentTypes":null,"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2005,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"34800:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":2007,"indexExpression":{"argumentTypes":null,"id":2006,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"34815:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"34800:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"id":2008,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"principal","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"34800:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2009,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"34837:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":2010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1845,"src":"34837:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34800:59:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ExpressionStatement","src":"34800:59:0"},{"expression":{"argumentTypes":null,"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2013,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"34869:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":2015,"indexExpression":{"argumentTypes":null,"id":2014,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"34884:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"34869:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"id":2016,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"interestIndex","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"34869:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2017,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"34910:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34869:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2019,"nodeType":"ExpressionStatement","src":"34869:52:0"},{"expression":{"argumentTypes":null,"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2020,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"34931:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2021,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"34946:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":2022,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1847,"src":"34946:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"34931:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2024,"nodeType":"ExpressionStatement","src":"34931:35:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2026,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"35026:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2027,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"35036:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2028,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"35050:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":2029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1845,"src":"35050:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2030,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"35074:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowLocalVars_$1848_memory_ptr","typeString":"struct CToken.BorrowLocalVars memory"}},"id":2031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":1847,"src":"35074:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2025,"name":"Borrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3605,"src":"35019:6:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":2032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35019:76:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2033,"nodeType":"EmitStatement","src":"35014:81:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2038,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"35178:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2037,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35170:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35170:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2040,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"35185:8:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2041,"name":"borrowAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"35195:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2034,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"35145:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"borrowVerify","nodeType":"MemberAccess","referencedDeclaration":4235,"src":"35145:24:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35145:63:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2043,"nodeType":"ExpressionStatement","src":"35145:63:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2045,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"35231:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"35231:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35226:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35226:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1856,"id":2048,"nodeType":"Return","src":"35219:27:0"}]},"documentation":"@notice Users borrow assets from the protocol to their own address\n@param borrowAmount The amount of the underlying asset to borrow\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"borrowFresh","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"name":"borrower","nodeType":"VariableDeclaration","scope":2050,"src":"32303:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1849,"name":"address","nodeType":"ElementaryTypeName","src":"32303:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"},{"constant":false,"id":1852,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":2050,"src":"32329:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint","nodeType":"ElementaryTypeName","src":"32329:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"32302:45:0"},"returnParameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1855,"name":"","nodeType":"VariableDeclaration","scope":2050,"src":"32366:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1854,"name":"uint","nodeType":"ElementaryTypeName","src":"32366:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"32365:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2093,"nodeType":"FunctionDefinition","src":"35499:564:0","nodes":[],"body":{"id":2092,"nodeType":"Block","src":"35589:474:0","nodes":[],"statements":[{"assignments":[2062],"declarations":[{"constant":false,"id":2062,"name":"error","nodeType":"VariableDeclaration","scope":2092,"src":"35599:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint","nodeType":"ElementaryTypeName","src":"35599:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2065,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2063,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"35612:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35612:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"35599:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2066,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"35642:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2068,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"35656:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2069,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"35656:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"35651:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35651:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"35642:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2083,"nodeType":"IfStatement","src":"35638:257:0","trueBody":{"id":2082,"nodeType":"Block","src":"35673:222:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2074,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2062,"src":"35824:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2073,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"35818:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35818:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2076,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"35832:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2077,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REPAY_BORROW_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"35832:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2072,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"35813:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"35813:67:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"35882:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2080,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"35812:72:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2060,"id":2081,"nodeType":"Return","src":"35805:79:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2085,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"36020:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"36020:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2087,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"36032:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"36032:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2089,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"36044:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2084,"name":"repayBorrowFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"36003:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,uint256) returns (uint256,uint256)"}},"id":2090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36003:53:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2060,"id":2091,"nodeType":"Return","src":"35996:60:0"}]},"documentation":"@notice Sender repays their own borrow\n@param repayAmount The amount to repay\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2055,"modifierName":{"argumentTypes":null,"id":2054,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"35555:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"35555:12:0"}],"name":"repayBorrowInternal","parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2093,"src":"35528:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2051,"name":"uint","nodeType":"ElementaryTypeName","src":"35528:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"35527:18:0"},"returnParameters":{"id":2060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"name":"","nodeType":"VariableDeclaration","scope":2093,"src":"35577:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2056,"name":"uint","nodeType":"ElementaryTypeName","src":"35577:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2059,"name":"","nodeType":"VariableDeclaration","scope":2093,"src":"35583:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint","nodeType":"ElementaryTypeName","src":"35583:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"35576:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2137,"nodeType":"FunctionDefinition","src":"36388:586:0","nodes":[],"body":{"id":2136,"nodeType":"Block","src":"36502:472:0","nodes":[],"statements":[{"assignments":[2107],"declarations":[{"constant":false,"id":2107,"name":"error","nodeType":"VariableDeclaration","scope":2136,"src":"36512:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2106,"name":"uint","nodeType":"ElementaryTypeName","src":"36512:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2110,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2108,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"36525:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36525:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"36512:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2111,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"36555:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2113,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"36569:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"36569:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"36564:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36564:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"36555:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2128,"nodeType":"IfStatement","src":"36551:257:0","trueBody":{"id":2127,"nodeType":"Block","src":"36586:222:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2119,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"36737:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"36731:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36731:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2121,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"36745:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REPAY_BEHALF_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"36745:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2117,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"36726:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36726:67:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"36795:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2125,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"36725:72:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2105,"id":2126,"nodeType":"Return","src":"36718:79:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2130,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"36933:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"36933:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2132,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"36945:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2133,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"36955:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2129,"name":"repayBorrowFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"36916:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,uint256) returns (uint256,uint256)"}},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"36916:51:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2105,"id":2135,"nodeType":"Return","src":"36909:58:0"}]},"documentation":"@notice Sender repays a borrow belonging to borrower\n@param borrower the account with the debt being payed off\n@param repayAmount The amount to repay\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2100,"modifierName":{"argumentTypes":null,"id":2099,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"36468:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"36468:12:0"}],"name":"repayBorrowBehalfInternal","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"name":"borrower","nodeType":"VariableDeclaration","scope":2137,"src":"36423:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"36423:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2097,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2137,"src":"36441:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2096,"name":"uint","nodeType":"ElementaryTypeName","src":"36441:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"36422:36:0"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"name":"","nodeType":"VariableDeclaration","scope":2137,"src":"36490:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint","nodeType":"ElementaryTypeName","src":"36490:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2104,"name":"","nodeType":"VariableDeclaration","scope":2137,"src":"36496:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint","nodeType":"ElementaryTypeName","src":"36496:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"36489:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2154,"nodeType":"StructDefinition","src":"36980:258:0","nodes":[],"canonicalName":"CToken.RepayBorrowLocalVars","members":[{"constant":false,"id":2139,"name":"err","nodeType":"VariableDeclaration","scope":2154,"src":"37018:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},"typeName":{"contractScope":null,"id":2138,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4731,"src":"37018:5:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":2141,"name":"mathErr","nodeType":"VariableDeclaration","scope":2154,"src":"37037:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":2140,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"37037:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":2143,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2154,"src":"37064:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint","nodeType":"ElementaryTypeName","src":"37064:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2145,"name":"borrowerIndex","nodeType":"VariableDeclaration","scope":2154,"src":"37090:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2144,"name":"uint","nodeType":"ElementaryTypeName","src":"37090:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2147,"name":"accountBorrows","nodeType":"VariableDeclaration","scope":2154,"src":"37118:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2146,"name":"uint","nodeType":"ElementaryTypeName","src":"37118:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2149,"name":"accountBorrowsNew","nodeType":"VariableDeclaration","scope":2154,"src":"37147:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2148,"name":"uint","nodeType":"ElementaryTypeName","src":"37147:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2151,"name":"totalBorrowsNew","nodeType":"VariableDeclaration","scope":2154,"src":"37179:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2150,"name":"uint","nodeType":"ElementaryTypeName","src":"37179:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2153,"name":"actualRepayAmount","nodeType":"VariableDeclaration","scope":2154,"src":"37209:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2152,"name":"uint","nodeType":"ElementaryTypeName","src":"37209:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"RepayBorrowLocalVars","scope":3504,"visibility":"public"},{"id":2383,"nodeType":"FunctionDefinition","src":"37659:3343:0","nodes":[],"body":{"id":2382,"nodeType":"Block","src":"37766:3236:0","nodes":[],"statements":[{"assignments":[2168],"declarations":[{"constant":false,"id":2168,"name":"allowed","nodeType":"VariableDeclaration","scope":2382,"src":"37822:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2167,"name":"uint","nodeType":"ElementaryTypeName","src":"37822:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2178,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2172,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"37876:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2171,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"37868:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37868:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2174,"name":"payer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"37883:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2175,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"37890:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2176,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"37900:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2169,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"37837:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"repayBorrowAllowed","nodeType":"MemberAccess","referencedDeclaration":4248,"src":"37837:30:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) external returns (uint256)"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37837:75:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"37822:90:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2179,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"37926:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"37937:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"37926:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2193,"nodeType":"IfStatement","src":"37922:151:0","trueBody":{"id":2192,"nodeType":"Block","src":"37940:133:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2183,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"37973:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"37973:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2185,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"38002:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REPAY_BORROW_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38002:46:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":2187,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2168,"src":"38050:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2182,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"37962:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"37962:96:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38060:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2190,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"37961:101:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2166,"id":2191,"nodeType":"Return","src":"37954:108:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2194,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"38158:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2195,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"38180:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38180:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38158:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2208,"nodeType":"IfStatement","src":"38154:151:0","trueBody":{"id":2207,"nodeType":"Block","src":"38198:107:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2199,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"38225:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38225:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2201,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"38249:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REPAY_BORROW_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38249:40:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2198,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"38220:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38220:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38292:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"38219:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2166,"id":2206,"nodeType":"Return","src":"38212:82:0"}]}},{"assignments":[2210],"declarations":[{"constant":false,"id":2210,"name":"vars","nodeType":"VariableDeclaration","scope":2382,"src":"38315:32:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars"},"typeName":{"contractScope":null,"id":2209,"name":"RepayBorrowLocalVars","nodeType":"UserDefinedTypeName","referencedDeclaration":2154,"src":"38315:20:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_storage_ptr","typeString":"struct CToken.RepayBorrowLocalVars"}},"value":null,"visibility":"internal"}],"id":2211,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"38315:32:0"},{"expression":{"argumentTypes":null,"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2212,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38437:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"borrowerIndex","nodeType":"MemberAccess","referencedDeclaration":2145,"src":"38437:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2215,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"38458:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":2217,"indexExpression":{"argumentTypes":null,"id":2216,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"38473:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"38458:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"id":2218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"interestIndex","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"38458:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38437:59:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2220,"nodeType":"ExpressionStatement","src":"38437:59:0"},{"expression":{"argumentTypes":null,"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2221,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38587:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"38587:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2224,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38601:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountBorrows","nodeType":"MemberAccess","referencedDeclaration":2147,"src":"38601:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2226,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"38586:35:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2228,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"38652:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2227,"name":"borrowBalanceStoredInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"38624:27:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (address) view returns (enum CarefulMath.MathError,uint256)"}},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38624:37:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"38586:75:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2231,"nodeType":"ExpressionStatement","src":"38586:75:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2232,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38675:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"38675:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2234,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"38691:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38691:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"38675:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2251,"nodeType":"IfStatement","src":"38671:190:0","trueBody":{"id":2250,"nodeType":"Block","src":"38711:150:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2238,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"38744:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38744:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2240,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"38762:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"38762:63:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2243,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38832:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"38832:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":2242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38827:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38827:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2237,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"38733:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38733:113:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38848:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2248,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"38732:118:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2166,"id":2249,"nodeType":"Return","src":"38725:125:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2252,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"38940:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"38960:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"38961:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"38955:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"38955:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38940:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2272,"nodeType":"Block","src":"39034:55:0","statements":[{"expression":{"argumentTypes":null,"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2266,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"39048:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2268,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"repayAmount","nodeType":"MemberAccess","referencedDeclaration":2143,"src":"39048:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2269,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2160,"src":"39067:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"39048:30:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2271,"nodeType":"ExpressionStatement","src":"39048:30:0"}]},"id":2273,"nodeType":"IfStatement","src":"38936:153:0","trueBody":{"id":2265,"nodeType":"Block","src":"38965:63:0","statements":[{"expression":{"argumentTypes":null,"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2258,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38979:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"repayAmount","nodeType":"MemberAccess","referencedDeclaration":2143,"src":"38979:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2261,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"38998:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrows","nodeType":"MemberAccess","referencedDeclaration":2147,"src":"38998:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"38979:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2264,"nodeType":"ExpressionStatement","src":"38979:38:0"}]}},{"expression":{"argumentTypes":null,"id":2282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2274,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"39649:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2276,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"39649:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2278,"name":"payer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"39687:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2279,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"39694:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"repayAmount","nodeType":"MemberAccess","referencedDeclaration":2143,"src":"39694:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2277,"name":"doTransferIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"39674:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":2281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"39674:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"39649:62:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2283,"nodeType":"ExpressionStatement","src":"39649:62:0"},{"expression":{"argumentTypes":null,"id":2296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2284,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"39966:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2286,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"39966:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2287,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"39980:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"39980:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2289,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"39965:38:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2291,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40014:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrows","nodeType":"MemberAccess","referencedDeclaration":2147,"src":"40014:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2293,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40035:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"40035:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2290,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"40006:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40006:52:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"39965:93:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2297,"nodeType":"ExpressionStatement","src":"39965:93:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2299,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40076:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"40076:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2301,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"40092:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"40092:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"40076:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"52455041595f424f52524f575f4e45575f4143434f554e545f424f52524f575f42414c414e43455f43414c43554c4154494f4e5f4641494c4544","id":2304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"40112:60:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_9d6c1b60b97bcce107e1e90a71318f1e996d8c3a403fd75fe80250b8288a93e1","typeString":"literal_string \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\""},"value":"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9d6c1b60b97bcce107e1e90a71318f1e996d8c3a403fd75fe80250b8288a93e1","typeString":"literal_string \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\""}],"id":2298,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"40068:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40068:105:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2306,"nodeType":"ExpressionStatement","src":"40068:105:0"},{"expression":{"argumentTypes":null,"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2307,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40185:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"40185:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2310,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40199:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2151,"src":"40199:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2312,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"40184:36:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2314,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"40231:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2315,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40245:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2316,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"40245:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2313,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"40223:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40223:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"40184:84:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2319,"nodeType":"ExpressionStatement","src":"40184:84:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2321,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40286:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mathErr","nodeType":"MemberAccess","referencedDeclaration":2141,"src":"40286:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2323,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"40302:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"40302:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"40286:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"52455041595f424f52524f575f4e45575f544f54414c5f42414c414e43455f43414c43554c4154494f4e5f4641494c4544","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"40322:51:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_adaa4d588b31e5078baa24eedd9ae3c98327611581c120700182a1bdf8dad136","typeString":"literal_string \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\""},"value":"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_adaa4d588b31e5078baa24eedd9ae3c98327611581c120700182a1bdf8dad136","typeString":"literal_string \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\""}],"id":2320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"40278:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40278:96:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2328,"nodeType":"ExpressionStatement","src":"40278:96:0"},{"expression":{"argumentTypes":null,"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2329,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"40454:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":2331,"indexExpression":{"argumentTypes":null,"id":2330,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"40469:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40454:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"id":2332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"principal","nodeType":"MemberAccess","referencedDeclaration":3556,"src":"40454:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2333,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40491:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2334,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"40491:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40454:59:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2336,"nodeType":"ExpressionStatement","src":"40454:59:0"},{"expression":{"argumentTypes":null,"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2337,"name":"accountBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"40523:14:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot storage ref)"}},"id":2339,"indexExpression":{"argumentTypes":null,"id":2338,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"40538:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"40523:24:0","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage","typeString":"struct CTokenStorage.BorrowSnapshot storage ref"}},"id":2340,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"interestIndex","nodeType":"MemberAccess","referencedDeclaration":3558,"src":"40523:38:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2341,"name":"borrowIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"40564:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40523:52:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2343,"nodeType":"ExpressionStatement","src":"40523:52:0"},{"expression":{"argumentTypes":null,"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2344,"name":"totalBorrows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3540,"src":"40585:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2345,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40600:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2346,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2151,"src":"40600:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"40585:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2348,"nodeType":"ExpressionStatement","src":"40585:35:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2350,"name":"payer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"40690:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2351,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"40697:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2352,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40707:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"40707:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2354,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40731:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2355,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"accountBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2149,"src":"40731:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2356,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40755:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"totalBorrowsNew","nodeType":"MemberAccess","referencedDeclaration":2151,"src":"40755:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2349,"name":"RepayBorrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3617,"src":"40678:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256)"}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40678:98:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2359,"nodeType":"EmitStatement","src":"40673:103:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2364,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"40864:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40856:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40856:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2366,"name":"payer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"40871:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2367,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2158,"src":"40878:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2368,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40888:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2369,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"40888:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2370,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40912:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"borrowerIndex","nodeType":"MemberAccess","referencedDeclaration":2145,"src":"40912:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2360,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"40826:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"repayBorrowVerify","nodeType":"MemberAccess","referencedDeclaration":4261,"src":"40826:29:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256) external"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40826:105:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2373,"nodeType":"ExpressionStatement","src":"40826:105:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2375,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"40955:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"40955:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2374,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"40950:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"40950:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2378,"name":"vars","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2210,"src":"40972:4:0","typeDescriptions":{"typeIdentifier":"t_struct$_RepayBorrowLocalVars_$2154_memory_ptr","typeString":"struct CToken.RepayBorrowLocalVars memory"}},"id":2379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"actualRepayAmount","nodeType":"MemberAccess","referencedDeclaration":2153,"src":"40972:22:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2380,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"40949:46:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2166,"id":2381,"nodeType":"Return","src":"40942:53:0"}]},"documentation":"@notice Borrows are repaid by another user (possibly the borrower).\n@param payer the account paying off the borrow\n@param borrower the account with the debt being payed off\n@param repayAmount the amount of undelrying tokens being returned\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.","implemented":true,"kind":"function","modifiers":[],"name":"repayBorrowFresh","parameters":{"id":2161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2156,"name":"payer","nodeType":"VariableDeclaration","scope":2383,"src":"37685:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2155,"name":"address","nodeType":"ElementaryTypeName","src":"37685:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2158,"name":"borrower","nodeType":"VariableDeclaration","scope":2383,"src":"37700:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2157,"name":"address","nodeType":"ElementaryTypeName","src":"37700:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2160,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2383,"src":"37718:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2159,"name":"uint","nodeType":"ElementaryTypeName","src":"37718:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"37684:51:0"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2163,"name":"","nodeType":"VariableDeclaration","scope":2383,"src":"37754:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2162,"name":"uint","nodeType":"ElementaryTypeName","src":"37754:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2165,"name":"","nodeType":"VariableDeclaration","scope":2383,"src":"37760:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2164,"name":"uint","nodeType":"ElementaryTypeName","src":"37760:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"37753:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2454,"nodeType":"FunctionDefinition","src":"41519:979:0","nodes":[],"body":{"id":2453,"nodeType":"Block","src":"41665:833:0","nodes":[],"statements":[{"assignments":[2399],"declarations":[{"constant":false,"id":2399,"name":"error","nodeType":"VariableDeclaration","scope":2453,"src":"41675:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2398,"name":"uint","nodeType":"ElementaryTypeName","src":"41675:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2402,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2400,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"41688:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41688:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"41675:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2403,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"41718:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2405,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"41732:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"41732:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2404,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"41727:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41727:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41718:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2420,"nodeType":"IfStatement","src":"41714:266:0","trueBody":{"id":2419,"nodeType":"Block","src":"41749:231:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2411,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"41905:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2410,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"41899:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41899:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2413,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"41913:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"41913:51:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2409,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"41894:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41894:71:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"41967:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2417,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"41893:76:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2397,"id":2418,"nodeType":"Return","src":"41886:83:0"}]}},{"expression":{"argumentTypes":null,"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2421,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"41990:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2422,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"41998:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"accrueInterest","nodeType":"MemberAccess","referencedDeclaration":3813,"src":"41998:31:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$_t_uint256_$","typeString":"function () external returns (uint256)"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"41998:33:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"41990:41:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2426,"nodeType":"ExpressionStatement","src":"41990:41:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2427,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"42045:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2429,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"42059:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"42059:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2428,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"42054:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42054:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"42045:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2444,"nodeType":"IfStatement","src":"42041:270:0","trueBody":{"id":2443,"nodeType":"Block","src":"42076:235:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2435,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"42232:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2434,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"42226:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42226:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2437,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"42240:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"42240:55:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2433,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"42221:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42221:75:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"42298:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2441,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"42220:80:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2397,"id":2442,"nodeType":"Return","src":"42213:87:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2446,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"42439:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"42439:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2448,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2385,"src":"42451:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2449,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"42461:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2450,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"42474:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2445,"name":"liquidateBorrowFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"42418:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_contract$_CTokenInterface_$3865_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,uint256,contract CTokenInterface) returns (uint256,uint256)"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"42418:73:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2397,"id":2452,"nodeType":"Return","src":"42411:80:0"}]},"documentation":"@notice The sender liquidates the borrowers collateral.\n The collateral seized is transferred to the liquidator.\n@param borrower The borrower of this cToken to be liquidated\n@param cTokenCollateral The market in which to seize collateral from the borrower\n@param repayAmount The amount of the underlying borrowed asset to repay\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2392,"modifierName":{"argumentTypes":null,"id":2391,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"41631:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"41631:12:0"}],"name":"liquidateBorrowInternal","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"name":"borrower","nodeType":"VariableDeclaration","scope":2454,"src":"41552:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2384,"name":"address","nodeType":"ElementaryTypeName","src":"41552:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2387,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2454,"src":"41570:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint","nodeType":"ElementaryTypeName","src":"41570:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2389,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":2454,"src":"41588:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"},"typeName":{"contractScope":null,"id":2388,"name":"CTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":3865,"src":"41588:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"value":null,"visibility":"internal"}],"src":"41551:70:0"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"name":"","nodeType":"VariableDeclaration","scope":2454,"src":"41653:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint","nodeType":"ElementaryTypeName","src":"41653:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2396,"name":"","nodeType":"VariableDeclaration","scope":2454,"src":"41659:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2395,"name":"uint","nodeType":"ElementaryTypeName","src":"41659:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"41652:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2715,"nodeType":"FunctionDefinition","src":"43099:3514:0","nodes":[],"body":{"id":2714,"nodeType":"Block","src":"43249:3364:0","nodes":[],"statements":[{"assignments":[2470],"declarations":[{"constant":false,"id":2470,"name":"allowed","nodeType":"VariableDeclaration","scope":2714,"src":"43303:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2469,"name":"uint","nodeType":"ElementaryTypeName","src":"43303:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2483,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2474,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"43361:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"43353:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43353:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2477,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"43376:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2476,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"43368:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43368:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2479,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"43395:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2480,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"43407:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2481,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"43417:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2471,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"43318:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"liquidateBorrowAllowed","nodeType":"MemberAccess","referencedDeclaration":4276,"src":"43318:34:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,address,uint256) external returns (uint256)"}},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43318:111:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"43303:126:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2484,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"43443:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"43454:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"43443:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2498,"nodeType":"IfStatement","src":"43439:148:0","trueBody":{"id":2497,"nodeType":"Block","src":"43457:130:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2488,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"43490:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"43490:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2490,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"43519:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"43519:43:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":2492,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"43564:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2487,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"43479:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43479:93:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"43574:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2495,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"43478:98:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2496,"nodeType":"Return","src":"43471:105:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2499,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"43672:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2500,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"43694:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43694:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"43672:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2513,"nodeType":"IfStatement","src":"43668:148:0","trueBody":{"id":2512,"nodeType":"Block","src":"43712:104:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2504,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"43739:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"43739:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2506,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"43763:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"43763:37:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2503,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"43734:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43734:67:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"43803:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"43733:72:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2511,"nodeType":"Return","src":"43726:79:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":2514,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"43918:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"accrualBlockNumber","nodeType":"MemberAccess","referencedDeclaration":3536,"src":"43918:35:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43918:37:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":2517,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"43959:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43959:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"43918:57:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2530,"nodeType":"IfStatement","src":"43914:178:0","trueBody":{"id":2529,"nodeType":"Block","src":"43977:115:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2521,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44004:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44004:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2523,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"44028:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_COLLATERAL_FRESHNESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44028:48:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2520,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"43999:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"43999:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44079:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2527,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"43998:83:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2528,"nodeType":"Return","src":"43991:90:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2531,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"44150:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2532,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"44162:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"44150:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2544,"nodeType":"IfStatement","src":"44146:143:0","trueBody":{"id":2543,"nodeType":"Block","src":"44174:115:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2535,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44201:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INVALID_ACCOUNT_PAIR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44201:26:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2537,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"44229:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_LIQUIDATOR_IS_BORROWER","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44229:44:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2534,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"44196:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44196:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44276:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2541,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"44195:83:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2542,"nodeType":"Return","src":"44188:90:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2545,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"44341:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44356:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"44341:16:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2558,"nodeType":"IfStatement","src":"44337:145:0","trueBody":{"id":2557,"nodeType":"Block","src":"44359:123:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2549,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44386:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INVALID_CLOSE_AMOUNT_REQUESTED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44386:36:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2551,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"44424:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_CLOSE_AMOUNT_IS_ZERO","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44424:42:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2548,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"44381:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44381:86:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44469:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2555,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"44380:91:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2556,"nodeType":"Return","src":"44373:98:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2559,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"44535:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"44555:2:0","subExpression":{"argumentTypes":null,"hexValue":"31","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44556:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_minus_1_by_1","typeString":"int_const -1"}],"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"44550:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44550:8:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44535:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2575,"nodeType":"IfStatement","src":"44531:156:0","trueBody":{"id":2574,"nodeType":"Block","src":"44560:127:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2566,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44587:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INVALID_CLOSE_AMOUNT_REQUESTED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44587:36:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2568,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"44625:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2569,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44625:46:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2565,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"44582:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44582:90:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44674:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2572,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"44581:95:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2573,"nodeType":"Return","src":"44574:102:0"}]}},{"assignments":[2577,2579],"declarations":[{"constant":false,"id":2577,"name":"repayBorrowError","nodeType":"VariableDeclaration","scope":2714,"src":"44739:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2576,"name":"uint","nodeType":"ElementaryTypeName","src":"44739:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2579,"name":"actualRepayAmount","nodeType":"VariableDeclaration","scope":2714,"src":"44762:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2578,"name":"uint","nodeType":"ElementaryTypeName","src":"44762:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2585,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2581,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"44805:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2582,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"44817:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2583,"name":"repayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"44827:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2580,"name":"repayBorrowFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2383,"src":"44788:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,uint256) returns (uint256,uint256)"}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44788:51:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"44738:101:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2586,"name":"repayBorrowError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"44853:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2588,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44878:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44878:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"44873:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44873:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"44853:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2603,"nodeType":"IfStatement","src":"44849:161:0","trueBody":{"id":2602,"nodeType":"Block","src":"44895:115:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2594,"name":"repayBorrowError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2577,"src":"44928:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2593,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"44922:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44922:23:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2596,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"44947:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_REPAY_BORROW_FRESH_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"44947:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2592,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"44917:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"44917:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"44997:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2600,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"44916:83:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_rational_0_by_1_$","typeString":"tuple(uint256,int_const 0)"}},"functionReturnParameters":2468,"id":2601,"nodeType":"Return","src":"44909:90:0"}]}},{"assignments":[2605,2607],"declarations":[{"constant":false,"id":2605,"name":"amountSeizeError","nodeType":"VariableDeclaration","scope":2714,"src":"45217:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2604,"name":"uint","nodeType":"ElementaryTypeName","src":"45217:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2607,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":2714,"src":"45240:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2606,"name":"uint","nodeType":"ElementaryTypeName","src":"45240:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2618,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2611,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"45310:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2610,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45302:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45302:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2614,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"45325:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45317:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45317:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2616,"name":"actualRepayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"45344:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2608,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"45260:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"liquidateCalculateSeizeTokens","nodeType":"MemberAccess","referencedDeclaration":4356,"src":"45260:41:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (address,address,uint256) view external returns (uint256,uint256)"}},"id":2617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45260:102:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"45216:146:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2620,"name":"amountSeizeError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"45380:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2622,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"45405:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"45405:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45400:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45400:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"45380:40:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4c49515549444154455f434f4d5054524f4c4c45525f43414c43554c4154455f414d4f554e545f5345495a455f4641494c4544","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"45422:53:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_b1c7e90880e9fbdf9aa93d626a842fbb127521a1492c295dbd98c98157e1e4f7","typeString":"literal_string \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\""},"value":"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b1c7e90880e9fbdf9aa93d626a842fbb127521a1492c295dbd98c98157e1e4f7","typeString":"literal_string \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\""}],"id":2619,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"45372:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45372:104:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2628,"nodeType":"ExpressionStatement","src":"45372:104:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2632,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"45594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":null,"id":2630,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"45567:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3744,"src":"45567:26:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45567:36:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":2634,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"45607:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"45567:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"4c49515549444154455f5345495a455f544f4f5f4d554348","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"45620:26:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_bffc2aa76a1b975ca5ba1defccc66ee3d6e80e3f510ac216baa6baef4008863e","typeString":"literal_string \"LIQUIDATE_SEIZE_TOO_MUCH\""},"value":"LIQUIDATE_SEIZE_TOO_MUCH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bffc2aa76a1b975ca5ba1defccc66ee3d6e80e3f510ac216baa6baef4008863e","typeString":"literal_string \"LIQUIDATE_SEIZE_TOO_MUCH\""}],"id":2629,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"45559:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45559:88:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2638,"nodeType":"ExpressionStatement","src":"45559:88:0"},{"assignments":[2640],"declarations":[{"constant":false,"id":2640,"name":"seizeError","nodeType":"VariableDeclaration","scope":2714,"src":"45773:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint","nodeType":"ElementaryTypeName","src":"45773:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2641,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"45773:15:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2643,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"45810:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45802:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45802:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2646,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"45839:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2645,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45831:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45831:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"45802:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2670,"nodeType":"Block","src":"45953:95:0","statements":[{"expression":{"argumentTypes":null,"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2661,"name":"seizeError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"45967:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2664,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"46003:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2665,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"46015:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2666,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"46025:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2662,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"45980:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"seize","nodeType":"MemberAccess","referencedDeclaration":3824,"src":"45980:22:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint256) external returns (uint256)"}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45980:57:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"45967:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2669,"nodeType":"ExpressionStatement","src":"45967:70:0"}]},"id":2671,"nodeType":"IfStatement","src":"45798:250:0","trueBody":{"id":2660,"nodeType":"Block","src":"45846:101:0","statements":[{"expression":{"argumentTypes":null,"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2649,"name":"seizeError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"45860:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2652,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"45895:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"45887:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45887:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2654,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"45902:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2655,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"45914:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2656,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"45924:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2650,"name":"seizeInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"45873:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) returns (uint256)"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"45873:63:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"45860:76:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2659,"nodeType":"ExpressionStatement","src":"45860:76:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2673,"name":"seizeError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2640,"src":"46151:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2675,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"46170:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"46170:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46165:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46165:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"46151:34:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"746f6b656e207365697a757265206661696c6564","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"46187:22:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_ef895053050823f299d1eac7edac9fbaf6b5ee335d1b858874856cee7182bcda","typeString":"literal_string \"token seizure failed\""},"value":"token seizure failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef895053050823f299d1eac7edac9fbaf6b5ee335d1b858874856cee7182bcda","typeString":"literal_string \"token seizure failed\""}],"id":2672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"46143:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46143:67:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2681,"nodeType":"ExpressionStatement","src":"46143:67:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2683,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"46288:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2684,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"46300:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2685,"name":"actualRepayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"46310:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2687,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"46337:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2686,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46329:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46329:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2689,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"46356:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2682,"name":"LiquidateBorrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"46272:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,address,uint256)"}},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46272:96:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2691,"nodeType":"EmitStatement","src":"46267:101:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2696,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"46460:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2695,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46452:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46452:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2699,"name":"cTokenCollateral","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"46475:16:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}],"id":2698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46467:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46467:25:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2701,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"46494:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2702,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"46506:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2703,"name":"actualRepayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"46516:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2704,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"46535:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2692,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"46418:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"liquidateBorrowVerify","nodeType":"MemberAccess","referencedDeclaration":4291,"src":"46418:33:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,address,uint256,uint256) external"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46418:129:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2706,"nodeType":"ExpressionStatement","src":"46418:129:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2708,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"46571:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"46571:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"46566:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2710,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"46566:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2711,"name":"actualRepayAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2579,"src":"46588:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2712,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"46565:41:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":2468,"id":2713,"nodeType":"Return","src":"46558:48:0"}]},"documentation":"@notice The liquidator liquidates the borrowers collateral.\n The collateral seized is transferred to the liquidator.\n@param borrower The borrower of this cToken to be liquidated\n@param liquidator The address repaying the borrow and seizing collateral\n@param cTokenCollateral The market in which to seize collateral from the borrower\n@param repayAmount The amount of the underlying borrowed asset to repay\n@return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.","implemented":true,"kind":"function","modifiers":[],"name":"liquidateBorrowFresh","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"name":"liquidator","nodeType":"VariableDeclaration","scope":2715,"src":"43129:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2455,"name":"address","nodeType":"ElementaryTypeName","src":"43129:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2458,"name":"borrower","nodeType":"VariableDeclaration","scope":2715,"src":"43149:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2457,"name":"address","nodeType":"ElementaryTypeName","src":"43149:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2460,"name":"repayAmount","nodeType":"VariableDeclaration","scope":2715,"src":"43167:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2459,"name":"uint","nodeType":"ElementaryTypeName","src":"43167:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2462,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":2715,"src":"43185:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"},"typeName":{"contractScope":null,"id":2461,"name":"CTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":3865,"src":"43185:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"value":null,"visibility":"internal"}],"src":"43128:90:0"},"returnParameters":{"id":2468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"name":"","nodeType":"VariableDeclaration","scope":2715,"src":"43237:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint","nodeType":"ElementaryTypeName","src":"43237:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":2467,"name":"","nodeType":"VariableDeclaration","scope":2715,"src":"43243:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2466,"name":"uint","nodeType":"ElementaryTypeName","src":"43243:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"43236:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2737,"nodeType":"FunctionDefinition","src":"47163:192:0","nodes":[],"body":{"id":2736,"nodeType":"Block","src":"47271:84:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2729,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"47302:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"47302:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":2731,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2717,"src":"47314:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2732,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"47326:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2733,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"47336:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2728,"name":"seizeInternal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"47288:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,uint256) returns (uint256)"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"47288:60:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2727,"id":2735,"nodeType":"Return","src":"47281:67:0"}]},"documentation":"@notice Transfers collateral tokens (this market) to the liquidator.\n@dev Will fail unless called by another cToken during the process of liquidation.\n Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\n@param liquidator The account receiving seized collateral\n@param borrower The account having collateral seized\n@param seizeTokens The number of cTokens to seize\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":2724,"modifierName":{"argumentTypes":null,"id":2723,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"47243:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"47243:12:0"}],"name":"seize","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2717,"name":"liquidator","nodeType":"VariableDeclaration","scope":2737,"src":"47178:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2716,"name":"address","nodeType":"ElementaryTypeName","src":"47178:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2719,"name":"borrower","nodeType":"VariableDeclaration","scope":2737,"src":"47198:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2718,"name":"address","nodeType":"ElementaryTypeName","src":"47198:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2721,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":2737,"src":"47216:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint","nodeType":"ElementaryTypeName","src":"47216:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"47177:56:0"},"returnParameters":{"id":2727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2726,"name":"","nodeType":"VariableDeclaration","scope":2737,"src":"47265:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2725,"name":"uint","nodeType":"ElementaryTypeName","src":"47265:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"47264:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3824,"visibility":"external"},{"id":2887,"nodeType":"FunctionDefinition","src":"48018:2093:0","nodes":[],"body":{"id":2886,"nodeType":"Block","src":"48142:1969:0","nodes":[],"statements":[{"assignments":[2751],"declarations":[{"constant":false,"id":2751,"name":"allowed","nodeType":"VariableDeclaration","scope":2886,"src":"48192:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2750,"name":"uint","nodeType":"ElementaryTypeName","src":"48192:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2762,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2755,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"48240:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"48232:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48232:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2757,"name":"seizerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"48247:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2758,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"48260:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2759,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"48272:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2760,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"48282:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2752,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"48207:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"seizeAllowed","nodeType":"MemberAccess","referencedDeclaration":4306,"src":"48207:24:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,address,address,uint256) external returns (uint256)"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48207:87:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"48192:102:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2763,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"48308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"hexValue":"30","id":2764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"48319:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"48308:12:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2775,"nodeType":"IfStatement","src":"48304:149:0","trueBody":{"id":2774,"nodeType":"Block","src":"48322:131:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2767,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"48354:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"48354:27:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2769,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"48383:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_SEIZE_COMPTROLLER_REJECTION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"48383:49:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"id":2771,"name":"allowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2751,"src":"48434:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2766,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"48343:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48343:99:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2749,"id":2773,"nodeType":"Return","src":"48336:106:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2776,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"48511:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":2777,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"48523:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"48511:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2787,"nodeType":"IfStatement","src":"48507:144:0","trueBody":{"id":2786,"nodeType":"Block","src":"48535:116:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2780,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"48561:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INVALID_ACCOUNT_PAIR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"48561:26:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2782,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"48589:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER","nodeType":"MemberAccess","referencedDeclaration":null,"src":"48589:50:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2779,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"48556:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"48556:84:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2749,"id":2785,"nodeType":"Return","src":"48549:91:0"}]}},{"assignments":[2789],"declarations":[{"constant":false,"id":2789,"name":"mathErr","nodeType":"VariableDeclaration","scope":2886,"src":"48661:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":2788,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"48661:9:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"}],"id":2790,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"48661:17:0"},{"assignments":[2792],"declarations":[{"constant":false,"id":2792,"name":"borrowerTokensNew","nodeType":"VariableDeclaration","scope":2886,"src":"48688:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2791,"name":"uint","nodeType":"ElementaryTypeName","src":"48688:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2793,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"48688:22:0"},{"assignments":[2795],"declarations":[{"constant":false,"id":2795,"name":"liquidatorTokensNew","nodeType":"VariableDeclaration","scope":2886,"src":"48720:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2794,"name":"uint","nodeType":"ElementaryTypeName","src":"48720:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":2796,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"48720:24:0"},{"expression":{"argumentTypes":null,"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":2797,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49026:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":2798,"name":"borrowerTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"49035:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2799,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"49025:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2801,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"49064:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2803,"indexExpression":{"argumentTypes":null,"id":2802,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"49078:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"49064:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2804,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"49089:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2800,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"49056:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49056:45:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"49025:76:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2807,"nodeType":"ExpressionStatement","src":"49025:76:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2808,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49115:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2809,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"49126:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49126:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"49115:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2823,"nodeType":"IfStatement","src":"49111:164:0","trueBody":{"id":2822,"nodeType":"Block","src":"49146:129:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2813,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"49178:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2814,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49178:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2815,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"49196:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2816,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49196:52:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2818,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49255:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":2817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49250:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49250:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2812,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"49167:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49167:97:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2749,"id":2821,"nodeType":"Return","src":"49160:104:0"}]}},{"expression":{"argumentTypes":null,"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":2824,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49286:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":2825,"name":"liquidatorTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"49295:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2826,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"49285:30:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2828,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"49326:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2830,"indexExpression":{"argumentTypes":null,"id":2829,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"49340:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"49326:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":2831,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"49353:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2827,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"49318:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49318:47:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"src":"49285:80:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2834,"nodeType":"ExpressionStatement","src":"49285:80:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":2835,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49379:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2836,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"49390:9:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":2837,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49390:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"49379:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2850,"nodeType":"IfStatement","src":"49375:164:0","trueBody":{"id":2849,"nodeType":"Block","src":"49410:129:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2840,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"49442:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MATH_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49442:16:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2842,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"49460:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"49460:52:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2845,"name":"mathErr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2789,"src":"49519:7:0","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}],"id":2844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"49514:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49514:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2839,"name":"failOpaque","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4871,"src":"49431:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256) returns (uint256)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49431:97:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2749,"id":2848,"nodeType":"Return","src":"49424:104:0"}]}},{"expression":{"argumentTypes":null,"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2851,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"49735:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2853,"indexExpression":{"argumentTypes":null,"id":2852,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"49749:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"49735:23:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2854,"name":"borrowerTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"49761:17:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49735:43:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2856,"nodeType":"ExpressionStatement","src":"49735:43:0"},{"expression":{"argumentTypes":null,"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"baseExpression":{"argumentTypes":null,"id":2857,"name":"accountTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"49788:13:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2859,"indexExpression":{"argumentTypes":null,"id":2858,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"49802:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"49788:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2860,"name":"liquidatorTokensNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2795,"src":"49816:19:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"49788:47:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2862,"nodeType":"ExpressionStatement","src":"49788:47:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2864,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"49896:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2865,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"49906:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2866,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"49918:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2863,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"49887:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49887:43:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2868,"nodeType":"EmitStatement","src":"49882:48:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2873,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6389,"src":"50012:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}],"id":2872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50004:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50004:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2875,"name":"seizerToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"50019:11:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2876,"name":"liquidator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2741,"src":"50032:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2877,"name":"borrower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2743,"src":"50044:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2878,"name":"seizeTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2745,"src":"50054:11:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"argumentTypes":null,"id":2869,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"49980:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"seizeVerify","nodeType":"MemberAccess","referencedDeclaration":4319,"src":"49980:23:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,address,address,uint256) external"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"49980:86:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2880,"nodeType":"ExpressionStatement","src":"49980:86:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2882,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"50089:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"50089:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2881,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"50084:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2884,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50084:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2749,"id":2885,"nodeType":"Return","src":"50077:27:0"}]},"documentation":"@notice Transfers collateral tokens (this market) to the liquidator.\n@dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\n Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\n@param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\n@param liquidator The account receiving seized collateral\n@param borrower The account having collateral seized\n@param seizeTokens The number of cTokens to seize\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"seizeInternal","parameters":{"id":2746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2739,"name":"seizerToken","nodeType":"VariableDeclaration","scope":2887,"src":"48041:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2738,"name":"address","nodeType":"ElementaryTypeName","src":"48041:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2741,"name":"liquidator","nodeType":"VariableDeclaration","scope":2887,"src":"48062:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2740,"name":"address","nodeType":"ElementaryTypeName","src":"48062:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2743,"name":"borrower","nodeType":"VariableDeclaration","scope":2887,"src":"48082:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2742,"name":"address","nodeType":"ElementaryTypeName","src":"48082:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":2745,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":2887,"src":"48100:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2744,"name":"uint","nodeType":"ElementaryTypeName","src":"48100:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"48040:77:0"},"returnParameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"name":"","nodeType":"VariableDeclaration","scope":2887,"src":"48136:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint","nodeType":"ElementaryTypeName","src":"48136:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"48135:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":2926,"nodeType":"FunctionDefinition","src":"50549:631:0","nodes":[],"body":{"id":2925,"nodeType":"Block","src":"50632:548:0","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":2897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2894,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"50678:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"50678:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":2896,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"50692:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"50678:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2906,"nodeType":"IfStatement","src":"50674:124:0","trueBody":{"id":2905,"nodeType":"Block","src":"50699:99:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2899,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"50725:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"50725:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2901,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"50745:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_PENDING_ADMIN_OWNER_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"50745:41:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2898,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"50720:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"50720:67:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2893,"id":2904,"nodeType":"Return","src":"50713:74:0"}]}},{"assignments":[2908],"declarations":[{"constant":false,"id":2908,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":2925,"src":"50868:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2907,"name":"address","nodeType":"ElementaryTypeName","src":"50868:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":2910,"initialValue":{"argumentTypes":null,"id":2909,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"50894:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"50868:38:0"},{"expression":{"argumentTypes":null,"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2911,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"50974:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2912,"name":"newPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"50989:15:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"50974:30:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2914,"nodeType":"ExpressionStatement","src":"50974:30:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2916,"name":"oldPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2908,"src":"51102:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2917,"name":"newPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"51119:15:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2915,"name":"NewPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"51086:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51086:49:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2919,"nodeType":"EmitStatement","src":"51081:54:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2921,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"51158:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2922,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"51158:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"51153:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51153:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2893,"id":2924,"nodeType":"Return","src":"51146:27:0"}]},"documentation":"@notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n@dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n@param newPendingAdmin New pending admin.\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setPendingAdmin","parameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"name":"newPendingAdmin","nodeType":"VariableDeclaration","scope":2926,"src":"50575:31:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2888,"name":"address","nodeType":"ElementaryTypeName","src":"50575:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"}],"src":"50574:33:0"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"name":"","nodeType":"VariableDeclaration","scope":2926,"src":"50626:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2891,"name":"uint","nodeType":"ElementaryTypeName","src":"50626:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"50625:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3831,"visibility":"external"},{"id":2985,"nodeType":"FunctionDefinition","src":"51451:722:0","nodes":[],"body":{"id":2984,"nodeType":"Block","src":"51499:674:0","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2931,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"51585:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"51585:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":2933,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"51599:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"51585:26:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2935,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"51615:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"51615:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"51637:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2937,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"51629:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51629:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"51615:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"51585:54:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":2950,"nodeType":"IfStatement","src":"51581:162:0","trueBody":{"id":2949,"nodeType":"Block","src":"51641:102:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2943,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"51667:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"51667:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2945,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"51687:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCEPT_ADMIN_PENDING_ADMIN_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"51687:44:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2942,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"51662:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"51662:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2930,"id":2948,"nodeType":"Return","src":"51655:77:0"}]}},{"assignments":[2952],"declarations":[{"constant":false,"id":2952,"name":"oldAdmin","nodeType":"VariableDeclaration","scope":2984,"src":"51805:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2951,"name":"address","nodeType":"ElementaryTypeName","src":"51805:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":2954,"initialValue":{"argumentTypes":null,"id":2953,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"51824:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"51805:24:0"},{"assignments":[2956],"declarations":[{"constant":false,"id":2956,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":2984,"src":"51839:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2955,"name":"address","nodeType":"ElementaryTypeName","src":"51839:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":2958,"initialValue":{"argumentTypes":null,"id":2957,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"51865:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"51839:38:0"},{"expression":{"argumentTypes":null,"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2959,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"51935:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":2960,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"51943:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"51935:20:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2962,"nodeType":"ExpressionStatement","src":"51935:20:0"},{"expression":{"argumentTypes":null,"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":2963,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"52001:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":2965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"52024:1:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"52016:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":2966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52016:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"52001:25:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2968,"nodeType":"ExpressionStatement","src":"52001:25:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2970,"name":"oldAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"52051:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2971,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"52061:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2969,"name":"NewAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3641,"src":"52042:8:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52042:25:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2973,"nodeType":"EmitStatement","src":"52037:30:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":2975,"name":"oldPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2956,"src":"52098:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":2976,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"52115:12:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":2974,"name":"NewPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"52082:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52082:46:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2978,"nodeType":"EmitStatement","src":"52077:51:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2980,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"52151:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"52151:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":2979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"52146:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":2982,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52146:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2930,"id":2983,"nodeType":"Return","src":"52139:27:0"}]},"documentation":"@notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n@dev Admin function for pending admin to accept role and update admin\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_acceptAdmin","parameters":{"id":2927,"nodeType":"ParameterList","parameters":[],"src":"51472:2:0"},"returnParameters":{"id":2930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2929,"name":"","nodeType":"VariableDeclaration","scope":2985,"src":"51493:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2928,"name":"uint","nodeType":"ElementaryTypeName","src":"51493:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"51492:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3836,"visibility":"external"},{"id":3031,"nodeType":"FunctionDefinition","src":"52391:718:0","nodes":[],"body":{"id":3030,"nodeType":"Block","src":"52475:634:0","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2992,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"52522:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"52522:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":2994,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"52536:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"52522:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3004,"nodeType":"IfStatement","src":"52518:122:0","trueBody":{"id":3003,"nodeType":"Block","src":"52543:97:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2997,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"52569:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"52569:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":2999,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"52589:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_COMPTROLLER_OWNER_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"52589:39:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":2996,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"52564:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52564:65:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2991,"id":3002,"nodeType":"Return","src":"52557:72:0"}]}},{"assignments":[3006],"declarations":[{"constant":false,"id":3006,"name":"oldComptroller","nodeType":"VariableDeclaration","scope":3030,"src":"52650:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":3005,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"52650:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"}],"id":3008,"initialValue":{"argumentTypes":null,"id":3007,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"52688:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"nodeType":"VariableDeclarationStatement","src":"52650:49:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":3010,"name":"newComptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"52783:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":3011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isComptroller","nodeType":"MemberAccess","referencedDeclaration":4155,"src":"52783:28:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52783:30:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6d61726b6572206d6574686f642072657475726e65642066616c7365","id":3013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"52815:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_73c0b9b9fc59551809f9e3f686bb994cac13db80a83fd9ccdfe6d53da80fe637","typeString":"literal_string \"marker method returned false\""},"value":"marker method returned false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_73c0b9b9fc59551809f9e3f686bb994cac13db80a83fd9ccdfe6d53da80fe637","typeString":"literal_string \"marker method returned false\""}],"id":3009,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"52775:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"52775:71:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3015,"nodeType":"ExpressionStatement","src":"52775:71:0"},{"expression":{"argumentTypes":null,"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3016,"name":"comptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"52911:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3017,"name":"newComptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"52925:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"src":"52911:28:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"id":3019,"nodeType":"ExpressionStatement","src":"52911:28:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3021,"name":"oldComptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"53033:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},{"argumentTypes":null,"id":3022,"name":"newComptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"53049:14:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}],"id":3020,"name":"NewComptroller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"53018:14:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_ComptrollerInterface_$4357_$_t_contract$_ComptrollerInterface_$4357_$returns$__$","typeString":"function (contract ComptrollerInterface,contract ComptrollerInterface)"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53018:46:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3024,"nodeType":"EmitStatement","src":"53013:51:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3026,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"53087:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"53087:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"53082:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53082:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2991,"id":3029,"nodeType":"Return","src":"53075:27:0"}]},"documentation":"@notice Sets a new comptroller for the market\n@dev Admin function to set a new comptroller\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setComptroller","parameters":{"id":2988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2987,"name":"newComptroller","nodeType":"VariableDeclaration","scope":3031,"src":"52416:35:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":2986,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"52416:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"}],"src":"52415:37:0"},"returnParameters":{"id":2991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"name":"","nodeType":"VariableDeclaration","scope":3031,"src":"52469:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint","nodeType":"ElementaryTypeName","src":"52469:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"52468:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3843,"visibility":"public"},{"id":3066,"nodeType":"FunctionDefinition","src":"53405:599:0","nodes":[],"body":{"id":3065,"nodeType":"Block","src":"53500:504:0","nodes":[],"statements":[{"assignments":[3041],"declarations":[{"constant":false,"id":3041,"name":"error","nodeType":"VariableDeclaration","scope":3065,"src":"53510:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint","nodeType":"ElementaryTypeName","src":"53510:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3044,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3042,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"53523:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53523:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"53510:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3045,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"53553:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3047,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"53567:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"53567:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"53562:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53562:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"53553:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3060,"nodeType":"IfStatement","src":"53549:283:0","trueBody":{"id":3059,"nodeType":"Block","src":"53584:248:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3053,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"53759:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3052,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"53753:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53753:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3055,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"53767:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"53767:53:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3051,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"53748:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53748:73:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3039,"id":3058,"nodeType":"Return","src":"53741:80:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3062,"name":"newReserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"53972:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3061,"name":"_setReserveFactorFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"53949:22:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"53949:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3039,"id":3064,"nodeType":"Return","src":"53942:55:0"}]},"documentation":"@notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\n@dev Admin function to accrue interest and set a new reserve factor\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":3036,"modifierName":{"argumentTypes":null,"id":3035,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"53472:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"53472:12:0"}],"name":"_setReserveFactor","parameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3033,"name":"newReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3066,"src":"53432:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3032,"name":"uint","nodeType":"ElementaryTypeName","src":"53432:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"53431:31:0"},"returnParameters":{"id":3039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"name":"","nodeType":"VariableDeclaration","scope":3066,"src":"53494:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3037,"name":"uint","nodeType":"ElementaryTypeName","src":"53494:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"53493:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3850,"visibility":"external"},{"id":3130,"nodeType":"FunctionDefinition","src":"54265:951:0","nodes":[],"body":{"id":3129,"nodeType":"Block","src":"54352:864:0","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3073,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"54399:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54399:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":3075,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"54413:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"54399:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3085,"nodeType":"IfStatement","src":"54395:125:0","trueBody":{"id":3084,"nodeType":"Block","src":"54420:100:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3078,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"54446:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54446:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3080,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"54466:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_RESERVE_FACTOR_ADMIN_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54466:42:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3077,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"54441:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54441:68:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3072,"id":3083,"nodeType":"Return","src":"54434:75:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3086,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"54602:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3087,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"54624:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54624:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"54602:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3098,"nodeType":"IfStatement","src":"54598:148:0","trueBody":{"id":3097,"nodeType":"Block","src":"54642:104:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3091,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"54668:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54668:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3093,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"54692:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_RESERVE_FACTOR_FRESH_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54692:42:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3090,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"54663:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54663:72:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3072,"id":3096,"nodeType":"Return","src":"54656:79:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3099,"name":"newReserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"54815:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":3100,"name":"reserveFactorMaxMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"54842:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"54815:51:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3110,"nodeType":"IfStatement","src":"54811:155:0","trueBody":{"id":3109,"nodeType":"Block","src":"54868:98:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3103,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"54894:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BAD_INPUT","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54894:15:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3105,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"54911:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_RESERVE_FACTOR_BOUNDS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"54911:43:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3102,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"54889:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"54889:66:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3072,"id":3108,"nodeType":"Return","src":"54882:73:0"}]}},{"assignments":[3112],"declarations":[{"constant":false,"id":3112,"name":"oldReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3129,"src":"54976:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint","nodeType":"ElementaryTypeName","src":"54976:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3114,"initialValue":{"argumentTypes":null,"id":3113,"name":"reserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"55008:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"54976:53:0"},{"expression":{"argumentTypes":null,"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3115,"name":"reserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"55039:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3116,"name":"newReserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"55063:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"55039:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3118,"nodeType":"ExpressionStatement","src":"55039:48:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3120,"name":"oldReserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"55120:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":3121,"name":"newReserveFactorMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"55146:24:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3119,"name":"NewReserveFactor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"55103:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55103:68:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3123,"nodeType":"EmitStatement","src":"55098:73:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3125,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"55194:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"55194:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"55189:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55189:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3072,"id":3128,"nodeType":"Return","src":"55182:27:0"}]},"documentation":"@notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\n@dev Admin function to set a new reserve factor\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setReserveFactorFresh","parameters":{"id":3069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3068,"name":"newReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3130,"src":"54297:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3067,"name":"uint","nodeType":"ElementaryTypeName","src":"54297:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"54296:31:0"},"returnParameters":{"id":3072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3071,"name":"","nodeType":"VariableDeclaration","scope":3130,"src":"54346:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3070,"name":"uint","nodeType":"ElementaryTypeName","src":"54346:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"54345:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3170,"nodeType":"FunctionDefinition","src":"55465:580:0","nodes":[],"body":{"id":3169,"nodeType":"Block","src":"55548:497:0","nodes":[],"statements":[{"assignments":[3140],"declarations":[{"constant":false,"id":3140,"name":"error","nodeType":"VariableDeclaration","scope":3169,"src":"55558:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3139,"name":"uint","nodeType":"ElementaryTypeName","src":"55558:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3143,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3141,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"55571:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55571:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"55558:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3144,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"55601:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3146,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"55615:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"55615:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"55610:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55610:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"55601:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3159,"nodeType":"IfStatement","src":"55597:271:0","trueBody":{"id":3158,"nodeType":"Block","src":"55632:236:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3152,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"55801:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3151,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"55795:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55795:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3154,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"55809:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ADD_RESERVES_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"55809:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3150,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"55790:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55790:67:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3138,"id":3157,"nodeType":"Return","src":"55783:74:0"}]}},{"expression":{"argumentTypes":null,"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":3160,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"55977:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},null],"id":3161,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"55976:9:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$__$","typeString":"tuple(uint256,)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3163,"name":"addAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"56006:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3162,"name":"_addReservesFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3240,"src":"55988:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$_t_uint256_$","typeString":"function (uint256) returns (uint256,uint256)"}},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"55988:28:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"src":"55976:40:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3166,"nodeType":"ExpressionStatement","src":"55976:40:0"},{"expression":{"argumentTypes":null,"id":3167,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3140,"src":"56033:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3138,"id":3168,"nodeType":"Return","src":"56026:12:0"}]},"documentation":"@notice Accrues interest and reduces reserves by transferring from msg.sender\n@param addAmount Amount of addition to reserves\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":3135,"modifierName":{"argumentTypes":null,"id":3134,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"55520:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"55520:12:0"}],"name":"_addReservesInternal","parameters":{"id":3133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3132,"name":"addAmount","nodeType":"VariableDeclaration","scope":3170,"src":"55495:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint","nodeType":"ElementaryTypeName","src":"55495:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"55494:16:0"},"returnParameters":{"id":3138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3137,"name":"","nodeType":"VariableDeclaration","scope":3170,"src":"55542:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3136,"name":"uint","nodeType":"ElementaryTypeName","src":"55542:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"55541:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3240,"nodeType":"FunctionDefinition","src":"56377:1594:0","nodes":[],"body":{"id":3239,"nodeType":"Block","src":"56450:1521:0","nodes":[],"statements":[{"assignments":[3180],"declarations":[{"constant":false,"id":3180,"name":"totalReservesNew","nodeType":"VariableDeclaration","scope":3239,"src":"56503:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3179,"name":"uint","nodeType":"ElementaryTypeName","src":"56503:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3181,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"56503:21:0"},{"assignments":[3183],"declarations":[{"constant":false,"id":3183,"name":"actualAddAmount","nodeType":"VariableDeclaration","scope":3239,"src":"56534:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3182,"name":"uint","nodeType":"ElementaryTypeName","src":"56534:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3184,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"56534:20:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3185,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"56656:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3186,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"56678:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56678:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"56656:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3199,"nodeType":"IfStatement","src":"56652:161:0","trueBody":{"id":3198,"nodeType":"Block","src":"56696:117:0","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3190,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"56723:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"56723:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3192,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"56747:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ADD_RESERVES_FRESH_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"56747:36:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3189,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"56718:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"56718:66:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":3195,"name":"actualAddAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"56786:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3196,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"56717:85:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3178,"id":3197,"nodeType":"Return","src":"56710:92:0"}]}},{"expression":{"argumentTypes":null,"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3200,"name":"actualAddAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"57370:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3202,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"57401:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"57401:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":3204,"name":"addAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"57413:9:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3201,"name":"doTransferIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3479,"src":"57388:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57388:35:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"57370:53:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3207,"nodeType":"ExpressionStatement","src":"57370:53:0"},{"expression":{"argumentTypes":null,"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3208,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"57434:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3209,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"57453:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":3210,"name":"actualAddAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"57469:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"57453:31:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"57434:50:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3213,"nodeType":"ExpressionStatement","src":"57434:50:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3215,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"57536:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":3216,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"57556:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"57536:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"61646420726573657276657320756e6578706563746564206f766572666c6f77","id":3218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"57571:34:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_20f8620d409aaee5f40705abd7d51a115caa9d18aabb79950f6cff0bee400f4a","typeString":"literal_string \"add reserves unexpected overflow\""},"value":"add reserves unexpected overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_20f8620d409aaee5f40705abd7d51a115caa9d18aabb79950f6cff0bee400f4a","typeString":"literal_string \"add reserves unexpected overflow\""}],"id":3214,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"57528:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57528:78:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3220,"nodeType":"ExpressionStatement","src":"57528:78:0"},{"expression":{"argumentTypes":null,"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3221,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"57680:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3222,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"57696:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"57680:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3224,"nodeType":"ExpressionStatement","src":"57680:32:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3226,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"57812:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"57812:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":3228,"name":"actualAddAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"57824:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":3229,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3180,"src":"57841:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3225,"name":"ReservesAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3667,"src":"57798:13:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57798:60:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3231,"nodeType":"EmitStatement","src":"57793:65:0"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3233,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"57931:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"57931:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"57926:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"57926:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":3236,"name":"actualAddAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3183,"src":"57948:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3237,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"57925:39:0","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint256_$_t_uint256_$","typeString":"tuple(uint256,uint256)"}},"functionReturnParameters":3178,"id":3238,"nodeType":"Return","src":"57918:46:0"}]},"documentation":"@notice Add reserves by transferring from caller\n@dev Requires fresh interest accrual\n@param addAmount Amount of addition to reserves\n@return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees","implemented":true,"kind":"function","modifiers":[],"name":"_addReservesFresh","parameters":{"id":3173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3172,"name":"addAmount","nodeType":"VariableDeclaration","scope":3240,"src":"56404:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint","nodeType":"ElementaryTypeName","src":"56404:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"56403:16:0"},"returnParameters":{"id":3178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3175,"name":"","nodeType":"VariableDeclaration","scope":3240,"src":"56438:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3174,"name":"uint","nodeType":"ElementaryTypeName","src":"56438:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3177,"name":"","nodeType":"VariableDeclaration","scope":3240,"src":"56444:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3176,"name":"uint","nodeType":"ElementaryTypeName","src":"56444:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"56437:12:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3275,"nodeType":"FunctionDefinition","src":"58218:563:0","nodes":[],"body":{"id":3274,"nodeType":"Block","src":"58299:482:0","nodes":[],"statements":[{"assignments":[3250],"declarations":[{"constant":false,"id":3250,"name":"error","nodeType":"VariableDeclaration","scope":3274,"src":"58309:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3249,"name":"uint","nodeType":"ElementaryTypeName","src":"58309:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3253,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3251,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"58322:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58322:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"58309:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3254,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"58352:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3256,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"58366:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3257,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"58366:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"58361:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58361:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"58352:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3269,"nodeType":"IfStatement","src":"58348:274:0","trueBody":{"id":3268,"nodeType":"Block","src":"58383:239:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3262,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3250,"src":"58552:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3261,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"58546:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58546:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3264,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"58560:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDUCE_RESERVES_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"58560:50:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3260,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"58541:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58541:70:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3267,"nodeType":"Return","src":"58534:77:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3271,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"58761:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3270,"name":"_reduceReservesFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3370,"src":"58740:20:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) returns (uint256)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"58740:34:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3248,"id":3273,"nodeType":"Return","src":"58733:41:0"}]},"documentation":"@notice Accrues interest and reduces reserves by transferring to admin\n@param reduceAmount Amount of reduction to reserves\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[{"arguments":null,"id":3245,"modifierName":{"argumentTypes":null,"id":3244,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3503,"src":"58271:12:0","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"58271:12:0"}],"name":"_reduceReserves","parameters":{"id":3243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3242,"name":"reduceAmount","nodeType":"VariableDeclaration","scope":3275,"src":"58243:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3241,"name":"uint","nodeType":"ElementaryTypeName","src":"58243:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"58242:19:0"},"returnParameters":{"id":3248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3247,"name":"","nodeType":"VariableDeclaration","scope":3275,"src":"58293:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3246,"name":"uint","nodeType":"ElementaryTypeName","src":"58293:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"58292:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3857,"visibility":"external"},{"id":3370,"nodeType":"FunctionDefinition","src":"59050:1706:0","nodes":[],"body":{"id":3369,"nodeType":"Block","src":"59123:1633:0","nodes":[],"statements":[{"assignments":[3283],"declarations":[{"constant":false,"id":3283,"name":"totalReservesNew","nodeType":"VariableDeclaration","scope":3369,"src":"59173:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3282,"name":"uint","nodeType":"ElementaryTypeName","src":"59173:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3284,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"59173:21:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3285,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"59242:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59242:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":3287,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"59256:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"59242:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3297,"nodeType":"IfStatement","src":"59238:122:0","trueBody":{"id":3296,"nodeType":"Block","src":"59263:97:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3290,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"59289:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59289:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3292,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"59309:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDUCE_RESERVES_ADMIN_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59309:39:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3289,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"59284:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59284:65:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3295,"nodeType":"Return","src":"59277:72:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3298,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"59461:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3299,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"59483:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59483:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"59461:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3310,"nodeType":"IfStatement","src":"59457:145:0","trueBody":{"id":3309,"nodeType":"Block","src":"59501:101:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3303,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"59527:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59527:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3305,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"59551:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDUCE_RESERVES_FRESH_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59551:39:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3302,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"59522:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59522:69:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3308,"nodeType":"Return","src":"59515:76:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3311,"name":"getCashPrior","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3470,"src":"59688:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59688:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"id":3313,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"59705:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"59688:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3323,"nodeType":"IfStatement","src":"59684:150:0","trueBody":{"id":3322,"nodeType":"Block","src":"59719:115:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3316,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"59745:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"TOKEN_INSUFFICIENT_CASH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59745:29:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3318,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"59776:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDUCE_RESERVES_CASH_NOT_AVAILABLE","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59776:46:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3315,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"59740:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59740:83:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3321,"nodeType":"Return","src":"59733:90:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3324,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"59910:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"id":3325,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"59925:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"59910:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3335,"nodeType":"IfStatement","src":"59906:127:0","trueBody":{"id":3334,"nodeType":"Block","src":"59940:93:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3328,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"59966:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"BAD_INPUT","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59966:15:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3330,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"59983:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"REDUCE_RESERVES_VALIDATION","nodeType":"MemberAccess","referencedDeclaration":null,"src":"59983:38:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3327,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"59961:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"59961:61:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3333,"nodeType":"Return","src":"59954:68:0"}]}},{"expression":{"argumentTypes":null,"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3336,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"60160:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3337,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"60179:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":3338,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"60195:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"60179:28:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"60160:47:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3341,"nodeType":"ExpressionStatement","src":"60160:47:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3343,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"60313:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":3344,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"60333:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"60313:33:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"72656475636520726573657276657320756e657870656374656420756e646572666c6f77","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"60348:38:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_eb43be357f02f888aece778e1a59d1657b49201e44ced42f483132b975f83f50","typeString":"literal_string \"reduce reserves unexpected underflow\""},"value":"reduce reserves unexpected underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_eb43be357f02f888aece778e1a59d1657b49201e44ced42f483132b975f83f50","typeString":"literal_string \"reduce reserves unexpected underflow\""}],"id":3342,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"60305:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60305:82:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3348,"nodeType":"ExpressionStatement","src":"60305:82:0"},{"expression":{"argumentTypes":null,"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3349,"name":"totalReserves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3542,"src":"60458:13:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3350,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"60474:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"60458:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3352,"nodeType":"ExpressionStatement","src":"60458:32:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3354,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"60621:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":3355,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"60628:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3353,"name":"doTransferOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"60607:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (address payable,uint256)"}},"id":3356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60607:34:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3357,"nodeType":"ExpressionStatement","src":"60607:34:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3359,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"60673:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"argumentTypes":null,"id":3360,"name":"reduceAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3277,"src":"60680:12:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":3361,"name":"totalReservesNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3283,"src":"60694:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3358,"name":"ReservesReduced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"60657:15:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60657:54:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3363,"nodeType":"EmitStatement","src":"60652:59:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3365,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"60734:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"60734:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"60729:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"60729:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3281,"id":3368,"nodeType":"Return","src":"60722:27:0"}]},"documentation":"@notice Reduces reserves by transferring to admin\n@dev Requires fresh interest accrual\n@param reduceAmount Amount of reduction to reserves\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_reduceReservesFresh","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3277,"name":"reduceAmount","nodeType":"VariableDeclaration","scope":3370,"src":"59080:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3276,"name":"uint","nodeType":"ElementaryTypeName","src":"59080:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"59079:19:0"},"returnParameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"name":"","nodeType":"VariableDeclaration","scope":3370,"src":"59117:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3279,"name":"uint","nodeType":"ElementaryTypeName","src":"59117:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"59116:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3403,"nodeType":"FunctionDefinition","src":"61117:625:0","nodes":[],"body":{"id":3402,"nodeType":"Block","src":"61210:532:0","nodes":[],"statements":[{"assignments":[3378],"declarations":[{"constant":false,"id":3378,"name":"error","nodeType":"VariableDeclaration","scope":3402,"src":"61220:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3377,"name":"uint","nodeType":"ElementaryTypeName","src":"61220:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3381,"initialValue":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3379,"name":"accrueInterest","nodeType":"Identifier","overloadedDeclarations":[1132],"referencedDeclaration":1132,"src":"61233:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$_t_uint256_$","typeString":"function () returns (uint256)"}},"id":3380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61233:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"61220:29:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3382,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"61263:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3384,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"61277:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3385,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"61277:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"61272:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61272:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"61263:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3397,"nodeType":"IfStatement","src":"61259:295:0","trueBody":{"id":3396,"nodeType":"Block","src":"61294:260:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3390,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"61476:5:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3389,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"61470:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61470:12:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3392,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"61484:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3393,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"61484:58:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3388,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"61465:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61465:78:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3376,"id":3395,"nodeType":"Return","src":"61458:85:0"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3399,"name":"newInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"61714:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}],"id":3398,"name":"_setInterestRateModelFresh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3465,"src":"61687:26:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_InterestRateModel_$6066_$returns$_t_uint256_$","typeString":"function (contract InterestRateModel) returns (uint256)"}},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"61687:48:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3376,"id":3401,"nodeType":"Return","src":"61680:55:0"}]},"documentation":"@notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\n@dev Admin function to accrue interest and update the interest rate model\n@param newInterestRateModel the new interest rate model to use\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setInterestRateModel","parameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"name":"newInterestRateModel","nodeType":"VariableDeclaration","scope":3403,"src":"61148:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3371,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"61148:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"}],"src":"61147:40:0"},"returnParameters":{"id":3376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"name":"","nodeType":"VariableDeclaration","scope":3403,"src":"61204:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint","nodeType":"ElementaryTypeName","src":"61204:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"61203:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":3864,"visibility":"public"},{"id":3465,"nodeType":"FunctionDefinition","src":"62064:1271:0","nodes":[],"body":{"id":3464,"nodeType":"Block","src":"62164:1171:0","nodes":[],"statements":[{"assignments":[3411],"declarations":[{"constant":false,"id":3411,"name":"oldInterestRateModel","nodeType":"VariableDeclaration","scope":3464,"src":"62258:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3410,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"62258:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"}],"id":3412,"initialValue":null,"nodeType":"VariableDeclarationStatement","src":"62258:38:0"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3413,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"62344:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"62344:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":3415,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3524,"src":"62358:5:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"62344:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3425,"nodeType":"IfStatement","src":"62340:130:0","trueBody":{"id":3424,"nodeType":"Block","src":"62365:105:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3418,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"62391:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3419,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"62391:18:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3420,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"62411:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_INTEREST_RATE_MODEL_OWNER_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"62411:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3417,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"62386:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62386:73:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3409,"id":3423,"nodeType":"Return","src":"62379:80:0"}]}},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3426,"name":"accrualBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3536,"src":"62571:18:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"id":3427,"name":"getBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"62593:14:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62593:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"62571:38:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3438,"nodeType":"IfStatement","src":"62567:153:0","trueBody":{"id":3437,"nodeType":"Block","src":"62611:109:0","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3431,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"62637:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"MARKET_NOT_FRESH","nodeType":"MemberAccess","referencedDeclaration":null,"src":"62637:22:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3433,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"62661:11:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4813_$","typeString":"type(enum TokenErrorReporter.FailureInfo)"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_INTEREST_RATE_MODEL_FRESH_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"62661:47:0","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":3430,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4845,"src":"62632:4:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4731_$_t_enum$_FailureInfo_$4813_$returns$_t_uint256_$","typeString":"function (enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo) returns (uint256)"}},"id":3435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62632:77:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3409,"id":3436,"nodeType":"Return","src":"62625:84:0"}]}},{"expression":{"argumentTypes":null,"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3439,"name":"oldInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"62788:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3440,"name":"interestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"62811:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"src":"62788:40:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":3442,"nodeType":"ExpressionStatement","src":"62788:40:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":null,"id":3444,"name":"newInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"62928:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isInterestRateModel","nodeType":"MemberAccess","referencedDeclaration":6041,"src":"62928:40:0","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62928:42:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"6d61726b6572206d6574686f642072657475726e65642066616c7365","id":3447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"62972:30:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_73c0b9b9fc59551809f9e3f686bb994cac13db80a83fd9ccdfe6d53da80fe637","typeString":"literal_string \"marker method returned false\""},"value":"marker method returned false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_73c0b9b9fc59551809f9e3f686bb994cac13db80a83fd9ccdfe6d53da80fe637","typeString":"literal_string \"marker method returned false\""}],"id":3443,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"62920:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"62920:83:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3449,"nodeType":"ExpressionStatement","src":"62920:83:0"},{"expression":{"argumentTypes":null,"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3450,"name":"interestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3530,"src":"63077:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":3451,"name":"newInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"63097:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"src":"63077:40:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"id":3453,"nodeType":"ExpressionStatement","src":"63077:40:0"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3455,"name":"oldInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3411,"src":"63247:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},{"argumentTypes":null,"id":3456,"name":"newInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3405,"src":"63269:20:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}],"id":3454,"name":"NewMarketInterestRateModel","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3653,"src":"63220:26:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_contract$_InterestRateModel_$6066_$_t_contract$_InterestRateModel_$6066_$returns$__$","typeString":"function (contract InterestRateModel,contract InterestRateModel)"}},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"63220:70:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3458,"nodeType":"EmitStatement","src":"63215:75:0"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3460,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4731,"src":"63313:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4731_$","typeString":"type(enum TokenErrorReporter.Error)"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"63313:14:0","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":3459,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"63308:4:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":3462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"63308:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3409,"id":3463,"nodeType":"Return","src":"63301:27:0"}]},"documentation":"@notice updates the interest rate model (*requires fresh interest accrual)\n@dev Admin function to update the interest rate model\n@param newInterestRateModel the new interest rate model to use\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setInterestRateModelFresh","parameters":{"id":3406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3405,"name":"newInterestRateModel","nodeType":"VariableDeclaration","scope":3465,"src":"62100:38:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3404,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"62100:17:0","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"}],"src":"62099:40:0"},"returnParameters":{"id":3409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3408,"name":"","nodeType":"VariableDeclaration","scope":3465,"src":"62158:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint","nodeType":"ElementaryTypeName","src":"62158:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"62157:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3470,"nodeType":"FunctionDefinition","src":"63587:53:0","nodes":[],"documentation":"@notice Gets balance of this contract in terms of the underlying\n@dev This excludes the value of the current message, if any\n@return The quantity of underlying owned by this contract","implemented":false,"kind":"function","modifiers":[],"name":"getCashPrior","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[],"src":"63608:2:0"},"returnParameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"name":"","nodeType":"VariableDeclaration","scope":3470,"src":"63634:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint","nodeType":"ElementaryTypeName","src":"63634:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"63633:6:0"},"scope":3504,"stateMutability":"view","superFunction":null,"visibility":"internal"},{"id":3479,"nodeType":"FunctionDefinition","src":"63876:73:0","nodes":[],"documentation":"@dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\n This may revert due to insufficient balance or insufficient allowance.","implemented":false,"kind":"function","modifiers":[],"name":"doTransferIn","parameters":{"id":3475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3472,"name":"from","nodeType":"VariableDeclaration","scope":3479,"src":"63898:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"63898:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3474,"name":"amount","nodeType":"VariableDeclaration","scope":3479,"src":"63912:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3473,"name":"uint","nodeType":"ElementaryTypeName","src":"63912:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"63897:27:0"},"returnParameters":{"id":3478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"name":"","nodeType":"VariableDeclaration","scope":3479,"src":"63943:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3476,"name":"uint","nodeType":"ElementaryTypeName","src":"63943:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"63942:6:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3486,"nodeType":"FunctionDefinition","src":"64332:65:0","nodes":[],"documentation":"@dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\n If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\n If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.","implemented":false,"kind":"function","modifiers":[],"name":"doTransferOut","parameters":{"id":3484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3481,"name":"to","nodeType":"VariableDeclaration","scope":3486,"src":"64355:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3480,"name":"address","nodeType":"ElementaryTypeName","src":"64355:15:0","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"},{"constant":false,"id":3483,"name":"amount","nodeType":"VariableDeclaration","scope":3486,"src":"64375:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3482,"name":"uint","nodeType":"ElementaryTypeName","src":"64375:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"64354:33:0"},"returnParameters":{"id":3485,"nodeType":"ParameterList","parameters":[],"src":"64396:0:0"},"scope":3504,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":3503,"nodeType":"ModifierDefinition","src":"64529:177:0","nodes":[],"body":{"id":3502,"nodeType":"Block","src":"64553:153:0","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":3489,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"64571:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"hexValue":"72652d656e7465726564","id":3490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"64584:12:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_987a3f65bf6c5144d945a7d9587fa166ee3a901eb2b594a0815c3c20bf841a5e","typeString":"literal_string \"re-entered\""},"value":"re-entered"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_987a3f65bf6c5144d945a7d9587fa166ee3a901eb2b594a0815c3c20bf841a5e","typeString":"literal_string \"re-entered\""}],"id":3488,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"64563:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"64563:34:0","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3492,"nodeType":"ExpressionStatement","src":"64563:34:0"},{"expression":{"argumentTypes":null,"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3493,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"64607:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"66616c7365","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"64621:5:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"64607:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3496,"nodeType":"ExpressionStatement","src":"64607:19:0"},{"id":3497,"nodeType":"PlaceholderStatement","src":"64636:1:0"},{"expression":{"argumentTypes":null,"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":3498,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3510,"src":"64647:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"hexValue":"74727565","id":3499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"64661:4:0","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"64647:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3501,"nodeType":"ExpressionStatement","src":"64647:18:0"}]},"documentation":"@dev Prevents a contract from calling itself, directly or indirectly.","name":"nonReentrant","parameters":{"id":3487,"nodeType":"ParameterList","parameters":[],"src":"64550:2:0"},"visibility":"internal"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":9,"name":"CTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":3865,"src":"383:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"id":10,"nodeType":"InheritanceSpecifier","src":"383:15:0"},{"arguments":null,"baseName":{"contractScope":null,"id":11,"name":"Exponential","nodeType":"UserDefinedTypeName","referencedDeclaration":6036,"src":"400:11:0","typeDescriptions":{"typeIdentifier":"t_contract$_Exponential_$6036","typeString":"contract Exponential"}},"id":12,"nodeType":"InheritanceSpecifier","src":"400:11:0"},{"arguments":null,"baseName":{"contractScope":null,"id":13,"name":"TokenErrorReporter","nodeType":"UserDefinedTypeName","referencedDeclaration":4872,"src":"413:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_TokenErrorReporter_$4872","typeString":"contract TokenErrorReporter"}},"id":14,"nodeType":"InheritanceSpecifier","src":"413:18:0"}],"contractDependencies":[3564,3865,4150,4872,6036],"contractKind":"contract","documentation":"@title Compound's CToken Contract\n@notice Abstract base for CTokens\n@author Compound","fullyImplemented":false,"linearizedBaseContracts":[3504,4872,6036,4150,3865,3564],"name":"CToken","scope":3505}]}},"contracts/CTokenInterfaces.sol":{"id":1,"ast":{"absolutePath":"contracts/CTokenInterfaces.sol","id":3966,"exportedSymbols":{"CDelegateInterface":[3965],"CDelegationStorage":[3936],"CDelegatorInterface":[3954],"CErc20Interface":[3933],"CErc20Storage":[3868],"CTokenInterface":[3865],"CTokenStorage":[3564]},"nodeType":"SourceUnit","src":"0:9794:1","nodes":[{"id":3506,"nodeType":"PragmaDirective","src":"0:24:1","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":3507,"nodeType":"ImportDirective","src":"26:36:1","nodes":[],"absolutePath":"contracts/ComptrollerInterface.sol","file":"./ComptrollerInterface.sol","scope":3966,"sourceUnit":4358,"symbolAliases":[],"unitAlias":""},{"id":3508,"nodeType":"ImportDirective","src":"63:33:1","nodes":[],"absolutePath":"contracts/InterestRateModel.sol","file":"./InterestRateModel.sol","scope":3966,"sourceUnit":6067,"symbolAliases":[],"unitAlias":""},{"id":3564,"nodeType":"ContractDefinition","src":"98:2918:1","nodes":[{"id":3510,"nodeType":"VariableDeclaration","src":"193:25:1","nodes":[],"constant":false,"name":"_notEntered","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3509,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"id":3512,"nodeType":"VariableDeclaration","src":"289:18:1","nodes":[],"constant":false,"name":"name","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3511,"name":"string","nodeType":"ElementaryTypeName","src":"289:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"public"},{"id":3514,"nodeType":"VariableDeclaration","src":"380:20:1","nodes":[],"constant":false,"name":"symbol","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3513,"name":"string","nodeType":"ElementaryTypeName","src":"380:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"public"},{"id":3516,"nodeType":"VariableDeclaration","src":"475:21:1","nodes":[],"constant":false,"name":"decimals","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3515,"name":"uint8","nodeType":"ElementaryTypeName","src":"475:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"public"},{"id":3519,"nodeType":"VariableDeclaration","src":"597:56:1","nodes":[],"constant":true,"name":"borrowRateMaxMantissa","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3517,"name":"uint","nodeType":"ElementaryTypeName","src":"597:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"302e30303035653136","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"644:9:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_5000000000000_by_1","typeString":"int_const 5000000000000"},"value":"0.0005e16"},"visibility":"internal"},{"id":3522,"nodeType":"VariableDeclaration","src":"755:54:1","nodes":[],"constant":true,"name":"reserveFactorMaxMantissa","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3520,"name":"uint","nodeType":"ElementaryTypeName","src":"755:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31653138","id":3521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"id":3524,"nodeType":"VariableDeclaration","src":"879:28:1","nodes":[],"constant":false,"name":"admin","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3523,"name":"address","nodeType":"ElementaryTypeName","src":"879:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"public"},{"id":3526,"nodeType":"VariableDeclaration","src":"985:35:1","nodes":[],"constant":false,"name":"pendingAdmin","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3525,"name":"address","nodeType":"ElementaryTypeName","src":"985:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"public"},{"id":3528,"nodeType":"VariableDeclaration","src":"1106:39:1","nodes":[],"constant":false,"name":"comptroller","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":3527,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"1106:20:1","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"public"},{"id":3530,"nodeType":"VariableDeclaration","src":"1242:42:1","nodes":[],"constant":false,"name":"interestRateModel","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3529,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"1242:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"public"},{"id":3532,"nodeType":"VariableDeclaration","src":"1408:41:1","nodes":[],"constant":false,"name":"initialExchangeRateMantissa","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3531,"name":"uint","nodeType":"ElementaryTypeName","src":"1408:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"id":3534,"nodeType":"VariableDeclaration","src":"1541:33:1","nodes":[],"constant":false,"name":"reserveFactorMantissa","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3533,"name":"uint","nodeType":"ElementaryTypeName","src":"1541:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3536,"nodeType":"VariableDeclaration","src":"1659:30:1","nodes":[],"constant":false,"name":"accrualBlockNumber","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3535,"name":"uint","nodeType":"ElementaryTypeName","src":"1659:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3538,"nodeType":"VariableDeclaration","src":"1805:23:1","nodes":[],"constant":false,"name":"borrowIndex","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3537,"name":"uint","nodeType":"ElementaryTypeName","src":"1805:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3540,"nodeType":"VariableDeclaration","src":"1935:24:1","nodes":[],"constant":false,"name":"totalBorrows","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3539,"name":"uint","nodeType":"ElementaryTypeName","src":"1935:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3542,"nodeType":"VariableDeclaration","src":"2060:25:1","nodes":[],"constant":false,"name":"totalReserves","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3541,"name":"uint","nodeType":"ElementaryTypeName","src":"2060:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3544,"nodeType":"VariableDeclaration","src":"2161:23:1","nodes":[],"constant":false,"name":"totalSupply","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3543,"name":"uint","nodeType":"ElementaryTypeName","src":"2161:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":3548,"nodeType":"VariableDeclaration","src":"2273:48:1","nodes":[],"constant":false,"name":"accountTokens","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3547,"keyType":{"id":3545,"name":"address","nodeType":"ElementaryTypeName","src":"2282:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2273:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3546,"name":"uint","nodeType":"ElementaryTypeName","src":"2293:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"internal"},{"id":3554,"nodeType":"VariableDeclaration","src":"2411:74:1","nodes":[],"constant":false,"name":"transferAllowances","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":3553,"keyType":{"id":3549,"name":"address","nodeType":"ElementaryTypeName","src":"2420:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2411:46:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":3552,"keyType":{"id":3550,"name":"address","nodeType":"ElementaryTypeName","src":"2440:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2431:25:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3551,"name":"uint","nodeType":"ElementaryTypeName","src":"2451:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"value":null,"visibility":"internal"},{"id":3559,"nodeType":"StructDefinition","src":"2777:81:1","nodes":[],"canonicalName":"CTokenStorage.BorrowSnapshot","members":[{"constant":false,"id":3556,"name":"principal","nodeType":"VariableDeclaration","scope":3559,"src":"2809:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3555,"name":"uint","nodeType":"ElementaryTypeName","src":"2809:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3558,"name":"interestIndex","nodeType":"VariableDeclaration","scope":3559,"src":"2833:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3557,"name":"uint","nodeType":"ElementaryTypeName","src":"2833:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"BorrowSnapshot","scope":3564,"visibility":"public"},{"id":3563,"nodeType":"VariableDeclaration","src":"2955:58:1","nodes":[],"constant":false,"name":"accountBorrows","scope":3564,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot)"},"typeName":{"id":3562,"keyType":{"id":3560,"name":"address","nodeType":"ElementaryTypeName","src":"2963:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2955:34:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_BorrowSnapshot_$3559_storage_$","typeString":"mapping(address => struct CTokenStorage.BorrowSnapshot)"},"valueType":{"contractScope":null,"id":3561,"name":"BorrowSnapshot","nodeType":"UserDefinedTypeName","referencedDeclaration":3559,"src":"2974:14:1","typeDescriptions":{"typeIdentifier":"t_struct$_BorrowSnapshot_$3559_storage_ptr","typeString":"struct CTokenStorage.BorrowSnapshot"}}},"value":null,"visibility":"internal"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[3564],"name":"CTokenStorage","scope":3966},{"id":3865,"nodeType":"ContractDefinition","src":"3018:4566:1","nodes":[{"id":3569,"nodeType":"VariableDeclaration","src":"3155:36:1","nodes":[],"constant":true,"name":"isCToken","scope":3865,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3567,"name":"bool","nodeType":"ElementaryTypeName","src":"3155:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"argumentTypes":null,"hexValue":"74727565","id":3568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3187:4:1","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"id":3579,"nodeType":"EventDefinition","src":"3298:100:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when interest is accrued","name":"AccrueInterest","parameters":{"id":3578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3571,"indexed":false,"name":"cashPrior","nodeType":"VariableDeclaration","scope":3579,"src":"3319:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3570,"name":"uint","nodeType":"ElementaryTypeName","src":"3319:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3573,"indexed":false,"name":"interestAccumulated","nodeType":"VariableDeclaration","scope":3579,"src":"3335:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3572,"name":"uint","nodeType":"ElementaryTypeName","src":"3335:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3575,"indexed":false,"name":"borrowIndex","nodeType":"VariableDeclaration","scope":3579,"src":"3361:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3574,"name":"uint","nodeType":"ElementaryTypeName","src":"3361:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3577,"indexed":false,"name":"totalBorrows","nodeType":"VariableDeclaration","scope":3579,"src":"3379:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3576,"name":"uint","nodeType":"ElementaryTypeName","src":"3379:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3318:79:1"}},{"id":3587,"nodeType":"EventDefinition","src":"3472:61:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when tokens are minted","name":"Mint","parameters":{"id":3586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3581,"indexed":false,"name":"minter","nodeType":"VariableDeclaration","scope":3587,"src":"3483:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3580,"name":"address","nodeType":"ElementaryTypeName","src":"3483:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3583,"indexed":false,"name":"mintAmount","nodeType":"VariableDeclaration","scope":3587,"src":"3499:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3582,"name":"uint","nodeType":"ElementaryTypeName","src":"3499:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3585,"indexed":false,"name":"mintTokens","nodeType":"VariableDeclaration","scope":3587,"src":"3516:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3584,"name":"uint","nodeType":"ElementaryTypeName","src":"3516:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3482:50:1"}},{"id":3595,"nodeType":"EventDefinition","src":"3609:69:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when tokens are redeemed","name":"Redeem","parameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3589,"indexed":false,"name":"redeemer","nodeType":"VariableDeclaration","scope":3595,"src":"3622:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3588,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3591,"indexed":false,"name":"redeemAmount","nodeType":"VariableDeclaration","scope":3595,"src":"3640:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3590,"name":"uint","nodeType":"ElementaryTypeName","src":"3640:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3593,"indexed":false,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":3595,"src":"3659:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint","nodeType":"ElementaryTypeName","src":"3659:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3621:56:1"}},{"id":3605,"nodeType":"EventDefinition","src":"3757:90:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when underlying is borrowed","name":"Borrow","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3597,"indexed":false,"name":"borrower","nodeType":"VariableDeclaration","scope":3605,"src":"3770:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3596,"name":"address","nodeType":"ElementaryTypeName","src":"3770:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3599,"indexed":false,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":3605,"src":"3788:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3598,"name":"uint","nodeType":"ElementaryTypeName","src":"3788:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3601,"indexed":false,"name":"accountBorrows","nodeType":"VariableDeclaration","scope":3605,"src":"3807:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3600,"name":"uint","nodeType":"ElementaryTypeName","src":"3807:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3603,"indexed":false,"name":"totalBorrows","nodeType":"VariableDeclaration","scope":3605,"src":"3828:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3602,"name":"uint","nodeType":"ElementaryTypeName","src":"3828:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3769:77:1"}},{"id":3617,"nodeType":"EventDefinition","src":"3922:109:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when a borrow is repaid","name":"RepayBorrow","parameters":{"id":3616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"indexed":false,"name":"payer","nodeType":"VariableDeclaration","scope":3617,"src":"3940:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3606,"name":"address","nodeType":"ElementaryTypeName","src":"3940:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3609,"indexed":false,"name":"borrower","nodeType":"VariableDeclaration","scope":3617,"src":"3955:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3608,"name":"address","nodeType":"ElementaryTypeName","src":"3955:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3611,"indexed":false,"name":"repayAmount","nodeType":"VariableDeclaration","scope":3617,"src":"3973:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3610,"name":"uint","nodeType":"ElementaryTypeName","src":"3973:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3613,"indexed":false,"name":"accountBorrows","nodeType":"VariableDeclaration","scope":3617,"src":"3991:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3612,"name":"uint","nodeType":"ElementaryTypeName","src":"3991:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3615,"indexed":false,"name":"totalBorrows","nodeType":"VariableDeclaration","scope":3617,"src":"4012:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3614,"name":"uint","nodeType":"ElementaryTypeName","src":"4012:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3939:91:1"}},{"id":3629,"nodeType":"EventDefinition","src":"4110:122:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when a borrow is liquidated","name":"LiquidateBorrow","parameters":{"id":3628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3619,"indexed":false,"name":"liquidator","nodeType":"VariableDeclaration","scope":3629,"src":"4132:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3618,"name":"address","nodeType":"ElementaryTypeName","src":"4132:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3621,"indexed":false,"name":"borrower","nodeType":"VariableDeclaration","scope":3629,"src":"4152:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3620,"name":"address","nodeType":"ElementaryTypeName","src":"4152:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3623,"indexed":false,"name":"repayAmount","nodeType":"VariableDeclaration","scope":3629,"src":"4170:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3622,"name":"uint","nodeType":"ElementaryTypeName","src":"4170:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3625,"indexed":false,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":3629,"src":"4188:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3624,"name":"address","nodeType":"ElementaryTypeName","src":"4188:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3627,"indexed":false,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":3629,"src":"4214:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3626,"name":"uint","nodeType":"ElementaryTypeName","src":"4214:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4131:100:1"}},{"id":3635,"nodeType":"EventDefinition","src":"4341:72:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when pendingAdmin is changed","name":"NewPendingAdmin","parameters":{"id":3634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3631,"indexed":false,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":3635,"src":"4363:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3630,"name":"address","nodeType":"ElementaryTypeName","src":"4363:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3633,"indexed":false,"name":"newPendingAdmin","nodeType":"VariableDeclaration","scope":3635,"src":"4388:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"4388:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"4362:50:1"}},{"id":3641,"nodeType":"EventDefinition","src":"4524:51:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when pendingAdmin is accepted, which means admin is updated","name":"NewAdmin","parameters":{"id":3640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3637,"indexed":false,"name":"oldAdmin","nodeType":"VariableDeclaration","scope":3641,"src":"4539:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3636,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3639,"indexed":false,"name":"newAdmin","nodeType":"VariableDeclaration","scope":3641,"src":"4557:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3638,"name":"address","nodeType":"ElementaryTypeName","src":"4557:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"4538:36:1"}},{"id":3647,"nodeType":"EventDefinition","src":"4654:95:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when comptroller is changed","name":"NewComptroller","parameters":{"id":3646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3643,"indexed":false,"name":"oldComptroller","nodeType":"VariableDeclaration","scope":3647,"src":"4675:35:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":3642,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"4675:20:1","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"},{"constant":false,"id":3645,"indexed":false,"name":"newComptroller","nodeType":"VariableDeclaration","scope":3647,"src":"4712:35:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":3644,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"4712:20:1","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"}],"src":"4674:74:1"}},{"id":3653,"nodeType":"EventDefinition","src":"4834:113:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when interestRateModel is changed","name":"NewMarketInterestRateModel","parameters":{"id":3652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3649,"indexed":false,"name":"oldInterestRateModel","nodeType":"VariableDeclaration","scope":3653,"src":"4867:38:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3648,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"4867:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"},{"constant":false,"id":3651,"indexed":false,"name":"newInterestRateModel","nodeType":"VariableDeclaration","scope":3653,"src":"4907:38:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3650,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"4907:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"}],"src":"4866:80:1"}},{"id":3659,"nodeType":"EventDefinition","src":"5033:85:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when the reserve factor is changed","name":"NewReserveFactor","parameters":{"id":3658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3655,"indexed":false,"name":"oldReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3659,"src":"5056:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3654,"name":"uint","nodeType":"ElementaryTypeName","src":"5056:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3657,"indexed":false,"name":"newReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3659,"src":"5087:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint","nodeType":"ElementaryTypeName","src":"5087:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5055:62:1"}},{"id":3667,"nodeType":"EventDefinition","src":"5197:79:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when the reserves are added","name":"ReservesAdded","parameters":{"id":3666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"indexed":false,"name":"benefactor","nodeType":"VariableDeclaration","scope":3667,"src":"5217:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3660,"name":"address","nodeType":"ElementaryTypeName","src":"5217:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3663,"indexed":false,"name":"addAmount","nodeType":"VariableDeclaration","scope":3667,"src":"5237:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3662,"name":"uint","nodeType":"ElementaryTypeName","src":"5237:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3665,"indexed":false,"name":"newTotalReserves","nodeType":"VariableDeclaration","scope":3667,"src":"5253:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3664,"name":"uint","nodeType":"ElementaryTypeName","src":"5253:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5216:59:1"}},{"id":3675,"nodeType":"EventDefinition","src":"5357:79:1","nodes":[],"anonymous":false,"documentation":"@notice Event emitted when the reserves are reduced","name":"ReservesReduced","parameters":{"id":3674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3669,"indexed":false,"name":"admin","nodeType":"VariableDeclaration","scope":3675,"src":"5379:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3668,"name":"address","nodeType":"ElementaryTypeName","src":"5379:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3671,"indexed":false,"name":"reduceAmount","nodeType":"VariableDeclaration","scope":3675,"src":"5394:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3670,"name":"uint","nodeType":"ElementaryTypeName","src":"5394:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3673,"indexed":false,"name":"newTotalReserves","nodeType":"VariableDeclaration","scope":3675,"src":"5413:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3672,"name":"uint","nodeType":"ElementaryTypeName","src":"5413:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5378:57:1"}},{"id":3683,"nodeType":"EventDefinition","src":"5494:70:1","nodes":[],"anonymous":false,"documentation":"@notice EIP20 Transfer event","name":"Transfer","parameters":{"id":3682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3677,"indexed":true,"name":"from","nodeType":"VariableDeclaration","scope":3683,"src":"5509:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3676,"name":"address","nodeType":"ElementaryTypeName","src":"5509:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3679,"indexed":true,"name":"to","nodeType":"VariableDeclaration","scope":3683,"src":"5531:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3678,"name":"address","nodeType":"ElementaryTypeName","src":"5531:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3681,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":3683,"src":"5551:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3680,"name":"uint","nodeType":"ElementaryTypeName","src":"5551:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5508:55:1"}},{"id":3691,"nodeType":"EventDefinition","src":"5622:76:1","nodes":[],"anonymous":false,"documentation":"@notice EIP20 Approval event","name":"Approval","parameters":{"id":3690,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3685,"indexed":true,"name":"owner","nodeType":"VariableDeclaration","scope":3691,"src":"5637:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3684,"name":"address","nodeType":"ElementaryTypeName","src":"5637:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3687,"indexed":true,"name":"spender","nodeType":"VariableDeclaration","scope":3691,"src":"5660:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3686,"name":"address","nodeType":"ElementaryTypeName","src":"5660:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3689,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":3691,"src":"5685:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint","nodeType":"ElementaryTypeName","src":"5685:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5636:61:1"}},{"id":3699,"nodeType":"EventDefinition","src":"5749:50:1","nodes":[],"anonymous":false,"documentation":"@notice Failure event","name":"Failure","parameters":{"id":3698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3693,"indexed":false,"name":"error","nodeType":"VariableDeclaration","scope":3699,"src":"5763:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3692,"name":"uint","nodeType":"ElementaryTypeName","src":"5763:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3695,"indexed":false,"name":"info","nodeType":"VariableDeclaration","scope":3699,"src":"5775:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3694,"name":"uint","nodeType":"ElementaryTypeName","src":"5775:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3697,"indexed":false,"name":"detail","nodeType":"VariableDeclaration","scope":3699,"src":"5786:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3696,"name":"uint","nodeType":"ElementaryTypeName","src":"5786:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5762:36:1"}},{"id":3708,"nodeType":"FunctionDefinition","src":"5836:68:1","nodes":[],"documentation":"* User Interface **","implemented":false,"kind":"function","modifiers":[],"name":"transfer","parameters":{"id":3704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3701,"name":"dst","nodeType":"VariableDeclaration","scope":3708,"src":"5854:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3700,"name":"address","nodeType":"ElementaryTypeName","src":"5854:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3703,"name":"amount","nodeType":"VariableDeclaration","scope":3708,"src":"5867:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3702,"name":"uint","nodeType":"ElementaryTypeName","src":"5867:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5853:26:1"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3706,"name":"","nodeType":"VariableDeclaration","scope":3708,"src":"5898:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3705,"name":"bool","nodeType":"ElementaryTypeName","src":"5898:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5897:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3719,"nodeType":"FunctionDefinition","src":"5909:85:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3710,"name":"src","nodeType":"VariableDeclaration","scope":3719,"src":"5931:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3709,"name":"address","nodeType":"ElementaryTypeName","src":"5931:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3712,"name":"dst","nodeType":"VariableDeclaration","scope":3719,"src":"5944:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3711,"name":"address","nodeType":"ElementaryTypeName","src":"5944:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3714,"name":"amount","nodeType":"VariableDeclaration","scope":3719,"src":"5957:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3713,"name":"uint","nodeType":"ElementaryTypeName","src":"5957:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"5930:39:1"},"returnParameters":{"id":3718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3717,"name":"","nodeType":"VariableDeclaration","scope":3719,"src":"5988:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3716,"name":"bool","nodeType":"ElementaryTypeName","src":"5988:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"5987:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3728,"nodeType":"FunctionDefinition","src":"5999:71:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"approve","parameters":{"id":3724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"name":"spender","nodeType":"VariableDeclaration","scope":3728,"src":"6016:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3720,"name":"address","nodeType":"ElementaryTypeName","src":"6016:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3723,"name":"amount","nodeType":"VariableDeclaration","scope":3728,"src":"6033:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3722,"name":"uint","nodeType":"ElementaryTypeName","src":"6033:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6015:30:1"},"returnParameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"name":"","nodeType":"VariableDeclaration","scope":3728,"src":"6064:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3725,"name":"bool","nodeType":"ElementaryTypeName","src":"6064:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"6063:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3737,"nodeType":"FunctionDefinition","src":"6075:80:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","parameters":{"id":3733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"name":"owner","nodeType":"VariableDeclaration","scope":3737,"src":"6094:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3729,"name":"address","nodeType":"ElementaryTypeName","src":"6094:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3732,"name":"spender","nodeType":"VariableDeclaration","scope":3737,"src":"6109:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3731,"name":"address","nodeType":"ElementaryTypeName","src":"6109:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6093:32:1"},"returnParameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3735,"name":"","nodeType":"VariableDeclaration","scope":3737,"src":"6149:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint","nodeType":"ElementaryTypeName","src":"6149:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6148:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3744,"nodeType":"FunctionDefinition","src":"6160:63:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","parameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"name":"owner","nodeType":"VariableDeclaration","scope":3744,"src":"6179:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3738,"name":"address","nodeType":"ElementaryTypeName","src":"6179:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6178:15:1"},"returnParameters":{"id":3743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3742,"name":"","nodeType":"VariableDeclaration","scope":3744,"src":"6217:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3741,"name":"uint","nodeType":"ElementaryTypeName","src":"6217:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6216:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3751,"nodeType":"FunctionDefinition","src":"6228:68:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfUnderlying","parameters":{"id":3747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3746,"name":"owner","nodeType":"VariableDeclaration","scope":3751,"src":"6257:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3745,"name":"address","nodeType":"ElementaryTypeName","src":"6257:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6256:15:1"},"returnParameters":{"id":3750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3749,"name":"","nodeType":"VariableDeclaration","scope":3751,"src":"6290:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3748,"name":"uint","nodeType":"ElementaryTypeName","src":"6290:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6289:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3764,"nodeType":"FunctionDefinition","src":"6301:92:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"getAccountSnapshot","parameters":{"id":3754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3753,"name":"account","nodeType":"VariableDeclaration","scope":3764,"src":"6329:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3752,"name":"address","nodeType":"ElementaryTypeName","src":"6329:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6328:17:1"},"returnParameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3756,"name":"","nodeType":"VariableDeclaration","scope":3764,"src":"6369:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3755,"name":"uint","nodeType":"ElementaryTypeName","src":"6369:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3758,"name":"","nodeType":"VariableDeclaration","scope":3764,"src":"6375:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3757,"name":"uint","nodeType":"ElementaryTypeName","src":"6375:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3760,"name":"","nodeType":"VariableDeclaration","scope":3764,"src":"6381:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3759,"name":"uint","nodeType":"ElementaryTypeName","src":"6381:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3762,"name":"","nodeType":"VariableDeclaration","scope":3764,"src":"6387:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3761,"name":"uint","nodeType":"ElementaryTypeName","src":"6387:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6368:24:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3769,"nodeType":"FunctionDefinition","src":"6398:59:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrowRatePerBlock","parameters":{"id":3765,"nodeType":"ParameterList","parameters":[],"src":"6425:2:1"},"returnParameters":{"id":3768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3767,"name":"","nodeType":"VariableDeclaration","scope":3769,"src":"6451:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3766,"name":"uint","nodeType":"ElementaryTypeName","src":"6451:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6450:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3774,"nodeType":"FunctionDefinition","src":"6462:59:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"supplyRatePerBlock","parameters":{"id":3770,"nodeType":"ParameterList","parameters":[],"src":"6489:2:1"},"returnParameters":{"id":3773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3772,"name":"","nodeType":"VariableDeclaration","scope":3774,"src":"6515:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3771,"name":"uint","nodeType":"ElementaryTypeName","src":"6515:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6514:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3779,"nodeType":"FunctionDefinition","src":"6526:55:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"totalBorrowsCurrent","parameters":{"id":3775,"nodeType":"ParameterList","parameters":[],"src":"6554:2:1"},"returnParameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"name":"","nodeType":"VariableDeclaration","scope":3779,"src":"6575:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3776,"name":"uint","nodeType":"ElementaryTypeName","src":"6575:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6574:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3786,"nodeType":"FunctionDefinition","src":"6586:71:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrowBalanceCurrent","parameters":{"id":3782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3781,"name":"account","nodeType":"VariableDeclaration","scope":3786,"src":"6616:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3780,"name":"address","nodeType":"ElementaryTypeName","src":"6616:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6615:17:1"},"returnParameters":{"id":3785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3784,"name":"","nodeType":"VariableDeclaration","scope":3786,"src":"6651:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3783,"name":"uint","nodeType":"ElementaryTypeName","src":"6651:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6650:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3793,"nodeType":"FunctionDefinition","src":"6662:73:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrowBalanceStored","parameters":{"id":3789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3788,"name":"account","nodeType":"VariableDeclaration","scope":3793,"src":"6691:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3787,"name":"address","nodeType":"ElementaryTypeName","src":"6691:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"6690:17:1"},"returnParameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3791,"name":"","nodeType":"VariableDeclaration","scope":3793,"src":"6729:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3790,"name":"uint","nodeType":"ElementaryTypeName","src":"6729:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6728:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"public"},{"id":3798,"nodeType":"FunctionDefinition","src":"6740:53:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"exchangeRateCurrent","parameters":{"id":3794,"nodeType":"ParameterList","parameters":[],"src":"6768:2:1"},"returnParameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"name":"","nodeType":"VariableDeclaration","scope":3798,"src":"6787:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint","nodeType":"ElementaryTypeName","src":"6787:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6786:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":3803,"nodeType":"FunctionDefinition","src":"6798:57:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"exchangeRateStored","parameters":{"id":3799,"nodeType":"ParameterList","parameters":[],"src":"6825:2:1"},"returnParameters":{"id":3802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3801,"name":"","nodeType":"VariableDeclaration","scope":3803,"src":"6849:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3800,"name":"uint","nodeType":"ElementaryTypeName","src":"6849:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6848:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"public"},{"id":3808,"nodeType":"FunctionDefinition","src":"6860:48:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"getCash","parameters":{"id":3804,"nodeType":"ParameterList","parameters":[],"src":"6876:2:1"},"returnParameters":{"id":3807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3806,"name":"","nodeType":"VariableDeclaration","scope":3808,"src":"6902:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3805,"name":"uint","nodeType":"ElementaryTypeName","src":"6902:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6901:6:1"},"scope":3865,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":3813,"nodeType":"FunctionDefinition","src":"6913:48:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"accrueInterest","parameters":{"id":3809,"nodeType":"ParameterList","parameters":[],"src":"6936:2:1"},"returnParameters":{"id":3812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3811,"name":"","nodeType":"VariableDeclaration","scope":3813,"src":"6955:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3810,"name":"uint","nodeType":"ElementaryTypeName","src":"6955:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6954:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":3824,"nodeType":"FunctionDefinition","src":"6966:95:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"seize","parameters":{"id":3820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"name":"liquidator","nodeType":"VariableDeclaration","scope":3824,"src":"6981:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3814,"name":"address","nodeType":"ElementaryTypeName","src":"6981:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3817,"name":"borrower","nodeType":"VariableDeclaration","scope":3824,"src":"7001:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3816,"name":"address","nodeType":"ElementaryTypeName","src":"7001:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3819,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":3824,"src":"7019:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3818,"name":"uint","nodeType":"ElementaryTypeName","src":"7019:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6980:56:1"},"returnParameters":{"id":3823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3822,"name":"","nodeType":"VariableDeclaration","scope":3824,"src":"7055:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3821,"name":"uint","nodeType":"ElementaryTypeName","src":"7055:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7054:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3831,"nodeType":"FunctionDefinition","src":"7099:83:1","nodes":[],"documentation":"* Admin Functions **","implemented":false,"kind":"function","modifiers":[],"name":"_setPendingAdmin","parameters":{"id":3827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"name":"newPendingAdmin","nodeType":"VariableDeclaration","scope":3831,"src":"7125:31:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3825,"name":"address","nodeType":"ElementaryTypeName","src":"7125:15:1","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"value":null,"visibility":"internal"}],"src":"7124:33:1"},"returnParameters":{"id":3830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3829,"name":"","nodeType":"VariableDeclaration","scope":3831,"src":"7176:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3828,"name":"uint","nodeType":"ElementaryTypeName","src":"7176:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7175:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3836,"nodeType":"FunctionDefinition","src":"7187:48:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"_acceptAdmin","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[],"src":"7208:2:1"},"returnParameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3834,"name":"","nodeType":"VariableDeclaration","scope":3836,"src":"7229:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3833,"name":"uint","nodeType":"ElementaryTypeName","src":"7229:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7228:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3843,"nodeType":"FunctionDefinition","src":"7240:84:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"_setComptroller","parameters":{"id":3839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3838,"name":"newComptroller","nodeType":"VariableDeclaration","scope":3843,"src":"7265:35:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"},"typeName":{"contractScope":null,"id":3837,"name":"ComptrollerInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":4357,"src":"7265:20:1","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerInterface_$4357","typeString":"contract ComptrollerInterface"}},"value":null,"visibility":"internal"}],"src":"7264:37:1"},"returnParameters":{"id":3842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3841,"name":"","nodeType":"VariableDeclaration","scope":3843,"src":"7318:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3840,"name":"uint","nodeType":"ElementaryTypeName","src":"7318:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7317:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":3850,"nodeType":"FunctionDefinition","src":"7329:82:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"_setReserveFactor","parameters":{"id":3846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3845,"name":"newReserveFactorMantissa","nodeType":"VariableDeclaration","scope":3850,"src":"7356:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3844,"name":"uint","nodeType":"ElementaryTypeName","src":"7356:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7355:31:1"},"returnParameters":{"id":3849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3848,"name":"","nodeType":"VariableDeclaration","scope":3850,"src":"7405:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3847,"name":"uint","nodeType":"ElementaryTypeName","src":"7405:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7404:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3857,"nodeType":"FunctionDefinition","src":"7416:68:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"_reduceReserves","parameters":{"id":3853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3852,"name":"reduceAmount","nodeType":"VariableDeclaration","scope":3857,"src":"7441:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3851,"name":"uint","nodeType":"ElementaryTypeName","src":"7441:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7440:19:1"},"returnParameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"name":"","nodeType":"VariableDeclaration","scope":3857,"src":"7478:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint","nodeType":"ElementaryTypeName","src":"7478:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7477:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3864,"nodeType":"FunctionDefinition","src":"7489:93:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"_setInterestRateModel","parameters":{"id":3860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3859,"name":"newInterestRateModel","nodeType":"VariableDeclaration","scope":3864,"src":"7520:38:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"},"typeName":{"contractScope":null,"id":3858,"name":"InterestRateModel","nodeType":"UserDefinedTypeName","referencedDeclaration":6066,"src":"7520:17:1","typeDescriptions":{"typeIdentifier":"t_contract$_InterestRateModel_$6066","typeString":"contract InterestRateModel"}},"value":null,"visibility":"internal"}],"src":"7519:40:1"},"returnParameters":{"id":3863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3862,"name":"","nodeType":"VariableDeclaration","scope":3864,"src":"7576:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3861,"name":"uint","nodeType":"ElementaryTypeName","src":"7576:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7575:6:1"},"scope":3865,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":3565,"name":"CTokenStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":3564,"src":"3046:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenStorage_$3564","typeString":"contract CTokenStorage"}},"id":3566,"nodeType":"InheritanceSpecifier","src":"3046:13:1"}],"contractDependencies":[3564],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[3865,3564],"name":"CTokenInterface","scope":3966},{"id":3868,"nodeType":"ContractDefinition","src":"7586:121:1","nodes":[{"id":3867,"nodeType":"VariableDeclaration","src":"7679:25:1","nodes":[],"constant":false,"name":"underlying","scope":3868,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3866,"name":"address","nodeType":"ElementaryTypeName","src":"7679:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[3868],"name":"CErc20Storage","scope":3966},{"id":3933,"nodeType":"ContractDefinition","src":"7709:722:1","nodes":[{"id":3877,"nodeType":"FunctionDefinition","src":"7788:55:1","nodes":[],"documentation":"* User Interface **","implemented":false,"kind":"function","modifiers":[],"name":"mint","parameters":{"id":3873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3872,"name":"mintAmount","nodeType":"VariableDeclaration","scope":3877,"src":"7802:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3871,"name":"uint","nodeType":"ElementaryTypeName","src":"7802:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7801:17:1"},"returnParameters":{"id":3876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3875,"name":"","nodeType":"VariableDeclaration","scope":3877,"src":"7837:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3874,"name":"uint","nodeType":"ElementaryTypeName","src":"7837:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7836:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3884,"nodeType":"FunctionDefinition","src":"7848:59:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"redeem","parameters":{"id":3880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":3884,"src":"7864:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint","nodeType":"ElementaryTypeName","src":"7864:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7863:19:1"},"returnParameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"name":"","nodeType":"VariableDeclaration","scope":3884,"src":"7901:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3881,"name":"uint","nodeType":"ElementaryTypeName","src":"7901:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7900:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3891,"nodeType":"FunctionDefinition","src":"7912:69:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"redeemUnderlying","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"name":"redeemAmount","nodeType":"VariableDeclaration","scope":3891,"src":"7938:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3885,"name":"uint","nodeType":"ElementaryTypeName","src":"7938:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7937:19:1"},"returnParameters":{"id":3890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3889,"name":"","nodeType":"VariableDeclaration","scope":3891,"src":"7975:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint","nodeType":"ElementaryTypeName","src":"7975:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7974:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3898,"nodeType":"FunctionDefinition","src":"7986:59:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrow","parameters":{"id":3894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3893,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":3898,"src":"8002:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3892,"name":"uint","nodeType":"ElementaryTypeName","src":"8002:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8001:19:1"},"returnParameters":{"id":3897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"name":"","nodeType":"VariableDeclaration","scope":3898,"src":"8039:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3895,"name":"uint","nodeType":"ElementaryTypeName","src":"8039:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8038:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3905,"nodeType":"FunctionDefinition","src":"8050:63:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"repayBorrow","parameters":{"id":3901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3900,"name":"repayAmount","nodeType":"VariableDeclaration","scope":3905,"src":"8071:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3899,"name":"uint","nodeType":"ElementaryTypeName","src":"8071:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8070:18:1"},"returnParameters":{"id":3904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3903,"name":"","nodeType":"VariableDeclaration","scope":3905,"src":"8107:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3902,"name":"uint","nodeType":"ElementaryTypeName","src":"8107:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8106:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3914,"nodeType":"FunctionDefinition","src":"8118:87:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"repayBorrowBehalf","parameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3907,"name":"borrower","nodeType":"VariableDeclaration","scope":3914,"src":"8145:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3906,"name":"address","nodeType":"ElementaryTypeName","src":"8145:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3909,"name":"repayAmount","nodeType":"VariableDeclaration","scope":3914,"src":"8163:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3908,"name":"uint","nodeType":"ElementaryTypeName","src":"8163:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8144:36:1"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"name":"","nodeType":"VariableDeclaration","scope":3914,"src":"8199:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint","nodeType":"ElementaryTypeName","src":"8199:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8198:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3925,"nodeType":"FunctionDefinition","src":"8210:119:1","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"liquidateBorrow","parameters":{"id":3921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3916,"name":"borrower","nodeType":"VariableDeclaration","scope":3925,"src":"8235:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3915,"name":"address","nodeType":"ElementaryTypeName","src":"8235:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3918,"name":"repayAmount","nodeType":"VariableDeclaration","scope":3925,"src":"8253:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3917,"name":"uint","nodeType":"ElementaryTypeName","src":"8253:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3920,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":3925,"src":"8271:32:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"},"typeName":{"contractScope":null,"id":3919,"name":"CTokenInterface","nodeType":"UserDefinedTypeName","referencedDeclaration":3865,"src":"8271:15:1","typeDescriptions":{"typeIdentifier":"t_contract$_CTokenInterface_$3865","typeString":"contract CTokenInterface"}},"value":null,"visibility":"internal"}],"src":"8234:70:1"},"returnParameters":{"id":3924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3923,"name":"","nodeType":"VariableDeclaration","scope":3925,"src":"8323:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3922,"name":"uint","nodeType":"ElementaryTypeName","src":"8323:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8322:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":3932,"nodeType":"FunctionDefinition","src":"8367:62:1","nodes":[],"documentation":"* Admin Functions **","implemented":false,"kind":"function","modifiers":[],"name":"_addReserves","parameters":{"id":3928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3927,"name":"addAmount","nodeType":"VariableDeclaration","scope":3932,"src":"8389:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3926,"name":"uint","nodeType":"ElementaryTypeName","src":"8389:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8388:16:1"},"returnParameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"name":"","nodeType":"VariableDeclaration","scope":3932,"src":"8423:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3929,"name":"uint","nodeType":"ElementaryTypeName","src":"8423:4:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8422:6:1"},"scope":3933,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":3869,"name":"CErc20Storage","nodeType":"UserDefinedTypeName","referencedDeclaration":3868,"src":"7737:13:1","typeDescriptions":{"typeIdentifier":"t_contract$_CErc20Storage_$3868","typeString":"contract CErc20Storage"}},"id":3870,"nodeType":"InheritanceSpecifier","src":"7737:13:1"}],"contractDependencies":[3868],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[3933,3868],"name":"CErc20Interface","scope":3966},{"id":3936,"nodeType":"ContractDefinition","src":"8433:138:1","nodes":[{"id":3935,"nodeType":"VariableDeclaration","src":"8539:29:1","nodes":[],"constant":false,"name":"implementation","scope":3936,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3934,"name":"address","nodeType":"ElementaryTypeName","src":"8539:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[3936],"name":"CDelegationStorage","scope":3966},{"id":3954,"nodeType":"ContractDefinition","src":"8573:717:1","nodes":[{"id":3944,"nodeType":"EventDefinition","src":"8700:78:1","nodes":[],"anonymous":false,"documentation":"@notice Emitted when implementation is changed","name":"NewImplementation","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3940,"indexed":false,"name":"oldImplementation","nodeType":"VariableDeclaration","scope":3944,"src":"8724:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"8724:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3942,"indexed":false,"name":"newImplementation","nodeType":"VariableDeclaration","scope":3944,"src":"8751:25:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3941,"name":"address","nodeType":"ElementaryTypeName","src":"8751:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"8723:54:1"}},{"id":3953,"nodeType":"FunctionDefinition","src":"9171:117:1","nodes":[],"documentation":"@notice Called by the admin to update the implementation of the delegator\n@param implementation_ The address of the new implementation for delegation\n@param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\n@param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation","implemented":false,"kind":"function","modifiers":[],"name":"_setImplementation","parameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3946,"name":"implementation_","nodeType":"VariableDeclaration","scope":3953,"src":"9199:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3945,"name":"address","nodeType":"ElementaryTypeName","src":"9199:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":3948,"name":"allowResign","nodeType":"VariableDeclaration","scope":3953,"src":"9224:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3947,"name":"bool","nodeType":"ElementaryTypeName","src":"9224:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":3950,"name":"becomeImplementationData","nodeType":"VariableDeclaration","scope":3953,"src":"9242:37:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3949,"name":"bytes","nodeType":"ElementaryTypeName","src":"9242:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"9198:82:1"},"returnParameters":{"id":3952,"nodeType":"ParameterList","parameters":[],"src":"9287:0:1"},"scope":3954,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":3937,"name":"CDelegationStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":3936,"src":"8605:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_CDelegationStorage_$3936","typeString":"contract CDelegationStorage"}},"id":3938,"nodeType":"InheritanceSpecifier","src":"8605:18:1"}],"contractDependencies":[3936],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[3954,3936],"name":"CDelegatorInterface","scope":3966},{"id":3965,"nodeType":"ContractDefinition","src":"9292:501:1","nodes":[{"id":3961,"nodeType":"FunctionDefinition","src":"9589:57:1","nodes":[],"documentation":"@notice Called by the delegator on a delegate to initialize it for duty\n@dev Should revert if any issues arise which make it unfit for delegation\n@param data The encoded bytes data for any initialization","implemented":false,"kind":"function","modifiers":[],"name":"_becomeImplementation","parameters":{"id":3959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3958,"name":"data","nodeType":"VariableDeclaration","scope":3961,"src":"9620:17:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3957,"name":"bytes","nodeType":"ElementaryTypeName","src":"9620:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":null,"visibility":"internal"}],"src":"9619:19:1"},"returnParameters":{"id":3960,"nodeType":"ParameterList","parameters":[],"src":"9645:0:1"},"scope":3965,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":3964,"nodeType":"FunctionDefinition","src":"9751:40:1","nodes":[],"documentation":"@notice Called by the delegator on a delegate to forfeit its responsibility","implemented":false,"kind":"function","modifiers":[],"name":"_resignImplementation","parameters":{"id":3962,"nodeType":"ParameterList","parameters":[],"src":"9781:2:1"},"returnParameters":{"id":3963,"nodeType":"ParameterList","parameters":[],"src":"9790:0:1"},"scope":3965,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":3955,"name":"CDelegationStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":3936,"src":"9323:18:1","typeDescriptions":{"typeIdentifier":"t_contract$_CDelegationStorage_$3936","typeString":"contract CDelegationStorage"}},"id":3956,"nodeType":"InheritanceSpecifier","src":"9323:18:1"}],"contractDependencies":[3936],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[3965,3936],"name":"CDelegateInterface","scope":3966}]}},"contracts/CarefulMath.sol":{"id":2,"ast":{"absolutePath":"contracts/CarefulMath.sol","id":4151,"exportedSymbols":{"CarefulMath":[4150]},"nodeType":"SourceUnit","src":"0:2192:2","nodes":[{"id":3967,"nodeType":"PragmaDirective","src":"0:24:2","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4150,"nodeType":"ContractDefinition","src":"243:1949:2","nodes":[{"id":3972,"nodeType":"EnumDefinition","src":"339:118:2","nodes":[],"canonicalName":"CarefulMath.MathError","members":[{"id":3968,"name":"NO_ERROR","nodeType":"EnumValue","src":"364:8:2"},{"id":3969,"name":"DIVISION_BY_ZERO","nodeType":"EnumValue","src":"382:16:2"},{"id":3970,"name":"INTEGER_OVERFLOW","nodeType":"EnumValue","src":"408:16:2"},{"id":3971,"name":"INTEGER_UNDERFLOW","nodeType":"EnumValue","src":"434:17:2"}],"name":"MathError"},{"id":4018,"nodeType":"FunctionDefinition","src":"543:331:2","nodes":[],"body":{"id":4017,"nodeType":"Block","src":"616:258:2","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3983,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"630:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":3984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"635:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"630:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":3992,"nodeType":"IfStatement","src":"626:67:2","trueBody":{"id":3991,"nodeType":"Block","src":"638:55:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":3986,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"660:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":3987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"660:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":3988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"680:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":3989,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"659:23:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":3982,"id":3990,"nodeType":"Return","src":"652:30:2"}]}},{"assignments":[3994],"declarations":[{"constant":false,"id":3994,"name":"c","nodeType":"VariableDeclaration","scope":4017,"src":"703:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3993,"name":"uint","nodeType":"ElementaryTypeName","src":"703:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":3998,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3995,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"712:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":3996,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"716:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"712:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"703:14:2"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":3999,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"732:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":4000,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3974,"src":"736:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"732:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":4002,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3976,"src":"741:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"732:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4015,"nodeType":"Block","src":"813:55:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4010,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"835:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4011,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"835:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":4012,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3994,"src":"855:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"834:23:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":3982,"id":4014,"nodeType":"Return","src":"827:30:2"}]},"id":4016,"nodeType":"IfStatement","src":"728:140:2","trueBody":{"id":4009,"nodeType":"Block","src":"744:63:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4004,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"766:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INTEGER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":null,"src":"766:26:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":4006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"794:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4007,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"765:31:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":3982,"id":4008,"nodeType":"Return","src":"758:38:2"}]}}]},"documentation":"@dev Multiplies two numbers, returns an error on overflow.","implemented":true,"kind":"function","modifiers":[],"name":"mulUInt","parameters":{"id":3977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3974,"name":"a","nodeType":"VariableDeclaration","scope":4018,"src":"560:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3973,"name":"uint","nodeType":"ElementaryTypeName","src":"560:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":3976,"name":"b","nodeType":"VariableDeclaration","scope":4018,"src":"568:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3975,"name":"uint","nodeType":"ElementaryTypeName","src":"568:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"559:16:2"},"returnParameters":{"id":3982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3979,"name":"","nodeType":"VariableDeclaration","scope":4018,"src":"599:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":3978,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"599:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":3981,"name":"","nodeType":"VariableDeclaration","scope":4018,"src":"610:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3980,"name":"uint","nodeType":"ElementaryTypeName","src":"610:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"598:17:2"},"scope":4150,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":4047,"nodeType":"FunctionDefinition","src":"964:209:2","nodes":[],"body":{"id":4046,"nodeType":"Block","src":"1037:136:2","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4029,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"1051:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":4030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1056:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1051:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":4038,"nodeType":"IfStatement","src":"1047:75:2","trueBody":{"id":4037,"nodeType":"Block","src":"1059:63:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4032,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1081:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"DIVISION_BY_ZERO","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1081:26:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":4034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1109:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4035,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1080:31:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":4028,"id":4036,"nodeType":"Return","src":"1073:38:2"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4039,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1140:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1140:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4041,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4020,"src":"1160:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":4042,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4022,"src":"1164:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1160:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4044,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1139:27:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":4028,"id":4045,"nodeType":"Return","src":"1132:34:2"}]},"documentation":"@dev Integer division of two numbers, truncating the quotient.","implemented":true,"kind":"function","modifiers":[],"name":"divUInt","parameters":{"id":4023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4020,"name":"a","nodeType":"VariableDeclaration","scope":4047,"src":"981:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4019,"name":"uint","nodeType":"ElementaryTypeName","src":"981:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4022,"name":"b","nodeType":"VariableDeclaration","scope":4047,"src":"989:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4021,"name":"uint","nodeType":"ElementaryTypeName","src":"989:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"980:16:2"},"returnParameters":{"id":4028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4025,"name":"","nodeType":"VariableDeclaration","scope":4047,"src":"1020:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4024,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1020:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4027,"name":"","nodeType":"VariableDeclaration","scope":4047,"src":"1031:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4026,"name":"uint","nodeType":"ElementaryTypeName","src":"1031:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1019:17:2"},"scope":4150,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":4077,"nodeType":"FunctionDefinition","src":"1303:230:2","nodes":[],"body":{"id":4076,"nodeType":"Block","src":"1376:157:2","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4058,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"1390:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":4059,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1395:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1390:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4074,"nodeType":"Block","src":"1463:64:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4069,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1485:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INTEGER_UNDERFLOW","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1485:27:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":4071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1514:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4072,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1484:32:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":4057,"id":4073,"nodeType":"Return","src":"1477:39:2"}]},"id":4075,"nodeType":"IfStatement","src":"1386:141:2","trueBody":{"id":4068,"nodeType":"Block","src":"1398:59:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4061,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1420:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1420:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4063,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1440:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":4064,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4051,"src":"1444:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1440:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4066,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1419:27:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":4057,"id":4067,"nodeType":"Return","src":"1412:34:2"}]}}]},"documentation":"@dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).","implemented":true,"kind":"function","modifiers":[],"name":"subUInt","parameters":{"id":4052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4049,"name":"a","nodeType":"VariableDeclaration","scope":4077,"src":"1320:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4048,"name":"uint","nodeType":"ElementaryTypeName","src":"1320:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4051,"name":"b","nodeType":"VariableDeclaration","scope":4077,"src":"1328:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4050,"name":"uint","nodeType":"ElementaryTypeName","src":"1328:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1319:16:2"},"returnParameters":{"id":4057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4054,"name":"","nodeType":"VariableDeclaration","scope":4077,"src":"1359:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4053,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1359:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4056,"name":"","nodeType":"VariableDeclaration","scope":4077,"src":"1370:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4055,"name":"uint","nodeType":"ElementaryTypeName","src":"1370:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1358:17:2"},"scope":4150,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":4111,"nodeType":"FunctionDefinition","src":"1613:250:2","nodes":[],"body":{"id":4110,"nodeType":"Block","src":"1686:177:2","nodes":[],"statements":[{"assignments":[4089],"declarations":[{"constant":false,"id":4089,"name":"c","nodeType":"VariableDeclaration","scope":4110,"src":"1696:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4088,"name":"uint","nodeType":"ElementaryTypeName","src":"1696:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":4093,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4090,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"1705:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":4091,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4081,"src":"1709:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1705:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1696:14:2"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4094,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"1725:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":4095,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"1730:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1725:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4108,"nodeType":"Block","src":"1794:63:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4103,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1816:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"INTEGER_OVERFLOW","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1816:26:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1844:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4106,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1815:31:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":4087,"id":4107,"nodeType":"Return","src":"1808:38:2"}]},"id":4109,"nodeType":"IfStatement","src":"1721:136:2","trueBody":{"id":4102,"nodeType":"Block","src":"1733:55:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4097,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1755:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1755:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":4099,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"1775:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4100,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1754:23:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":4087,"id":4101,"nodeType":"Return","src":"1747:30:2"}]}}]},"documentation":"@dev Adds two numbers, returns an error on overflow.","implemented":true,"kind":"function","modifiers":[],"name":"addUInt","parameters":{"id":4082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4079,"name":"a","nodeType":"VariableDeclaration","scope":4111,"src":"1630:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4078,"name":"uint","nodeType":"ElementaryTypeName","src":"1630:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4081,"name":"b","nodeType":"VariableDeclaration","scope":4111,"src":"1638:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4080,"name":"uint","nodeType":"ElementaryTypeName","src":"1638:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1629:16:2"},"returnParameters":{"id":4087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4084,"name":"","nodeType":"VariableDeclaration","scope":4111,"src":"1669:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4083,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1669:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4086,"name":"","nodeType":"VariableDeclaration","scope":4111,"src":"1680:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4085,"name":"uint","nodeType":"ElementaryTypeName","src":"1680:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1668:17:2"},"scope":4150,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":4149,"nodeType":"FunctionDefinition","src":"1927:263:2","nodes":[],"body":{"id":4148,"nodeType":"Block","src":"2015:175:2","nodes":[],"statements":[{"assignments":[4125,4127],"declarations":[{"constant":false,"id":4125,"name":"err0","nodeType":"VariableDeclaration","scope":4148,"src":"2026:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4124,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"2026:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4127,"name":"sum","nodeType":"VariableDeclaration","scope":4148,"src":"2042:8:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4126,"name":"uint","nodeType":"ElementaryTypeName","src":"2042:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":4132,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4129,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4113,"src":"2062:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4130,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4115,"src":"2065:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4128,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"2054:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":4131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2054:13:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2025:42:2"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4133,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"2082:4:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4134,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2090:9:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2090:18:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"2082:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":4142,"nodeType":"IfStatement","src":"2078:73:2","trueBody":{"id":4141,"nodeType":"Block","src":"2110:41:2","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":4137,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4125,"src":"2132:4:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":4138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2138:1:2","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":4139,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2131:9:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":4123,"id":4140,"nodeType":"Return","src":"2124:16:2"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4144,"name":"sum","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"2176:3:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4145,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4117,"src":"2181:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4143,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"2168:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2168:15:2","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":4123,"id":4147,"nodeType":"Return","src":"2161:22:2"}]},"documentation":"@dev add a and b and then subtract c","implemented":true,"kind":"function","modifiers":[],"name":"addThenSubUInt","parameters":{"id":4118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4113,"name":"a","nodeType":"VariableDeclaration","scope":4149,"src":"1951:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4112,"name":"uint","nodeType":"ElementaryTypeName","src":"1951:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4115,"name":"b","nodeType":"VariableDeclaration","scope":4149,"src":"1959:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4114,"name":"uint","nodeType":"ElementaryTypeName","src":"1959:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4117,"name":"c","nodeType":"VariableDeclaration","scope":4149,"src":"1967:6:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4116,"name":"uint","nodeType":"ElementaryTypeName","src":"1967:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1950:24:2"},"returnParameters":{"id":4123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4120,"name":"","nodeType":"VariableDeclaration","scope":4149,"src":"1998:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4119,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1998:9:2","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4122,"name":"","nodeType":"VariableDeclaration","scope":4149,"src":"2009:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4121,"name":"uint","nodeType":"ElementaryTypeName","src":"2009:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1997:17:2"},"scope":4150,"stateMutability":"pure","superFunction":null,"visibility":"internal"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":"@title Careful Math\n@author Compound\n@notice Derived from OpenZeppelin's SafeMath library\n        https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol","fullyImplemented":true,"linearizedBaseContracts":[4150],"name":"CarefulMath","scope":4151}]}},"contracts/ComptrollerInterface.sol":{"id":3,"ast":{"absolutePath":"contracts/ComptrollerInterface.sol","id":4358,"exportedSymbols":{"ComptrollerInterface":[4357]},"nodeType":"SourceUnit","src":"0:2587:3","nodes":[{"id":4152,"nodeType":"PragmaDirective","src":"0:24:3","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4357,"nodeType":"ContractDefinition","src":"26:2560:3","nodes":[{"id":4155,"nodeType":"VariableDeclaration","src":"141:41:3","nodes":[],"constant":true,"name":"isComptroller","scope":4357,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4153,"name":"bool","nodeType":"ElementaryTypeName","src":"141:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"argumentTypes":null,"hexValue":"74727565","id":4154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"178:4:3","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"id":4164,"nodeType":"FunctionDefinition","src":"222:83:3","nodes":[],"documentation":"* Assets You Are In **","implemented":false,"kind":"function","modifiers":[],"name":"enterMarkets","parameters":{"id":4159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4158,"name":"cTokens","nodeType":"VariableDeclaration","scope":4164,"src":"244:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4156,"name":"address","nodeType":"ElementaryTypeName","src":"244:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4157,"length":null,"nodeType":"ArrayTypeName","src":"244:9:3","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"value":null,"visibility":"internal"}],"src":"243:28:3"},"returnParameters":{"id":4163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4162,"name":"","nodeType":"VariableDeclaration","scope":4164,"src":"290:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4160,"name":"uint","nodeType":"ElementaryTypeName","src":"290:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4161,"length":null,"nodeType":"ArrayTypeName","src":"290:6:3","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"value":null,"visibility":"internal"}],"src":"289:15:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4171,"nodeType":"FunctionDefinition","src":"310:60:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"exitMarket","parameters":{"id":4167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4166,"name":"cToken","nodeType":"VariableDeclaration","scope":4171,"src":"330:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4165,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"329:16:3"},"returnParameters":{"id":4170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4169,"name":"","nodeType":"VariableDeclaration","scope":4171,"src":"364:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4168,"name":"uint","nodeType":"ElementaryTypeName","src":"364:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"363:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4182,"nodeType":"FunctionDefinition","src":"404:94:3","nodes":[],"documentation":"* Policy Hooks **","implemented":false,"kind":"function","modifiers":[],"name":"mintAllowed","parameters":{"id":4178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4173,"name":"cToken","nodeType":"VariableDeclaration","scope":4182,"src":"425:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4172,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4175,"name":"minter","nodeType":"VariableDeclaration","scope":4182,"src":"441:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4174,"name":"address","nodeType":"ElementaryTypeName","src":"441:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4177,"name":"mintAmount","nodeType":"VariableDeclaration","scope":4182,"src":"457:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4176,"name":"uint","nodeType":"ElementaryTypeName","src":"457:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"424:49:3"},"returnParameters":{"id":4181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4180,"name":"","nodeType":"VariableDeclaration","scope":4182,"src":"492:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4179,"name":"uint","nodeType":"ElementaryTypeName","src":"492:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"491:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4193,"nodeType":"FunctionDefinition","src":"503:95:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"mintVerify","parameters":{"id":4191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4184,"name":"cToken","nodeType":"VariableDeclaration","scope":4193,"src":"523:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4183,"name":"address","nodeType":"ElementaryTypeName","src":"523:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4186,"name":"minter","nodeType":"VariableDeclaration","scope":4193,"src":"539:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4185,"name":"address","nodeType":"ElementaryTypeName","src":"539:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4188,"name":"mintAmount","nodeType":"VariableDeclaration","scope":4193,"src":"555:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4187,"name":"uint","nodeType":"ElementaryTypeName","src":"555:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4190,"name":"mintTokens","nodeType":"VariableDeclaration","scope":4193,"src":"572:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4189,"name":"uint","nodeType":"ElementaryTypeName","src":"572:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"522:66:3"},"returnParameters":{"id":4192,"nodeType":"ParameterList","parameters":[],"src":"597:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4204,"nodeType":"FunctionDefinition","src":"604:100:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"redeemAllowed","parameters":{"id":4200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4195,"name":"cToken","nodeType":"VariableDeclaration","scope":4204,"src":"627:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4194,"name":"address","nodeType":"ElementaryTypeName","src":"627:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4197,"name":"redeemer","nodeType":"VariableDeclaration","scope":4204,"src":"643:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4196,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4199,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":4204,"src":"661:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4198,"name":"uint","nodeType":"ElementaryTypeName","src":"661:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"626:53:3"},"returnParameters":{"id":4203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4202,"name":"","nodeType":"VariableDeclaration","scope":4204,"src":"698:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4201,"name":"uint","nodeType":"ElementaryTypeName","src":"698:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"697:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4215,"nodeType":"FunctionDefinition","src":"709:103:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"redeemVerify","parameters":{"id":4213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4206,"name":"cToken","nodeType":"VariableDeclaration","scope":4215,"src":"731:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4205,"name":"address","nodeType":"ElementaryTypeName","src":"731:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4208,"name":"redeemer","nodeType":"VariableDeclaration","scope":4215,"src":"747:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4207,"name":"address","nodeType":"ElementaryTypeName","src":"747:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4210,"name":"redeemAmount","nodeType":"VariableDeclaration","scope":4215,"src":"765:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4209,"name":"uint","nodeType":"ElementaryTypeName","src":"765:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4212,"name":"redeemTokens","nodeType":"VariableDeclaration","scope":4215,"src":"784:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4211,"name":"uint","nodeType":"ElementaryTypeName","src":"784:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"730:72:3"},"returnParameters":{"id":4214,"nodeType":"ParameterList","parameters":[],"src":"811:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4226,"nodeType":"FunctionDefinition","src":"818:100:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrowAllowed","parameters":{"id":4222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4217,"name":"cToken","nodeType":"VariableDeclaration","scope":4226,"src":"841:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4216,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4219,"name":"borrower","nodeType":"VariableDeclaration","scope":4226,"src":"857:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4218,"name":"address","nodeType":"ElementaryTypeName","src":"857:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4221,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":4226,"src":"875:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4220,"name":"uint","nodeType":"ElementaryTypeName","src":"875:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"840:53:3"},"returnParameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"name":"","nodeType":"VariableDeclaration","scope":4226,"src":"912:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4223,"name":"uint","nodeType":"ElementaryTypeName","src":"912:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"911:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4235,"nodeType":"FunctionDefinition","src":"923:84:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"borrowVerify","parameters":{"id":4233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4228,"name":"cToken","nodeType":"VariableDeclaration","scope":4235,"src":"945:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4227,"name":"address","nodeType":"ElementaryTypeName","src":"945:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4230,"name":"borrower","nodeType":"VariableDeclaration","scope":4235,"src":"961:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4229,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4232,"name":"borrowAmount","nodeType":"VariableDeclaration","scope":4235,"src":"979:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4231,"name":"uint","nodeType":"ElementaryTypeName","src":"979:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"944:53:3"},"returnParameters":{"id":4234,"nodeType":"ParameterList","parameters":[],"src":"1006:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4248,"nodeType":"FunctionDefinition","src":"1013:152:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"repayBorrowAllowed","parameters":{"id":4244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"name":"cToken","nodeType":"VariableDeclaration","scope":4248,"src":"1050:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4236,"name":"address","nodeType":"ElementaryTypeName","src":"1050:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4239,"name":"payer","nodeType":"VariableDeclaration","scope":4248,"src":"1074:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4238,"name":"address","nodeType":"ElementaryTypeName","src":"1074:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4241,"name":"borrower","nodeType":"VariableDeclaration","scope":4248,"src":"1097:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4240,"name":"address","nodeType":"ElementaryTypeName","src":"1097:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4243,"name":"repayAmount","nodeType":"VariableDeclaration","scope":4248,"src":"1123:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4242,"name":"uint","nodeType":"ElementaryTypeName","src":"1123:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1040:100:3"},"returnParameters":{"id":4247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4246,"name":"","nodeType":"VariableDeclaration","scope":4248,"src":"1159:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4245,"name":"uint","nodeType":"ElementaryTypeName","src":"1159:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1158:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4261,"nodeType":"FunctionDefinition","src":"1170:164:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"repayBorrowVerify","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4250,"name":"cToken","nodeType":"VariableDeclaration","scope":4261,"src":"1206:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4249,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4252,"name":"payer","nodeType":"VariableDeclaration","scope":4261,"src":"1230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4251,"name":"address","nodeType":"ElementaryTypeName","src":"1230:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4254,"name":"borrower","nodeType":"VariableDeclaration","scope":4261,"src":"1253:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4253,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4256,"name":"repayAmount","nodeType":"VariableDeclaration","scope":4261,"src":"1279:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4255,"name":"uint","nodeType":"ElementaryTypeName","src":"1279:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4258,"name":"borrowerIndex","nodeType":"VariableDeclaration","scope":4261,"src":"1305:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4257,"name":"uint","nodeType":"ElementaryTypeName","src":"1305:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1196:128:3"},"returnParameters":{"id":4260,"nodeType":"ParameterList","parameters":[],"src":"1333:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4276,"nodeType":"FunctionDefinition","src":"1340:203:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"liquidateBorrowAllowed","parameters":{"id":4272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4263,"name":"cTokenBorrowed","nodeType":"VariableDeclaration","scope":4276,"src":"1381:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4262,"name":"address","nodeType":"ElementaryTypeName","src":"1381:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4265,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":4276,"src":"1413:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4264,"name":"address","nodeType":"ElementaryTypeName","src":"1413:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4267,"name":"liquidator","nodeType":"VariableDeclaration","scope":4276,"src":"1447:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4266,"name":"address","nodeType":"ElementaryTypeName","src":"1447:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4269,"name":"borrower","nodeType":"VariableDeclaration","scope":4276,"src":"1475:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4268,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4271,"name":"repayAmount","nodeType":"VariableDeclaration","scope":4276,"src":"1501:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4270,"name":"uint","nodeType":"ElementaryTypeName","src":"1501:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1371:147:3"},"returnParameters":{"id":4275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4274,"name":"","nodeType":"VariableDeclaration","scope":4276,"src":"1537:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4273,"name":"uint","nodeType":"ElementaryTypeName","src":"1537:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1536:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4291,"nodeType":"FunctionDefinition","src":"1548:213:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"liquidateBorrowVerify","parameters":{"id":4289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4278,"name":"cTokenBorrowed","nodeType":"VariableDeclaration","scope":4291,"src":"1588:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4277,"name":"address","nodeType":"ElementaryTypeName","src":"1588:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4280,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":4291,"src":"1620:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4279,"name":"address","nodeType":"ElementaryTypeName","src":"1620:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4282,"name":"liquidator","nodeType":"VariableDeclaration","scope":4291,"src":"1654:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4281,"name":"address","nodeType":"ElementaryTypeName","src":"1654:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4284,"name":"borrower","nodeType":"VariableDeclaration","scope":4291,"src":"1682:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4283,"name":"address","nodeType":"ElementaryTypeName","src":"1682:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4286,"name":"repayAmount","nodeType":"VariableDeclaration","scope":4291,"src":"1708:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4285,"name":"uint","nodeType":"ElementaryTypeName","src":"1708:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4288,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":4291,"src":"1734:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4287,"name":"uint","nodeType":"ElementaryTypeName","src":"1734:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1578:173:3"},"returnParameters":{"id":4290,"nodeType":"ParameterList","parameters":[],"src":"1760:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4306,"nodeType":"FunctionDefinition","src":"1767:193:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"seizeAllowed","parameters":{"id":4302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4293,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":4306,"src":"1798:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4292,"name":"address","nodeType":"ElementaryTypeName","src":"1798:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4295,"name":"cTokenBorrowed","nodeType":"VariableDeclaration","scope":4306,"src":"1832:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4294,"name":"address","nodeType":"ElementaryTypeName","src":"1832:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4297,"name":"liquidator","nodeType":"VariableDeclaration","scope":4306,"src":"1864:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4296,"name":"address","nodeType":"ElementaryTypeName","src":"1864:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4299,"name":"borrower","nodeType":"VariableDeclaration","scope":4306,"src":"1892:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4298,"name":"address","nodeType":"ElementaryTypeName","src":"1892:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4301,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":4306,"src":"1918:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4300,"name":"uint","nodeType":"ElementaryTypeName","src":"1918:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1788:147:3"},"returnParameters":{"id":4305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4304,"name":"","nodeType":"VariableDeclaration","scope":4306,"src":"1954:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4303,"name":"uint","nodeType":"ElementaryTypeName","src":"1954:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1953:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4319,"nodeType":"FunctionDefinition","src":"1965:177:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"seizeVerify","parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4308,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":4319,"src":"1995:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4307,"name":"address","nodeType":"ElementaryTypeName","src":"1995:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4310,"name":"cTokenBorrowed","nodeType":"VariableDeclaration","scope":4319,"src":"2029:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4309,"name":"address","nodeType":"ElementaryTypeName","src":"2029:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4312,"name":"liquidator","nodeType":"VariableDeclaration","scope":4319,"src":"2061:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4311,"name":"address","nodeType":"ElementaryTypeName","src":"2061:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4314,"name":"borrower","nodeType":"VariableDeclaration","scope":4319,"src":"2089:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4313,"name":"address","nodeType":"ElementaryTypeName","src":"2089:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4316,"name":"seizeTokens","nodeType":"VariableDeclaration","scope":4319,"src":"2115:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4315,"name":"uint","nodeType":"ElementaryTypeName","src":"2115:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1985:147:3"},"returnParameters":{"id":4318,"nodeType":"ParameterList","parameters":[],"src":"2141:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4332,"nodeType":"FunctionDefinition","src":"2148:112:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"transferAllowed","parameters":{"id":4328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"name":"cToken","nodeType":"VariableDeclaration","scope":4332,"src":"2173:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4320,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4323,"name":"src","nodeType":"VariableDeclaration","scope":4332,"src":"2189:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4322,"name":"address","nodeType":"ElementaryTypeName","src":"2189:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4325,"name":"dst","nodeType":"VariableDeclaration","scope":4332,"src":"2202:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4324,"name":"address","nodeType":"ElementaryTypeName","src":"2202:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4327,"name":"transferTokens","nodeType":"VariableDeclaration","scope":4332,"src":"2215:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4326,"name":"uint","nodeType":"ElementaryTypeName","src":"2215:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2172:63:3"},"returnParameters":{"id":4331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4330,"name":"","nodeType":"VariableDeclaration","scope":4332,"src":"2254:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4329,"name":"uint","nodeType":"ElementaryTypeName","src":"2254:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2253:6:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4343,"nodeType":"FunctionDefinition","src":"2265:96:3","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"transferVerify","parameters":{"id":4341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"name":"cToken","nodeType":"VariableDeclaration","scope":4343,"src":"2289:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4333,"name":"address","nodeType":"ElementaryTypeName","src":"2289:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4336,"name":"src","nodeType":"VariableDeclaration","scope":4343,"src":"2305:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4335,"name":"address","nodeType":"ElementaryTypeName","src":"2305:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4338,"name":"dst","nodeType":"VariableDeclaration","scope":4343,"src":"2318:11:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4337,"name":"address","nodeType":"ElementaryTypeName","src":"2318:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4340,"name":"transferTokens","nodeType":"VariableDeclaration","scope":4343,"src":"2331:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4339,"name":"uint","nodeType":"ElementaryTypeName","src":"2331:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2288:63:3"},"returnParameters":{"id":4342,"nodeType":"ParameterList","parameters":[],"src":"2360:0:3"},"scope":4357,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4356,"nodeType":"FunctionDefinition","src":"2417:167:3","nodes":[],"documentation":"* Liquidity/Liquidation Calculations **","implemented":false,"kind":"function","modifiers":[],"name":"liquidateCalculateSeizeTokens","parameters":{"id":4350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4345,"name":"cTokenBorrowed","nodeType":"VariableDeclaration","scope":4356,"src":"2465:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4344,"name":"address","nodeType":"ElementaryTypeName","src":"2465:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4347,"name":"cTokenCollateral","nodeType":"VariableDeclaration","scope":4356,"src":"2497:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4346,"name":"address","nodeType":"ElementaryTypeName","src":"2497:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4349,"name":"repayAmount","nodeType":"VariableDeclaration","scope":4356,"src":"2531:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4348,"name":"uint","nodeType":"ElementaryTypeName","src":"2531:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2455:93:3"},"returnParameters":{"id":4355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4352,"name":"","nodeType":"VariableDeclaration","scope":4356,"src":"2572:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4351,"name":"uint","nodeType":"ElementaryTypeName","src":"2572:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4354,"name":"","nodeType":"VariableDeclaration","scope":4356,"src":"2578:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4353,"name":"uint","nodeType":"ElementaryTypeName","src":"2578:4:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2571:12:3"},"scope":4357,"stateMutability":"view","superFunction":null,"visibility":"external"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[4357],"name":"ComptrollerInterface","scope":4358}]}},"contracts/ComptrollerStorage.sol":{"id":4,"ast":{"absolutePath":"contracts/ComptrollerStorage.sol","id":4464,"exportedSymbols":{"ComptrollerV1Storage":[4386],"ComptrollerV2Storage":[4422],"ComptrollerV3Storage":[4463],"UnitrollerAdminStorage":[4370]},"nodeType":"SourceUnit","src":"0:4055:4","nodes":[{"id":4359,"nodeType":"PragmaDirective","src":"0:24:4","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4360,"nodeType":"ImportDirective","src":"26:22:4","nodes":[],"absolutePath":"contracts/CToken.sol","file":"./CToken.sol","scope":4464,"sourceUnit":3505,"symbolAliases":[],"unitAlias":""},{"id":4361,"nodeType":"ImportDirective","src":"49:27:4","nodes":[],"absolutePath":"contracts/PriceOracle.sol","file":"./PriceOracle.sol","scope":4464,"sourceUnit":6081,"symbolAliases":[],"unitAlias":""},{"id":4370,"nodeType":"ContractDefinition","src":"78:441:4","nodes":[{"id":4363,"nodeType":"VariableDeclaration","src":"177:20:4","nodes":[],"constant":false,"name":"admin","scope":4370,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4362,"name":"address","nodeType":"ElementaryTypeName","src":"177:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"id":4365,"nodeType":"VariableDeclaration","src":"273:27:4","nodes":[],"constant":false,"name":"pendingAdmin","scope":4370,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4364,"name":"address","nodeType":"ElementaryTypeName","src":"273:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"id":4367,"nodeType":"VariableDeclaration","src":"364:40:4","nodes":[],"constant":false,"name":"comptrollerImplementation","scope":4370,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4366,"name":"address","nodeType":"ElementaryTypeName","src":"364:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"id":4369,"nodeType":"VariableDeclaration","src":"469:47:4","nodes":[],"constant":false,"name":"pendingComptrollerImplementation","scope":4370,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4368,"name":"address","nodeType":"ElementaryTypeName","src":"469:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4370],"name":"UnitrollerAdminStorage","scope":4464},{"id":4386,"nodeType":"ContractDefinition","src":"521:772:4","nodes":[{"id":4374,"nodeType":"VariableDeclaration","src":"663:25:4","nodes":[],"constant":false,"name":"oracle","scope":4386,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_PriceOracle_$6080","typeString":"contract PriceOracle"},"typeName":{"contractScope":null,"id":4373,"name":"PriceOracle","nodeType":"UserDefinedTypeName","referencedDeclaration":6080,"src":"663:11:4","typeDescriptions":{"typeIdentifier":"t_contract$_PriceOracle_$6080","typeString":"contract PriceOracle"}},"value":null,"visibility":"public"},{"id":4376,"nodeType":"VariableDeclaration","src":"805:31:4","nodes":[],"constant":false,"name":"closeFactorMantissa","scope":4386,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4375,"name":"uint","nodeType":"ElementaryTypeName","src":"805:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":4378,"nodeType":"VariableDeclaration","src":"952:40:4","nodes":[],"constant":false,"name":"liquidationIncentiveMantissa","scope":4386,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4377,"name":"uint","nodeType":"ElementaryTypeName","src":"952:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":4380,"nodeType":"VariableDeclaration","src":"1117:21:4","nodes":[],"constant":false,"name":"maxAssets","scope":4386,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4379,"name":"uint","nodeType":"ElementaryTypeName","src":"1117:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":4385,"nodeType":"VariableDeclaration","src":"1240:49:4","nodes":[],"constant":false,"name":"accountAssets","scope":4386,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_contract$_CToken_$3504_$dyn_storage_$","typeString":"mapping(address => contract CToken[])"},"typeName":{"id":4384,"keyType":{"id":4381,"name":"address","nodeType":"ElementaryTypeName","src":"1248:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1240:28:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_contract$_CToken_$3504_$dyn_storage_$","typeString":"mapping(address => contract CToken[])"},"valueType":{"baseType":{"contractScope":null,"id":4382,"name":"CToken","nodeType":"UserDefinedTypeName","referencedDeclaration":3504,"src":"1259:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}},"id":4383,"length":null,"nodeType":"ArrayTypeName","src":"1259:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_CToken_$3504_$dyn_storage_ptr","typeString":"contract CToken[]"}}},"value":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":4371,"name":"UnitrollerAdminStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4370,"src":"554:22:4","typeDescriptions":{"typeIdentifier":"t_contract$_UnitrollerAdminStorage_$4370","typeString":"contract UnitrollerAdminStorage"}},"id":4372,"nodeType":"InheritanceSpecifier","src":"554:22:4"}],"contractDependencies":[4370],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4386,4370],"name":"ComptrollerV1Storage","scope":4464},{"id":4422,"nodeType":"ContractDefinition","src":"1295:1429:4","nodes":[{"id":4399,"nodeType":"StructDefinition","src":"1355:615:4","nodes":[],"canonicalName":"ComptrollerV2Storage.Market","members":[{"constant":false,"id":4390,"name":"isListed","nodeType":"VariableDeclaration","scope":4399,"src":"1436:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4389,"name":"bool","nodeType":"ElementaryTypeName","src":"1436:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},{"constant":false,"id":4392,"name":"collateralFactorMantissa","nodeType":"VariableDeclaration","scope":4399,"src":"1729:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4391,"name":"uint","nodeType":"ElementaryTypeName","src":"1729:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4396,"name":"accountMembership","nodeType":"VariableDeclaration","scope":4399,"src":"1836:42:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4395,"keyType":{"id":4393,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1836:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":4394,"name":"bool","nodeType":"ElementaryTypeName","src":"1855:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"value":null,"visibility":"internal"},{"constant":false,"id":4398,"name":"isComped","nodeType":"VariableDeclaration","scope":4399,"src":"1950:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4397,"name":"bool","nodeType":"ElementaryTypeName","src":"1950:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"name":"Market","scope":4422,"visibility":"public"},{"id":4403,"nodeType":"VariableDeclaration","src":"2114:41:4","nodes":[],"constant":false,"name":"markets","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Market_$4399_storage_$","typeString":"mapping(address => struct ComptrollerV2Storage.Market)"},"typeName":{"id":4402,"keyType":{"id":4400,"name":"address","nodeType":"ElementaryTypeName","src":"2122:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2114:26:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Market_$4399_storage_$","typeString":"mapping(address => struct ComptrollerV2Storage.Market)"},"valueType":{"contractScope":null,"id":4401,"name":"Market","nodeType":"UserDefinedTypeName","referencedDeclaration":4399,"src":"2133:6:4","typeDescriptions":{"typeIdentifier":"t_struct$_Market_$4399_storage_ptr","typeString":"struct ComptrollerV2Storage.Market"}}},"value":null,"visibility":"public"},{"id":4405,"nodeType":"VariableDeclaration","src":"2426:28:4","nodes":[],"constant":false,"name":"pauseGuardian","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4404,"name":"address","nodeType":"ElementaryTypeName","src":"2426:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"public"},{"id":4407,"nodeType":"VariableDeclaration","src":"2460:31:4","nodes":[],"constant":false,"name":"_mintGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4406,"name":"bool","nodeType":"ElementaryTypeName","src":"2460:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"public"},{"id":4409,"nodeType":"VariableDeclaration","src":"2497:33:4","nodes":[],"constant":false,"name":"_borrowGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4408,"name":"bool","nodeType":"ElementaryTypeName","src":"2497:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"public"},{"id":4411,"nodeType":"VariableDeclaration","src":"2536:34:4","nodes":[],"constant":false,"name":"transferGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4410,"name":"bool","nodeType":"ElementaryTypeName","src":"2536:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"public"},{"id":4413,"nodeType":"VariableDeclaration","src":"2576:31:4","nodes":[],"constant":false,"name":"seizeGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4412,"name":"bool","nodeType":"ElementaryTypeName","src":"2576:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"public"},{"id":4417,"nodeType":"VariableDeclaration","src":"2613:50:4","nodes":[],"constant":false,"name":"mintGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4416,"keyType":{"id":4414,"name":"address","nodeType":"ElementaryTypeName","src":"2621:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2613:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":4415,"name":"bool","nodeType":"ElementaryTypeName","src":"2632:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"value":null,"visibility":"public"},{"id":4421,"nodeType":"VariableDeclaration","src":"2669:52:4","nodes":[],"constant":false,"name":"borrowGuardianPaused","scope":4422,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4420,"keyType":{"id":4418,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2669:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":4419,"name":"bool","nodeType":"ElementaryTypeName","src":"2688:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"value":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":4387,"name":"ComptrollerV1Storage","nodeType":"UserDefinedTypeName","referencedDeclaration":4386,"src":"1328:20:4","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerV1Storage_$4386","typeString":"contract ComptrollerV1Storage"}},"id":4388,"nodeType":"InheritanceSpecifier","src":"1328:20:4"}],"contractDependencies":[4370,4386],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4422,4386,4370],"name":"ComptrollerV2Storage","scope":4464},{"id":4463,"nodeType":"ContractDefinition","src":"2726:1328:4","nodes":[{"id":4429,"nodeType":"StructDefinition","src":"2786:224:4","nodes":[],"canonicalName":"ComptrollerV3Storage.CompMarketState","members":[{"constant":false,"id":4426,"name":"index","nodeType":"VariableDeclaration","scope":4429,"src":"2900:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":4425,"name":"uint224","nodeType":"ElementaryTypeName","src":"2900:7:4","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"value":null,"visibility":"internal"},{"constant":false,"id":4428,"name":"block","nodeType":"VariableDeclaration","scope":4429,"src":"2991:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4427,"name":"uint32","nodeType":"ElementaryTypeName","src":"2991:6:4","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"name":"CompMarketState","scope":4463,"visibility":"public"},{"id":4432,"nodeType":"VariableDeclaration","src":"3054:26:4","nodes":[],"constant":false,"name":"allMarkets","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_CToken_$3504_$dyn_storage","typeString":"contract CToken[]"},"typeName":{"baseType":{"contractScope":null,"id":4430,"name":"CToken","nodeType":"UserDefinedTypeName","referencedDeclaration":3504,"src":"3054:6:4","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}},"id":4431,"length":null,"nodeType":"ArrayTypeName","src":"3054:8:4","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_CToken_$3504_$dyn_storage_ptr","typeString":"contract CToken[]"}},"value":null,"visibility":"public"},{"id":4434,"nodeType":"VariableDeclaration","src":"3162:20:4","nodes":[],"constant":false,"name":"compRate","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4433,"name":"uint","nodeType":"ElementaryTypeName","src":"3162:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"public"},{"id":4438,"nodeType":"VariableDeclaration","src":"3265:42:4","nodes":[],"constant":false,"name":"compSpeeds","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4437,"keyType":{"id":4435,"name":"address","nodeType":"ElementaryTypeName","src":"3273:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3265:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4436,"name":"uint","nodeType":"ElementaryTypeName","src":"3284:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"public"},{"id":4442,"nodeType":"VariableDeclaration","src":"3375:58:4","nodes":[],"constant":false,"name":"compSupplyState","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_CompMarketState_$4429_storage_$","typeString":"mapping(address => struct ComptrollerV3Storage.CompMarketState)"},"typeName":{"id":4441,"keyType":{"id":4439,"name":"address","nodeType":"ElementaryTypeName","src":"3383:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3375:35:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_CompMarketState_$4429_storage_$","typeString":"mapping(address => struct ComptrollerV3Storage.CompMarketState)"},"valueType":{"contractScope":null,"id":4440,"name":"CompMarketState","nodeType":"UserDefinedTypeName","referencedDeclaration":4429,"src":"3394:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_CompMarketState_$4429_storage_ptr","typeString":"struct ComptrollerV3Storage.CompMarketState"}}},"value":null,"visibility":"public"},{"id":4446,"nodeType":"VariableDeclaration","src":"3501:58:4","nodes":[],"constant":false,"name":"compBorrowState","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_CompMarketState_$4429_storage_$","typeString":"mapping(address => struct ComptrollerV3Storage.CompMarketState)"},"typeName":{"id":4445,"keyType":{"id":4443,"name":"address","nodeType":"ElementaryTypeName","src":"3509:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3501:35:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_CompMarketState_$4429_storage_$","typeString":"mapping(address => struct ComptrollerV3Storage.CompMarketState)"},"valueType":{"contractScope":null,"id":4444,"name":"CompMarketState","nodeType":"UserDefinedTypeName","referencedDeclaration":4429,"src":"3520:15:4","typeDescriptions":{"typeIdentifier":"t_struct$_CompMarketState_$4429_storage_ptr","typeString":"struct ComptrollerV3Storage.CompMarketState"}}},"value":null,"visibility":"public"},{"id":4452,"nodeType":"VariableDeclaration","src":"3676:69:4","nodes":[],"constant":false,"name":"compSupplierIndex","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4451,"keyType":{"id":4447,"name":"address","nodeType":"ElementaryTypeName","src":"3684:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3676:44:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":4450,"keyType":{"id":4448,"name":"address","nodeType":"ElementaryTypeName","src":"3703:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3695:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4449,"name":"uint","nodeType":"ElementaryTypeName","src":"3714:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"value":null,"visibility":"public"},{"id":4458,"nodeType":"VariableDeclaration","src":"3862:69:4","nodes":[],"constant":false,"name":"compBorrowerIndex","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":4457,"keyType":{"id":4453,"name":"address","nodeType":"ElementaryTypeName","src":"3870:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3862:44:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueType":{"id":4456,"keyType":{"id":4454,"name":"address","nodeType":"ElementaryTypeName","src":"3889:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3881:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4455,"name":"uint","nodeType":"ElementaryTypeName","src":"3900:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"value":null,"visibility":"public"},{"id":4462,"nodeType":"VariableDeclaration","src":"4008:43:4","nodes":[],"constant":false,"name":"compAccrued","scope":4463,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4461,"keyType":{"id":4459,"name":"address","nodeType":"ElementaryTypeName","src":"4016:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4008:24:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":4460,"name":"uint","nodeType":"ElementaryTypeName","src":"4027:4:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"value":null,"visibility":"public"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":4423,"name":"ComptrollerV2Storage","nodeType":"UserDefinedTypeName","referencedDeclaration":4422,"src":"2759:20:4","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerV2Storage_$4422","typeString":"contract ComptrollerV2Storage"}},"id":4424,"nodeType":"InheritanceSpecifier","src":"2759:20:4"}],"contractDependencies":[4370,4386,4422],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4463,4422,4386,4370],"name":"ComptrollerV3Storage","scope":4464}]}},"contracts/EIP20Interface.sol":{"id":5,"ast":{"absolutePath":"contracts/EIP20Interface.sol","id":4548,"exportedSymbols":{"EIP20Interface":[4547]},"nodeType":"SourceUnit","src":"0:2621:5","nodes":[{"id":4465,"nodeType":"PragmaDirective","src":"0:24:5","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4547,"nodeType":"ContractDefinition","src":"118:2502:5","nodes":[{"id":4470,"nodeType":"FunctionDefinition","src":"149:54:5","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"name","parameters":{"id":4466,"nodeType":"ParameterList","parameters":[],"src":"162:2:5"},"returnParameters":{"id":4469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4468,"name":"","nodeType":"VariableDeclaration","scope":4470,"src":"188:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4467,"name":"string","nodeType":"ElementaryTypeName","src":"188:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"187:15:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4475,"nodeType":"FunctionDefinition","src":"208:56:5","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","parameters":{"id":4471,"nodeType":"ParameterList","parameters":[],"src":"223:2:5"},"returnParameters":{"id":4474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4473,"name":"","nodeType":"VariableDeclaration","scope":4475,"src":"249:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4472,"name":"string","nodeType":"ElementaryTypeName","src":"249:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"248:15:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4480,"nodeType":"FunctionDefinition","src":"269:50:5","nodes":[],"documentation":null,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","parameters":{"id":4476,"nodeType":"ParameterList","parameters":[],"src":"286:2:5"},"returnParameters":{"id":4479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4478,"name":"","nodeType":"VariableDeclaration","scope":4480,"src":"312:5:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4477,"name":"uint8","nodeType":"ElementaryTypeName","src":"312:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":null,"visibility":"internal"}],"src":"311:7:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4485,"nodeType":"FunctionDefinition","src":"441:55:5","nodes":[],"documentation":"@notice Get the total number of tokens in circulation\n@return The supply of tokens","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","parameters":{"id":4481,"nodeType":"ParameterList","parameters":[],"src":"461:2:5"},"returnParameters":{"id":4484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4483,"name":"","nodeType":"VariableDeclaration","scope":4485,"src":"487:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4482,"name":"uint256","nodeType":"ElementaryTypeName","src":"487:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"486:9:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4492,"nodeType":"FunctionDefinition","src":"675:74:5","nodes":[],"documentation":"@notice Gets the balance of the specified address\n@param owner The address from which the balance will be retrieved\n@return The balance","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","parameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"name":"owner","nodeType":"VariableDeclaration","scope":4492,"src":"694:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4486,"name":"address","nodeType":"ElementaryTypeName","src":"694:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"693:15:5"},"returnParameters":{"id":4491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4490,"name":"balance","nodeType":"VariableDeclaration","scope":4492,"src":"732:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4489,"name":"uint256","nodeType":"ElementaryTypeName","src":"732:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"731:17:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4501,"nodeType":"FunctionDefinition","src":"1007:79:5","nodes":[],"documentation":"@notice Transfer `amount` tokens from `msg.sender` to `dst`\n@param dst The address of the destination account\n@param amount The number of tokens to transfer\n@return Whether or not the transfer succeeded","implemented":false,"kind":"function","modifiers":[],"name":"transfer","parameters":{"id":4497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4494,"name":"dst","nodeType":"VariableDeclaration","scope":4501,"src":"1025:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4493,"name":"address","nodeType":"ElementaryTypeName","src":"1025:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4496,"name":"amount","nodeType":"VariableDeclaration","scope":4501,"src":"1038:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4495,"name":"uint256","nodeType":"ElementaryTypeName","src":"1038:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1024:29:5"},"returnParameters":{"id":4500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4499,"name":"success","nodeType":"VariableDeclaration","scope":4501,"src":"1072:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4498,"name":"bool","nodeType":"ElementaryTypeName","src":"1072:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1071:14:5"},"scope":4547,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4512,"nodeType":"FunctionDefinition","src":"1390:96:5","nodes":[],"documentation":"@notice Transfer `amount` tokens from `src` to `dst`\n@param src The address of the source account\n@param dst The address of the destination account\n@param amount The number of tokens to transfer\n@return Whether or not the transfer succeeded","implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","parameters":{"id":4508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4503,"name":"src","nodeType":"VariableDeclaration","scope":4512,"src":"1412:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4502,"name":"address","nodeType":"ElementaryTypeName","src":"1412:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4505,"name":"dst","nodeType":"VariableDeclaration","scope":4512,"src":"1425:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4504,"name":"address","nodeType":"ElementaryTypeName","src":"1425:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4507,"name":"amount","nodeType":"VariableDeclaration","scope":4512,"src":"1438:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1438:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1411:42:5"},"returnParameters":{"id":4511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"name":"success","nodeType":"VariableDeclaration","scope":4512,"src":"1472:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4509,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"1471:14:5"},"scope":4547,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4521,"nodeType":"FunctionDefinition","src":"1953:82:5","nodes":[],"documentation":"@notice Approve `spender` to transfer up to `amount` from `src`\n@dev This will overwrite the approval amount for `spender`\n and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n@param spender The address of the account which may transfer tokens\n@param amount The number of tokens that are approved (-1 means infinite)\n@return Whether or not the approval succeeded","implemented":false,"kind":"function","modifiers":[],"name":"approve","parameters":{"id":4517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4514,"name":"spender","nodeType":"VariableDeclaration","scope":4521,"src":"1970:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4513,"name":"address","nodeType":"ElementaryTypeName","src":"1970:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4516,"name":"amount","nodeType":"VariableDeclaration","scope":4521,"src":"1987:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4515,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1969:33:5"},"returnParameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"name":"success","nodeType":"VariableDeclaration","scope":4521,"src":"2021:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4518,"name":"bool","nodeType":"ElementaryTypeName","src":"2021:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"2020:14:5"},"scope":4547,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4530,"nodeType":"FunctionDefinition","src":"2362:93:5","nodes":[],"documentation":"@notice Get the current allowance from `owner` for `spender`\n@param owner The address of the account which owns the tokens to be spent\n@param spender The address of the account which may transfer tokens\n@return The number of tokens allowed to be spent (-1 means infinite)","implemented":false,"kind":"function","modifiers":[],"name":"allowance","parameters":{"id":4526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"name":"owner","nodeType":"VariableDeclaration","scope":4530,"src":"2381:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4522,"name":"address","nodeType":"ElementaryTypeName","src":"2381:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4525,"name":"spender","nodeType":"VariableDeclaration","scope":4530,"src":"2396:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4524,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2380:32:5"},"returnParameters":{"id":4529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4528,"name":"remaining","nodeType":"VariableDeclaration","scope":4530,"src":"2436:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4527,"name":"uint256","nodeType":"ElementaryTypeName","src":"2436:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2435:19:5"},"scope":4547,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4538,"nodeType":"EventDefinition","src":"2461:73:5","nodes":[],"anonymous":false,"documentation":null,"name":"Transfer","parameters":{"id":4537,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4532,"indexed":true,"name":"from","nodeType":"VariableDeclaration","scope":4538,"src":"2476:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4531,"name":"address","nodeType":"ElementaryTypeName","src":"2476:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4534,"indexed":true,"name":"to","nodeType":"VariableDeclaration","scope":4538,"src":"2498:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4533,"name":"address","nodeType":"ElementaryTypeName","src":"2498:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4536,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":4538,"src":"2518:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4535,"name":"uint256","nodeType":"ElementaryTypeName","src":"2518:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2475:58:5"}},{"id":4546,"nodeType":"EventDefinition","src":"2539:79:5","nodes":[],"anonymous":false,"documentation":null,"name":"Approval","parameters":{"id":4545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4540,"indexed":true,"name":"owner","nodeType":"VariableDeclaration","scope":4546,"src":"2554:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4539,"name":"address","nodeType":"ElementaryTypeName","src":"2554:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4542,"indexed":true,"name":"spender","nodeType":"VariableDeclaration","scope":4546,"src":"2577:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4541,"name":"address","nodeType":"ElementaryTypeName","src":"2577:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4544,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":4546,"src":"2602:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4543,"name":"uint256","nodeType":"ElementaryTypeName","src":"2602:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2553:64:5"}}],"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":"@title ERC 20 Token Standard Interface\n https://eips.ethereum.org/EIPS/eip-20","fullyImplemented":false,"linearizedBaseContracts":[4547],"name":"EIP20Interface","scope":4548}]}},"contracts/EIP20NonStandardInterface.sol":{"id":6,"ast":{"absolutePath":"contracts/EIP20NonStandardInterface.sol","id":4613,"exportedSymbols":{"EIP20NonStandardInterface":[4612]},"nodeType":"SourceUnit","src":"0:2727:6","nodes":[{"id":4549,"nodeType":"PragmaDirective","src":"0:24:6","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4612,"nodeType":"ContractDefinition","src":"255:2471:6","nodes":[{"id":4554,"nodeType":"FunctionDefinition","src":"411:55:6","nodes":[],"documentation":"@notice Get the total number of tokens in circulation\n@return The supply of tokens","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","parameters":{"id":4550,"nodeType":"ParameterList","parameters":[],"src":"431:2:6"},"returnParameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4552,"name":"","nodeType":"VariableDeclaration","scope":4554,"src":"457:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4551,"name":"uint256","nodeType":"ElementaryTypeName","src":"457:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"456:9:6"},"scope":4612,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4561,"nodeType":"FunctionDefinition","src":"645:74:6","nodes":[],"documentation":"@notice Gets the balance of the specified address\n@param owner The address from which the balance will be retrieved\n@return The balance","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","parameters":{"id":4557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"name":"owner","nodeType":"VariableDeclaration","scope":4561,"src":"664:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4555,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"663:15:6"},"returnParameters":{"id":4560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4559,"name":"balance","nodeType":"VariableDeclaration","scope":4561,"src":"702:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4558,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"701:17:6"},"scope":4612,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4568,"nodeType":"FunctionDefinition","src":"1086:56:6","nodes":[],"documentation":"@notice Transfer `amount` tokens from `msg.sender` to `dst`\n@param dst The address of the destination account\n@param amount The number of tokens to transfer","implemented":false,"kind":"function","modifiers":[],"name":"transfer","parameters":{"id":4566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4563,"name":"dst","nodeType":"VariableDeclaration","scope":4568,"src":"1104:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4562,"name":"address","nodeType":"ElementaryTypeName","src":"1104:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4565,"name":"amount","nodeType":"VariableDeclaration","scope":4568,"src":"1117:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4564,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1103:29:6"},"returnParameters":{"id":4567,"nodeType":"ParameterList","parameters":[],"src":"1141:0:6"},"scope":4612,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4577,"nodeType":"FunctionDefinition","src":"1559:73:6","nodes":[],"documentation":"@notice Transfer `amount` tokens from `src` to `dst`\n@param src The address of the source account\n@param dst The address of the destination account\n@param amount The number of tokens to transfer","implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","parameters":{"id":4575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4570,"name":"src","nodeType":"VariableDeclaration","scope":4577,"src":"1581:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4569,"name":"address","nodeType":"ElementaryTypeName","src":"1581:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4572,"name":"dst","nodeType":"VariableDeclaration","scope":4577,"src":"1594:11:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4571,"name":"address","nodeType":"ElementaryTypeName","src":"1594:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4574,"name":"amount","nodeType":"VariableDeclaration","scope":4577,"src":"1607:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4573,"name":"uint256","nodeType":"ElementaryTypeName","src":"1607:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1580:42:6"},"returnParameters":{"id":4576,"nodeType":"ParameterList","parameters":[],"src":"1631:0:6"},"scope":4612,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4586,"nodeType":"FunctionDefinition","src":"2079:82:6","nodes":[],"documentation":"@notice Approve `spender` to transfer up to `amount` from `src`\n@dev This will overwrite the approval amount for `spender`\n and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n@param spender The address of the account which may transfer tokens\n@param amount The number of tokens that are approved\n@return Whether or not the approval succeeded","implemented":false,"kind":"function","modifiers":[],"name":"approve","parameters":{"id":4582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4579,"name":"spender","nodeType":"VariableDeclaration","scope":4586,"src":"2096:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4578,"name":"address","nodeType":"ElementaryTypeName","src":"2096:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4581,"name":"amount","nodeType":"VariableDeclaration","scope":4586,"src":"2113:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4580,"name":"uint256","nodeType":"ElementaryTypeName","src":"2113:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2095:33:6"},"returnParameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"name":"success","nodeType":"VariableDeclaration","scope":4586,"src":"2147:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4583,"name":"bool","nodeType":"ElementaryTypeName","src":"2147:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"2146:14:6"},"scope":4612,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},{"id":4595,"nodeType":"FunctionDefinition","src":"2468:93:6","nodes":[],"documentation":"@notice Get the current allowance from `owner` for `spender`\n@param owner The address of the account which owns the tokens to be spent\n@param spender The address of the account which may transfer tokens\n@return The number of tokens allowed to be spent","implemented":false,"kind":"function","modifiers":[],"name":"allowance","parameters":{"id":4591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4588,"name":"owner","nodeType":"VariableDeclaration","scope":4595,"src":"2487:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4587,"name":"address","nodeType":"ElementaryTypeName","src":"2487:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4590,"name":"spender","nodeType":"VariableDeclaration","scope":4595,"src":"2502:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4589,"name":"address","nodeType":"ElementaryTypeName","src":"2502:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"2486:32:6"},"returnParameters":{"id":4594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4593,"name":"remaining","nodeType":"VariableDeclaration","scope":4595,"src":"2542:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4592,"name":"uint256","nodeType":"ElementaryTypeName","src":"2542:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2541:19:6"},"scope":4612,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":4603,"nodeType":"EventDefinition","src":"2567:73:6","nodes":[],"anonymous":false,"documentation":null,"name":"Transfer","parameters":{"id":4602,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4597,"indexed":true,"name":"from","nodeType":"VariableDeclaration","scope":4603,"src":"2582:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4596,"name":"address","nodeType":"ElementaryTypeName","src":"2582:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4599,"indexed":true,"name":"to","nodeType":"VariableDeclaration","scope":4603,"src":"2604:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4598,"name":"address","nodeType":"ElementaryTypeName","src":"2604:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4601,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":4603,"src":"2624:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"2624:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2581:58:6"}},{"id":4611,"nodeType":"EventDefinition","src":"2645:79:6","nodes":[],"anonymous":false,"documentation":null,"name":"Approval","parameters":{"id":4610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4605,"indexed":true,"name":"owner","nodeType":"VariableDeclaration","scope":4611,"src":"2660:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4604,"name":"address","nodeType":"ElementaryTypeName","src":"2660:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4607,"indexed":true,"name":"spender","nodeType":"VariableDeclaration","scope":4611,"src":"2683:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4606,"name":"address","nodeType":"ElementaryTypeName","src":"2683:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":4609,"indexed":false,"name":"amount","nodeType":"VariableDeclaration","scope":4611,"src":"2708:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4608,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2659:64:6"}}],"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":"@title EIP20NonStandardInterface\n@dev Version of ERC20 with no return values for `transfer` and `transferFrom`\n See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca","fullyImplemented":false,"linearizedBaseContracts":[4612],"name":"EIP20NonStandardInterface","scope":4613}]}},"contracts/ErrorReporter.sol":{"id":7,"ast":{"absolutePath":"contracts/ErrorReporter.sol","id":4873,"exportedSymbols":{"ComptrollerErrorReporter":[4713],"TokenErrorReporter":[4872]},"nodeType":"SourceUnit","src":"0:7685:7","nodes":[{"id":4614,"nodeType":"PragmaDirective","src":"0:24:7","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4713,"nodeType":"ContractDefinition","src":"26:2281:7","nodes":[{"id":4633,"nodeType":"EnumDefinition","src":"66:528:7","nodes":[],"canonicalName":"ComptrollerErrorReporter.Error","members":[{"id":4615,"name":"NO_ERROR","nodeType":"EnumValue","src":"87:8:7"},{"id":4616,"name":"UNAUTHORIZED","nodeType":"EnumValue","src":"105:12:7"},{"id":4617,"name":"COMPTROLLER_MISMATCH","nodeType":"EnumValue","src":"127:20:7"},{"id":4618,"name":"INSUFFICIENT_SHORTFALL","nodeType":"EnumValue","src":"157:22:7"},{"id":4619,"name":"INSUFFICIENT_LIQUIDITY","nodeType":"EnumValue","src":"189:22:7"},{"id":4620,"name":"INVALID_CLOSE_FACTOR","nodeType":"EnumValue","src":"221:20:7"},{"id":4621,"name":"INVALID_COLLATERAL_FACTOR","nodeType":"EnumValue","src":"251:25:7"},{"id":4622,"name":"INVALID_LIQUIDATION_INCENTIVE","nodeType":"EnumValue","src":"286:29:7"},{"id":4623,"name":"MARKET_NOT_ENTERED","nodeType":"EnumValue","src":"325:18:7"},{"id":4624,"name":"MARKET_NOT_LISTED","nodeType":"EnumValue","src":"375:17:7"},{"id":4625,"name":"MARKET_ALREADY_LISTED","nodeType":"EnumValue","src":"402:21:7"},{"id":4626,"name":"MATH_ERROR","nodeType":"EnumValue","src":"433:10:7"},{"id":4627,"name":"NONZERO_BORROW_BALANCE","nodeType":"EnumValue","src":"453:22:7"},{"id":4628,"name":"PRICE_ERROR","nodeType":"EnumValue","src":"485:11:7"},{"id":4629,"name":"REJECTION","nodeType":"EnumValue","src":"506:9:7"},{"id":4630,"name":"SNAPSHOT_ERROR","nodeType":"EnumValue","src":"525:14:7"},{"id":4631,"name":"TOO_MANY_ASSETS","nodeType":"EnumValue","src":"549:15:7"},{"id":4632,"name":"TOO_MUCH_REPAY","nodeType":"EnumValue","src":"574:14:7"}],"name":"Error"},{"id":4654,"nodeType":"EnumDefinition","src":"600:830:7","nodes":[],"canonicalName":"ComptrollerErrorReporter.FailureInfo","members":[{"id":4634,"name":"ACCEPT_ADMIN_PENDING_ADMIN_CHECK","nodeType":"EnumValue","src":"627:32:7"},{"id":4635,"name":"ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK","nodeType":"EnumValue","src":"669:43:7"},{"id":4636,"name":"EXIT_MARKET_BALANCE_OWED","nodeType":"EnumValue","src":"722:24:7"},{"id":4637,"name":"EXIT_MARKET_REJECTION","nodeType":"EnumValue","src":"756:21:7"},{"id":4638,"name":"SET_CLOSE_FACTOR_OWNER_CHECK","nodeType":"EnumValue","src":"787:28:7"},{"id":4639,"name":"SET_CLOSE_FACTOR_VALIDATION","nodeType":"EnumValue","src":"825:27:7"},{"id":4640,"name":"SET_COLLATERAL_FACTOR_OWNER_CHECK","nodeType":"EnumValue","src":"862:33:7"},{"id":4641,"name":"SET_COLLATERAL_FACTOR_NO_EXISTS","nodeType":"EnumValue","src":"905:31:7"},{"id":4642,"name":"SET_COLLATERAL_FACTOR_VALIDATION","nodeType":"EnumValue","src":"946:32:7"},{"id":4643,"name":"SET_COLLATERAL_FACTOR_WITHOUT_PRICE","nodeType":"EnumValue","src":"988:35:7"},{"id":4644,"name":"SET_IMPLEMENTATION_OWNER_CHECK","nodeType":"EnumValue","src":"1033:30:7"},{"id":4645,"name":"SET_LIQUIDATION_INCENTIVE_OWNER_CHECK","nodeType":"EnumValue","src":"1073:37:7"},{"id":4646,"name":"SET_LIQUIDATION_INCENTIVE_VALIDATION","nodeType":"EnumValue","src":"1120:36:7"},{"id":4647,"name":"SET_MAX_ASSETS_OWNER_CHECK","nodeType":"EnumValue","src":"1166:26:7"},{"id":4648,"name":"SET_PENDING_ADMIN_OWNER_CHECK","nodeType":"EnumValue","src":"1202:29:7"},{"id":4649,"name":"SET_PENDING_IMPLEMENTATION_OWNER_CHECK","nodeType":"EnumValue","src":"1241:38:7"},{"id":4650,"name":"SET_PRICE_ORACLE_OWNER_CHECK","nodeType":"EnumValue","src":"1289:28:7"},{"id":4651,"name":"SUPPORT_MARKET_EXISTS","nodeType":"EnumValue","src":"1327:21:7"},{"id":4652,"name":"SUPPORT_MARKET_OWNER_CHECK","nodeType":"EnumValue","src":"1358:26:7"},{"id":4653,"name":"SET_PAUSE_GUARDIAN_OWNER_CHECK","nodeType":"EnumValue","src":"1394:30:7"}],"name":"FailureInfo"},{"id":4662,"nodeType":"EventDefinition","src":"1675:50:7","nodes":[],"anonymous":false,"documentation":"@dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\ncontract-specific code that enables us to report opaque error codes from upgradeable contracts.*","name":"Failure","parameters":{"id":4661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4656,"indexed":false,"name":"error","nodeType":"VariableDeclaration","scope":4662,"src":"1689:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4655,"name":"uint","nodeType":"ElementaryTypeName","src":"1689:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4658,"indexed":false,"name":"info","nodeType":"VariableDeclaration","scope":4662,"src":"1701:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4657,"name":"uint","nodeType":"ElementaryTypeName","src":"1701:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4660,"indexed":false,"name":"detail","nodeType":"VariableDeclaration","scope":4662,"src":"1712:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4659,"name":"uint","nodeType":"ElementaryTypeName","src":"1712:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1688:36:7"}},{"id":4686,"nodeType":"FunctionDefinition","src":"1855:149:7","nodes":[],"body":{"id":4685,"nodeType":"Block","src":"1922:82:7","nodes":[],"statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4673,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"1950:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":4672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1945:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1945:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4676,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"1961:4:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":4675,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1956:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1956:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":4678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1968:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4671,"name":"Failure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"1937:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":4679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1937:33:7","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4680,"nodeType":"EmitStatement","src":"1932:38:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4682,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4664,"src":"1993:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":4681,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1988:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1988:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4670,"id":4684,"nodeType":"Return","src":"1981:16:7"}]},"documentation":"@dev use this when reporting a known error from the money market or a non-upgradeable collaborator","implemented":true,"kind":"function","modifiers":[],"name":"fail","parameters":{"id":4667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4664,"name":"err","nodeType":"VariableDeclaration","scope":4686,"src":"1869:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},"typeName":{"contractScope":null,"id":4663,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4633,"src":"1869:5:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":4666,"name":"info","nodeType":"VariableDeclaration","scope":4686,"src":"1880:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"},"typeName":{"contractScope":null,"id":4665,"name":"FailureInfo","nodeType":"UserDefinedTypeName","referencedDeclaration":4654,"src":"1880:11:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}},"value":null,"visibility":"internal"}],"src":"1868:29:7"},"returnParameters":{"id":4670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4669,"name":"","nodeType":"VariableDeclaration","scope":4686,"src":"1916:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4668,"name":"uint","nodeType":"ElementaryTypeName","src":"1916:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1915:6:7"},"scope":4713,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":4712,"nodeType":"FunctionDefinition","src":"2122:183:7","nodes":[],"body":{"id":4711,"nodeType":"Block","src":"2213:92:7","nodes":[],"statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4699,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"2241:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":4698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2236:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2236:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4702,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4690,"src":"2252:4:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":4701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2247:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2247:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4704,"name":"opaqueError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4692,"src":"2259:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4697,"name":"Failure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"2228:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":4705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2228:43:7","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4706,"nodeType":"EmitStatement","src":"2223:48:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4708,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4688,"src":"2294:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":4707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2289:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2289:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4696,"id":4710,"nodeType":"Return","src":"2282:16:7"}]},"documentation":"@dev use this when reporting an opaque error from an upgradeable collaborator contract","implemented":true,"kind":"function","modifiers":[],"name":"failOpaque","parameters":{"id":4693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4688,"name":"err","nodeType":"VariableDeclaration","scope":4712,"src":"2142:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},"typeName":{"contractScope":null,"id":4687,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4633,"src":"2142:5:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":4690,"name":"info","nodeType":"VariableDeclaration","scope":4712,"src":"2153:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"},"typeName":{"contractScope":null,"id":4689,"name":"FailureInfo","nodeType":"UserDefinedTypeName","referencedDeclaration":4654,"src":"2153:11:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}},"value":null,"visibility":"internal"},{"constant":false,"id":4692,"name":"opaqueError","nodeType":"VariableDeclaration","scope":4712,"src":"2171:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4691,"name":"uint","nodeType":"ElementaryTypeName","src":"2171:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2141:47:7"},"returnParameters":{"id":4696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4695,"name":"","nodeType":"VariableDeclaration","scope":4712,"src":"2207:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4694,"name":"uint","nodeType":"ElementaryTypeName","src":"2207:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2206:6:7"},"scope":4713,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4713],"name":"ComptrollerErrorReporter","scope":4873},{"id":4872,"nodeType":"ContractDefinition","src":"2309:5376:7","nodes":[{"id":4731,"nodeType":"EnumDefinition","src":"2343:535:7","nodes":[],"canonicalName":"TokenErrorReporter.Error","members":[{"id":4714,"name":"NO_ERROR","nodeType":"EnumValue","src":"2364:8:7"},{"id":4715,"name":"UNAUTHORIZED","nodeType":"EnumValue","src":"2382:12:7"},{"id":4716,"name":"BAD_INPUT","nodeType":"EnumValue","src":"2404:9:7"},{"id":4717,"name":"COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"2423:21:7"},{"id":4718,"name":"COMPTROLLER_CALCULATION_ERROR","nodeType":"EnumValue","src":"2454:29:7"},{"id":4719,"name":"INTEREST_RATE_MODEL_ERROR","nodeType":"EnumValue","src":"2493:25:7"},{"id":4720,"name":"INVALID_ACCOUNT_PAIR","nodeType":"EnumValue","src":"2528:20:7"},{"id":4721,"name":"INVALID_CLOSE_AMOUNT_REQUESTED","nodeType":"EnumValue","src":"2558:30:7"},{"id":4722,"name":"INVALID_COLLATERAL_FACTOR","nodeType":"EnumValue","src":"2598:25:7"},{"id":4723,"name":"MATH_ERROR","nodeType":"EnumValue","src":"2633:10:7"},{"id":4724,"name":"MARKET_NOT_FRESH","nodeType":"EnumValue","src":"2653:16:7"},{"id":4725,"name":"MARKET_NOT_LISTED","nodeType":"EnumValue","src":"2679:17:7"},{"id":4726,"name":"TOKEN_INSUFFICIENT_ALLOWANCE","nodeType":"EnumValue","src":"2706:28:7"},{"id":4727,"name":"TOKEN_INSUFFICIENT_BALANCE","nodeType":"EnumValue","src":"2744:26:7"},{"id":4728,"name":"TOKEN_INSUFFICIENT_CASH","nodeType":"EnumValue","src":"2780:23:7"},{"id":4729,"name":"TOKEN_TRANSFER_IN_FAILED","nodeType":"EnumValue","src":"2813:24:7"},{"id":4730,"name":"TOKEN_TRANSFER_OUT_FAILED","nodeType":"EnumValue","src":"2847:25:7"}],"name":"Error"},{"id":4813,"nodeType":"EnumDefinition","src":"3160:3648:7","nodes":[],"canonicalName":"TokenErrorReporter.FailureInfo","members":[{"id":4732,"name":"ACCEPT_ADMIN_PENDING_ADMIN_CHECK","nodeType":"EnumValue","src":"3187:32:7"},{"id":4733,"name":"ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED","nodeType":"EnumValue","src":"3229:55:7"},{"id":4734,"name":"ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED","nodeType":"EnumValue","src":"3294:46:7"},{"id":4735,"name":"ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED","nodeType":"EnumValue","src":"3350:51:7"},{"id":4736,"name":"ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED","nodeType":"EnumValue","src":"3411:52:7"},{"id":4737,"name":"ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED","nodeType":"EnumValue","src":"3473:53:7"},{"id":4738,"name":"ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED","nodeType":"EnumValue","src":"3536:57:7"},{"id":4739,"name":"BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"3603:45:7"},{"id":4740,"name":"BORROW_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"3658:29:7"},{"id":4741,"name":"BORROW_CASH_NOT_AVAILABLE","nodeType":"EnumValue","src":"3697:25:7"},{"id":4742,"name":"BORROW_FRESHNESS_CHECK","nodeType":"EnumValue","src":"3732:22:7"},{"id":4743,"name":"BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"3764:43:7"},{"id":4744,"name":"BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"3817:52:7"},{"id":4745,"name":"BORROW_MARKET_NOT_LISTED","nodeType":"EnumValue","src":"3879:24:7"},{"id":4746,"name":"BORROW_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"3913:28:7"},{"id":4747,"name":"LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED","nodeType":"EnumValue","src":"3951:39:7"},{"id":4748,"name":"LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED","nodeType":"EnumValue","src":"4000:43:7"},{"id":4749,"name":"LIQUIDATE_COLLATERAL_FRESHNESS_CHECK","nodeType":"EnumValue","src":"4053:36:7"},{"id":4750,"name":"LIQUIDATE_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"4099:31:7"},{"id":4751,"name":"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED","nodeType":"EnumValue","src":"4140:51:7"},{"id":4752,"name":"LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX","nodeType":"EnumValue","src":"4201:34:7"},{"id":4753,"name":"LIQUIDATE_CLOSE_AMOUNT_IS_ZERO","nodeType":"EnumValue","src":"4245:30:7"},{"id":4754,"name":"LIQUIDATE_FRESHNESS_CHECK","nodeType":"EnumValue","src":"4285:25:7"},{"id":4755,"name":"LIQUIDATE_LIQUIDATOR_IS_BORROWER","nodeType":"EnumValue","src":"4320:32:7"},{"id":4756,"name":"LIQUIDATE_REPAY_BORROW_FRESH_FAILED","nodeType":"EnumValue","src":"4362:35:7"},{"id":4757,"name":"LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED","nodeType":"EnumValue","src":"4407:40:7"},{"id":4758,"name":"LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED","nodeType":"EnumValue","src":"4457:40:7"},{"id":4759,"name":"LIQUIDATE_SEIZE_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"4507:37:7"},{"id":4760,"name":"LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER","nodeType":"EnumValue","src":"4554:38:7"},{"id":4761,"name":"LIQUIDATE_SEIZE_TOO_MUCH","nodeType":"EnumValue","src":"4602:24:7"},{"id":4762,"name":"MINT_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"4636:27:7"},{"id":4763,"name":"MINT_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"4673:26:7"},{"id":4764,"name":"MINT_EXCHANGE_CALCULATION_FAILED","nodeType":"EnumValue","src":"4709:32:7"},{"id":4765,"name":"MINT_EXCHANGE_RATE_READ_FAILED","nodeType":"EnumValue","src":"4751:30:7"},{"id":4766,"name":"MINT_FRESHNESS_CHECK","nodeType":"EnumValue","src":"4791:20:7"},{"id":4767,"name":"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"4821:43:7"},{"id":4768,"name":"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED","nodeType":"EnumValue","src":"4874:40:7"},{"id":4769,"name":"MINT_TRANSFER_IN_FAILED","nodeType":"EnumValue","src":"4924:23:7"},{"id":4770,"name":"MINT_TRANSFER_IN_NOT_POSSIBLE","nodeType":"EnumValue","src":"4957:29:7"},{"id":4771,"name":"REDEEM_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"4996:29:7"},{"id":4772,"name":"REDEEM_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"5035:28:7"},{"id":4773,"name":"REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED","nodeType":"EnumValue","src":"5073:41:7"},{"id":4774,"name":"REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED","nodeType":"EnumValue","src":"5124:41:7"},{"id":4775,"name":"REDEEM_EXCHANGE_RATE_READ_FAILED","nodeType":"EnumValue","src":"5175:32:7"},{"id":4776,"name":"REDEEM_FRESHNESS_CHECK","nodeType":"EnumValue","src":"5217:22:7"},{"id":4777,"name":"REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"5249:45:7"},{"id":4778,"name":"REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED","nodeType":"EnumValue","src":"5304:42:7"},{"id":4779,"name":"REDEEM_TRANSFER_OUT_NOT_POSSIBLE","nodeType":"EnumValue","src":"5356:32:7"},{"id":4780,"name":"REDUCE_RESERVES_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"5398:38:7"},{"id":4781,"name":"REDUCE_RESERVES_ADMIN_CHECK","nodeType":"EnumValue","src":"5446:27:7"},{"id":4782,"name":"REDUCE_RESERVES_CASH_NOT_AVAILABLE","nodeType":"EnumValue","src":"5483:34:7"},{"id":4783,"name":"REDUCE_RESERVES_FRESH_CHECK","nodeType":"EnumValue","src":"5527:27:7"},{"id":4784,"name":"REDUCE_RESERVES_VALIDATION","nodeType":"EnumValue","src":"5564:26:7"},{"id":4785,"name":"REPAY_BEHALF_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"5600:35:7"},{"id":4786,"name":"REPAY_BORROW_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"5645:35:7"},{"id":4787,"name":"REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"5690:51:7"},{"id":4788,"name":"REPAY_BORROW_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"5751:34:7"},{"id":4789,"name":"REPAY_BORROW_FRESHNESS_CHECK","nodeType":"EnumValue","src":"5795:28:7"},{"id":4790,"name":"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"5833:58:7"},{"id":4791,"name":"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED","nodeType":"EnumValue","src":"5901:49:7"},{"id":4792,"name":"REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE","nodeType":"EnumValue","src":"5960:37:7"},{"id":4793,"name":"SET_COLLATERAL_FACTOR_OWNER_CHECK","nodeType":"EnumValue","src":"6007:33:7"},{"id":4794,"name":"SET_COLLATERAL_FACTOR_VALIDATION","nodeType":"EnumValue","src":"6050:32:7"},{"id":4795,"name":"SET_COMPTROLLER_OWNER_CHECK","nodeType":"EnumValue","src":"6092:27:7"},{"id":4796,"name":"SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"6129:46:7"},{"id":4797,"name":"SET_INTEREST_RATE_MODEL_FRESH_CHECK","nodeType":"EnumValue","src":"6185:35:7"},{"id":4798,"name":"SET_INTEREST_RATE_MODEL_OWNER_CHECK","nodeType":"EnumValue","src":"6230:35:7"},{"id":4799,"name":"SET_MAX_ASSETS_OWNER_CHECK","nodeType":"EnumValue","src":"6275:26:7"},{"id":4800,"name":"SET_ORACLE_MARKET_NOT_LISTED","nodeType":"EnumValue","src":"6311:28:7"},{"id":4801,"name":"SET_PENDING_ADMIN_OWNER_CHECK","nodeType":"EnumValue","src":"6349:29:7"},{"id":4802,"name":"SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"6388:41:7"},{"id":4803,"name":"SET_RESERVE_FACTOR_ADMIN_CHECK","nodeType":"EnumValue","src":"6439:30:7"},{"id":4804,"name":"SET_RESERVE_FACTOR_FRESH_CHECK","nodeType":"EnumValue","src":"6479:30:7"},{"id":4805,"name":"SET_RESERVE_FACTOR_BOUNDS_CHECK","nodeType":"EnumValue","src":"6519:31:7"},{"id":4806,"name":"TRANSFER_COMPTROLLER_REJECTION","nodeType":"EnumValue","src":"6560:30:7"},{"id":4807,"name":"TRANSFER_NOT_ALLOWED","nodeType":"EnumValue","src":"6600:20:7"},{"id":4808,"name":"TRANSFER_NOT_ENOUGH","nodeType":"EnumValue","src":"6630:19:7"},{"id":4809,"name":"TRANSFER_TOO_MUCH","nodeType":"EnumValue","src":"6659:17:7"},{"id":4810,"name":"ADD_RESERVES_ACCRUE_INTEREST_FAILED","nodeType":"EnumValue","src":"6686:35:7"},{"id":4811,"name":"ADD_RESERVES_FRESH_CHECK","nodeType":"EnumValue","src":"6731:24:7"},{"id":4812,"name":"ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE","nodeType":"EnumValue","src":"6765:37:7"}],"name":"FailureInfo"},{"id":4821,"nodeType":"EventDefinition","src":"7053:50:7","nodes":[],"anonymous":false,"documentation":"@dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\ncontract-specific code that enables us to report opaque error codes from upgradeable contracts.*","name":"Failure","parameters":{"id":4820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4815,"indexed":false,"name":"error","nodeType":"VariableDeclaration","scope":4821,"src":"7067:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4814,"name":"uint","nodeType":"ElementaryTypeName","src":"7067:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4817,"indexed":false,"name":"info","nodeType":"VariableDeclaration","scope":4821,"src":"7079:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4816,"name":"uint","nodeType":"ElementaryTypeName","src":"7079:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4819,"indexed":false,"name":"detail","nodeType":"VariableDeclaration","scope":4821,"src":"7090:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4818,"name":"uint","nodeType":"ElementaryTypeName","src":"7090:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7066:36:7"}},{"id":4845,"nodeType":"FunctionDefinition","src":"7233:149:7","nodes":[],"body":{"id":4844,"nodeType":"Block","src":"7300:82:7","nodes":[],"statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4832,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"7328:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":4831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7323:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7323:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4835,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4825,"src":"7339:4:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":4834,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7334:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7334:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"30","id":4837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7346:1:7","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4830,"name":"Failure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"7315:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":4838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7315:33:7","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4839,"nodeType":"EmitStatement","src":"7310:38:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4841,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4823,"src":"7371:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":4840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7366:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7366:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4829,"id":4843,"nodeType":"Return","src":"7359:16:7"}]},"documentation":"@dev use this when reporting a known error from the money market or a non-upgradeable collaborator","implemented":true,"kind":"function","modifiers":[],"name":"fail","parameters":{"id":4826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4823,"name":"err","nodeType":"VariableDeclaration","scope":4845,"src":"7247:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},"typeName":{"contractScope":null,"id":4822,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4731,"src":"7247:5:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":4825,"name":"info","nodeType":"VariableDeclaration","scope":4845,"src":"7258:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},"typeName":{"contractScope":null,"id":4824,"name":"FailureInfo","nodeType":"UserDefinedTypeName","referencedDeclaration":4813,"src":"7258:11:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},"value":null,"visibility":"internal"}],"src":"7246:29:7"},"returnParameters":{"id":4829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4828,"name":"","nodeType":"VariableDeclaration","scope":4845,"src":"7294:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4827,"name":"uint","nodeType":"ElementaryTypeName","src":"7294:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7293:6:7"},"scope":4872,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},{"id":4871,"nodeType":"FunctionDefinition","src":"7500:183:7","nodes":[],"body":{"id":4870,"nodeType":"Block","src":"7591:92:7","nodes":[],"statements":[{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4858,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"7619:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":4857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7614:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7614:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4861,"name":"info","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"7630:4:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}],"id":4860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7625:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7625:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4863,"name":"opaqueError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"7637:11:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4856,"name":"Failure","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4821,"src":"7606:7:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7606:43:7","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4865,"nodeType":"EmitStatement","src":"7601:48:7"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4867,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4847,"src":"7672:3:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}],"id":4866,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7667:4:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7667:9:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4855,"id":4869,"nodeType":"Return","src":"7660:16:7"}]},"documentation":"@dev use this when reporting an opaque error from an upgradeable collaborator contract","implemented":true,"kind":"function","modifiers":[],"name":"failOpaque","parameters":{"id":4852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4847,"name":"err","nodeType":"VariableDeclaration","scope":4871,"src":"7520:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"},"typeName":{"contractScope":null,"id":4846,"name":"Error","nodeType":"UserDefinedTypeName","referencedDeclaration":4731,"src":"7520:5:7","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4731","typeString":"enum TokenErrorReporter.Error"}},"value":null,"visibility":"internal"},{"constant":false,"id":4849,"name":"info","nodeType":"VariableDeclaration","scope":4871,"src":"7531:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"},"typeName":{"contractScope":null,"id":4848,"name":"FailureInfo","nodeType":"UserDefinedTypeName","referencedDeclaration":4813,"src":"7531:11:7","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4813","typeString":"enum TokenErrorReporter.FailureInfo"}},"value":null,"visibility":"internal"},{"constant":false,"id":4851,"name":"opaqueError","nodeType":"VariableDeclaration","scope":4871,"src":"7549:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4850,"name":"uint","nodeType":"ElementaryTypeName","src":"7549:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7519:47:7"},"returnParameters":{"id":4855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4854,"name":"","nodeType":"VariableDeclaration","scope":4871,"src":"7585:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4853,"name":"uint","nodeType":"ElementaryTypeName","src":"7585:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7584:6:7"},"scope":4872,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[4872],"name":"TokenErrorReporter","scope":4873}]}},"contracts/Exponential.sol":{"id":8,"ast":{"absolutePath":"contracts/Exponential.sol","id":6037,"exportedSymbols":{"Exponential":[6036]},"nodeType":"SourceUnit","src":"0:12393:8","nodes":[{"id":4874,"nodeType":"PragmaDirective","src":"0:24:8","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":4875,"nodeType":"ImportDirective","src":"26:27:8","nodes":[],"absolutePath":"contracts/CarefulMath.sol","file":"./CarefulMath.sol","scope":6037,"sourceUnit":4151,"symbolAliases":[],"unitAlias":""},{"id":6036,"nodeType":"ContractDefinition","src":"380:12012:8","nodes":[{"id":4880,"nodeType":"VariableDeclaration","src":"422:29:8","nodes":[],"constant":true,"name":"expScale","scope":6036,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4878,"name":"uint","nodeType":"ElementaryTypeName","src":"422:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31653138","id":4879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"447:4:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"internal"},{"id":4883,"nodeType":"VariableDeclaration","src":"457:32:8","nodes":[],"constant":true,"name":"doubleScale","scope":6036,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4881,"name":"uint","nodeType":"ElementaryTypeName","src":"457:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"hexValue":"31653336","id":4882,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"485:4:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(29 digits omitted)...0000"},"value":"1e36"},"visibility":"internal"},{"id":4888,"nodeType":"VariableDeclaration","src":"495:39:8","nodes":[],"constant":true,"name":"halfExpScale","scope":6036,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4884,"name":"uint","nodeType":"ElementaryTypeName","src":"495:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4885,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"524:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"hexValue":"32","id":4886,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"533:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"524:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":4891,"nodeType":"VariableDeclaration","src":"540:36:8","nodes":[],"constant":true,"name":"mantissaOne","scope":6036,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4889,"name":"uint","nodeType":"ElementaryTypeName","src":"540:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"argumentTypes":null,"id":4890,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"568:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"id":4894,"nodeType":"StructDefinition","src":"583:41:8","nodes":[],"canonicalName":"Exponential.Exp","members":[{"constant":false,"id":4893,"name":"mantissa","nodeType":"VariableDeclaration","scope":4894,"src":"604:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4892,"name":"uint","nodeType":"ElementaryTypeName","src":"604:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"Exp","scope":6036,"visibility":"public"},{"id":4897,"nodeType":"StructDefinition","src":"630:44:8","nodes":[],"canonicalName":"Exponential.Double","members":[{"constant":false,"id":4896,"name":"mantissa","nodeType":"VariableDeclaration","scope":4897,"src":"654:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4895,"name":"uint","nodeType":"ElementaryTypeName","src":"654:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"name":"Double","scope":6036,"visibility":"public"},{"id":4958,"nodeType":"FunctionDefinition","src":"876:503:8","nodes":[],"body":{"id":4957,"nodeType":"Block","src":"960:419:8","nodes":[],"statements":[{"assignments":[4909,4911],"declarations":[{"constant":false,"id":4909,"name":"err0","nodeType":"VariableDeclaration","scope":4957,"src":"971:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4908,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"971:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4911,"name":"scaledNumerator","nodeType":"VariableDeclaration","scope":4957,"src":"987:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4910,"name":"uint","nodeType":"ElementaryTypeName","src":"987:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":4916,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4913,"name":"num","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4899,"src":"1019:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4914,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"1024:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4912,"name":"mulUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"1011:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1011:22:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"970:63:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":4920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4917,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"1047:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4918,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1055:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1055:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"1047:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":4928,"nodeType":"IfStatement","src":"1043:90:8","trueBody":{"id":4927,"nodeType":"Block","src":"1075:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":4921,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4909,"src":"1097:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":4923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1118:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4922,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"1103:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":4924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"1103:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":4925,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1096:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":4907,"id":4926,"nodeType":"Return","src":"1089:33:8"}]}},{"assignments":[4930,4932],"declarations":[{"constant":false,"id":4930,"name":"err1","nodeType":"VariableDeclaration","scope":4957,"src":"1144:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4929,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1144:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4932,"name":"rational","nodeType":"VariableDeclaration","scope":4957,"src":"1160:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4931,"name":"uint","nodeType":"ElementaryTypeName","src":"1160:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":4937,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4934,"name":"scaledNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4911,"src":"1185:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":4935,"name":"denom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4901,"src":"1202:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4933,"name":"divUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"1177:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":4936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:31:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"1143:65:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":4941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":4938,"name":"err1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"1222:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4939,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1230:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1230:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"1222:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":4949,"nodeType":"IfStatement","src":"1218:90:8","trueBody":{"id":4948,"nodeType":"Block","src":"1250:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":4942,"name":"err1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"1272:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":4944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1293:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4943,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"1278:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":4945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"1278:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":4946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1271:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":4907,"id":4947,"nodeType":"Return","src":"1264:33:8"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4950,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"1326:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":4951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1326:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4953,"name":"rational","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4932,"src":"1361:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4952,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"1346:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":4954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"1346:25:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":4955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1325:47:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":4907,"id":4956,"nodeType":"Return","src":"1318:54:8"}]},"documentation":"@dev Creates an exponential from numerator and denominator values.\n     Note: Returns an error if (`num` * 10e18) > MAX_INT,\n           or if `denom` is zero.","implemented":true,"kind":"function","modifiers":[],"name":"getExp","parameters":{"id":4902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4899,"name":"num","nodeType":"VariableDeclaration","scope":4958,"src":"892:8:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4898,"name":"uint","nodeType":"ElementaryTypeName","src":"892:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":4901,"name":"denom","nodeType":"VariableDeclaration","scope":4958,"src":"902:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4900,"name":"uint","nodeType":"ElementaryTypeName","src":"902:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"891:22:8"},"returnParameters":{"id":4907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4904,"name":"","nodeType":"VariableDeclaration","scope":4958,"src":"937:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4903,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"937:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4906,"name":"","nodeType":"VariableDeclaration","scope":4958,"src":"948:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4905,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"948:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"936:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":4987,"nodeType":"FunctionDefinition","src":"1465:221:8","nodes":[],"body":{"id":4986,"nodeType":"Block","src":"1555:131:8","nodes":[],"statements":[{"assignments":[4970,4972],"declarations":[{"constant":false,"id":4970,"name":"error","nodeType":"VariableDeclaration","scope":4986,"src":"1566:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4969,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1566:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4972,"name":"result","nodeType":"VariableDeclaration","scope":4986,"src":"1583:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4971,"name":"uint","nodeType":"ElementaryTypeName","src":"1583:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":4979,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4974,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4960,"src":"1606:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":4975,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"1606:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":4976,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4962,"src":"1618:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":4977,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"1618:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4973,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"1598:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":4978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1598:31:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"1565:64:8"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":4980,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4970,"src":"1648:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":4982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4972,"src":"1670:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4981,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"1655:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":4983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"1655:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":4984,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1647:32:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":4968,"id":4985,"nodeType":"Return","src":"1640:39:8"}]},"documentation":"@dev Adds two exponentials, returning a new exponential.","implemented":true,"kind":"function","modifiers":[],"name":"addExp","parameters":{"id":4963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4960,"name":"a","nodeType":"VariableDeclaration","scope":4987,"src":"1481:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4959,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1481:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":4962,"name":"b","nodeType":"VariableDeclaration","scope":4987,"src":"1495:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4961,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1495:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"1480:28:8"},"returnParameters":{"id":4968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4965,"name":"","nodeType":"VariableDeclaration","scope":4987,"src":"1532:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4964,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1532:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4967,"name":"","nodeType":"VariableDeclaration","scope":4987,"src":"1543:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4966,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1543:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"1531:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5016,"nodeType":"FunctionDefinition","src":"1777:221:8","nodes":[],"body":{"id":5015,"nodeType":"Block","src":"1867:131:8","nodes":[],"statements":[{"assignments":[4999,5001],"declarations":[{"constant":false,"id":4999,"name":"error","nodeType":"VariableDeclaration","scope":5015,"src":"1878:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4998,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1878:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5001,"name":"result","nodeType":"VariableDeclaration","scope":5015,"src":"1895:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5000,"name":"uint","nodeType":"ElementaryTypeName","src":"1895:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5008,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5003,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4989,"src":"1918:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5004,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"1918:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5005,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4991,"src":"1930:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"1930:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5002,"name":"subUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"1910:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1910:31:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"1877:64:8"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5009,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4999,"src":"1960:5:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5001,"src":"1982:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5010,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"1967:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"1967:23:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5013,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1959:32:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":4997,"id":5014,"nodeType":"Return","src":"1952:39:8"}]},"documentation":"@dev Subtracts two exponentials, returning a new exponential.","implemented":true,"kind":"function","modifiers":[],"name":"subExp","parameters":{"id":4992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4989,"name":"a","nodeType":"VariableDeclaration","scope":5016,"src":"1793:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4988,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1793:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":4991,"name":"b","nodeType":"VariableDeclaration","scope":5016,"src":"1807:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4990,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1807:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"1792:28:8"},"returnParameters":{"id":4997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4994,"name":"","nodeType":"VariableDeclaration","scope":5016,"src":"1844:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":4993,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"1844:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":4996,"name":"","nodeType":"VariableDeclaration","scope":5016,"src":"1855:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":4995,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"1855:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"1843:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5057,"nodeType":"FunctionDefinition","src":"2082:346:8","nodes":[],"body":{"id":5056,"nodeType":"Block","src":"2174:254:8","nodes":[],"statements":[{"assignments":[5028,5030],"declarations":[{"constant":false,"id":5028,"name":"err0","nodeType":"VariableDeclaration","scope":5056,"src":"2185:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5027,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"2185:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5030,"name":"scaledMantissa","nodeType":"VariableDeclaration","scope":5056,"src":"2201:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5029,"name":"uint","nodeType":"ElementaryTypeName","src":"2201:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5036,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5032,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5018,"src":"2232:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"2232:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5034,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5020,"src":"2244:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5031,"name":"mulUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"2224:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2224:27:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"2184:67:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5037,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"2265:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5038,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2273:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2273:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"2265:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5048,"nodeType":"IfStatement","src":"2261:90:8","trueBody":{"id":5047,"nodeType":"Block","src":"2293:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5041,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"2315:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":5043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2336:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5042,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"2321:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"2321:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5045,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2314:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5026,"id":5046,"nodeType":"Return","src":"2307:33:8"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5049,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2369:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2369:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5052,"name":"scaledMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5030,"src":"2404:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5051,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"2389:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"2389:31:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5054,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2368:53:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5026,"id":5055,"nodeType":"Return","src":"2361:60:8"}]},"documentation":"@dev Multiply an Exp by a scalar, returning a new Exp.","implemented":true,"kind":"function","modifiers":[],"name":"mulScalar","parameters":{"id":5021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5018,"name":"a","nodeType":"VariableDeclaration","scope":5057,"src":"2101:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5017,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"2101:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5020,"name":"scalar","nodeType":"VariableDeclaration","scope":5057,"src":"2115:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5019,"name":"uint","nodeType":"ElementaryTypeName","src":"2115:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2100:27:8"},"returnParameters":{"id":5026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5023,"name":"","nodeType":"VariableDeclaration","scope":5057,"src":"2151:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5022,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"2151:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5025,"name":"","nodeType":"VariableDeclaration","scope":5057,"src":"2162:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5024,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"2162:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"2150:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5095,"nodeType":"FunctionDefinition","src":"2536:306:8","nodes":[],"body":{"id":5094,"nodeType":"Block","src":"2630:212:8","nodes":[],"statements":[{"assignments":[5069,5071],"declarations":[{"constant":false,"id":5069,"name":"err","nodeType":"VariableDeclaration","scope":5094,"src":"2641:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5068,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"2641:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5071,"name":"product","nodeType":"VariableDeclaration","scope":5094,"src":"2656:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5070,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"2656:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":5076,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5073,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5059,"src":"2688:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":5074,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5061,"src":"2691:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5072,"name":"mulScalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"2678:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2678:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"VariableDeclarationStatement","src":"2640:58:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5077,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5069,"src":"2712:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5078,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2719:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2719:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"2712:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5086,"nodeType":"IfStatement","src":"2708:71:8","trueBody":{"id":5085,"nodeType":"Block","src":"2739:40:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5081,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5069,"src":"2761:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":5082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2766:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5083,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2760:8:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":5067,"id":5084,"nodeType":"Return","src":"2753:15:8"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5087,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"2797:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2797:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5090,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5071,"src":"2826:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5089,"name":"truncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5423,"src":"2817:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct Exponential.Exp memory) pure returns (uint256)"}},"id":5091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2817:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2796:39:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":5067,"id":5093,"nodeType":"Return","src":"2789:46:8"}]},"documentation":"@dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.","implemented":true,"kind":"function","modifiers":[],"name":"mulScalarTruncate","parameters":{"id":5062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5059,"name":"a","nodeType":"VariableDeclaration","scope":5095,"src":"2563:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5058,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"2563:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5061,"name":"scalar","nodeType":"VariableDeclaration","scope":5095,"src":"2577:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5060,"name":"uint","nodeType":"ElementaryTypeName","src":"2577:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2562:27:8"},"returnParameters":{"id":5067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5064,"name":"","nodeType":"VariableDeclaration","scope":5095,"src":"2613:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5063,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"2613:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5066,"name":"","nodeType":"VariableDeclaration","scope":5095,"src":"2624:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5065,"name":"uint","nodeType":"ElementaryTypeName","src":"2624:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2612:17:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5135,"nodeType":"FunctionDefinition","src":"2982:321:8","nodes":[],"body":{"id":5134,"nodeType":"Block","src":"3096:207:8","nodes":[],"statements":[{"assignments":[5109,5111],"declarations":[{"constant":false,"id":5109,"name":"err","nodeType":"VariableDeclaration","scope":5134,"src":"3107:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5108,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3107:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5111,"name":"product","nodeType":"VariableDeclaration","scope":5134,"src":"3122:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5110,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3122:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":5116,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5113,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5097,"src":"3154:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":5114,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5099,"src":"3157:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5112,"name":"mulScalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5057,"src":"3144:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3144:20:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"VariableDeclarationStatement","src":"3106:58:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5117,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5109,"src":"3178:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5118,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"3185:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3185:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"3178:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5126,"nodeType":"IfStatement","src":"3174:71:8","trueBody":{"id":5125,"nodeType":"Block","src":"3205:40:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5121,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5109,"src":"3227:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":5122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3232:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5123,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3226:8:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":5107,"id":5124,"nodeType":"Return","src":"3219:15:8"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5129,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5111,"src":"3279:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5128,"name":"truncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5423,"src":"3270:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct Exponential.Exp memory) pure returns (uint256)"}},"id":5130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3270:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5131,"name":"addend","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5101,"src":"3289:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5127,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"3262:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3262:34:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":5107,"id":5133,"nodeType":"Return","src":"3255:41:8"}]},"documentation":"@dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.","implemented":true,"kind":"function","modifiers":[],"name":"mulScalarTruncateAddUInt","parameters":{"id":5102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5097,"name":"a","nodeType":"VariableDeclaration","scope":5135,"src":"3016:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5096,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3016:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5099,"name":"scalar","nodeType":"VariableDeclaration","scope":5135,"src":"3030:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5098,"name":"uint","nodeType":"ElementaryTypeName","src":"3030:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5101,"name":"addend","nodeType":"VariableDeclaration","scope":5135,"src":"3043:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5100,"name":"uint","nodeType":"ElementaryTypeName","src":"3043:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3015:40:8"},"returnParameters":{"id":5107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5104,"name":"","nodeType":"VariableDeclaration","scope":5135,"src":"3079:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5103,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3079:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5106,"name":"","nodeType":"VariableDeclaration","scope":5135,"src":"3090:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5105,"name":"uint","nodeType":"ElementaryTypeName","src":"3090:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3078:17:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5176,"nodeType":"FunctionDefinition","src":"3385:350:8","nodes":[],"body":{"id":5175,"nodeType":"Block","src":"3477:258:8","nodes":[],"statements":[{"assignments":[5147,5149],"declarations":[{"constant":false,"id":5147,"name":"err0","nodeType":"VariableDeclaration","scope":5175,"src":"3488:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5146,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3488:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5149,"name":"descaledMantissa","nodeType":"VariableDeclaration","scope":5175,"src":"3504:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5148,"name":"uint","nodeType":"ElementaryTypeName","src":"3504:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5155,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5151,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5137,"src":"3537:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"3537:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5153,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5139,"src":"3549:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5150,"name":"divUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"3529:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3529:27:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"3487:69:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5156,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"3570:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5157,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"3578:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5158,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3578:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"3570:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5167,"nodeType":"IfStatement","src":"3566:90:8","trueBody":{"id":5166,"nodeType":"Block","src":"3598:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5160,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5147,"src":"3620:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":5162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3641:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5161,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"3626:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"3626:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5164,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3619:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5145,"id":5165,"nodeType":"Return","src":"3612:33:8"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5168,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"3674:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3674:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5171,"name":"descaledMantissa","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"3709:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5170,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"3694:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"3694:33:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5173,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3673:55:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5145,"id":5174,"nodeType":"Return","src":"3666:62:8"}]},"documentation":"@dev Divide an Exp by a scalar, returning a new Exp.","implemented":true,"kind":"function","modifiers":[],"name":"divScalar","parameters":{"id":5140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5137,"name":"a","nodeType":"VariableDeclaration","scope":5176,"src":"3404:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5136,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3404:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5139,"name":"scalar","nodeType":"VariableDeclaration","scope":5176,"src":"3418:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5138,"name":"uint","nodeType":"ElementaryTypeName","src":"3418:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3403:27:8"},"returnParameters":{"id":5145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5142,"name":"","nodeType":"VariableDeclaration","scope":5176,"src":"3454:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5141,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3454:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5144,"name":"","nodeType":"VariableDeclaration","scope":5176,"src":"3465:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5143,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3465:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"3453:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5215,"nodeType":"FunctionDefinition","src":"3817:605:8","nodes":[],"body":{"id":5214,"nodeType":"Block","src":"3920:502:8","nodes":[],"statements":[{"assignments":[5188,5190],"declarations":[{"constant":false,"id":5188,"name":"err0","nodeType":"VariableDeclaration","scope":5214,"src":"4205:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5187,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"4205:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5190,"name":"numerator","nodeType":"VariableDeclaration","scope":5214,"src":"4221:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5189,"name":"uint","nodeType":"ElementaryTypeName","src":"4221:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5195,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5192,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"4247:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5193,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5178,"src":"4257:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5191,"name":"mulUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"4239:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4239:25:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4204:60:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5196,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"4278:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5197,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4286:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4286:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"4278:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5207,"nodeType":"IfStatement","src":"4274:90:8","trueBody":{"id":5206,"nodeType":"Block","src":"4306:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5200,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5188,"src":"4328:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":5202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4349:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5201,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"4334:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"4334:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5204,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4327:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5186,"id":5205,"nodeType":"Return","src":"4320:33:8"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5209,"name":"numerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5190,"src":"4387:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5210,"name":"divisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5180,"src":"4398:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5211,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"4398:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5208,"name":"getExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"4380:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4380:35:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5186,"id":5213,"nodeType":"Return","src":"4373:42:8"}]},"documentation":"@dev Divide a scalar by an Exp, returning a new Exp.","implemented":true,"kind":"function","modifiers":[],"name":"divScalarByExp","parameters":{"id":5181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5178,"name":"scalar","nodeType":"VariableDeclaration","scope":5215,"src":"3841:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5177,"name":"uint","nodeType":"ElementaryTypeName","src":"3841:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5180,"name":"divisor","nodeType":"VariableDeclaration","scope":5215,"src":"3854:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5179,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3854:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"3840:33:8"},"returnParameters":{"id":5186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5183,"name":"","nodeType":"VariableDeclaration","scope":5215,"src":"3897:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5182,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"3897:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5185,"name":"","nodeType":"VariableDeclaration","scope":5215,"src":"3908:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5184,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"3908:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"3896:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5253,"nodeType":"FunctionDefinition","src":"4528:330:8","nodes":[],"body":{"id":5252,"nodeType":"Block","src":"4633:225:8","nodes":[],"statements":[{"assignments":[5227,5229],"declarations":[{"constant":false,"id":5227,"name":"err","nodeType":"VariableDeclaration","scope":5252,"src":"4644:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5226,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"4644:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5229,"name":"fraction","nodeType":"VariableDeclaration","scope":5252,"src":"4659:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5228,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"4659:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":5234,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5231,"name":"scalar","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5217,"src":"4697:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5232,"name":"divisor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5219,"src":"4705:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5230,"name":"divScalarByExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5215,"src":"4682:14:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (uint256,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4682:31:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"VariableDeclarationStatement","src":"4643:70:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5235,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5227,"src":"4727:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5236,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4734:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4734:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"4727:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5244,"nodeType":"IfStatement","src":"4723:71:8","trueBody":{"id":5243,"nodeType":"Block","src":"4754:40:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5239,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5227,"src":"4776:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"hexValue":"30","id":5240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4781:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":5241,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4775:8:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_rational_0_by_1_$","typeString":"tuple(enum CarefulMath.MathError,int_const 0)"}},"functionReturnParameters":5225,"id":5242,"nodeType":"Return","src":"4768:15:8"}]}},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5245,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"4812:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5246,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4812:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5248,"name":"fraction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5229,"src":"4841:8:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5247,"name":"truncate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5423,"src":"4832:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct Exponential.Exp memory) pure returns (uint256)"}},"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4832:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5250,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4811:40:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"functionReturnParameters":5225,"id":5251,"nodeType":"Return","src":"4804:47:8"}]},"documentation":"@dev Divide a scalar by an Exp, then truncate to return an unsigned integer.","implemented":true,"kind":"function","modifiers":[],"name":"divScalarByExpTruncate","parameters":{"id":5220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5217,"name":"scalar","nodeType":"VariableDeclaration","scope":5253,"src":"4560:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5216,"name":"uint","nodeType":"ElementaryTypeName","src":"4560:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5219,"name":"divisor","nodeType":"VariableDeclaration","scope":5253,"src":"4573:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5218,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"4573:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"4559:33:8"},"returnParameters":{"id":5225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5222,"name":"","nodeType":"VariableDeclaration","scope":5253,"src":"4616:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5221,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"4616:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5224,"name":"","nodeType":"VariableDeclaration","scope":5253,"src":"4627:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5223,"name":"uint","nodeType":"ElementaryTypeName","src":"4627:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4615:17:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5332,"nodeType":"FunctionDefinition","src":"4950:1116:8","nodes":[],"body":{"id":5331,"nodeType":"Block","src":"5040:1026:8","nodes":[],"statements":[{"assignments":[5265,5267],"declarations":[{"constant":false,"id":5265,"name":"err0","nodeType":"VariableDeclaration","scope":5331,"src":"5052:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5264,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"5052:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5267,"name":"doubleScaledProduct","nodeType":"VariableDeclaration","scope":5331,"src":"5068:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5266,"name":"uint","nodeType":"ElementaryTypeName","src":"5068:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5274,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5255,"src":"5104:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"5104:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5271,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5257,"src":"5116:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"5116:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5268,"name":"mulUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4018,"src":"5096:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5096:31:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5051:76:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5275,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5141:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5276,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"5149:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5149:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"5141:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5286,"nodeType":"IfStatement","src":"5137:90:8","trueBody":{"id":5285,"nodeType":"Block","src":"5169:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5279,"name":"err0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"5191:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":5281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5280,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"5197:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"5197:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5283,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5190:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5263,"id":5284,"nodeType":"Return","src":"5183:33:8"}]}},{"assignments":[5288,5290],"declarations":[{"constant":false,"id":5288,"name":"err1","nodeType":"VariableDeclaration","scope":5331,"src":"5539:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5287,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"5539:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5290,"name":"doubleScaledProductWithHalfScale","nodeType":"VariableDeclaration","scope":5331,"src":"5555:37:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5289,"name":"uint","nodeType":"ElementaryTypeName","src":"5555:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5295,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5292,"name":"halfExpScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4888,"src":"5604:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5293,"name":"doubleScaledProduct","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5267,"src":"5618:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5291,"name":"addUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4111,"src":"5596:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5596:42:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5538:100:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5296,"name":"err1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"5652:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5297,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"5660:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5660:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"5652:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5307,"nodeType":"IfStatement","src":"5648:90:8","trueBody":{"id":5306,"nodeType":"Block","src":"5680:58:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5300,"name":"err1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5288,"src":"5702:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":5302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5723:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5301,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"5708:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"5708:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5701:26:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5263,"id":5305,"nodeType":"Return","src":"5694:33:8"}]}},{"assignments":[5309,5311],"declarations":[{"constant":false,"id":5309,"name":"err2","nodeType":"VariableDeclaration","scope":5331,"src":"5749:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5308,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"5749:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5311,"name":"product","nodeType":"VariableDeclaration","scope":5331,"src":"5765:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5310,"name":"uint","nodeType":"ElementaryTypeName","src":"5765:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5316,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5313,"name":"doubleScaledProductWithHalfScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5290,"src":"5789:32:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5314,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"5823:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5312,"name":"divUInt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4047,"src":"5781:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,uint256)"}},"id":5315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5781:51:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_uint256_$","typeString":"tuple(enum CarefulMath.MathError,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"5748:84:8"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5318,"name":"err2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5309,"src":"5968:4:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5319,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"5976:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5976:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"5968:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":5317,"name":"assert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6334,"src":"5961:6:8","typeDescriptions":{"typeIdentifier":"t_function_assert_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5961:34:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5323,"nodeType":"ExpressionStatement","src":"5961:34:8"},{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5324,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"6014:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6014:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5327,"name":"product","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5311,"src":"6049:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5326,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"6034:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"6034:24:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"id":5329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6013:46:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5263,"id":5330,"nodeType":"Return","src":"6006:53:8"}]},"documentation":"@dev Multiplies two exponentials, returning a new exponential.","implemented":true,"kind":"function","modifiers":[],"name":"mulExp","parameters":{"id":5258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5255,"name":"a","nodeType":"VariableDeclaration","scope":5332,"src":"4966:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5254,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"4966:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5257,"name":"b","nodeType":"VariableDeclaration","scope":5332,"src":"4980:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5256,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"4980:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"4965:28:8"},"returnParameters":{"id":5263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5260,"name":"","nodeType":"VariableDeclaration","scope":5332,"src":"5017:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5259,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"5017:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5262,"name":"","nodeType":"VariableDeclaration","scope":5332,"src":"5028:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5261,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"5028:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"5016:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5353,"nodeType":"FunctionDefinition","src":"6180:148:8","nodes":[],"body":{"id":5352,"nodeType":"Block","src":"6258:70:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5345,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5334,"src":"6297:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5344,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"6282:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"6282:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5348,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5336,"src":"6317:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5347,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"6302:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"6302:18:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}],"id":5343,"name":"mulExp","nodeType":"Identifier","overloadedDeclarations":[5332,5353],"referencedDeclaration":5332,"src":"6275:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6275:46:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5342,"id":5351,"nodeType":"Return","src":"6268:53:8"}]},"documentation":"@dev Multiplies two exponentials given their mantissas, returning a new exponential.","implemented":true,"kind":"function","modifiers":[],"name":"mulExp","parameters":{"id":5337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5334,"name":"a","nodeType":"VariableDeclaration","scope":5353,"src":"6196:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5333,"name":"uint","nodeType":"ElementaryTypeName","src":"6196:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5336,"name":"b","nodeType":"VariableDeclaration","scope":5353,"src":"6204:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5335,"name":"uint","nodeType":"ElementaryTypeName","src":"6204:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"6195:16:8"},"returnParameters":{"id":5342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5339,"name":"","nodeType":"VariableDeclaration","scope":5353,"src":"6235:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5338,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"6235:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5341,"name":"","nodeType":"VariableDeclaration","scope":5353,"src":"6246:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5340,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6246:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"6234:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5391,"nodeType":"FunctionDefinition","src":"6422:278:8","nodes":[],"body":{"id":5390,"nodeType":"Block","src":"6527:173:8","nodes":[],"statements":[{"assignments":[5367,5369],"declarations":[{"constant":false,"id":5367,"name":"err","nodeType":"VariableDeclaration","scope":5390,"src":"6538:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5366,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"6538:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5369,"name":"ab","nodeType":"VariableDeclaration","scope":5390,"src":"6553:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5368,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6553:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"id":5374,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5371,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5355,"src":"6577:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":5372,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5357,"src":"6580:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5370,"name":"mulExp","nodeType":"Identifier","overloadedDeclarations":[5332,5353],"referencedDeclaration":5332,"src":"6570:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6570:12:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"nodeType":"VariableDeclarationStatement","src":"6537:45:8"},{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5375,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5367,"src":"6596:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5376,"name":"MathError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3972,"src":"6603:9:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_MathError_$3972_$","typeString":"type(enum CarefulMath.MathError)"}},"id":5377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"6603:18:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"src":"6596:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5384,"nodeType":"IfStatement","src":"6592:72:8","trueBody":{"id":5383,"nodeType":"Block","src":"6623:41:8","statements":[{"expression":{"argumentTypes":null,"components":[{"argumentTypes":null,"id":5379,"name":"err","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5367,"src":"6645:3:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},{"argumentTypes":null,"id":5380,"name":"ab","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"6650:2:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"id":5381,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6644:9:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5365,"id":5382,"nodeType":"Return","src":"6637:16:8"}]}},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5386,"name":"ab","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5369,"src":"6687:2:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},{"argumentTypes":null,"id":5387,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5359,"src":"6691:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"},{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}],"id":5385,"name":"mulExp","nodeType":"Identifier","overloadedDeclarations":[5332,5353],"referencedDeclaration":5332,"src":"6680:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_Exp_$4894_memory_ptr_$_t_struct$_Exp_$4894_memory_ptr_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (struct Exponential.Exp memory,struct Exponential.Exp memory) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6680:13:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5365,"id":5389,"nodeType":"Return","src":"6673:20:8"}]},"documentation":"@dev Multiplies three exponentials, returning a new exponential.","implemented":true,"kind":"function","modifiers":[],"name":"mulExp3","parameters":{"id":5360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5355,"name":"a","nodeType":"VariableDeclaration","scope":5391,"src":"6439:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5354,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6439:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5357,"name":"b","nodeType":"VariableDeclaration","scope":5391,"src":"6453:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5356,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6453:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5359,"name":"c","nodeType":"VariableDeclaration","scope":5391,"src":"6467:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5358,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6467:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"6438:42:8"},"returnParameters":{"id":5365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5362,"name":"","nodeType":"VariableDeclaration","scope":5391,"src":"6504:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5361,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"6504:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5364,"name":"","nodeType":"VariableDeclaration","scope":5391,"src":"6515:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5363,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6515:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"6503:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5410,"nodeType":"FunctionDefinition","src":"6932:144:8","nodes":[],"body":{"id":5409,"nodeType":"Block","src":"7022:54:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5403,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5393,"src":"7046:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7046:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5405,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5395,"src":"7058:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7058:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5402,"name":"getExp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4958,"src":"7039:6:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"id":5407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7039:30:8","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_MathError_$3972_$_t_struct$_Exp_$4894_memory_ptr_$","typeString":"tuple(enum CarefulMath.MathError,struct Exponential.Exp memory)"}},"functionReturnParameters":5401,"id":5408,"nodeType":"Return","src":"7032:37:8"}]},"documentation":"@dev Divides two exponentials, returning a new exponential.\n    (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)","implemented":true,"kind":"function","modifiers":[],"name":"divExp","parameters":{"id":5396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5393,"name":"a","nodeType":"VariableDeclaration","scope":5410,"src":"6948:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5392,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6948:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5395,"name":"b","nodeType":"VariableDeclaration","scope":5410,"src":"6962:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5394,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"6962:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"6947:28:8"},"returnParameters":{"id":5401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5398,"name":"","nodeType":"VariableDeclaration","scope":5410,"src":"6999:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"},"typeName":{"contractScope":null,"id":5397,"name":"MathError","nodeType":"UserDefinedTypeName","referencedDeclaration":3972,"src":"6999:9:8","typeDescriptions":{"typeIdentifier":"t_enum$_MathError_$3972","typeString":"enum CarefulMath.MathError"}},"value":null,"visibility":"internal"},{"constant":false,"id":5400,"name":"","nodeType":"VariableDeclaration","scope":5410,"src":"7010:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5399,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7010:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"6998:23:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5423,"nodeType":"FunctionDefinition","src":"7228:210:8","nodes":[],"body":{"id":5422,"nodeType":"Block","src":"7291:147:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5417,"name":"exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5412,"src":"7408:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7408:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5419,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"7423:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7408:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5416,"id":5421,"nodeType":"Return","src":"7401:30:8"}]},"documentation":"@dev Truncates the given exp to a whole number value.\n     For example, truncate(Exp{mantissa: 15 * expScale}) = 15","implemented":true,"kind":"function","modifiers":[],"name":"truncate","parameters":{"id":5413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5412,"name":"exp","nodeType":"VariableDeclaration","scope":5423,"src":"7246:14:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5411,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7246:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"7245:16:8"},"returnParameters":{"id":5416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5415,"name":"","nodeType":"VariableDeclaration","scope":5423,"src":"7285:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5414,"name":"uint","nodeType":"ElementaryTypeName","src":"7285:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"7284:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5439,"nodeType":"FunctionDefinition","src":"7517:139:8","nodes":[],"body":{"id":5438,"nodeType":"Block","src":"7602:54:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5432,"name":"left","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"7619:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7619:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5434,"name":"right","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5427,"src":"7635:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7635:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7619:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5431,"id":5437,"nodeType":"Return","src":"7612:37:8"}]},"documentation":"@dev Checks if first Exp is less than second Exp.","implemented":true,"kind":"function","modifiers":[],"name":"lessThanExp","parameters":{"id":5428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5425,"name":"left","nodeType":"VariableDeclaration","scope":5439,"src":"7538:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5424,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7538:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5427,"name":"right","nodeType":"VariableDeclaration","scope":5439,"src":"7555:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5426,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7555:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"7537:35:8"},"returnParameters":{"id":5431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5430,"name":"","nodeType":"VariableDeclaration","scope":5439,"src":"7596:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5429,"name":"bool","nodeType":"ElementaryTypeName","src":"7596:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"7595:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5455,"nodeType":"FunctionDefinition","src":"7723:147:8","nodes":[],"body":{"id":5454,"nodeType":"Block","src":"7815:55:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5448,"name":"left","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5441,"src":"7832:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7832:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5450,"name":"right","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"7849:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5451,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"7849:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7832:31:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5447,"id":5453,"nodeType":"Return","src":"7825:38:8"}]},"documentation":"@dev Checks if left Exp <= right Exp.","implemented":true,"kind":"function","modifiers":[],"name":"lessThanOrEqualExp","parameters":{"id":5444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5441,"name":"left","nodeType":"VariableDeclaration","scope":5455,"src":"7751:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5440,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7751:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5443,"name":"right","nodeType":"VariableDeclaration","scope":5455,"src":"7768:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5442,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7768:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"7750:35:8"},"returnParameters":{"id":5447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5446,"name":"","nodeType":"VariableDeclaration","scope":5455,"src":"7809:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5445,"name":"bool","nodeType":"ElementaryTypeName","src":"7809:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"7808:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5471,"nodeType":"FunctionDefinition","src":"7936:142:8","nodes":[],"body":{"id":5470,"nodeType":"Block","src":"8024:54:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5464,"name":"left","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5457,"src":"8041:4:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"8041:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5466,"name":"right","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5459,"src":"8057:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"8057:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8041:30:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5463,"id":5469,"nodeType":"Return","src":"8034:37:8"}]},"documentation":"@dev Checks if left Exp > right Exp.","implemented":true,"kind":"function","modifiers":[],"name":"greaterThanExp","parameters":{"id":5460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5457,"name":"left","nodeType":"VariableDeclaration","scope":5471,"src":"7960:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5456,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7960:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5459,"name":"right","nodeType":"VariableDeclaration","scope":5471,"src":"7977:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5458,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"7977:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"7959:35:8"},"returnParameters":{"id":5463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5462,"name":"","nodeType":"VariableDeclaration","scope":5471,"src":"8018:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5461,"name":"bool","nodeType":"ElementaryTypeName","src":"8018:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"8017:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5484,"nodeType":"FunctionDefinition","src":"8148:109:8","nodes":[],"body":{"id":5483,"nodeType":"Block","src":"8214:43:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5478,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5473,"src":"8231:5:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"8231:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":5480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8249:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8231:19:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5477,"id":5482,"nodeType":"Return","src":"8224:26:8"}]},"documentation":"@dev returns true if Exp is exactly zero","implemented":true,"kind":"function","modifiers":[],"name":"isZeroExp","parameters":{"id":5474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5473,"name":"value","nodeType":"VariableDeclaration","scope":5484,"src":"8167:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5472,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"8167:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"8166:18:8"},"returnParameters":{"id":5477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5476,"name":"","nodeType":"VariableDeclaration","scope":5484,"src":"8208:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5475,"name":"bool","nodeType":"ElementaryTypeName","src":"8208:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"}],"src":"8207:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5507,"nodeType":"FunctionDefinition","src":"8263:162:8","nodes":[],"body":{"id":5506,"nodeType":"Block","src":"8348:77:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5494,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"8366:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"},"id":5497,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"hexValue":"32","id":5495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8370:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"argumentTypes":null,"hexValue":"323234","id":5496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8373:3:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_224_by_1","typeString":"int_const 224"},"value":"224"},"src":"8370:6:8","typeDescriptions":{"typeIdentifier":"t_rational_26959946667150639794667015087019630673637144422540572481103610249216_by_1","typeString":"int_const 2695...(60 digits omitted)...9216"}},"src":"8366:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":5499,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5488,"src":"8378:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5493,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"8358:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8358:33:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5501,"nodeType":"ExpressionStatement","src":"8358:33:8"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5503,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5486,"src":"8416:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8408:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint224_$","typeString":"type(uint224)"},"typeName":"uint224"},"id":5504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8408:10:8","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"functionReturnParameters":5492,"id":5505,"nodeType":"Return","src":"8401:17:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"safe224","parameters":{"id":5489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5486,"name":"n","nodeType":"VariableDeclaration","scope":5507,"src":"8280:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5485,"name":"uint","nodeType":"ElementaryTypeName","src":"8280:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5488,"name":"errorMessage","nodeType":"VariableDeclaration","scope":5507,"src":"8288:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5487,"name":"string","nodeType":"ElementaryTypeName","src":"8288:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"8279:36:8"},"returnParameters":{"id":5492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5491,"name":"","nodeType":"VariableDeclaration","scope":5507,"src":"8339:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"},"typeName":{"id":5490,"name":"uint224","nodeType":"ElementaryTypeName","src":"8339:7:8","typeDescriptions":{"typeIdentifier":"t_uint224","typeString":"uint224"}},"value":null,"visibility":"internal"}],"src":"8338:9:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5530,"nodeType":"FunctionDefinition","src":"8431:158:8","nodes":[],"body":{"id":5529,"nodeType":"Block","src":"8514:75:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5517,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"8532:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"},"id":5520,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"hexValue":"32","id":5518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8536:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"argumentTypes":null,"hexValue":"3332","id":5519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8539:2:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8536:5:8","typeDescriptions":{"typeIdentifier":"t_rational_4294967296_by_1","typeString":"int_const 4294967296"}},"src":"8532:9:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":5522,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"8543:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5516,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"8524:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8524:32:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5524,"nodeType":"ExpressionStatement","src":"8524:32:8"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5526,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5509,"src":"8580:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8573:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":"uint32"},"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8573:9:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":5515,"id":5528,"nodeType":"Return","src":"8566:16:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"safe32","parameters":{"id":5512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5509,"name":"n","nodeType":"VariableDeclaration","scope":5530,"src":"8447:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5508,"name":"uint","nodeType":"ElementaryTypeName","src":"8447:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5511,"name":"errorMessage","nodeType":"VariableDeclaration","scope":5530,"src":"8455:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5510,"name":"string","nodeType":"ElementaryTypeName","src":"8455:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"8446:36:8"},"returnParameters":{"id":5515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5514,"name":"","nodeType":"VariableDeclaration","scope":5530,"src":"8506:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":5513,"name":"uint32","nodeType":"ElementaryTypeName","src":"8506:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":null,"visibility":"internal"}],"src":"8505:8:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5549,"nodeType":"FunctionDefinition","src":"8595:146:8","nodes":[],"body":{"id":5548,"nodeType":"Block","src":"8672:69:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5541,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5532,"src":"8709:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5542,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"8709:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5543,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5534,"src":"8721:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"8721:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5540,"name":"add_","nodeType":"Identifier","overloadedDeclarations":[5549,5568,5584,5611],"referencedDeclaration":5584,"src":"8704:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8704:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5539,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"8689:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"8689:45:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5538,"id":5547,"nodeType":"Return","src":"8682:52:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"add_","parameters":{"id":5535,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5532,"name":"a","nodeType":"VariableDeclaration","scope":5549,"src":"8609:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5531,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"8609:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5534,"name":"b","nodeType":"VariableDeclaration","scope":5549,"src":"8623:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5533,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"8623:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"8608:28:8"},"returnParameters":{"id":5538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5537,"name":"","nodeType":"VariableDeclaration","scope":5549,"src":"8660:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5536,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"8660:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"8659:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5568,"nodeType":"FunctionDefinition","src":"8747:158:8","nodes":[],"body":{"id":5567,"nodeType":"Block","src":"8833:72:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5560,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5551,"src":"8873:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5561,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"8873:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5562,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5553,"src":"8885:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"8885:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5559,"name":"add_","nodeType":"Identifier","overloadedDeclarations":[5549,5568,5584,5611],"referencedDeclaration":5584,"src":"8868:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8868:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5558,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"8850:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"8850:48:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5557,"id":5566,"nodeType":"Return","src":"8843:55:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"add_","parameters":{"id":5554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5551,"name":"a","nodeType":"VariableDeclaration","scope":5568,"src":"8761:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5550,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"8761:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5553,"name":"b","nodeType":"VariableDeclaration","scope":5568,"src":"8778:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5552,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"8778:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"8760:34:8"},"returnParameters":{"id":5557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5556,"name":"","nodeType":"VariableDeclaration","scope":5568,"src":"8818:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5555,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"8818:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"8817:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5584,"nodeType":"FunctionDefinition","src":"8911:114:8","nodes":[],"body":{"id":5583,"nodeType":"Block","src":"8970:55:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5578,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5570,"src":"8992:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5579,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5572,"src":"8995:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"6164646974696f6e206f766572666c6f77","id":5580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8998:19:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_8c0d96e929759368d857f737222dcb6a5217a09dbc29c3e61addc531fdea00f5","typeString":"literal_string \"addition overflow\""},"value":"addition overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_8c0d96e929759368d857f737222dcb6a5217a09dbc29c3e61addc531fdea00f5","typeString":"literal_string \"addition overflow\""}],"id":5577,"name":"add_","nodeType":"Identifier","overloadedDeclarations":[5549,5568,5584,5611],"referencedDeclaration":5611,"src":"8987:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":5581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8987:31:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5576,"id":5582,"nodeType":"Return","src":"8980:38:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"add_","parameters":{"id":5573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5570,"name":"a","nodeType":"VariableDeclaration","scope":5584,"src":"8925:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5569,"name":"uint","nodeType":"ElementaryTypeName","src":"8925:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5572,"name":"b","nodeType":"VariableDeclaration","scope":5584,"src":"8933:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5571,"name":"uint","nodeType":"ElementaryTypeName","src":"8933:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8924:16:8"},"returnParameters":{"id":5576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5575,"name":"","nodeType":"VariableDeclaration","scope":5584,"src":"8964:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5574,"name":"uint","nodeType":"ElementaryTypeName","src":"8964:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"8963:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5611,"nodeType":"FunctionDefinition","src":"9031:175:8","nodes":[],"body":{"id":5610,"nodeType":"Block","src":"9118:88:8","nodes":[],"statements":[{"assignments":[5596],"declarations":[{"constant":false,"id":5596,"name":"c","nodeType":"VariableDeclaration","scope":5610,"src":"9128:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5595,"name":"uint","nodeType":"ElementaryTypeName","src":"9128:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5600,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5597,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"9137:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"argumentTypes":null,"id":5598,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5588,"src":"9141:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9137:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9128:14:8"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5602,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"9160:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"argumentTypes":null,"id":5603,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5586,"src":"9165:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9160:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":5605,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5590,"src":"9168:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5601,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"9152:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9152:29:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5607,"nodeType":"ExpressionStatement","src":"9152:29:8"},{"expression":{"argumentTypes":null,"id":5608,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5596,"src":"9198:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5594,"id":5609,"nodeType":"Return","src":"9191:8:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"add_","parameters":{"id":5591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5586,"name":"a","nodeType":"VariableDeclaration","scope":5611,"src":"9045:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5585,"name":"uint","nodeType":"ElementaryTypeName","src":"9045:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5588,"name":"b","nodeType":"VariableDeclaration","scope":5611,"src":"9053:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5587,"name":"uint","nodeType":"ElementaryTypeName","src":"9053:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5590,"name":"errorMessage","nodeType":"VariableDeclaration","scope":5611,"src":"9061:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5589,"name":"string","nodeType":"ElementaryTypeName","src":"9061:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"9044:44:8"},"returnParameters":{"id":5594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5593,"name":"","nodeType":"VariableDeclaration","scope":5611,"src":"9112:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5592,"name":"uint","nodeType":"ElementaryTypeName","src":"9112:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9111:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5630,"nodeType":"FunctionDefinition","src":"9212:146:8","nodes":[],"body":{"id":5629,"nodeType":"Block","src":"9289:69:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5622,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5613,"src":"9326:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5623,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"9326:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5624,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5615,"src":"9338:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5625,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"9338:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5621,"name":"sub_","nodeType":"Identifier","overloadedDeclarations":[5630,5649,5665,5688],"referencedDeclaration":5665,"src":"9321:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9321:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5620,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"9306:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"9306:45:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5619,"id":5628,"nodeType":"Return","src":"9299:52:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"sub_","parameters":{"id":5616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5613,"name":"a","nodeType":"VariableDeclaration","scope":5630,"src":"9226:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5612,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9226:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5615,"name":"b","nodeType":"VariableDeclaration","scope":5630,"src":"9240:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5614,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9240:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"9225:28:8"},"returnParameters":{"id":5619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5618,"name":"","nodeType":"VariableDeclaration","scope":5630,"src":"9277:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5617,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9277:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"9276:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5649,"nodeType":"FunctionDefinition","src":"9364:158:8","nodes":[],"body":{"id":5648,"nodeType":"Block","src":"9450:72:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5641,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5632,"src":"9490:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5642,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"9490:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5643,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5634,"src":"9502:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"9502:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5640,"name":"sub_","nodeType":"Identifier","overloadedDeclarations":[5630,5649,5665,5688],"referencedDeclaration":5665,"src":"9485:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9485:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5639,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"9467:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"9467:48:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5638,"id":5647,"nodeType":"Return","src":"9460:55:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"sub_","parameters":{"id":5635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5632,"name":"a","nodeType":"VariableDeclaration","scope":5649,"src":"9378:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5631,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"9378:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5634,"name":"b","nodeType":"VariableDeclaration","scope":5649,"src":"9395:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5633,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"9395:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"9377:34:8"},"returnParameters":{"id":5638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5637,"name":"","nodeType":"VariableDeclaration","scope":5649,"src":"9435:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5636,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"9435:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"9434:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5665,"nodeType":"FunctionDefinition","src":"9528:118:8","nodes":[],"body":{"id":5664,"nodeType":"Block","src":"9587:59:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5651,"src":"9609:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5660,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5653,"src":"9612:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"7375627472616374696f6e20756e646572666c6f77","id":5661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9615:23:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_f22f6b3017af2aff30fb71d5e8f8adc6cd3022431e6fc88c01d6d8b2adb30f31","typeString":"literal_string \"subtraction underflow\""},"value":"subtraction underflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_f22f6b3017af2aff30fb71d5e8f8adc6cd3022431e6fc88c01d6d8b2adb30f31","typeString":"literal_string \"subtraction underflow\""}],"id":5658,"name":"sub_","nodeType":"Identifier","overloadedDeclarations":[5630,5649,5665,5688],"referencedDeclaration":5688,"src":"9604:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":5662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9604:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5657,"id":5663,"nodeType":"Return","src":"9597:42:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"sub_","parameters":{"id":5654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5651,"name":"a","nodeType":"VariableDeclaration","scope":5665,"src":"9542:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5650,"name":"uint","nodeType":"ElementaryTypeName","src":"9542:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5653,"name":"b","nodeType":"VariableDeclaration","scope":5665,"src":"9550:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5652,"name":"uint","nodeType":"ElementaryTypeName","src":"9550:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9541:16:8"},"returnParameters":{"id":5657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5656,"name":"","nodeType":"VariableDeclaration","scope":5665,"src":"9581:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5655,"name":"uint","nodeType":"ElementaryTypeName","src":"9581:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9580:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5688,"nodeType":"FunctionDefinition","src":"9652:155:8","nodes":[],"body":{"id":5687,"nodeType":"Block","src":"9739:68:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5677,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5669,"src":"9757:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"argumentTypes":null,"id":5678,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"9762:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9757:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":5680,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5671,"src":"9765:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"9749:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9749:29:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5682,"nodeType":"ExpressionStatement","src":"9749:29:8"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5683,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5667,"src":"9795:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"argumentTypes":null,"id":5684,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5669,"src":"9799:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9795:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5675,"id":5686,"nodeType":"Return","src":"9788:12:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"sub_","parameters":{"id":5672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5667,"name":"a","nodeType":"VariableDeclaration","scope":5688,"src":"9666:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5666,"name":"uint","nodeType":"ElementaryTypeName","src":"9666:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5669,"name":"b","nodeType":"VariableDeclaration","scope":5688,"src":"9674:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5668,"name":"uint","nodeType":"ElementaryTypeName","src":"9674:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5671,"name":"errorMessage","nodeType":"VariableDeclaration","scope":5688,"src":"9682:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5670,"name":"string","nodeType":"ElementaryTypeName","src":"9682:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"9665:44:8"},"returnParameters":{"id":5675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5674,"name":"","nodeType":"VariableDeclaration","scope":5688,"src":"9733:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5673,"name":"uint","nodeType":"ElementaryTypeName","src":"9733:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9732:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5709,"nodeType":"FunctionDefinition","src":"9813:157:8","nodes":[],"body":{"id":5708,"nodeType":"Block","src":"9890:80:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5699,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"9927:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5700,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"9927:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5701,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5692,"src":"9939:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5702,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"9939:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5698,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"9922:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5704,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"9953:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9922:39:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5697,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"9907:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"9907:56:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5696,"id":5707,"nodeType":"Return","src":"9900:63:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5690,"name":"a","nodeType":"VariableDeclaration","scope":5709,"src":"9827:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5689,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9827:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5692,"name":"b","nodeType":"VariableDeclaration","scope":5709,"src":"9841:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5691,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9841:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"9826:28:8"},"returnParameters":{"id":5696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5695,"name":"","nodeType":"VariableDeclaration","scope":5709,"src":"9878:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5694,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9878:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"9877:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5727,"nodeType":"FunctionDefinition","src":"9976:131:8","nodes":[],"body":{"id":5726,"nodeType":"Block","src":"10047:60:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5720,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5711,"src":"10084:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"10084:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5722,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5713,"src":"10096:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5719,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"10079:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10079:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5718,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"10064:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"10064:36:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5717,"id":5725,"nodeType":"Return","src":"10057:43:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5711,"name":"a","nodeType":"VariableDeclaration","scope":5727,"src":"9990:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5710,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"9990:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5713,"name":"b","nodeType":"VariableDeclaration","scope":5727,"src":"10004:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5712,"name":"uint","nodeType":"ElementaryTypeName","src":"10004:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"9989:22:8"},"returnParameters":{"id":5717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5716,"name":"","nodeType":"VariableDeclaration","scope":5727,"src":"10035:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5715,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"10035:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"10034:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5745,"nodeType":"FunctionDefinition","src":"10113:119:8","nodes":[],"body":{"id":5744,"nodeType":"Block","src":"10178:54:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5737,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5729,"src":"10200:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"10203:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5739,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"10203:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5736,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"10195:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10195:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5741,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"10217:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10195:30:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5735,"id":5743,"nodeType":"Return","src":"10188:37:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5729,"name":"a","nodeType":"VariableDeclaration","scope":5745,"src":"10127:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5728,"name":"uint","nodeType":"ElementaryTypeName","src":"10127:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5731,"name":"b","nodeType":"VariableDeclaration","scope":5745,"src":"10135:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5730,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"10135:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"10126:22:8"},"returnParameters":{"id":5735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5734,"name":"","nodeType":"VariableDeclaration","scope":5745,"src":"10172:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5733,"name":"uint","nodeType":"ElementaryTypeName","src":"10172:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10171:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5766,"nodeType":"FunctionDefinition","src":"10238:172:8","nodes":[],"body":{"id":5765,"nodeType":"Block","src":"10324:86:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5756,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"10364:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"10364:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5758,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5749,"src":"10376:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5759,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"10376:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5755,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"10359:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10359:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5761,"name":"doubleScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"10390:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10359:42:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5754,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"10341:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"10341:62:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5753,"id":5764,"nodeType":"Return","src":"10334:69:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5747,"name":"a","nodeType":"VariableDeclaration","scope":5766,"src":"10252:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5746,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10252:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5749,"name":"b","nodeType":"VariableDeclaration","scope":5766,"src":"10269:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5748,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10269:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"10251:34:8"},"returnParameters":{"id":5753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5752,"name":"","nodeType":"VariableDeclaration","scope":5766,"src":"10309:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5751,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10309:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"10308:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5784,"nodeType":"FunctionDefinition","src":"10416:140:8","nodes":[],"body":{"id":5783,"nodeType":"Block","src":"10493:63:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5777,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5768,"src":"10533:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"10533:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5779,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5770,"src":"10545:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5776,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"10528:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10528:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5775,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"10510:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"10510:39:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5774,"id":5782,"nodeType":"Return","src":"10503:46:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5768,"name":"a","nodeType":"VariableDeclaration","scope":5784,"src":"10430:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5767,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10430:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5770,"name":"b","nodeType":"VariableDeclaration","scope":5784,"src":"10447:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5769,"name":"uint","nodeType":"ElementaryTypeName","src":"10447:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10429:25:8"},"returnParameters":{"id":5774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5773,"name":"","nodeType":"VariableDeclaration","scope":5784,"src":"10478:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5772,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10478:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"10477:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5802,"nodeType":"FunctionDefinition","src":"10562:125:8","nodes":[],"body":{"id":5801,"nodeType":"Block","src":"10630:57:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5794,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5786,"src":"10652:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5795,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5788,"src":"10655:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5796,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"10655:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5793,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"10647:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10647:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5798,"name":"doubleScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"10669:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10647:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5792,"id":5800,"nodeType":"Return","src":"10640:40:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5786,"name":"a","nodeType":"VariableDeclaration","scope":5802,"src":"10576:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5785,"name":"uint","nodeType":"ElementaryTypeName","src":"10576:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5788,"name":"b","nodeType":"VariableDeclaration","scope":5802,"src":"10584:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5787,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"10584:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"10575:25:8"},"returnParameters":{"id":5792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5791,"name":"","nodeType":"VariableDeclaration","scope":5802,"src":"10624:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5790,"name":"uint","nodeType":"ElementaryTypeName","src":"10624:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10623:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5818,"nodeType":"FunctionDefinition","src":"10693:120:8","nodes":[],"body":{"id":5817,"nodeType":"Block","src":"10752:61:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5812,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5804,"src":"10774:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5813,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5806,"src":"10777:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"6d756c7469706c69636174696f6e206f766572666c6f77","id":5814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10780:25:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_3e4a9c0e386509f7d51443819fe3039eb3974511fef3f90a0001815722534080","typeString":"literal_string \"multiplication overflow\""},"value":"multiplication overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_3e4a9c0e386509f7d51443819fe3039eb3974511fef3f90a0001815722534080","typeString":"literal_string \"multiplication overflow\""}],"id":5811,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5858,"src":"10769:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10769:37:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5810,"id":5816,"nodeType":"Return","src":"10762:44:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5804,"name":"a","nodeType":"VariableDeclaration","scope":5818,"src":"10707:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5803,"name":"uint","nodeType":"ElementaryTypeName","src":"10707:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5806,"name":"b","nodeType":"VariableDeclaration","scope":5818,"src":"10715:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5805,"name":"uint","nodeType":"ElementaryTypeName","src":"10715:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10706:16:8"},"returnParameters":{"id":5810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5809,"name":"","nodeType":"VariableDeclaration","scope":5818,"src":"10746:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5808,"name":"uint","nodeType":"ElementaryTypeName","src":"10746:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10745:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5858,"nodeType":"FunctionDefinition","src":"10819:243:8","nodes":[],"body":{"id":5857,"nodeType":"Block","src":"10906:156:8","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"10920:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":5830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10925:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10920:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5832,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"10930:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"hexValue":"30","id":5833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10930:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10920:16:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":5839,"nodeType":"IfStatement","src":"10916:55:8","trueBody":{"id":5838,"nodeType":"Block","src":"10938:33:8","statements":[{"expression":{"argumentTypes":null,"hexValue":"30","id":5836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10959:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5828,"id":5837,"nodeType":"Return","src":"10952:8:8"}]}},{"assignments":[5841],"declarations":[{"constant":false,"id":5841,"name":"c","nodeType":"VariableDeclaration","scope":5857,"src":"10980:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5840,"name":"uint","nodeType":"ElementaryTypeName","src":"10980:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"id":5845,"initialValue":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5842,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"10989:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"argumentTypes":null,"id":5843,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"10993:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10989:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10980:14:8"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":5847,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"11012:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":5848,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"11016:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11012:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"id":5850,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5822,"src":"11021:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11012:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":5852,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5824,"src":"11024:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":5846,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"11004:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11004:33:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5854,"nodeType":"ExpressionStatement","src":"11004:33:8"},{"expression":{"argumentTypes":null,"id":5855,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"11054:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5828,"id":5856,"nodeType":"Return","src":"11047:8:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"mul_","parameters":{"id":5825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5820,"name":"a","nodeType":"VariableDeclaration","scope":5858,"src":"10833:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5819,"name":"uint","nodeType":"ElementaryTypeName","src":"10833:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5822,"name":"b","nodeType":"VariableDeclaration","scope":5858,"src":"10841:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5821,"name":"uint","nodeType":"ElementaryTypeName","src":"10841:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5824,"name":"errorMessage","nodeType":"VariableDeclaration","scope":5858,"src":"10849:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5823,"name":"string","nodeType":"ElementaryTypeName","src":"10849:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"10832:44:8"},"returnParameters":{"id":5828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5827,"name":"","nodeType":"VariableDeclaration","scope":5858,"src":"10900:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5826,"name":"uint","nodeType":"ElementaryTypeName","src":"10900:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"10899:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5880,"nodeType":"FunctionDefinition","src":"11068:162:8","nodes":[],"body":{"id":5879,"nodeType":"Block","src":"11145:85:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5870,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5860,"src":"11187:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5871,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"11187:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5872,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11199:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5869,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"11182:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11182:26:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5874,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5862,"src":"11210:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5875,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"11210:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5868,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11177:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11177:44:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5867,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"11162:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"11162:61:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5866,"id":5878,"nodeType":"Return","src":"11155:68:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5860,"name":"a","nodeType":"VariableDeclaration","scope":5880,"src":"11082:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5859,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11082:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5862,"name":"b","nodeType":"VariableDeclaration","scope":5880,"src":"11096:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5861,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11096:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"11081:28:8"},"returnParameters":{"id":5866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5865,"name":"","nodeType":"VariableDeclaration","scope":5880,"src":"11133:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5864,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11133:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"11132:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5898,"nodeType":"FunctionDefinition","src":"11236:131:8","nodes":[],"body":{"id":5897,"nodeType":"Block","src":"11307:60:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5891,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5882,"src":"11344:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"11344:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5893,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5884,"src":"11356:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5890,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11339:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11339:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5889,"name":"Exp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4894,"src":"11324:3:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Exp_$4894_storage_ptr_$","typeString":"type(struct Exponential.Exp storage pointer)"}},"id":5895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"11324:36:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory","typeString":"struct Exponential.Exp memory"}},"functionReturnParameters":5888,"id":5896,"nodeType":"Return","src":"11317:43:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5882,"name":"a","nodeType":"VariableDeclaration","scope":5898,"src":"11250:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5881,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11250:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"},{"constant":false,"id":5884,"name":"b","nodeType":"VariableDeclaration","scope":5898,"src":"11264:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5883,"name":"uint","nodeType":"ElementaryTypeName","src":"11264:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11249:22:8"},"returnParameters":{"id":5888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5887,"name":"","nodeType":"VariableDeclaration","scope":5898,"src":"11295:10:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5886,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11295:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"11294:12:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5917,"nodeType":"FunctionDefinition","src":"11373:124:8","nodes":[],"body":{"id":5916,"nodeType":"Block","src":"11438:59:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5909,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5900,"src":"11465:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5910,"name":"expScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"11468:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5908,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"11460:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11460:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5912,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5902,"src":"11479:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp memory"}},"id":5913,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4893,"src":"11479:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5907,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11455:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11455:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5906,"id":5915,"nodeType":"Return","src":"11448:42:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5900,"name":"a","nodeType":"VariableDeclaration","scope":5917,"src":"11387:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5899,"name":"uint","nodeType":"ElementaryTypeName","src":"11387:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5902,"name":"b","nodeType":"VariableDeclaration","scope":5917,"src":"11395:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_memory_ptr","typeString":"struct Exponential.Exp"},"typeName":{"contractScope":null,"id":5901,"name":"Exp","nodeType":"UserDefinedTypeName","referencedDeclaration":4894,"src":"11395:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Exp_$4894_storage_ptr","typeString":"struct Exponential.Exp"}},"value":null,"visibility":"internal"}],"src":"11386:22:8"},"returnParameters":{"id":5906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5905,"name":"","nodeType":"VariableDeclaration","scope":5917,"src":"11432:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5904,"name":"uint","nodeType":"ElementaryTypeName","src":"11432:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11431:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5939,"nodeType":"FunctionDefinition","src":"11503:177:8","nodes":[],"body":{"id":5938,"nodeType":"Block","src":"11589:91:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5929,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5919,"src":"11634:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5930,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"11634:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5931,"name":"doubleScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"11646:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5928,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"11629:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11629:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5933,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5921,"src":"11660:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5934,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"11660:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5927,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11624:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11624:47:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5926,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"11606:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"11606:67:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5925,"id":5937,"nodeType":"Return","src":"11599:74:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5919,"name":"a","nodeType":"VariableDeclaration","scope":5939,"src":"11517:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5918,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11517:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5921,"name":"b","nodeType":"VariableDeclaration","scope":5939,"src":"11534:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5920,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11534:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"11516:34:8"},"returnParameters":{"id":5925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5924,"name":"","nodeType":"VariableDeclaration","scope":5939,"src":"11574:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5923,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11574:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"11573:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5957,"nodeType":"FunctionDefinition","src":"11686:140:8","nodes":[],"body":{"id":5956,"nodeType":"Block","src":"11763:63:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5950,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5941,"src":"11803:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5951,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"11803:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5952,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5943,"src":"11815:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5949,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11798:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11798:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5948,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"11780:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":5954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"11780:39:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":5947,"id":5955,"nodeType":"Return","src":"11773:46:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5941,"name":"a","nodeType":"VariableDeclaration","scope":5957,"src":"11700:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5940,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11700:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"},{"constant":false,"id":5943,"name":"b","nodeType":"VariableDeclaration","scope":5957,"src":"11717:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5942,"name":"uint","nodeType":"ElementaryTypeName","src":"11717:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11699:25:8"},"returnParameters":{"id":5947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5946,"name":"","nodeType":"VariableDeclaration","scope":5957,"src":"11748:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5945,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11748:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"11747:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5976,"nodeType":"FunctionDefinition","src":"11832:130:8","nodes":[],"body":{"id":5975,"nodeType":"Block","src":"11900:62:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5968,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5959,"src":"11927:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5969,"name":"doubleScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"11930:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5967,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"11922:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11922:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":5971,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5961,"src":"11944:1:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double memory"}},"id":5972,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"mantissa","nodeType":"MemberAccess","referencedDeclaration":4896,"src":"11944:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5966,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"11917:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":5973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11917:38:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5965,"id":5974,"nodeType":"Return","src":"11910:45:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5959,"name":"a","nodeType":"VariableDeclaration","scope":5976,"src":"11846:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5958,"name":"uint","nodeType":"ElementaryTypeName","src":"11846:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5961,"name":"b","nodeType":"VariableDeclaration","scope":5976,"src":"11854:15:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":5960,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"11854:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"11845:25:8"},"returnParameters":{"id":5965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5964,"name":"","nodeType":"VariableDeclaration","scope":5976,"src":"11894:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5963,"name":"uint","nodeType":"ElementaryTypeName","src":"11894:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11893:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":5992,"nodeType":"FunctionDefinition","src":"11968:111:8","nodes":[],"body":{"id":5991,"nodeType":"Block","src":"12027:52:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":5986,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5978,"src":"12049:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":5987,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5980,"src":"12052:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"hexValue":"646976696465206279207a65726f","id":5988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12055:16:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_stringliteral_336a586d2b2f9da7524b608e311033812081ceec42c301063df6eac84bf74752","typeString":"literal_string \"divide by zero\""},"value":"divide by zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_336a586d2b2f9da7524b608e311033812081ceec42c301063df6eac84bf74752","typeString":"literal_string \"divide by zero\""}],"id":5985,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":6015,"src":"12044:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$","typeString":"function (uint256,uint256,string memory) pure returns (uint256)"}},"id":5989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12044:28:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5984,"id":5990,"nodeType":"Return","src":"12037:35:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5978,"name":"a","nodeType":"VariableDeclaration","scope":5992,"src":"11982:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5977,"name":"uint","nodeType":"ElementaryTypeName","src":"11982:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5980,"name":"b","nodeType":"VariableDeclaration","scope":5992,"src":"11990:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5979,"name":"uint","nodeType":"ElementaryTypeName","src":"11990:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"11981:16:8"},"returnParameters":{"id":5984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5983,"name":"","nodeType":"VariableDeclaration","scope":5992,"src":"12021:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5982,"name":"uint","nodeType":"ElementaryTypeName","src":"12021:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12020:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":6015,"nodeType":"FunctionDefinition","src":"12085:154:8","nodes":[],"body":{"id":6014,"nodeType":"Block","src":"12172:67:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":6004,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"12190:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"argumentTypes":null,"hexValue":"30","id":6005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12194:1:8","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12190:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"argumentTypes":null,"id":6007,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5998,"src":"12197:12:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":6003,"name":"require","nodeType":"Identifier","overloadedDeclarations":[6348,6349],"referencedDeclaration":6349,"src":"12182:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12182:28:8","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6009,"nodeType":"ExpressionStatement","src":"12182:28:8"},{"expression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":6010,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5994,"src":"12227:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"argumentTypes":null,"id":6011,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5996,"src":"12231:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12227:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6002,"id":6013,"nodeType":"Return","src":"12220:12:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"div_","parameters":{"id":5999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5994,"name":"a","nodeType":"VariableDeclaration","scope":6015,"src":"12099:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5993,"name":"uint","nodeType":"ElementaryTypeName","src":"12099:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5996,"name":"b","nodeType":"VariableDeclaration","scope":6015,"src":"12107:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5995,"name":"uint","nodeType":"ElementaryTypeName","src":"12107:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":5998,"name":"errorMessage","nodeType":"VariableDeclaration","scope":6015,"src":"12115:26:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":5997,"name":"string","nodeType":"ElementaryTypeName","src":"12115:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":null,"visibility":"internal"}],"src":"12098:44:8"},"returnParameters":{"id":6002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6001,"name":"","nodeType":"VariableDeclaration","scope":6015,"src":"12166:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6000,"name":"uint","nodeType":"ElementaryTypeName","src":"12166:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12165:6:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"},{"id":6035,"nodeType":"FunctionDefinition","src":"12245:145:8","nodes":[],"body":{"id":6034,"nodeType":"Block","src":"12317:73:8","nodes":[],"statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6027,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6017,"src":"12362:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":6028,"name":"doubleScale","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4883,"src":"12365:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6026,"name":"mul_","nodeType":"Identifier","overloadedDeclarations":[5709,5727,5745,5766,5784,5802,5818,5858],"referencedDeclaration":5818,"src":"12357:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12357:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"argumentTypes":null,"id":6030,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6019,"src":"12379:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6025,"name":"div_","nodeType":"Identifier","overloadedDeclarations":[5880,5898,5917,5939,5957,5976,5992,6015],"referencedDeclaration":5992,"src":"12352:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12352:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6024,"name":"Double","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4897,"src":"12334:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Double_$4897_storage_ptr_$","typeString":"type(struct Exponential.Double storage pointer)"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["mantissa"],"nodeType":"FunctionCall","src":"12334:49:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory","typeString":"struct Exponential.Double memory"}},"functionReturnParameters":6023,"id":6033,"nodeType":"Return","src":"12327:56:8"}]},"documentation":null,"implemented":true,"kind":"function","modifiers":[],"name":"fraction","parameters":{"id":6020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6017,"name":"a","nodeType":"VariableDeclaration","scope":6035,"src":"12263:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6016,"name":"uint","nodeType":"ElementaryTypeName","src":"12263:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6019,"name":"b","nodeType":"VariableDeclaration","scope":6035,"src":"12271:6:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6018,"name":"uint","nodeType":"ElementaryTypeName","src":"12271:4:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"12262:16:8"},"returnParameters":{"id":6023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6022,"name":"","nodeType":"VariableDeclaration","scope":6035,"src":"12302:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_memory_ptr","typeString":"struct Exponential.Double"},"typeName":{"contractScope":null,"id":6021,"name":"Double","nodeType":"UserDefinedTypeName","referencedDeclaration":4897,"src":"12302:6:8","typeDescriptions":{"typeIdentifier":"t_struct$_Double_$4897_storage_ptr","typeString":"struct Exponential.Double"}},"value":null,"visibility":"internal"}],"src":"12301:15:8"},"scope":6036,"stateMutability":"pure","superFunction":null,"visibility":"internal"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":4876,"name":"CarefulMath","nodeType":"UserDefinedTypeName","referencedDeclaration":4150,"src":"404:11:8","typeDescriptions":{"typeIdentifier":"t_contract$_CarefulMath_$4150","typeString":"contract CarefulMath"}},"id":4877,"nodeType":"InheritanceSpecifier","src":"404:11:8"}],"contractDependencies":[4150],"contractKind":"contract","documentation":"@title Exponential module for storing fixed-precision decimals\n@author Compound\n@notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n        Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n        `Exp({mantissa: 5100000000000000000})`.","fullyImplemented":true,"linearizedBaseContracts":[6036,4150],"name":"Exponential","scope":6037}]}},"contracts/InterestRateModel.sol":{"id":9,"ast":{"absolutePath":"contracts/InterestRateModel.sol","id":6067,"exportedSymbols":{"InterestRateModel":[6066]},"nodeType":"SourceUnit","src":"0:1328:9","nodes":[{"id":6038,"nodeType":"PragmaDirective","src":"0:24:9","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":6066,"nodeType":"ContractDefinition","src":"106:1221:9","nodes":[{"id":6041,"nodeType":"VariableDeclaration","src":"225:47:9","nodes":[],"constant":true,"name":"isInterestRateModel","scope":6066,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6039,"name":"bool","nodeType":"ElementaryTypeName","src":"225:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"argumentTypes":null,"hexValue":"74727565","id":6040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"268:4:9","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"id":6052,"nodeType":"FunctionDefinition","src":"653:92:9","nodes":[],"documentation":"@notice Calculates the current borrow interest rate per block\n@param cash The total amount of cash the market has\n@param borrows The total amount of borrows the market has outstanding\n@param reserves The total amnount of reserves the market has\n@return The borrow rate per block (as a percentage, and scaled by 1e18)","implemented":false,"kind":"function","modifiers":[],"name":"getBorrowRate","parameters":{"id":6048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6043,"name":"cash","nodeType":"VariableDeclaration","scope":6052,"src":"676:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6042,"name":"uint","nodeType":"ElementaryTypeName","src":"676:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6045,"name":"borrows","nodeType":"VariableDeclaration","scope":6052,"src":"687:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6044,"name":"uint","nodeType":"ElementaryTypeName","src":"687:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6047,"name":"reserves","nodeType":"VariableDeclaration","scope":6052,"src":"701:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6046,"name":"uint","nodeType":"ElementaryTypeName","src":"701:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"675:40:9"},"returnParameters":{"id":6051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6050,"name":"","nodeType":"VariableDeclaration","scope":6052,"src":"739:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6049,"name":"uint","nodeType":"ElementaryTypeName","src":"739:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"738:6:9"},"scope":6066,"stateMutability":"view","superFunction":null,"visibility":"external"},{"id":6065,"nodeType":"FunctionDefinition","src":"1204:120:9","nodes":[],"documentation":"@notice Calculates the current supply interest rate per block\n@param cash The total amount of cash the market has\n@param borrows The total amount of borrows the market has outstanding\n@param reserves The total amnount of reserves the market has\n@param reserveFactorMantissa The current reserve factor the market has\n@return The supply rate per block (as a percentage, and scaled by 1e18)","implemented":false,"kind":"function","modifiers":[],"name":"getSupplyRate","parameters":{"id":6061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6054,"name":"cash","nodeType":"VariableDeclaration","scope":6065,"src":"1227:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6053,"name":"uint","nodeType":"ElementaryTypeName","src":"1227:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6056,"name":"borrows","nodeType":"VariableDeclaration","scope":6065,"src":"1238:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6055,"name":"uint","nodeType":"ElementaryTypeName","src":"1238:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6058,"name":"reserves","nodeType":"VariableDeclaration","scope":6065,"src":"1252:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6057,"name":"uint","nodeType":"ElementaryTypeName","src":"1252:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"},{"constant":false,"id":6060,"name":"reserveFactorMantissa","nodeType":"VariableDeclaration","scope":6065,"src":"1267:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6059,"name":"uint","nodeType":"ElementaryTypeName","src":"1267:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1226:68:9"},"returnParameters":{"id":6064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6063,"name":"","nodeType":"VariableDeclaration","scope":6065,"src":"1318:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6062,"name":"uint","nodeType":"ElementaryTypeName","src":"1318:4:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1317:6:9"},"scope":6066,"stateMutability":"view","superFunction":null,"visibility":"external"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":"@title Compound's InterestRateModel Interface\n@author Compound","fullyImplemented":false,"linearizedBaseContracts":[6066],"name":"InterestRateModel","scope":6067}]}},"contracts/PriceOracle.sol":{"id":10,"ast":{"absolutePath":"contracts/PriceOracle.sol","id":6081,"exportedSymbols":{"PriceOracle":[6080]},"nodeType":"SourceUnit","src":"0:535:10","nodes":[{"id":6068,"nodeType":"PragmaDirective","src":"0:24:10","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":6069,"nodeType":"ImportDirective","src":"26:22:10","nodes":[],"absolutePath":"contracts/CToken.sol","file":"./CToken.sol","scope":6081,"sourceUnit":3505,"symbolAliases":[],"unitAlias":""},{"id":6080,"nodeType":"ContractDefinition","src":"50:484:10","nodes":[{"id":6072,"nodeType":"VariableDeclaration","src":"156:41:10","nodes":[],"constant":true,"name":"isPriceOracle","scope":6080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6070,"name":"bool","nodeType":"ElementaryTypeName","src":"156:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"argumentTypes":null,"hexValue":"74727565","id":6071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"193:4:10","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"id":6079,"nodeType":"FunctionDefinition","src":"460:72:10","nodes":[],"documentation":"@notice Get the underlying price of a cToken asset\n@param cToken The cToken to get the underlying price of\n@return The underlying asset price mantissa (scaled by 1e18).\n Zero means the price is unavailable.","implemented":false,"kind":"function","modifiers":[],"name":"getUnderlyingPrice","parameters":{"id":6075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6074,"name":"cToken","nodeType":"VariableDeclaration","scope":6079,"src":"488:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"},"typeName":{"contractScope":null,"id":6073,"name":"CToken","nodeType":"UserDefinedTypeName","referencedDeclaration":3504,"src":"488:6:10","typeDescriptions":{"typeIdentifier":"t_contract$_CToken_$3504","typeString":"contract CToken"}},"value":null,"visibility":"internal"}],"src":"487:15:10"},"returnParameters":{"id":6078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6077,"name":"","nodeType":"VariableDeclaration","scope":6079,"src":"526:4:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6076,"name":"uint","nodeType":"ElementaryTypeName","src":"526:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"525:6:10"},"scope":6080,"stateMutability":"view","superFunction":null,"visibility":"external"}],"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":null,"fullyImplemented":false,"linearizedBaseContracts":[6080],"name":"PriceOracle","scope":6081}]}},"contracts/Unitroller.sol":{"id":11,"ast":{"absolutePath":"contracts/Unitroller.sol","id":6331,"exportedSymbols":{"Unitroller":[6330]},"nodeType":"SourceUnit","src":"0:5654:11","nodes":[{"id":6082,"nodeType":"PragmaDirective","src":"0:24:11","nodes":[],"literals":["solidity","^","0.5",".16"]},{"id":6083,"nodeType":"ImportDirective","src":"26:29:11","nodes":[],"absolutePath":"contracts/ErrorReporter.sol","file":"./ErrorReporter.sol","scope":6331,"sourceUnit":4873,"symbolAliases":[],"unitAlias":""},{"id":6084,"nodeType":"ImportDirective","src":"56:34:11","nodes":[],"absolutePath":"contracts/ComptrollerStorage.sol","file":"./ComptrollerStorage.sol","scope":6331,"sourceUnit":4464,"symbolAliases":[],"unitAlias":""},{"id":6330,"nodeType":"ContractDefinition","src":"310:5343:11","nodes":[{"id":6094,"nodeType":"EventDefinition","src":"479:99:11","nodes":[],"anonymous":false,"documentation":"@notice Emitted when pendingComptrollerImplementation is changed","name":"NewPendingImplementation","parameters":{"id":6093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6090,"indexed":false,"name":"oldPendingImplementation","nodeType":"VariableDeclaration","scope":6094,"src":"510:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6089,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":6092,"indexed":false,"name":"newPendingImplementation","nodeType":"VariableDeclaration","scope":6094,"src":"544:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6091,"name":"address","nodeType":"ElementaryTypeName","src":"544:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"509:68:11"}},{"id":6100,"nodeType":"EventDefinition","src":"726:78:11","nodes":[],"anonymous":false,"documentation":"@notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated","name":"NewImplementation","parameters":{"id":6099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6096,"indexed":false,"name":"oldImplementation","nodeType":"VariableDeclaration","scope":6100,"src":"750:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6095,"name":"address","nodeType":"ElementaryTypeName","src":"750:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":6098,"indexed":false,"name":"newImplementation","nodeType":"VariableDeclaration","scope":6100,"src":"777:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6097,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"749:54:11"}},{"id":6106,"nodeType":"EventDefinition","src":"880:72:11","nodes":[],"anonymous":false,"documentation":"@notice Emitted when pendingAdmin is changed","name":"NewPendingAdmin","parameters":{"id":6105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6102,"indexed":false,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":6106,"src":"902:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6101,"name":"address","nodeType":"ElementaryTypeName","src":"902:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":6104,"indexed":false,"name":"newPendingAdmin","nodeType":"VariableDeclaration","scope":6106,"src":"927:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6103,"name":"address","nodeType":"ElementaryTypeName","src":"927:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"901:50:11"}},{"id":6112,"nodeType":"EventDefinition","src":"1059:51:11","nodes":[],"anonymous":false,"documentation":"@notice Emitted when pendingAdmin is accepted, which means admin is updated","name":"NewAdmin","parameters":{"id":6111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6108,"indexed":false,"name":"oldAdmin","nodeType":"VariableDeclaration","scope":6112,"src":"1074:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6107,"name":"address","nodeType":"ElementaryTypeName","src":"1074:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"},{"constant":false,"id":6110,"indexed":false,"name":"newAdmin","nodeType":"VariableDeclaration","scope":6112,"src":"1092:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6109,"name":"address","nodeType":"ElementaryTypeName","src":"1092:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1073:36:11"}},{"id":6121,"nodeType":"FunctionDefinition","src":"1116:87:11","nodes":[],"body":{"id":6120,"nodeType":"Block","src":"1137:66:11","nodes":[],"statements":[{"expression":{"argumentTypes":null,"id":6118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6115,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"1178:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6116,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"1186:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1186:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"1178:18:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6119,"nodeType":"ExpressionStatement","src":"1178:18:11"}]},"documentation":null,"implemented":true,"kind":"constructor","modifiers":[],"name":"","parameters":{"id":6113,"nodeType":"ParameterList","parameters":[],"src":"1127:2:11"},"returnParameters":{"id":6114,"nodeType":"ParameterList","parameters":[],"src":"1137:0:11"},"scope":6330,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":6160,"nodeType":"FunctionDefinition","src":"1239:527:11","nodes":[],"body":{"id":6159,"nodeType":"Block","src":"1330:436:11","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6128,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"1345:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1345:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":6130,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"1359:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1345:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":6140,"nodeType":"IfStatement","src":"1341:133:11","trueBody":{"id":6139,"nodeType":"Block","src":"1366:108:11","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6133,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"1392:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1392:18:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6135,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"1412:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4654_$","typeString":"type(enum ComptrollerErrorReporter.FailureInfo)"}},"id":6136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_PENDING_IMPLEMENTATION_OWNER_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1412:50:11","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":6132,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"1387:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4633_$_t_enum$_FailureInfo_$4654_$returns$_t_uint256_$","typeString":"function (enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo) returns (uint256)"}},"id":6137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1387:76:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6127,"id":6138,"nodeType":"Return","src":"1380:83:11"}]}},{"assignments":[6142],"declarations":[{"constant":false,"id":6142,"name":"oldPendingImplementation","nodeType":"VariableDeclaration","scope":6159,"src":"1484:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6141,"name":"address","nodeType":"ElementaryTypeName","src":"1484:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6144,"initialValue":{"argumentTypes":null,"id":6143,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"1519:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1484:67:11"},{"expression":{"argumentTypes":null,"id":6147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6145,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"1562:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":6146,"name":"newPendingImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6123,"src":"1597:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1562:59:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6148,"nodeType":"ExpressionStatement","src":"1562:59:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6150,"name":"oldPendingImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6142,"src":"1662:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6151,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"1688:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6149,"name":"NewPendingImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"1637:24:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1637:84:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6153,"nodeType":"EmitStatement","src":"1632:89:11"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6155,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"1744:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"1744:14:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":6154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1739:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":6157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1739:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6127,"id":6158,"nodeType":"Return","src":"1732:27:11"}]},"documentation":"* Admin Functions **","implemented":true,"kind":"function","modifiers":[],"name":"_setPendingImplementation","parameters":{"id":6124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6123,"name":"newPendingImplementation","nodeType":"VariableDeclaration","scope":6160,"src":"1274:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6122,"name":"address","nodeType":"ElementaryTypeName","src":"1274:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"1273:34:11"},"returnParameters":{"id":6127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6126,"name":"","nodeType":"VariableDeclaration","scope":6160,"src":"1324:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6125,"name":"uint","nodeType":"ElementaryTypeName","src":"1324:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"1323:6:11"},"scope":6330,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":6218,"nodeType":"FunctionDefinition","src":"2058:912:11","nodes":[],"body":{"id":6217,"nodeType":"Block","src":"2113:857:11","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6165,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"2217:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2217:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":6167,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2231:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2217:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"id":6169,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2267:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":6171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2311:1:11","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2303:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":6172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2267:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2217:96:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":6183,"nodeType":"IfStatement","src":"2213:215:11","trueBody":{"id":6182,"nodeType":"Block","src":"2315:113:11","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6176,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"2341:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6177,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2341:18:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6178,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"2361:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4654_$","typeString":"type(enum ComptrollerErrorReporter.FailureInfo)"}},"id":6179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2361:55:11","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":6175,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"2336:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4633_$_t_enum$_FailureInfo_$4654_$returns$_t_uint256_$","typeString":"function (enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo) returns (uint256)"}},"id":6180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2336:81:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6164,"id":6181,"nodeType":"Return","src":"2329:88:11"}]}},{"assignments":[6185],"declarations":[{"constant":false,"id":6185,"name":"oldImplementation","nodeType":"VariableDeclaration","scope":6217,"src":"2490:25:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6184,"name":"address","nodeType":"ElementaryTypeName","src":"2490:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6187,"initialValue":{"argumentTypes":null,"id":6186,"name":"comptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2518:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2490:53:11"},{"assignments":[6189],"declarations":[{"constant":false,"id":6189,"name":"oldPendingImplementation","nodeType":"VariableDeclaration","scope":6217,"src":"2553:32:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6188,"name":"address","nodeType":"ElementaryTypeName","src":"2553:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6191,"initialValue":{"argumentTypes":null,"id":6190,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2588:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2553:67:11"},{"expression":{"argumentTypes":null,"id":6194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6192,"name":"comptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2631:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":6193,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2659:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2631:60:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6195,"nodeType":"ExpressionStatement","src":"2631:60:11"},{"expression":{"argumentTypes":null,"id":6200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6196,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2702:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":6198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2745:1:11","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2737:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":6199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2737:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2702:45:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6201,"nodeType":"ExpressionStatement","src":"2702:45:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6203,"name":"oldImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6185,"src":"2781:17:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6204,"name":"comptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"2800:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6202,"name":"NewImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6100,"src":"2763:17:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2763:63:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6206,"nodeType":"EmitStatement","src":"2758:68:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6208,"name":"oldPendingImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"2866:24:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6209,"name":"pendingComptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4369,"src":"2892:32:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6207,"name":"NewPendingImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6094,"src":"2841:24:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2841:84:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6211,"nodeType":"EmitStatement","src":"2836:89:11"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6213,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"2948:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"2948:14:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":6212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2943:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":6215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2943:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6164,"id":6216,"nodeType":"Return","src":"2936:27:11"}]},"documentation":"@notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n@dev Admin function for new implementation to accept it's role as implementation\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_acceptImplementation","parameters":{"id":6161,"nodeType":"ParameterList","parameters":[],"src":"2088:2:11"},"returnParameters":{"id":6164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6163,"name":"","nodeType":"VariableDeclaration","scope":6218,"src":"2107:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6162,"name":"uint","nodeType":"ElementaryTypeName","src":"2107:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"2106:6:11"},"scope":6330,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":6257,"nodeType":"FunctionDefinition","src":"3377:621:11","nodes":[],"body":{"id":6256,"nodeType":"Block","src":"3450:548:11","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6225,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"3496:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3496:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":6227,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"3510:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3496:19:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":6237,"nodeType":"IfStatement","src":"3492:124:11","trueBody":{"id":6236,"nodeType":"Block","src":"3517:99:11","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6230,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"3543:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3543:18:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6232,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"3563:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4654_$","typeString":"type(enum ComptrollerErrorReporter.FailureInfo)"}},"id":6233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"SET_PENDING_ADMIN_OWNER_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3563:41:11","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":6229,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"3538:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4633_$_t_enum$_FailureInfo_$4654_$returns$_t_uint256_$","typeString":"function (enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo) returns (uint256)"}},"id":6234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3538:67:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6224,"id":6235,"nodeType":"Return","src":"3531:74:11"}]}},{"assignments":[6239],"declarations":[{"constant":false,"id":6239,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":6256,"src":"3686:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6238,"name":"address","nodeType":"ElementaryTypeName","src":"3686:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6241,"initialValue":{"argumentTypes":null,"id":6240,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"3712:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3686:38:11"},{"expression":{"argumentTypes":null,"id":6244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6242,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"3792:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":6243,"name":"newPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6220,"src":"3807:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3792:30:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6245,"nodeType":"ExpressionStatement","src":"3792:30:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6247,"name":"oldPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"3920:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6248,"name":"newPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6220,"src":"3937:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6246,"name":"NewPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6106,"src":"3904:15:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3904:49:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6250,"nodeType":"EmitStatement","src":"3899:54:11"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6252,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"3976:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"3976:14:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":6251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3971:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":6254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3971:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6224,"id":6255,"nodeType":"Return","src":"3964:27:11"}]},"documentation":"@notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n@dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n@param newPendingAdmin New pending admin.\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_setPendingAdmin","parameters":{"id":6221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6220,"name":"newPendingAdmin","nodeType":"VariableDeclaration","scope":6257,"src":"3403:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6219,"name":"address","nodeType":"ElementaryTypeName","src":"3403:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"src":"3402:25:11"},"returnParameters":{"id":6224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6223,"name":"","nodeType":"VariableDeclaration","scope":6257,"src":"3444:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6222,"name":"uint","nodeType":"ElementaryTypeName","src":"3444:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"3443:6:11"},"scope":6330,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":6316,"nodeType":"FunctionDefinition","src":"4269:720:11","nodes":[],"body":{"id":6315,"nodeType":"Block","src":"4315:674:11","nodes":[],"statements":[{"condition":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6262,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"4401:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4401:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"argumentTypes":null,"id":6264,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4415:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4401:26:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"id":6271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6266,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"4431:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4431:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":6269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4453:1:11","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4445:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":6270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4445:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4431:24:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4401:54:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":null,"id":6281,"nodeType":"IfStatement","src":"4397:162:11","trueBody":{"id":6280,"nodeType":"Block","src":"4457:102:11","statements":[{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6274,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"4483:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"UNAUTHORIZED","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4483:18:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}},{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6276,"name":"FailureInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4654,"src":"4503:11:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_FailureInfo_$4654_$","typeString":"type(enum ComptrollerErrorReporter.FailureInfo)"}},"id":6277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"ACCEPT_ADMIN_PENDING_ADMIN_CHECK","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4503:44:11","typeDescriptions":{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"},{"typeIdentifier":"t_enum$_FailureInfo_$4654","typeString":"enum ComptrollerErrorReporter.FailureInfo"}],"id":6273,"name":"fail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4686,"src":"4478:4:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Error_$4633_$_t_enum$_FailureInfo_$4654_$returns$_t_uint256_$","typeString":"function (enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo) returns (uint256)"}},"id":6278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4478:70:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6261,"id":6279,"nodeType":"Return","src":"4471:77:11"}]}},{"assignments":[6283],"declarations":[{"constant":false,"id":6283,"name":"oldAdmin","nodeType":"VariableDeclaration","scope":6315,"src":"4621:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6282,"name":"address","nodeType":"ElementaryTypeName","src":"4621:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6285,"initialValue":{"argumentTypes":null,"id":6284,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"4640:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4621:24:11"},{"assignments":[6287],"declarations":[{"constant":false,"id":6287,"name":"oldPendingAdmin","nodeType":"VariableDeclaration","scope":6315,"src":"4655:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6286,"name":"address","nodeType":"ElementaryTypeName","src":"4655:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":null,"visibility":"internal"}],"id":6289,"initialValue":{"argumentTypes":null,"id":6288,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4681:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4655:38:11"},{"expression":{"argumentTypes":null,"id":6292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6290,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"4751:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"id":6291,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4759:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4751:20:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6293,"nodeType":"ExpressionStatement","src":"4751:20:11"},{"expression":{"argumentTypes":null,"id":6298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"argumentTypes":null,"id":6294,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4817:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"hexValue":"30","id":6296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4840:1:11","subdenomination":null,"typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4832:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":"address"},"id":6297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4832:10:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"4817:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6299,"nodeType":"ExpressionStatement","src":"4817:25:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6301,"name":"oldAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6283,"src":"4867:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6302,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4363,"src":"4877:5:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6300,"name":"NewAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6112,"src":"4858:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4858:25:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6304,"nodeType":"EmitStatement","src":"4853:30:11"},{"eventCall":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"id":6306,"name":"oldPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"4914:15:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"argumentTypes":null,"id":6307,"name":"pendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4365,"src":"4931:12:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6305,"name":"NewPendingAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6106,"src":"4898:15:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":6308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4898:46:11","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6309,"nodeType":"EmitStatement","src":"4893:51:11"},{"expression":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6311,"name":"Error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"4967:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Error_$4633_$","typeString":"type(enum ComptrollerErrorReporter.Error)"}},"id":6312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NO_ERROR","nodeType":"MemberAccess","referencedDeclaration":null,"src":"4967:14:11","typeDescriptions":{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Error_$4633","typeString":"enum ComptrollerErrorReporter.Error"}],"id":6310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4962:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":"uint"},"id":6313,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4962:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6261,"id":6314,"nodeType":"Return","src":"4955:27:11"}]},"documentation":"@notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n@dev Admin function for pending admin to accept role and update admin\n@return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)","implemented":true,"kind":"function","modifiers":[],"name":"_acceptAdmin","parameters":{"id":6258,"nodeType":"ParameterList","parameters":[],"src":"4290:2:11"},"returnParameters":{"id":6261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6260,"name":"","nodeType":"VariableDeclaration","scope":6316,"src":"4309:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6259,"name":"uint","nodeType":"ElementaryTypeName","src":"4309:4:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":null,"visibility":"internal"}],"src":"4308:6:11"},"scope":6330,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},{"id":6329,"nodeType":"FunctionDefinition","src":"5179:472:11","nodes":[],"body":{"id":6328,"nodeType":"Block","src":"5208:443:11","nodes":[],"statements":[{"assignments":[6320,null],"declarations":[{"constant":false,"id":6320,"name":"success","nodeType":"VariableDeclaration","scope":6328,"src":"5285:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6319,"name":"bool","nodeType":"ElementaryTypeName","src":"5285:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":null,"visibility":"internal"},null],"id":6326,"initialValue":{"argumentTypes":null,"arguments":[{"argumentTypes":null,"expression":{"argumentTypes":null,"id":6323,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6345,"src":"5342:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5342:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"argumentTypes":null,"id":6321,"name":"comptrollerImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"5303:25:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","referencedDeclaration":null,"src":"5303:38:11","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":6325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5303:48:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5284:67:11"},{"externalReferences":[{"success":{"declaration":6320,"isOffset":false,"isSlot":false,"src":"5503:7:11","valueSize":1}}],"id":6327,"nodeType":"InlineAssembly","operations":"{\n    let free_mem_ptr := mload(0x40)\n    returndatacopy(free_mem_ptr, 0, returndatasize())\n    switch success\n    case 0 {\n        revert(free_mem_ptr, returndatasize())\n    }\n    default {\n        return(free_mem_ptr, returndatasize())\n    }\n}","src":"5362:283:11"}]},"documentation":"@dev Delegates execution to an implementation contract.\nIt returns to the external caller whatever the implementation returns\nor forwards reverts.","implemented":true,"kind":"fallback","modifiers":[],"name":"","parameters":{"id":6317,"nodeType":"ParameterList","parameters":[],"src":"5188:2:11"},"returnParameters":{"id":6318,"nodeType":"ParameterList","parameters":[],"src":"5208:0:11"},"scope":6330,"stateMutability":"payable","superFunction":null,"visibility":"external"}],"baseContracts":[{"arguments":null,"baseName":{"contractScope":null,"id":6085,"name":"UnitrollerAdminStorage","nodeType":"UserDefinedTypeName","referencedDeclaration":4370,"src":"333:22:11","typeDescriptions":{"typeIdentifier":"t_contract$_UnitrollerAdminStorage_$4370","typeString":"contract UnitrollerAdminStorage"}},"id":6086,"nodeType":"InheritanceSpecifier","src":"333:22:11"},{"arguments":null,"baseName":{"contractScope":null,"id":6087,"name":"ComptrollerErrorReporter","nodeType":"UserDefinedTypeName","referencedDeclaration":4713,"src":"357:24:11","typeDescriptions":{"typeIdentifier":"t_contract$_ComptrollerErrorReporter_$4713","typeString":"contract ComptrollerErrorReporter"}},"id":6088,"nodeType":"InheritanceSpecifier","src":"357:24:11"}],"contractDependencies":[4370,4713],"contractKind":"contract","documentation":"@title ComptrollerCore\n@dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\nCTokens should reference this contract as their comptroller.","fullyImplemented":true,"linearizedBaseContracts":[6330,4713,4370],"name":"Unitroller","scope":6331}]}}},"contracts":{"contracts/CToken.sol":{"CToken":{"abi":[{"type":"function","name":"_acceptAdmin","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_reduceReserves","inputs":[{"name":"reduceAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setComptroller","inputs":[{"name":"newComptroller","type":"address","internalType":"contract ComptrollerInterface"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setInterestRateModel","inputs":[{"name":"newInterestRateModel","type":"address","internalType":"contract InterestRateModel"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setPendingAdmin","inputs":[{"name":"newPendingAdmin","type":"address","internalType":"address payable"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setReserveFactor","inputs":[{"name":"newReserveFactorMantissa","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"accrualBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"accrueInterest","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfUnderlying","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrowBalanceCurrent","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrowBalanceStored","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"borrowIndex","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"borrowRatePerBlock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"comptroller","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ComptrollerInterface"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"exchangeRateCurrent","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"exchangeRateStored","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAccountSnapshot","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCash","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"comptroller_","type":"address","internalType":"contract ComptrollerInterface"},{"name":"interestRateModel_","type":"address","internalType":"contract InterestRateModel"},{"name":"initialExchangeRateMantissa_","type":"uint256","internalType":"uint256"},{"name":"name_","type":"string","internalType":"string"},{"name":"symbol_","type":"string","internalType":"string"},{"name":"decimals_","type":"uint8","internalType":"uint8"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"interestRateModel","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract InterestRateModel"}],"stateMutability":"view"},{"type":"function","name":"isCToken","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"reserveFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"seize","inputs":[{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"seizeTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"supplyRatePerBlock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalBorrows","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalBorrowsCurrent","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"totalReserves","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"AccrueInterest","inputs":[{"name":"cashPrior","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"interestAccumulated","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"borrowIndex","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Borrow","inputs":[{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"borrowAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"accountBorrows","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Failure","inputs":[{"name":"error","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"detail","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"LiquidateBorrow","inputs":[{"name":"liquidator","type":"address","indexed":false,"internalType":"address"},{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"repayAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"cTokenCollateral","type":"address","indexed":false,"internalType":"address"},{"name":"seizeTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Mint","inputs":[{"name":"minter","type":"address","indexed":false,"internalType":"address"},{"name":"mintAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"mintTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"NewAdmin","inputs":[{"name":"oldAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewComptroller","inputs":[{"name":"oldComptroller","type":"address","indexed":false,"internalType":"contract ComptrollerInterface"},{"name":"newComptroller","type":"address","indexed":false,"internalType":"contract ComptrollerInterface"}],"anonymous":false},{"type":"event","name":"NewMarketInterestRateModel","inputs":[{"name":"oldInterestRateModel","type":"address","indexed":false,"internalType":"contract InterestRateModel"},{"name":"newInterestRateModel","type":"address","indexed":false,"internalType":"contract InterestRateModel"}],"anonymous":false},{"type":"event","name":"NewPendingAdmin","inputs":[{"name":"oldPendingAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newPendingAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewReserveFactor","inputs":[{"name":"oldReserveFactorMantissa","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newReserveFactorMantissa","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Redeem","inputs":[{"name":"redeemer","type":"address","indexed":false,"internalType":"address"},{"name":"redeemAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"redeemTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RepayBorrow","inputs":[{"name":"payer","type":"address","indexed":false,"internalType":"address"},{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"repayAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"accountBorrows","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ReservesAdded","inputs":[{"name":"benefactor","type":"address","indexed":false,"internalType":"address"},{"name":"addAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalReserves","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ReservesReduced","inputs":[{"name":"admin","type":"address","indexed":false,"internalType":"address"},{"name":"reduceAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalReserves","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block  up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"The number of tokens allowed to be spent (-1 means infinite)\"},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"Whether or not the approval succeeded\"},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"return\":\"The number of tokens owned by `owner`\"},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"return\":\"The amount of underlying owned by `owner`\"},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"return\":\"The calculated balance\"},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"return\":\"The calculated balance\"},\"borrowRatePerBlock()\":{\"return\":\"The borrow interest rate per block, scaled by 1e18\"},\"exchangeRateCurrent()\":{\"return\":\"Calculated exchange rate scaled by 1e18\"},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"return\":\"Calculated exchange rate scaled by 1e18\"},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"return\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"},\"getCash()\":{\"return\":\"The quantity of underlying asset owned by this contract\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation. Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"supplyRatePerBlock()\":{\"return\":\"The supply interest rate per block, scaled by 1e18\"},\"totalBorrowsCurrent()\":{\"return\":\"The total borrows with interest\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"return\":\"Whether or not the transfer succeeded\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"return\":\"Whether or not the transfer succeeded\"}},\"title\":\"Compound's CToken Contract\"},\"userdoc\":{\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"notice\":\"Abstract base for CTokens\"}},\"settings\":{\"compilationTarget\":{\"contracts/CToken.sol\":\"CToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"_acceptAdmin()":{"notice":"Accepts transfer of admin rights. msg.sender must be pendingAdmin"},"_reduceReserves(uint256)":{"notice":"Accrues interest and reduces reserves by transferring to admin"},"_setComptroller(address)":{"notice":"Sets a new comptroller for the market"},"_setInterestRateModel(address)":{"notice":"accrues interest and updates the interest rate model using _setInterestRateModelFresh"},"_setPendingAdmin(address)":{"notice":"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."},"_setReserveFactor(uint256)":{"notice":"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"},"accrueInterest()":{"notice":"Applies accrued interest to total borrows and reserves"},"allowance(address,address)":{"notice":"Get the current allowance from `owner` for `spender`"},"approve(address,uint256)":{"notice":"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{"notice":"Get the token balance of the `owner`"},"balanceOfUnderlying(address)":{"notice":"Get the underlying balance of the `owner`"},"borrowBalanceCurrent(address)":{"notice":"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"},"borrowBalanceStored(address)":{"notice":"Return the borrow balance of account based on stored data"},"borrowRatePerBlock()":{"notice":"Returns the current per-block borrow interest rate for this cToken"},"exchangeRateCurrent()":{"notice":"Accrue interest then return the up-to-date exchange rate"},"exchangeRateStored()":{"notice":"Calculates the exchange rate from the underlying to the CToken"},"getAccountSnapshot(address)":{"notice":"Get a snapshot of the account's balances, and the cached exchange rate"},"getCash()":{"notice":"Get cash balance of this cToken in the underlying asset"},"initialize(address,address,uint256,string,string,uint8)":{"notice":"Initialize the money market"},"seize(address,address,uint256)":{"notice":"Transfers collateral tokens (this market) to the liquidator."},"supplyRatePerBlock()":{"notice":"Returns the current per-block supply interest rate for this cToken"},"totalBorrowsCurrent()":{"notice":"Returns the current total borrows plus accrued interest"},"transfer(address,uint256)":{"notice":"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{"notice":"Transfer `amount` tokens from `src` to `dst`"}},"notice":"Abstract base for CTokens"},"devdoc":{"author":"Compound","methods":{"_acceptAdmin()":{"details":"Admin function for pending admin to accept role and update admin"},"_reduceReserves(uint256)":{"params":{"reduceAmount":"Amount of reduction to reserves"}},"_setComptroller(address)":{"details":"Admin function to set a new comptroller"},"_setInterestRateModel(address)":{"details":"Admin function to accrue interest and update the interest rate model","params":{"newInterestRateModel":"the new interest rate model to use"}},"_setPendingAdmin(address)":{"details":"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.","params":{"newPendingAdmin":"New pending admin."}},"_setReserveFactor(uint256)":{"details":"Admin function to accrue interest and set a new reserve factor"},"accrueInterest()":{"details":"This calculates interest accrued from the last checkpointed block  up to the current block and writes new checkpoint to storage."},"allowance(address,address)":{"params":{"owner":"The address of the account which owns the tokens to be spent","spender":"The address of the account which may transfer tokens"}},"approve(address,uint256)":{"details":"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)","params":{"amount":"The number of tokens that are approved (-1 means infinite)","spender":"The address of the account which may transfer tokens"}},"balanceOf(address)":{"params":{"owner":"The address of the account to query"}},"balanceOfUnderlying(address)":{"details":"This also accrues interest in a transaction","params":{"owner":"The address of the account to query"}},"borrowBalanceCurrent(address)":{"params":{"account":"The address whose balance should be calculated after updating borrowIndex"}},"borrowBalanceStored(address)":{"params":{"account":"The address whose balance should be calculated"}},"borrowRatePerBlock()":{},"exchangeRateCurrent()":{},"exchangeRateStored()":{"details":"This function does not accrue interest before calculating the exchange rate"},"getAccountSnapshot(address)":{"details":"This is used by comptroller to more efficiently perform liquidity checks.","params":{"account":"Address of the account to snapshot"}},"getCash()":{},"initialize(address,address,uint256,string,string,uint8)":{"params":{"comptroller_":"The address of the Comptroller","decimals_":"EIP-20 decimal precision of this token","initialExchangeRateMantissa_":"The initial exchange rate, scaled by 1e18","interestRateModel_":"The address of the interest rate model","name_":"EIP-20 name of this token","symbol_":"EIP-20 symbol of this token"}},"seize(address,address,uint256)":{"details":"Will fail unless called by another cToken during the process of liquidation. Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.","params":{"borrower":"The account having collateral seized","liquidator":"The account receiving seized collateral","seizeTokens":"The number of cTokens to seize"}},"supplyRatePerBlock()":{},"totalBorrowsCurrent()":{},"transfer(address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account"}},"transferFrom(address,address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account","src":"The address of the source account"}}},"title":"Compound's CToken Contract"},"storageLayout":{"storage":[{"astId":3510,"contract":"contracts/CToken.sol:CToken","label":"_notEntered","offset":0,"slot":"0","type":"t_bool"},{"astId":3512,"contract":"contracts/CToken.sol:CToken","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3514,"contract":"contracts/CToken.sol:CToken","label":"symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3516,"contract":"contracts/CToken.sol:CToken","label":"decimals","offset":0,"slot":"3","type":"t_uint8"},{"astId":3524,"contract":"contracts/CToken.sol:CToken","label":"admin","offset":1,"slot":"3","type":"t_address_payable"},{"astId":3526,"contract":"contracts/CToken.sol:CToken","label":"pendingAdmin","offset":0,"slot":"4","type":"t_address_payable"},{"astId":3528,"contract":"contracts/CToken.sol:CToken","label":"comptroller","offset":0,"slot":"5","type":"t_contract(ComptrollerInterface)4357"},{"astId":3530,"contract":"contracts/CToken.sol:CToken","label":"interestRateModel","offset":0,"slot":"6","type":"t_contract(InterestRateModel)6066"},{"astId":3532,"contract":"contracts/CToken.sol:CToken","label":"initialExchangeRateMantissa","offset":0,"slot":"7","type":"t_uint256"},{"astId":3534,"contract":"contracts/CToken.sol:CToken","label":"reserveFactorMantissa","offset":0,"slot":"8","type":"t_uint256"},{"astId":3536,"contract":"contracts/CToken.sol:CToken","label":"accrualBlockNumber","offset":0,"slot":"9","type":"t_uint256"},{"astId":3538,"contract":"contracts/CToken.sol:CToken","label":"borrowIndex","offset":0,"slot":"10","type":"t_uint256"},{"astId":3540,"contract":"contracts/CToken.sol:CToken","label":"totalBorrows","offset":0,"slot":"11","type":"t_uint256"},{"astId":3542,"contract":"contracts/CToken.sol:CToken","label":"totalReserves","offset":0,"slot":"12","type":"t_uint256"},{"astId":3544,"contract":"contracts/CToken.sol:CToken","label":"totalSupply","offset":0,"slot":"13","type":"t_uint256"},{"astId":3548,"contract":"contracts/CToken.sol:CToken","label":"accountTokens","offset":0,"slot":"14","type":"t_mapping(t_address,t_uint256)"},{"astId":3554,"contract":"contracts/CToken.sol:CToken","label":"transferAllowances","offset":0,"slot":"15","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":3563,"contract":"contracts/CToken.sol:CToken","label":"accountBorrows","offset":0,"slot":"16","type":"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ComptrollerInterface)4357":{"encoding":"inplace","label":"contract ComptrollerInterface","numberOfBytes":"20"},"t_contract(InterestRateModel)6066":{"encoding":"inplace","label":"contract InterestRateModel","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CTokenStorage.BorrowSnapshot)","numberOfBytes":"32","value":"t_struct(BorrowSnapshot)3559_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(BorrowSnapshot)3559_storage":{"encoding":"inplace","label":"struct CTokenStorage.BorrowSnapshot","numberOfBytes":"64","members":[{"astId":3556,"contract":"contracts/CToken.sol:CToken","label":"principal","offset":0,"slot":"0","type":"t_uint256"},{"astId":3558,"contract":"contracts/CToken.sol:CToken","label":"interestIndex","offset":0,"slot":"1","type":"t_uint256"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"_acceptAdmin()":"e9c714f2","_reduceReserves(uint256)":"601a0bf1","_setComptroller(address)":"4576b5db","_setInterestRateModel(address)":"f2b3abbd","_setPendingAdmin(address)":"b71d1a0c","_setReserveFactor(uint256)":"fca7820b","accrualBlockNumber()":"6c540baf","accrueInterest()":"a6afed95","admin()":"f851a440","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfUnderlying(address)":"3af9e669","borrowBalanceCurrent(address)":"17bfdfbc","borrowBalanceStored(address)":"95dd9193","borrowIndex()":"aa5af0fd","borrowRatePerBlock()":"f8f9da28","comptroller()":"5fe3b567","decimals()":"313ce567","exchangeRateCurrent()":"bd6d894d","exchangeRateStored()":"182df0f5","getAccountSnapshot(address)":"c37f68e2","getCash()":"3b1d21a2","initialize(address,address,uint256,string,string,uint8)":"99d8c1b4","interestRateModel()":"f3fdb15a","isCToken()":"fe9c44ae","name()":"06fdde03","pendingAdmin()":"26782247","reserveFactorMantissa()":"173b9904","seize(address,address,uint256)":"b2a02ff1","supplyRatePerBlock()":"ae9d70b0","symbol()":"95d89b41","totalBorrows()":"47bd3718","totalBorrowsCurrent()":"73acee98","totalReserves()":"8f840ddd","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"ewasm":{"wasm":""}}},"contracts/CTokenInterfaces.sol":{"CDelegateInterface":{"abi":[{"type":"function","name":"_becomeImplementation","inputs":[{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"_resignImplementation","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"_becomeImplementation(bytes)\":{\"details\":\"Should revert if any issues arise which make it unfit for delegation\",\"params\":{\"data\":\"The encoded bytes data for any initialization\"}}}},\"userdoc\":{\"methods\":{\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CDelegateInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"_becomeImplementation(bytes)":{"notice":"Called by the delegator on a delegate to initialize it for duty"},"_resignImplementation()":{"notice":"Called by the delegator on a delegate to forfeit its responsibility"}}},"devdoc":{"methods":{"_becomeImplementation(bytes)":{"details":"Should revert if any issues arise which make it unfit for delegation","params":{"data":"The encoded bytes data for any initialization"}}}},"storageLayout":{"storage":[{"astId":3935,"contract":"contracts/CTokenInterfaces.sol:CDelegateInterface","label":"implementation","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"_becomeImplementation(bytes)":"56e67728","_resignImplementation()":"153ab505","implementation()":"5c60da1b"}},"ewasm":{"wasm":""}},"CDelegationStorage":{"abi":[{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CDelegationStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":3935,"contract":"contracts/CTokenInterfaces.sol:CDelegationStorage","label":"implementation","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"    /* \"contracts/CTokenInterfaces.sol\":8433:8571  contract CDelegationStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/CTokenInterfaces.sol\":8433:8571  contract CDelegationStorage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CTokenInterfaces.sol\":8433:8571  contract CDelegationStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/CTokenInterfaces.sol\":8433:8571  contract CDelegationStorage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5c60da1b\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/CTokenInterfaces.sol\":8539:8568  address public implementation */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n    tag_5:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158202f517a75b2fa177300522f66dff3f8c850c80010653d43de87daa7128b57415564736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":8433,"end":8571,"name":"PUSH","value":"80"},{"begin":8433,"end":8571,"name":"PUSH","value":"40"},{"begin":8433,"end":8571,"name":"MSTORE"},{"begin":8433,"end":8571,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":8433,"end":8571,"name":"POP"},{"begin":8433,"end":8571,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":8433,"end":8571,"name":"DUP1"},{"begin":8433,"end":8571,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":8433,"end":8571,"name":"PUSH","value":"0"},{"begin":8433,"end":8571,"name":"CODECOPY"},{"begin":8433,"end":8571,"name":"PUSH","value":"0"},{"begin":8433,"end":8571,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a723158202f517a75b2fa177300522f66dff3f8c850c80010653d43de87daa7128b57415564736f6c63430005110032",".code":[{"begin":8433,"end":8571,"name":"PUSH","value":"80"},{"begin":8433,"end":8571,"name":"PUSH","value":"40"},{"begin":8433,"end":8571,"name":"MSTORE"},{"begin":8433,"end":8571,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":8433,"end":8571,"name":"POP"},{"begin":8433,"end":8571,"name":"PUSH","value":"4"},{"begin":8433,"end":8571,"name":"CALLDATASIZE"},{"begin":8433,"end":8571,"name":"LT"},{"begin":8433,"end":8571,"name":"PUSH [tag]","value":"2"},{"begin":8433,"end":8571,"name":"JUMPI"},{"begin":8433,"end":8571,"name":"PUSH","value":"0"},{"begin":8433,"end":8571,"name":"CALLDATALOAD"},{"begin":8433,"end":8571,"name":"PUSH","value":"E0"},{"begin":8433,"end":8571,"name":"SHR"},{"begin":8433,"end":8571,"name":"DUP1"},{"begin":8433,"end":8571,"name":"PUSH","value":"5C60DA1B"},{"begin":8433,"end":8571,"name":"EQ"},{"begin":8433,"end":8571,"name":"PUSH [tag]","value":"3"},{"begin":8433,"end":8571,"name":"JUMPI"},{"begin":8433,"end":8571,"name":"tag","value":"2"},{"begin":8433,"end":8571,"name":"JUMPDEST"},{"begin":8433,"end":8571,"name":"PUSH","value":"0"},{"begin":8433,"end":8571,"name":"DUP1"},{"begin":8433,"end":8571,"name":"REVERT"},{"begin":8539,"end":8568,"name":"tag","value":"3"},{"begin":8539,"end":8568,"name":"JUMPDEST"},{"begin":8539,"end":8568,"name":"PUSH [tag]","value":"4"},{"begin":8539,"end":8568,"name":"PUSH [tag]","value":"5"},{"begin":8539,"end":8568,"name":"JUMP","value":"[in]"},{"begin":8539,"end":8568,"name":"tag","value":"4"},{"begin":8539,"end":8568,"name":"JUMPDEST"},{"begin":8539,"end":8568,"name":"PUSH","value":"40"},{"begin":8539,"end":8568,"name":"DUP1"},{"begin":8539,"end":8568,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":8539,"end":8568,"name":"SWAP1"},{"begin":8539,"end":8568,"name":"SWAP3"},{"begin":8539,"end":8568,"name":"AND"},{"begin":8539,"end":8568,"name":"DUP3"},{"begin":8539,"end":8568,"name":"MSTORE"},{"begin":8539,"end":8568,"name":"MLOAD"},{"begin":8539,"end":8568,"name":"SWAP1"},{"begin":8539,"end":8568,"name":"DUP2"},{"begin":8539,"end":8568,"name":"SWAP1"},{"begin":8539,"end":8568,"name":"SUB"},{"begin":8539,"end":8568,"name":"PUSH","value":"20"},{"begin":8539,"end":8568,"name":"ADD"},{"begin":8539,"end":8568,"name":"SWAP1"},{"begin":8539,"end":8568,"name":"RETURN"},{"begin":8539,"end":8568,"name":"tag","value":"5"},{"begin":8539,"end":8568,"name":"JUMPDEST"},{"begin":8539,"end":8568,"name":"PUSH","value":"0"},{"begin":8539,"end":8568,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":8539,"end":8568,"name":"AND"},{"begin":8539,"end":8568,"name":"DUP2"},{"begin":8539,"end":8568,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b5060938061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea265627a7a723158202f517a75b2fa177300522f66dff3f8c850c80010653d43de87daa7128b57415564736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x93 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x4F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x2F MLOAD PUSH27 0x75B2FA177300522F66DFF3F8C850C80010653D43DE87DAA7128B57 COINBASE SSTORE PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"8433:138:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8433:138:1;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052348015600f57600080fd5b506004361060285760003560e01c80635c60da1b14602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea265627a7a723158202f517a75b2fa177300522f66dff3f8c850c80010653d43de87daa7128b57415564736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5C60DA1B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x4F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0x2F MLOAD PUSH27 0x75B2FA177300522F66DFF3F8C850C80010653D43DE87DAA7128B57 COINBASE SSTORE PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"8433:138:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8433:138:1;;;;;;;;;;;;;;;;;;;8539:29;;;:::i;:::-;;;;-1:-1:-1;;;;;8539:29:1;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8539:29:1;;:::o","linkReferences":{}},"methodIdentifiers":{"implementation()":"5c60da1b"},"gasEstimates":{"creation":{"codeDepositCost":"29400","executionCost":"81","totalCost":"29481"},"external":{"implementation()":"1015"},"internal":{}}},"ewasm":{"wasm":""}},"CDelegatorInterface":{"abi":[{"type":"function","name":"_setImplementation","inputs":[{"name":"implementation_","type":"address","internalType":"address"},{"name":"allowResign","type":"bool","internalType":"bool"},{"name":"becomeImplementationData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"implementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"NewImplementation","inputs":[{"name":"oldImplementation","type":"address","indexed":false,"internalType":"address"},{"name":"newImplementation","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowResign\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"}],\"name\":\"_setImplementation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"_setImplementation(address,bool,bytes)\":{\"params\":{\"allowResign\":\"Flag to indicate whether to call _resignImplementation on the old implementation\",\"becomeImplementationData\":\"The encoded bytes data to be passed to _becomeImplementation\",\"implementation_\":\"The address of the new implementation for delegation\"}}}},\"userdoc\":{\"methods\":{\"_setImplementation(address,bool,bytes)\":{\"notice\":\"Called by the admin to update the implementation of the delegator\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CDelegatorInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"_setImplementation(address,bool,bytes)":{"notice":"Called by the admin to update the implementation of the delegator"}}},"devdoc":{"methods":{"_setImplementation(address,bool,bytes)":{"params":{"allowResign":"Flag to indicate whether to call _resignImplementation on the old implementation","becomeImplementationData":"The encoded bytes data to be passed to _becomeImplementation","implementation_":"The address of the new implementation for delegation"}}}},"storageLayout":{"storage":[{"astId":3935,"contract":"contracts/CTokenInterfaces.sol:CDelegatorInterface","label":"implementation","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"_setImplementation(address,bool,bytes)":"555bcc40","implementation()":"5c60da1b"}},"ewasm":{"wasm":""}},"CErc20Interface":{"abi":[{"type":"function","name":"_addReserves","inputs":[{"name":"addAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrow","inputs":[{"name":"borrowAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"liquidateBorrow","inputs":[{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"},{"name":"cTokenCollateral","type":"address","internalType":"contract CTokenInterface"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"mint","inputs":[{"name":"mintAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"redeem","inputs":[{"name":"redeemTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"redeemUnderlying","inputs":[{"name":"redeemAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"repayBorrow","inputs":[{"name":"repayAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"repayBorrowBehalf","inputs":[{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"underlying","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"_addReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract CTokenInterface\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"_addReserves(uint256)\":{\"notice\":\"* Admin Functions **\"},\"mint(uint256)\":{\"notice\":\"* User Interface **\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CErc20Interface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"_addReserves(uint256)":{"notice":"* Admin Functions **"},"mint(uint256)":{"notice":"* User Interface **"}}},"devdoc":{},"storageLayout":{"storage":[{"astId":3867,"contract":"contracts/CTokenInterfaces.sol:CErc20Interface","label":"underlying","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"_addReserves(uint256)":"3e941010","borrow(uint256)":"c5ebeaec","liquidateBorrow(address,uint256,address)":"f5e3c462","mint(uint256)":"a0712d68","redeem(uint256)":"db006a75","redeemUnderlying(uint256)":"852a12e3","repayBorrow(uint256)":"0e752702","repayBorrowBehalf(address,uint256)":"2608f818","underlying()":"6f307dc3"}},"ewasm":{"wasm":""}},"CErc20Storage":{"abi":[{"type":"function","name":"underlying","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CErc20Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":3867,"contract":"contracts/CTokenInterfaces.sol:CErc20Storage","label":"underlying","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"    /* \"contracts/CTokenInterfaces.sol\":7586:7707  contract CErc20Storage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/CTokenInterfaces.sol\":7586:7707  contract CErc20Storage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CTokenInterfaces.sol\":7586:7707  contract CErc20Storage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/CTokenInterfaces.sol\":7586:7707  contract CErc20Storage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x6f307dc3\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/CTokenInterfaces.sol\":7679:7704  address public underlying */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n    tag_5:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a72315820fb72b3d943a73b42ff47ad8496855da0ebdd3908de7c36ae0529291badf1b6a764736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":7586,"end":7707,"name":"PUSH","value":"80"},{"begin":7586,"end":7707,"name":"PUSH","value":"40"},{"begin":7586,"end":7707,"name":"MSTORE"},{"begin":7586,"end":7707,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":7586,"end":7707,"name":"POP"},{"begin":7586,"end":7707,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":7586,"end":7707,"name":"DUP1"},{"begin":7586,"end":7707,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":7586,"end":7707,"name":"PUSH","value":"0"},{"begin":7586,"end":7707,"name":"CODECOPY"},{"begin":7586,"end":7707,"name":"PUSH","value":"0"},{"begin":7586,"end":7707,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a72315820fb72b3d943a73b42ff47ad8496855da0ebdd3908de7c36ae0529291badf1b6a764736f6c63430005110032",".code":[{"begin":7586,"end":7707,"name":"PUSH","value":"80"},{"begin":7586,"end":7707,"name":"PUSH","value":"40"},{"begin":7586,"end":7707,"name":"MSTORE"},{"begin":7586,"end":7707,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":7586,"end":7707,"name":"POP"},{"begin":7586,"end":7707,"name":"PUSH","value":"4"},{"begin":7586,"end":7707,"name":"CALLDATASIZE"},{"begin":7586,"end":7707,"name":"LT"},{"begin":7586,"end":7707,"name":"PUSH [tag]","value":"2"},{"begin":7586,"end":7707,"name":"JUMPI"},{"begin":7586,"end":7707,"name":"PUSH","value":"0"},{"begin":7586,"end":7707,"name":"CALLDATALOAD"},{"begin":7586,"end":7707,"name":"PUSH","value":"E0"},{"begin":7586,"end":7707,"name":"SHR"},{"begin":7586,"end":7707,"name":"DUP1"},{"begin":7586,"end":7707,"name":"PUSH","value":"6F307DC3"},{"begin":7586,"end":7707,"name":"EQ"},{"begin":7586,"end":7707,"name":"PUSH [tag]","value":"3"},{"begin":7586,"end":7707,"name":"JUMPI"},{"begin":7586,"end":7707,"name":"tag","value":"2"},{"begin":7586,"end":7707,"name":"JUMPDEST"},{"begin":7586,"end":7707,"name":"PUSH","value":"0"},{"begin":7586,"end":7707,"name":"DUP1"},{"begin":7586,"end":7707,"name":"REVERT"},{"begin":7679,"end":7704,"name":"tag","value":"3"},{"begin":7679,"end":7704,"name":"JUMPDEST"},{"begin":7679,"end":7704,"name":"PUSH [tag]","value":"4"},{"begin":7679,"end":7704,"name":"PUSH [tag]","value":"5"},{"begin":7679,"end":7704,"name":"JUMP","value":"[in]"},{"begin":7679,"end":7704,"name":"tag","value":"4"},{"begin":7679,"end":7704,"name":"JUMPDEST"},{"begin":7679,"end":7704,"name":"PUSH","value":"40"},{"begin":7679,"end":7704,"name":"DUP1"},{"begin":7679,"end":7704,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":7679,"end":7704,"name":"SWAP1"},{"begin":7679,"end":7704,"name":"SWAP3"},{"begin":7679,"end":7704,"name":"AND"},{"begin":7679,"end":7704,"name":"DUP3"},{"begin":7679,"end":7704,"name":"MSTORE"},{"begin":7679,"end":7704,"name":"MLOAD"},{"begin":7679,"end":7704,"name":"SWAP1"},{"begin":7679,"end":7704,"name":"DUP2"},{"begin":7679,"end":7704,"name":"SWAP1"},{"begin":7679,"end":7704,"name":"SUB"},{"begin":7679,"end":7704,"name":"PUSH","value":"20"},{"begin":7679,"end":7704,"name":"ADD"},{"begin":7679,"end":7704,"name":"SWAP1"},{"begin":7679,"end":7704,"name":"RETURN"},{"begin":7679,"end":7704,"name":"tag","value":"5"},{"begin":7679,"end":7704,"name":"JUMPDEST"},{"begin":7679,"end":7704,"name":"PUSH","value":"0"},{"begin":7679,"end":7704,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":7679,"end":7704,"name":"AND"},{"begin":7679,"end":7704,"name":"DUP2"},{"begin":7679,"end":7704,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b5060938061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f307dc314602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea265627a7a72315820fb72b3d943a73b42ff47ad8496855da0ebdd3908de7c36ae0529291badf1b6a764736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x93 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F307DC3 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x4F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xFB PUSH19 0xB3D943A73B42FF47AD8496855DA0EBDD3908DE PUSH29 0x36AE0529291BADF1B6A764736F6C634300051100320000000000000000 ","sourceMap":"7586:121:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7586:121:1;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052348015600f57600080fd5b506004361060285760003560e01c80636f307dc314602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea265627a7a72315820fb72b3d943a73b42ff47ad8496855da0ebdd3908de7c36ae0529291badf1b6a764736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6F307DC3 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x4F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xFB PUSH19 0xB3D943A73B42FF47AD8496855DA0EBDD3908DE PUSH29 0x36AE0529291BADF1B6A764736F6C634300051100320000000000000000 ","sourceMap":"7586:121:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7586:121:1;;;;;;;;;;;;;;;;;;;7679:25;;;:::i;:::-;;;;-1:-1:-1;;;;;7679:25:1;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7679:25:1;;:::o","linkReferences":{}},"methodIdentifiers":{"underlying()":"6f307dc3"},"gasEstimates":{"creation":{"codeDepositCost":"29400","executionCost":"81","totalCost":"29481"},"external":{"underlying()":"1015"},"internal":{}}},"ewasm":{"wasm":""}},"CTokenInterface":{"abi":[{"type":"function","name":"_acceptAdmin","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_reduceReserves","inputs":[{"name":"reduceAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setComptroller","inputs":[{"name":"newComptroller","type":"address","internalType":"contract ComptrollerInterface"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setInterestRateModel","inputs":[{"name":"newInterestRateModel","type":"address","internalType":"contract InterestRateModel"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setPendingAdmin","inputs":[{"name":"newPendingAdmin","type":"address","internalType":"address payable"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setReserveFactor","inputs":[{"name":"newReserveFactorMantissa","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"accrualBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"accrueInterest","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfUnderlying","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrowBalanceCurrent","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrowBalanceStored","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"borrowIndex","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"borrowRatePerBlock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"comptroller","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ComptrollerInterface"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"exchangeRateCurrent","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"exchangeRateStored","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getAccountSnapshot","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getCash","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"interestRateModel","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract InterestRateModel"}],"stateMutability":"view"},{"type":"function","name":"isCToken","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"reserveFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"seize","inputs":[{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"seizeTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"supplyRatePerBlock","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalBorrows","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalBorrowsCurrent","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"totalReserves","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"AccrueInterest","inputs":[{"name":"cashPrior","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"interestAccumulated","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"borrowIndex","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Borrow","inputs":[{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"borrowAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"accountBorrows","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Failure","inputs":[{"name":"error","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"detail","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"LiquidateBorrow","inputs":[{"name":"liquidator","type":"address","indexed":false,"internalType":"address"},{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"repayAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"cTokenCollateral","type":"address","indexed":false,"internalType":"address"},{"name":"seizeTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Mint","inputs":[{"name":"minter","type":"address","indexed":false,"internalType":"address"},{"name":"mintAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"mintTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"NewAdmin","inputs":[{"name":"oldAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewComptroller","inputs":[{"name":"oldComptroller","type":"address","indexed":false,"internalType":"contract ComptrollerInterface"},{"name":"newComptroller","type":"address","indexed":false,"internalType":"contract ComptrollerInterface"}],"anonymous":false},{"type":"event","name":"NewMarketInterestRateModel","inputs":[{"name":"oldInterestRateModel","type":"address","indexed":false,"internalType":"contract InterestRateModel"},{"name":"newInterestRateModel","type":"address","indexed":false,"internalType":"contract InterestRateModel"}],"anonymous":false},{"type":"event","name":"NewPendingAdmin","inputs":[{"name":"oldPendingAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newPendingAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewReserveFactor","inputs":[{"name":"oldReserveFactorMantissa","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newReserveFactorMantissa","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Redeem","inputs":[{"name":"redeemer","type":"address","indexed":false,"internalType":"address"},{"name":"redeemAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"redeemTokens","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RepayBorrow","inputs":[{"name":"payer","type":"address","indexed":false,"internalType":"address"},{"name":"borrower","type":"address","indexed":false,"internalType":"address"},{"name":"repayAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"accountBorrows","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"totalBorrows","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ReservesAdded","inputs":[{"name":"benefactor","type":"address","indexed":false,"internalType":"address"},{"name":"addAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalReserves","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ReservesReduced","inputs":[{"name":"admin","type":"address","indexed":false,"internalType":"address"},{"name":"reduceAmount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newTotalReserves","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"_setPendingAdmin(address)\":{\"notice\":\"* Admin Functions **\"},\"transfer(address,uint256)\":{\"notice\":\"* User Interface **\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CTokenInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"_setPendingAdmin(address)":{"notice":"* Admin Functions **"},"transfer(address,uint256)":{"notice":"* User Interface **"}}},"devdoc":{},"storageLayout":{"storage":[{"astId":3510,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"_notEntered","offset":0,"slot":"0","type":"t_bool"},{"astId":3512,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3514,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3516,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"decimals","offset":0,"slot":"3","type":"t_uint8"},{"astId":3524,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"admin","offset":1,"slot":"3","type":"t_address_payable"},{"astId":3526,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"pendingAdmin","offset":0,"slot":"4","type":"t_address_payable"},{"astId":3528,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"comptroller","offset":0,"slot":"5","type":"t_contract(ComptrollerInterface)4357"},{"astId":3530,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"interestRateModel","offset":0,"slot":"6","type":"t_contract(InterestRateModel)6066"},{"astId":3532,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"initialExchangeRateMantissa","offset":0,"slot":"7","type":"t_uint256"},{"astId":3534,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"reserveFactorMantissa","offset":0,"slot":"8","type":"t_uint256"},{"astId":3536,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"accrualBlockNumber","offset":0,"slot":"9","type":"t_uint256"},{"astId":3538,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"borrowIndex","offset":0,"slot":"10","type":"t_uint256"},{"astId":3540,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"totalBorrows","offset":0,"slot":"11","type":"t_uint256"},{"astId":3542,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"totalReserves","offset":0,"slot":"12","type":"t_uint256"},{"astId":3544,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"totalSupply","offset":0,"slot":"13","type":"t_uint256"},{"astId":3548,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"accountTokens","offset":0,"slot":"14","type":"t_mapping(t_address,t_uint256)"},{"astId":3554,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"transferAllowances","offset":0,"slot":"15","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":3563,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"accountBorrows","offset":0,"slot":"16","type":"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ComptrollerInterface)4357":{"encoding":"inplace","label":"contract ComptrollerInterface","numberOfBytes":"20"},"t_contract(InterestRateModel)6066":{"encoding":"inplace","label":"contract InterestRateModel","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CTokenStorage.BorrowSnapshot)","numberOfBytes":"32","value":"t_struct(BorrowSnapshot)3559_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(BorrowSnapshot)3559_storage":{"encoding":"inplace","label":"struct CTokenStorage.BorrowSnapshot","numberOfBytes":"64","members":[{"astId":3556,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"principal","offset":0,"slot":"0","type":"t_uint256"},{"astId":3558,"contract":"contracts/CTokenInterfaces.sol:CTokenInterface","label":"interestIndex","offset":0,"slot":"1","type":"t_uint256"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"_acceptAdmin()":"e9c714f2","_reduceReserves(uint256)":"601a0bf1","_setComptroller(address)":"4576b5db","_setInterestRateModel(address)":"f2b3abbd","_setPendingAdmin(address)":"b71d1a0c","_setReserveFactor(uint256)":"fca7820b","accrualBlockNumber()":"6c540baf","accrueInterest()":"a6afed95","admin()":"f851a440","allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","balanceOfUnderlying(address)":"3af9e669","borrowBalanceCurrent(address)":"17bfdfbc","borrowBalanceStored(address)":"95dd9193","borrowIndex()":"aa5af0fd","borrowRatePerBlock()":"f8f9da28","comptroller()":"5fe3b567","decimals()":"313ce567","exchangeRateCurrent()":"bd6d894d","exchangeRateStored()":"182df0f5","getAccountSnapshot(address)":"c37f68e2","getCash()":"3b1d21a2","interestRateModel()":"f3fdb15a","isCToken()":"fe9c44ae","name()":"06fdde03","pendingAdmin()":"26782247","reserveFactorMantissa()":"173b9904","seize(address,address,uint256)":"b2a02ff1","supplyRatePerBlock()":"ae9d70b0","symbol()":"95d89b41","totalBorrows()":"47bd3718","totalBorrowsCurrent()":"73acee98","totalReserves()":"8f840ddd","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"ewasm":{"wasm":""}},"CTokenStorage":{"abi":[{"type":"function","name":"accrualBlockNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"borrowIndex","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"comptroller","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ComptrollerInterface"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"interestRateModel","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract InterestRateModel"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address payable"}],"stateMutability":"view"},{"type":"function","name":"reserveFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalBorrows","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalReserves","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/CTokenInterfaces.sol\":\"CTokenStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":3510,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"_notEntered","offset":0,"slot":"0","type":"t_bool"},{"astId":3512,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":3514,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"symbol","offset":0,"slot":"2","type":"t_string_storage"},{"astId":3516,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"decimals","offset":0,"slot":"3","type":"t_uint8"},{"astId":3524,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"admin","offset":1,"slot":"3","type":"t_address_payable"},{"astId":3526,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"pendingAdmin","offset":0,"slot":"4","type":"t_address_payable"},{"astId":3528,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"comptroller","offset":0,"slot":"5","type":"t_contract(ComptrollerInterface)4357"},{"astId":3530,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"interestRateModel","offset":0,"slot":"6","type":"t_contract(InterestRateModel)6066"},{"astId":3532,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"initialExchangeRateMantissa","offset":0,"slot":"7","type":"t_uint256"},{"astId":3534,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"reserveFactorMantissa","offset":0,"slot":"8","type":"t_uint256"},{"astId":3536,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"accrualBlockNumber","offset":0,"slot":"9","type":"t_uint256"},{"astId":3538,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"borrowIndex","offset":0,"slot":"10","type":"t_uint256"},{"astId":3540,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"totalBorrows","offset":0,"slot":"11","type":"t_uint256"},{"astId":3542,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"totalReserves","offset":0,"slot":"12","type":"t_uint256"},{"astId":3544,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"totalSupply","offset":0,"slot":"13","type":"t_uint256"},{"astId":3548,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"accountTokens","offset":0,"slot":"14","type":"t_mapping(t_address,t_uint256)"},{"astId":3554,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"transferAllowances","offset":0,"slot":"15","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":3563,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"accountBorrows","offset":0,"slot":"16","type":"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(ComptrollerInterface)4357":{"encoding":"inplace","label":"contract ComptrollerInterface","numberOfBytes":"20"},"t_contract(InterestRateModel)6066":{"encoding":"inplace","label":"contract InterestRateModel","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(BorrowSnapshot)3559_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct CTokenStorage.BorrowSnapshot)","numberOfBytes":"32","value":"t_struct(BorrowSnapshot)3559_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(BorrowSnapshot)3559_storage":{"encoding":"inplace","label":"struct CTokenStorage.BorrowSnapshot","numberOfBytes":"64","members":[{"astId":3556,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"principal","offset":0,"slot":"0","type":"t_uint256"},{"astId":3558,"contract":"contracts/CTokenInterfaces.sol:CTokenStorage","label":"interestIndex","offset":0,"slot":"1","type":"t_uint256"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"evm":{"assembly":"    /* \"contracts/CTokenInterfaces.sol\":98:3016  contract CTokenStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/CTokenInterfaces.sol\":98:3016  contract CTokenStorage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CTokenInterfaces.sol\":98:3016  contract CTokenStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/CTokenInterfaces.sol\":98:3016  contract CTokenStorage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x5fe3b567\n      gt\n      tag_16\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xaa5af0fd\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xf3fdb15a\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_15\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x5fe3b567\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x6c540baf\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8f840ddd\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_16:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x173b9904\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x26782247\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x47bd3718\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/CTokenInterfaces.sol\":289:307  string public name */\n    tag_3:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      0x40\n      dup1\n      mload\n      0x20\n      dup1\n      dup3\n      mstore\n      dup4\n      mload\n      dup2\n      dup4\n      add\n      mstore\n      dup4\n      mload\n      swap2\n      swap3\n      dup4\n      swap3\n      swap1\n      dup4\n      add\n      swap2\n      dup6\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_20:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":90:101   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":71:82   */\n      dup4\n      dup3\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_20)\n    tag_22:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"contracts/CTokenInterfaces.sol\":289:307  string public name */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_23\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_23:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/CTokenInterfaces.sol\":1541:1574  uint public reserveFactorMantissa */\n    tag_4:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/CTokenInterfaces.sol\":2161:2184  uint public totalSupply */\n    tag_5:\n      tag_24\n      tag_27\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":985:1020  address payable public pendingAdmin */\n    tag_6:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/CTokenInterfaces.sol\":475:496  uint8 public decimals */\n    tag_7:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      0x40\n      dup1\n      mload\n      0xff\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/CTokenInterfaces.sol\":1935:1959  uint public totalBorrows */\n    tag_8:\n      tag_24\n      tag_33\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":1106:1145  ComptrollerInterface public comptroller */\n    tag_9:\n      tag_28\n      tag_35\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":1659:1689  uint public accrualBlockNumber */\n    tag_10:\n      tag_24\n      tag_37\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":2060:2085  uint public totalReserves */\n    tag_11:\n      tag_24\n      tag_39\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":380:400  string public symbol */\n    tag_12:\n      tag_18\n      tag_41\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":1805:1828  uint public borrowIndex */\n    tag_13:\n      tag_24\n      tag_47\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":1242:1284  InterestRateModel public interestRateModel */\n    tag_14:\n      tag_28\n      tag_49\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":879:907  address payable public admin */\n    tag_15:\n      tag_28\n      tag_51\n      jump\t// in\n        /* \"contracts/CTokenInterfaces.sol\":289:307  string public name */\n    tag_19:\n      0x01\n      dup1\n      sload\n      0x40\n      dup1\n      mload\n      0x20\n      0x02\n      dup5\n      dup7\n      and\n      iszero\n      0x0100\n      mul\n      not(0x00)\n      add\n      swap1\n      swap5\n      and\n      swap4\n      swap1\n      swap4\n      div\n      0x1f\n      dup2\n      add\n      dup5\n      swap1\n      div\n      dup5\n      mul\n      dup3\n      add\n      dup5\n      add\n      swap1\n      swap3\n      mstore\n      dup2\n      dup2\n      mstore\n      swap3\n      swap2\n      dup4\n      add\n      dup3\n      dup3\n      dup1\n      iszero\n      tag_52\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_53\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_52)\n    tag_53:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_54:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_54\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_52:\n      pop\n      pop\n      pop\n      pop\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":1541:1574  uint public reserveFactorMantissa */\n    tag_25:\n      sload(0x08)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":2161:2184  uint public totalSupply */\n    tag_27:\n      sload(0x0d)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":985:1020  address payable public pendingAdmin */\n    tag_29:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":475:496  uint8 public decimals */\n    tag_31:\n      and(0xff, sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":1935:1959  uint public totalBorrows */\n    tag_33:\n      sload(0x0b)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":1106:1145  ComptrollerInterface public comptroller */\n    tag_35:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x05))\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":1659:1689  uint public accrualBlockNumber */\n    tag_37:\n      sload(0x09)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":2060:2085  uint public totalReserves */\n    tag_39:\n      sload(0x0c)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":380:400  string public symbol */\n    tag_41:\n      0x02\n      dup1\n      sload\n      0x40\n      dup1\n      mload\n      0x20\n      0x01\n      dup5\n      and\n      iszero\n      0x0100\n      mul\n      not(0x00)\n      add\n      swap1\n      swap4\n      and\n      dup5\n      swap1\n      div\n      0x1f\n      dup2\n      add\n      dup5\n      swap1\n      div\n      dup5\n      mul\n      dup3\n      add\n      dup5\n      add\n      swap1\n      swap3\n      mstore\n      dup2\n      dup2\n      mstore\n      swap3\n      swap2\n      dup4\n      add\n      dup3\n      dup3\n      dup1\n      iszero\n      tag_52\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_53\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_52)\n        /* \"contracts/CTokenInterfaces.sol\":1805:1828  uint public borrowIndex */\n    tag_47:\n      sload(0x0a)\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":1242:1284  InterestRateModel public interestRateModel */\n    tag_49:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x06))\n      dup2\n      jump\t// out\n        /* \"contracts/CTokenInterfaces.sol\":879:907  address payable public admin */\n    tag_51:\n      sload(0x03)\n      0x0100\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a72315820ea34bc7d4cdba753a504985b2ce2ae84b9c0dcb2383ad6fc809229a298d4f88e64736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":98,"end":3016,"name":"PUSH","value":"80"},{"begin":98,"end":3016,"name":"PUSH","value":"40"},{"begin":98,"end":3016,"name":"MSTORE"},{"begin":98,"end":3016,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":98,"end":3016,"name":"POP"},{"begin":98,"end":3016,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":98,"end":3016,"name":"PUSH","value":"0"},{"begin":98,"end":3016,"name":"CODECOPY"},{"begin":98,"end":3016,"name":"PUSH","value":"0"},{"begin":98,"end":3016,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a72315820ea34bc7d4cdba753a504985b2ce2ae84b9c0dcb2383ad6fc809229a298d4f88e64736f6c63430005110032",".code":[{"begin":98,"end":3016,"name":"PUSH","value":"80"},{"begin":98,"end":3016,"name":"PUSH","value":"40"},{"begin":98,"end":3016,"name":"MSTORE"},{"begin":98,"end":3016,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":98,"end":3016,"name":"POP"},{"begin":98,"end":3016,"name":"PUSH","value":"4"},{"begin":98,"end":3016,"name":"CALLDATASIZE"},{"begin":98,"end":3016,"name":"LT"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"2"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"PUSH","value":"0"},{"begin":98,"end":3016,"name":"CALLDATALOAD"},{"begin":98,"end":3016,"name":"PUSH","value":"E0"},{"begin":98,"end":3016,"name":"SHR"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"5FE3B567"},{"begin":98,"end":3016,"name":"GT"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"16"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"95D89B41"},{"begin":98,"end":3016,"name":"GT"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"17"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"95D89B41"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"12"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"AA5AF0FD"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"13"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"F3FDB15A"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"14"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"F851A440"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"15"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"2"},{"begin":98,"end":3016,"name":"JUMP"},{"begin":98,"end":3016,"name":"tag","value":"17"},{"begin":98,"end":3016,"name":"JUMPDEST"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"5FE3B567"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"9"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"6C540BAF"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"10"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"8F840DDD"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"11"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"2"},{"begin":98,"end":3016,"name":"JUMP"},{"begin":98,"end":3016,"name":"tag","value":"16"},{"begin":98,"end":3016,"name":"JUMPDEST"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"6FDDE03"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"3"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"173B9904"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"4"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"18160DDD"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"5"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"26782247"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"6"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"313CE567"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"7"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"PUSH","value":"47BD3718"},{"begin":98,"end":3016,"name":"EQ"},{"begin":98,"end":3016,"name":"PUSH [tag]","value":"8"},{"begin":98,"end":3016,"name":"JUMPI"},{"begin":98,"end":3016,"name":"tag","value":"2"},{"begin":98,"end":3016,"name":"JUMPDEST"},{"begin":98,"end":3016,"name":"PUSH","value":"0"},{"begin":98,"end":3016,"name":"DUP1"},{"begin":98,"end":3016,"name":"REVERT"},{"begin":289,"end":307,"name":"tag","value":"3"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"18"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"19"},{"begin":289,"end":307,"name":"JUMP","value":"[in]"},{"begin":289,"end":307,"name":"tag","value":"18"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"PUSH","value":"40"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"SWAP3"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"SWAP3"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"DUP6"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"PUSH","value":"0"},{"begin":8,"end":108,"name":"tag","value":"20"},{"begin":8,"end":108,"name":"JUMPDEST"},{"begin":33,"end":36,"name":"DUP4"},{"begin":30,"end":31,"name":"DUP2"},{"begin":27,"end":37,"name":"LT"},{"begin":8,"end":108,"name":"ISZERO"},{"begin":8,"end":108,"name":"PUSH [tag]","value":"22"},{"begin":8,"end":108,"name":"JUMPI"},{"begin":90,"end":101,"name":"DUP2"},{"begin":90,"end":101,"name":"DUP2"},{"begin":90,"end":101,"name":"ADD"},{"begin":84,"end":102,"name":"MLOAD"},{"begin":71,"end":82,"name":"DUP4"},{"begin":71,"end":82,"name":"DUP3"},{"begin":71,"end":82,"name":"ADD"},{"begin":64,"end":103,"name":"MSTORE"},{"begin":52,"end":54,"name":"PUSH","value":"20"},{"begin":45,"end":55,"name":"ADD"},{"begin":8,"end":108,"name":"PUSH [tag]","value":"20"},{"begin":8,"end":108,"name":"JUMP"},{"begin":8,"end":108,"name":"tag","value":"22"},{"begin":8,"end":108,"name":"JUMPDEST"},{"begin":12,"end":26,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"PUSH","value":"1F"},{"begin":289,"end":307,"name":"AND"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"ISZERO"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"23"},{"begin":289,"end":307,"name":"JUMPI"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"SUB"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"PUSH","value":"1"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"SUB"},{"begin":289,"end":307,"name":"PUSH","value":"100"},{"begin":289,"end":307,"name":"EXP"},{"begin":289,"end":307,"name":"SUB"},{"begin":289,"end":307,"name":"NOT"},{"begin":289,"end":307,"name":"AND"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"tag","value":"23"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"SWAP3"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"PUSH","value":"40"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"SUB"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"RETURN"},{"begin":1541,"end":1574,"name":"tag","value":"4"},{"begin":1541,"end":1574,"name":"JUMPDEST"},{"begin":1541,"end":1574,"name":"PUSH [tag]","value":"24"},{"begin":1541,"end":1574,"name":"PUSH [tag]","value":"25"},{"begin":1541,"end":1574,"name":"JUMP","value":"[in]"},{"begin":1541,"end":1574,"name":"tag","value":"24"},{"begin":1541,"end":1574,"name":"JUMPDEST"},{"begin":1541,"end":1574,"name":"PUSH","value":"40"},{"begin":1541,"end":1574,"name":"DUP1"},{"begin":1541,"end":1574,"name":"MLOAD"},{"begin":1541,"end":1574,"name":"SWAP2"},{"begin":1541,"end":1574,"name":"DUP3"},{"begin":1541,"end":1574,"name":"MSTORE"},{"begin":1541,"end":1574,"name":"MLOAD"},{"begin":1541,"end":1574,"name":"SWAP1"},{"begin":1541,"end":1574,"name":"DUP2"},{"begin":1541,"end":1574,"name":"SWAP1"},{"begin":1541,"end":1574,"name":"SUB"},{"begin":1541,"end":1574,"name":"PUSH","value":"20"},{"begin":1541,"end":1574,"name":"ADD"},{"begin":1541,"end":1574,"name":"SWAP1"},{"begin":1541,"end":1574,"name":"RETURN"},{"begin":2161,"end":2184,"name":"tag","value":"5"},{"begin":2161,"end":2184,"name":"JUMPDEST"},{"begin":2161,"end":2184,"name":"PUSH [tag]","value":"24"},{"begin":2161,"end":2184,"name":"PUSH [tag]","value":"27"},{"begin":2161,"end":2184,"name":"JUMP","value":"[in]"},{"begin":985,"end":1020,"name":"tag","value":"6"},{"begin":985,"end":1020,"name":"JUMPDEST"},{"begin":985,"end":1020,"name":"PUSH [tag]","value":"28"},{"begin":985,"end":1020,"name":"PUSH [tag]","value":"29"},{"begin":985,"end":1020,"name":"JUMP","value":"[in]"},{"begin":985,"end":1020,"name":"tag","value":"28"},{"begin":985,"end":1020,"name":"JUMPDEST"},{"begin":985,"end":1020,"name":"PUSH","value":"40"},{"begin":985,"end":1020,"name":"DUP1"},{"begin":985,"end":1020,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":985,"end":1020,"name":"SWAP1"},{"begin":985,"end":1020,"name":"SWAP3"},{"begin":985,"end":1020,"name":"AND"},{"begin":985,"end":1020,"name":"DUP3"},{"begin":985,"end":1020,"name":"MSTORE"},{"begin":985,"end":1020,"name":"MLOAD"},{"begin":985,"end":1020,"name":"SWAP1"},{"begin":985,"end":1020,"name":"DUP2"},{"begin":985,"end":1020,"name":"SWAP1"},{"begin":985,"end":1020,"name":"SUB"},{"begin":985,"end":1020,"name":"PUSH","value":"20"},{"begin":985,"end":1020,"name":"ADD"},{"begin":985,"end":1020,"name":"SWAP1"},{"begin":985,"end":1020,"name":"RETURN"},{"begin":475,"end":496,"name":"tag","value":"7"},{"begin":475,"end":496,"name":"JUMPDEST"},{"begin":475,"end":496,"name":"PUSH [tag]","value":"30"},{"begin":475,"end":496,"name":"PUSH [tag]","value":"31"},{"begin":475,"end":496,"name":"JUMP","value":"[in]"},{"begin":475,"end":496,"name":"tag","value":"30"},{"begin":475,"end":496,"name":"JUMPDEST"},{"begin":475,"end":496,"name":"PUSH","value":"40"},{"begin":475,"end":496,"name":"DUP1"},{"begin":475,"end":496,"name":"MLOAD"},{"begin":475,"end":496,"name":"PUSH","value":"FF"},{"begin":475,"end":496,"name":"SWAP1"},{"begin":475,"end":496,"name":"SWAP3"},{"begin":475,"end":496,"name":"AND"},{"begin":475,"end":496,"name":"DUP3"},{"begin":475,"end":496,"name":"MSTORE"},{"begin":475,"end":496,"name":"MLOAD"},{"begin":475,"end":496,"name":"SWAP1"},{"begin":475,"end":496,"name":"DUP2"},{"begin":475,"end":496,"name":"SWAP1"},{"begin":475,"end":496,"name":"SUB"},{"begin":475,"end":496,"name":"PUSH","value":"20"},{"begin":475,"end":496,"name":"ADD"},{"begin":475,"end":496,"name":"SWAP1"},{"begin":475,"end":496,"name":"RETURN"},{"begin":1935,"end":1959,"name":"tag","value":"8"},{"begin":1935,"end":1959,"name":"JUMPDEST"},{"begin":1935,"end":1959,"name":"PUSH [tag]","value":"24"},{"begin":1935,"end":1959,"name":"PUSH [tag]","value":"33"},{"begin":1935,"end":1959,"name":"JUMP","value":"[in]"},{"begin":1106,"end":1145,"name":"tag","value":"9"},{"begin":1106,"end":1145,"name":"JUMPDEST"},{"begin":1106,"end":1145,"name":"PUSH [tag]","value":"28"},{"begin":1106,"end":1145,"name":"PUSH [tag]","value":"35"},{"begin":1106,"end":1145,"name":"JUMP","value":"[in]"},{"begin":1659,"end":1689,"name":"tag","value":"10"},{"begin":1659,"end":1689,"name":"JUMPDEST"},{"begin":1659,"end":1689,"name":"PUSH [tag]","value":"24"},{"begin":1659,"end":1689,"name":"PUSH [tag]","value":"37"},{"begin":1659,"end":1689,"name":"JUMP","value":"[in]"},{"begin":2060,"end":2085,"name":"tag","value":"11"},{"begin":2060,"end":2085,"name":"JUMPDEST"},{"begin":2060,"end":2085,"name":"PUSH [tag]","value":"24"},{"begin":2060,"end":2085,"name":"PUSH [tag]","value":"39"},{"begin":2060,"end":2085,"name":"JUMP","value":"[in]"},{"begin":380,"end":400,"name":"tag","value":"12"},{"begin":380,"end":400,"name":"JUMPDEST"},{"begin":380,"end":400,"name":"PUSH [tag]","value":"18"},{"begin":380,"end":400,"name":"PUSH [tag]","value":"41"},{"begin":380,"end":400,"name":"JUMP","value":"[in]"},{"begin":1805,"end":1828,"name":"tag","value":"13"},{"begin":1805,"end":1828,"name":"JUMPDEST"},{"begin":1805,"end":1828,"name":"PUSH [tag]","value":"24"},{"begin":1805,"end":1828,"name":"PUSH [tag]","value":"47"},{"begin":1805,"end":1828,"name":"JUMP","value":"[in]"},{"begin":1242,"end":1284,"name":"tag","value":"14"},{"begin":1242,"end":1284,"name":"JUMPDEST"},{"begin":1242,"end":1284,"name":"PUSH [tag]","value":"28"},{"begin":1242,"end":1284,"name":"PUSH [tag]","value":"49"},{"begin":1242,"end":1284,"name":"JUMP","value":"[in]"},{"begin":879,"end":907,"name":"tag","value":"15"},{"begin":879,"end":907,"name":"JUMPDEST"},{"begin":879,"end":907,"name":"PUSH [tag]","value":"28"},{"begin":879,"end":907,"name":"PUSH [tag]","value":"51"},{"begin":879,"end":907,"name":"JUMP","value":"[in]"},{"begin":289,"end":307,"name":"tag","value":"19"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"PUSH","value":"1"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"SLOAD"},{"begin":289,"end":307,"name":"PUSH","value":"40"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"MLOAD"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"PUSH","value":"2"},{"begin":289,"end":307,"name":"DUP5"},{"begin":289,"end":307,"name":"DUP7"},{"begin":289,"end":307,"name":"AND"},{"begin":289,"end":307,"name":"ISZERO"},{"begin":289,"end":307,"name":"PUSH","value":"100"},{"begin":289,"end":307,"name":"MUL"},{"begin":-1,"end":-1,"name":"PUSH","value":"0"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"SWAP5"},{"begin":289,"end":307,"name":"AND"},{"begin":289,"end":307,"name":"SWAP4"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"SWAP4"},{"begin":289,"end":307,"name":"DIV"},{"begin":289,"end":307,"name":"PUSH","value":"1F"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"DUP5"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"DIV"},{"begin":289,"end":307,"name":"DUP5"},{"begin":289,"end":307,"name":"MUL"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"DUP5"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"SWAP3"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"SWAP3"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"ISZERO"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"52"},{"begin":289,"end":307,"name":"JUMPI"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"PUSH","value":"1F"},{"begin":289,"end":307,"name":"LT"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"53"},{"begin":289,"end":307,"name":"JUMPI"},{"begin":289,"end":307,"name":"PUSH","value":"100"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"SLOAD"},{"begin":289,"end":307,"name":"DIV"},{"begin":289,"end":307,"name":"MUL"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"52"},{"begin":289,"end":307,"name":"JUMP"},{"begin":289,"end":307,"name":"tag","value":"53"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"PUSH","value":"0"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"PUSH","value":"0"},{"begin":289,"end":307,"name":"KECCAK256"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"tag","value":"54"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"SLOAD"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"MSTORE"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"PUSH","value":"1"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"PUSH","value":"20"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"DUP1"},{"begin":289,"end":307,"name":"DUP4"},{"begin":289,"end":307,"name":"GT"},{"begin":289,"end":307,"name":"PUSH [tag]","value":"54"},{"begin":289,"end":307,"name":"JUMPI"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"SWAP1"},{"begin":289,"end":307,"name":"SUB"},{"begin":289,"end":307,"name":"PUSH","value":"1F"},{"begin":289,"end":307,"name":"AND"},{"begin":289,"end":307,"name":"DUP3"},{"begin":289,"end":307,"name":"ADD"},{"begin":289,"end":307,"name":"SWAP2"},{"begin":289,"end":307,"name":"tag","value":"52"},{"begin":289,"end":307,"name":"JUMPDEST"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"POP"},{"begin":289,"end":307,"name":"DUP2"},{"begin":289,"end":307,"name":"JUMP","value":"[out]"},{"begin":1541,"end":1574,"name":"tag","value":"25"},{"begin":1541,"end":1574,"name":"JUMPDEST"},{"begin":1541,"end":1574,"name":"PUSH","value":"8"},{"begin":1541,"end":1574,"name":"SLOAD"},{"begin":1541,"end":1574,"name":"DUP2"},{"begin":1541,"end":1574,"name":"JUMP","value":"[out]"},{"begin":2161,"end":2184,"name":"tag","value":"27"},{"begin":2161,"end":2184,"name":"JUMPDEST"},{"begin":2161,"end":2184,"name":"PUSH","value":"D"},{"begin":2161,"end":2184,"name":"SLOAD"},{"begin":2161,"end":2184,"name":"DUP2"},{"begin":2161,"end":2184,"name":"JUMP","value":"[out]"},{"begin":985,"end":1020,"name":"tag","value":"29"},{"begin":985,"end":1020,"name":"JUMPDEST"},{"begin":985,"end":1020,"name":"PUSH","value":"4"},{"begin":985,"end":1020,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":985,"end":1020,"name":"AND"},{"begin":985,"end":1020,"name":"DUP2"},{"begin":985,"end":1020,"name":"JUMP","value":"[out]"},{"begin":475,"end":496,"name":"tag","value":"31"},{"begin":475,"end":496,"name":"JUMPDEST"},{"begin":475,"end":496,"name":"PUSH","value":"3"},{"begin":475,"end":496,"name":"SLOAD"},{"begin":475,"end":496,"name":"PUSH","value":"FF"},{"begin":475,"end":496,"name":"AND"},{"begin":475,"end":496,"name":"DUP2"},{"begin":475,"end":496,"name":"JUMP","value":"[out]"},{"begin":1935,"end":1959,"name":"tag","value":"33"},{"begin":1935,"end":1959,"name":"JUMPDEST"},{"begin":1935,"end":1959,"name":"PUSH","value":"B"},{"begin":1935,"end":1959,"name":"SLOAD"},{"begin":1935,"end":1959,"name":"DUP2"},{"begin":1935,"end":1959,"name":"JUMP","value":"[out]"},{"begin":1106,"end":1145,"name":"tag","value":"35"},{"begin":1106,"end":1145,"name":"JUMPDEST"},{"begin":1106,"end":1145,"name":"PUSH","value":"5"},{"begin":1106,"end":1145,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1106,"end":1145,"name":"AND"},{"begin":1106,"end":1145,"name":"DUP2"},{"begin":1106,"end":1145,"name":"JUMP","value":"[out]"},{"begin":1659,"end":1689,"name":"tag","value":"37"},{"begin":1659,"end":1689,"name":"JUMPDEST"},{"begin":1659,"end":1689,"name":"PUSH","value":"9"},{"begin":1659,"end":1689,"name":"SLOAD"},{"begin":1659,"end":1689,"name":"DUP2"},{"begin":1659,"end":1689,"name":"JUMP","value":"[out]"},{"begin":2060,"end":2085,"name":"tag","value":"39"},{"begin":2060,"end":2085,"name":"JUMPDEST"},{"begin":2060,"end":2085,"name":"PUSH","value":"C"},{"begin":2060,"end":2085,"name":"SLOAD"},{"begin":2060,"end":2085,"name":"DUP2"},{"begin":2060,"end":2085,"name":"JUMP","value":"[out]"},{"begin":380,"end":400,"name":"tag","value":"41"},{"begin":380,"end":400,"name":"JUMPDEST"},{"begin":380,"end":400,"name":"PUSH","value":"2"},{"begin":380,"end":400,"name":"DUP1"},{"begin":380,"end":400,"name":"SLOAD"},{"begin":380,"end":400,"name":"PUSH","value":"40"},{"begin":380,"end":400,"name":"DUP1"},{"begin":380,"end":400,"name":"MLOAD"},{"begin":380,"end":400,"name":"PUSH","value":"20"},{"begin":380,"end":400,"name":"PUSH","value":"1"},{"begin":380,"end":400,"name":"DUP5"},{"begin":380,"end":400,"name":"AND"},{"begin":380,"end":400,"name":"ISZERO"},{"begin":380,"end":400,"name":"PUSH","value":"100"},{"begin":380,"end":400,"name":"MUL"},{"begin":-1,"end":-1,"name":"PUSH","value":"0"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"SWAP1"},{"begin":380,"end":400,"name":"SWAP4"},{"begin":380,"end":400,"name":"AND"},{"begin":380,"end":400,"name":"DUP5"},{"begin":380,"end":400,"name":"SWAP1"},{"begin":380,"end":400,"name":"DIV"},{"begin":380,"end":400,"name":"PUSH","value":"1F"},{"begin":380,"end":400,"name":"DUP2"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"DUP5"},{"begin":380,"end":400,"name":"SWAP1"},{"begin":380,"end":400,"name":"DIV"},{"begin":380,"end":400,"name":"DUP5"},{"begin":380,"end":400,"name":"MUL"},{"begin":380,"end":400,"name":"DUP3"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"DUP5"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"SWAP1"},{"begin":380,"end":400,"name":"SWAP3"},{"begin":380,"end":400,"name":"MSTORE"},{"begin":380,"end":400,"name":"DUP2"},{"begin":380,"end":400,"name":"DUP2"},{"begin":380,"end":400,"name":"MSTORE"},{"begin":380,"end":400,"name":"SWAP3"},{"begin":380,"end":400,"name":"SWAP2"},{"begin":380,"end":400,"name":"DUP4"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"DUP3"},{"begin":380,"end":400,"name":"DUP3"},{"begin":380,"end":400,"name":"DUP1"},{"begin":380,"end":400,"name":"ISZERO"},{"begin":380,"end":400,"name":"PUSH [tag]","value":"52"},{"begin":380,"end":400,"name":"JUMPI"},{"begin":380,"end":400,"name":"DUP1"},{"begin":380,"end":400,"name":"PUSH","value":"1F"},{"begin":380,"end":400,"name":"LT"},{"begin":380,"end":400,"name":"PUSH [tag]","value":"53"},{"begin":380,"end":400,"name":"JUMPI"},{"begin":380,"end":400,"name":"PUSH","value":"100"},{"begin":380,"end":400,"name":"DUP1"},{"begin":380,"end":400,"name":"DUP4"},{"begin":380,"end":400,"name":"SLOAD"},{"begin":380,"end":400,"name":"DIV"},{"begin":380,"end":400,"name":"MUL"},{"begin":380,"end":400,"name":"DUP4"},{"begin":380,"end":400,"name":"MSTORE"},{"begin":380,"end":400,"name":"SWAP2"},{"begin":380,"end":400,"name":"PUSH","value":"20"},{"begin":380,"end":400,"name":"ADD"},{"begin":380,"end":400,"name":"SWAP2"},{"begin":380,"end":400,"name":"PUSH [tag]","value":"52"},{"begin":380,"end":400,"name":"JUMP"},{"begin":1805,"end":1828,"name":"tag","value":"47"},{"begin":1805,"end":1828,"name":"JUMPDEST"},{"begin":1805,"end":1828,"name":"PUSH","value":"A"},{"begin":1805,"end":1828,"name":"SLOAD"},{"begin":1805,"end":1828,"name":"DUP2"},{"begin":1805,"end":1828,"name":"JUMP","value":"[out]"},{"begin":1242,"end":1284,"name":"tag","value":"49"},{"begin":1242,"end":1284,"name":"JUMPDEST"},{"begin":1242,"end":1284,"name":"PUSH","value":"6"},{"begin":1242,"end":1284,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1242,"end":1284,"name":"AND"},{"begin":1242,"end":1284,"name":"DUP2"},{"begin":1242,"end":1284,"name":"JUMP","value":"[out]"},{"begin":879,"end":907,"name":"tag","value":"51"},{"begin":879,"end":907,"name":"JUMPDEST"},{"begin":879,"end":907,"name":"PUSH","value":"3"},{"begin":879,"end":907,"name":"SLOAD"},{"begin":879,"end":907,"name":"PUSH","value":"100"},{"begin":879,"end":907,"name":"SWAP1"},{"begin":879,"end":907,"name":"DIV"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":879,"end":907,"name":"AND"},{"begin":879,"end":907,"name":"DUP2"},{"begin":879,"end":907,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b5061037d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635fe3b5671161008c57806395d89b411161006657806395d89b41146101d5578063aa5af0fd146101dd578063f3fdb15a146101e5578063f851a440146101ed576100cf565b80635fe3b567146101bd5780636c540baf146101c55780638f840ddd146101cd576100cf565b806306fdde03146100d4578063173b99041461015157806318160ddd1461016b5780632678224714610173578063313ce5671461019757806347bd3718146101b5575b600080fd5b6100dc6101f5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610159610282565b60408051918252519081900360200190f35b610159610288565b61017b61028e565b604080516001600160a01b039092168252519081900360200190f35b61019f61029d565b6040805160ff9092168252519081900360200190f35b6101596102a6565b61017b6102ac565b6101596102bb565b6101596102c1565b6100dc6102c7565b61015961031f565b61017b610325565b61017b610334565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561027a5780601f1061024f5761010080835404028352916020019161027a565b820191906000526020600020905b81548152906001019060200180831161025d57829003601f168201915b505050505081565b60085481565b600d5481565b6004546001600160a01b031681565b60035460ff1681565b600b5481565b6005546001600160a01b031681565b60095481565b600c5481565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561027a5780601f1061024f5761010080835404028352916020019161027a565b600a5481565b6006546001600160a01b031681565b60035461010090046001600160a01b03168156fea265627a7a72315820ea34bc7d4cdba753a504985b2ce2ae84b9c0dcb2383ad6fc809229a298d4f88e64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37D DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5FE3B567 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xAA5AF0FD EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xF3FDB15A EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x1ED JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x5FE3B567 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6C540BAF EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x8F840DDD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x173B9904 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x47BD3718 EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x116 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x143 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x288 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x28E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x2AC JUMP JUMPDEST PUSH2 0x159 PUSH2 0x2BB JUMP JUMPDEST PUSH2 0x159 PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x31F JUMP JUMPDEST PUSH2 0x17B PUSH2 0x325 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x334 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 DUP5 DUP7 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x27A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x24F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x27A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x24F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27A JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xEA CALLVALUE 0xBC PUSH30 0x4CDBA753A504985B2CE2AE84B9C0DCB2383AD6FC809229A298D4F88E6473 PUSH16 0x6C634300051100320000000000000000 ","sourceMap":"98:2918:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;98:2918:1;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80635fe3b5671161008c57806395d89b411161006657806395d89b41146101d5578063aa5af0fd146101dd578063f3fdb15a146101e5578063f851a440146101ed576100cf565b80635fe3b567146101bd5780636c540baf146101c55780638f840ddd146101cd576100cf565b806306fdde03146100d4578063173b99041461015157806318160ddd1461016b5780632678224714610173578063313ce5671461019757806347bd3718146101b5575b600080fd5b6100dc6101f5565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101165781810151838201526020016100fe565b50505050905090810190601f1680156101435780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610159610282565b60408051918252519081900360200190f35b610159610288565b61017b61028e565b604080516001600160a01b039092168252519081900360200190f35b61019f61029d565b6040805160ff9092168252519081900360200190f35b6101596102a6565b61017b6102ac565b6101596102bb565b6101596102c1565b6100dc6102c7565b61015961031f565b61017b610325565b61017b610334565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561027a5780601f1061024f5761010080835404028352916020019161027a565b820191906000526020600020905b81548152906001019060200180831161025d57829003601f168201915b505050505081565b60085481565b600d5481565b6004546001600160a01b031681565b60035460ff1681565b600b5481565b6005546001600160a01b031681565b60095481565b600c5481565b6002805460408051602060018416156101000260001901909316849004601f8101849004840282018401909252818152929183018282801561027a5780601f1061024f5761010080835404028352916020019161027a565b600a5481565b6006546001600160a01b031681565b60035461010090046001600160a01b03168156fea265627a7a72315820ea34bc7d4cdba753a504985b2ce2ae84b9c0dcb2383ad6fc809229a298d4f88e64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5FE3B567 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0xAA5AF0FD EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xF3FDB15A EQ PUSH2 0x1E5 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x1ED JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x5FE3B567 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6C540BAF EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x8F840DDD EQ PUSH2 0x1CD JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x173B9904 EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x47BD3718 EQ PUSH2 0x1B5 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDC PUSH2 0x1F5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x116 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xFE JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x143 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x282 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x288 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x28E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19F PUSH2 0x29D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x159 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x2AC JUMP JUMPDEST PUSH2 0x159 PUSH2 0x2BB JUMP JUMPDEST PUSH2 0x159 PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0xDC PUSH2 0x2C7 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x31F JUMP JUMPDEST PUSH2 0x17B PUSH2 0x325 JUMP JUMPDEST PUSH2 0x17B PUSH2 0x334 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 DUP5 DUP7 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x27A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x24F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x25D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x27A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x24F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x27A JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xEA CALLVALUE 0xBC PUSH30 0x4CDBA753A504985B2CE2AE84B9C0DCB2383AD6FC809229A298D4F88E6473 PUSH16 0x6C634300051100320000000000000000 ","sourceMap":"98:2918:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;98:2918:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;289:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;289:18:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1541:33;;;:::i;:::-;;;;;;;;;;;;;;;;2161:23;;;:::i;985:35::-;;;:::i;:::-;;;;-1:-1:-1;;;;;985:35:1;;;;;;;;;;;;;;475:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1935:24;;;:::i;1106:39::-;;;:::i;1659:30::-;;;:::i;2060:25::-;;;:::i;380:20::-;;;:::i;1805:23::-;;;:::i;1242:42::-;;;:::i;879:28::-;;;:::i;289:18::-;;;;;;;;;;;;;;;-1:-1:-1;;289:18:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1541:33::-;;;;:::o;2161:23::-;;;;:::o;985:35::-;;;-1:-1:-1;;;;;985:35:1;;:::o;475:21::-;;;;;;:::o;1935:24::-;;;;:::o;1106:39::-;;;-1:-1:-1;;;;;1106:39:1;;:::o;1659:30::-;;;;:::o;2060:25::-;;;;:::o;380:20::-;;;;;;;;;;;;;;-1:-1:-1;;380:20:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1805:23;;;;:::o;1242:42::-;;;-1:-1:-1;;;;;1242:42:1;;:::o;879:28::-;;;;;;-1:-1:-1;;;;;879:28:1;;:::o","linkReferences":{}},"methodIdentifiers":{"accrualBlockNumber()":"6c540baf","admin()":"f851a440","borrowIndex()":"aa5af0fd","comptroller()":"5fe3b567","decimals()":"313ce567","interestRateModel()":"f3fdb15a","name()":"06fdde03","pendingAdmin()":"26782247","reserveFactorMantissa()":"173b9904","symbol()":"95d89b41","totalBorrows()":"47bd3718","totalReserves()":"8f840ddd","totalSupply()":"18160ddd"},"gasEstimates":{"creation":{"codeDepositCost":"178600","executionCost":"220","totalCost":"178820"},"external":{"accrualBlockNumber()":"1043","admin()":"1136","borrowIndex()":"1042","comptroller()":"1060","decimals()":"1102","interestRateModel()":"1103","name()":"infinite","pendingAdmin()":"1104","reserveFactorMantissa()":"1021","symbol()":"infinite","totalBorrows()":"1109","totalReserves()":"1065","totalSupply()":"1043"},"internal":{}}},"ewasm":{"wasm":""}}},"contracts/CarefulMath.sol":{"CarefulMath":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Compound\",\"methods\":{},\"title\":\"Careful Math\"},\"userdoc\":{\"methods\":{},\"notice\":\"Derived from OpenZeppelin's SafeMath library        https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\"}},\"settings\":{\"compilationTarget\":{\"contracts/CarefulMath.sol\":\"CarefulMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"}},\"version\":1}","userdoc":{"notice":"Derived from OpenZeppelin's SafeMath library        https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol"},"devdoc":{"author":"Compound","title":"Careful Math"},"evm":{"assembly":"    /* \"contracts/CarefulMath.sol\":243:2192  contract CarefulMath {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/CarefulMath.sol\":243:2192  contract CarefulMath {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/CarefulMath.sol\":243:2192  contract CarefulMath {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a7231582083e00a07913e63a061e65ecb6cff89b2daea8b1b8ffc40c9297ea31b192ddfd264736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":243,"end":2192,"name":"PUSH","value":"80"},{"begin":243,"end":2192,"name":"PUSH","value":"40"},{"begin":243,"end":2192,"name":"MSTORE"},{"begin":243,"end":2192,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":243,"end":2192,"name":"POP"},{"begin":243,"end":2192,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":243,"end":2192,"name":"DUP1"},{"begin":243,"end":2192,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":243,"end":2192,"name":"PUSH","value":"0"},{"begin":243,"end":2192,"name":"CODECOPY"},{"begin":243,"end":2192,"name":"PUSH","value":"0"},{"begin":243,"end":2192,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a7231582083e00a07913e63a061e65ecb6cff89b2daea8b1b8ffc40c9297ea31b192ddfd264736f6c63430005110032",".code":[{"begin":243,"end":2192,"name":"PUSH","value":"80"},{"begin":243,"end":2192,"name":"PUSH","value":"40"},{"begin":243,"end":2192,"name":"MSTORE"},{"begin":243,"end":2192,"name":"PUSH","value":"0"},{"begin":243,"end":2192,"name":"DUP1"},{"begin":243,"end":2192,"name":"REVERT"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582083e00a07913e63a061e65ecb6cff89b2daea8b1b8ffc40c9297ea31b192ddfd264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP4 0xE0 EXP SMOD SWAP2 RETURNDATACOPY PUSH4 0xA061E65E 0xCB PUSH13 0xFF89B2DAEA8B1B8FFC40C9297E LOG3 SHL NOT 0x2D 0xDF 0xD2 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"243:1949:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:1949:2;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052600080fdfea265627a7a7231582083e00a07913e63a061e65ecb6cff89b2daea8b1b8ffc40c9297ea31b192ddfd264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP4 0xE0 EXP SMOD SWAP2 RETURNDATACOPY PUSH4 0xA061E65E 0xCB PUSH13 0xFF89B2DAEA8B1B8FFC40C9297E LOG3 SHL NOT 0x2D 0xDF 0xD2 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"243:1949:2:-;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"12400","executionCost":"66","totalCost":"12466"},"external":{},"internal":{"addThenSubUInt(uint256,uint256,uint256)":"infinite","addUInt(uint256,uint256)":"infinite","divUInt(uint256,uint256)":"infinite","mulUInt(uint256,uint256)":"infinite","subUInt(uint256,uint256)":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/ComptrollerInterface.sol":{"ComptrollerInterface":{"abi":[{"type":"function","name":"borrowAllowed","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"borrowAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"borrowVerify","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"borrowAmount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"enterMarkets","inputs":[{"name":"cTokens","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"exitMarket","inputs":[{"name":"cToken","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"isComptroller","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"liquidateBorrowAllowed","inputs":[{"name":"cTokenBorrowed","type":"address","internalType":"address"},{"name":"cTokenCollateral","type":"address","internalType":"address"},{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"liquidateBorrowVerify","inputs":[{"name":"cTokenBorrowed","type":"address","internalType":"address"},{"name":"cTokenCollateral","type":"address","internalType":"address"},{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"},{"name":"seizeTokens","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"liquidateCalculateSeizeTokens","inputs":[{"name":"cTokenBorrowed","type":"address","internalType":"address"},{"name":"cTokenCollateral","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"},{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"mintAllowed","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"minter","type":"address","internalType":"address"},{"name":"mintAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"mintVerify","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"minter","type":"address","internalType":"address"},{"name":"mintAmount","type":"uint256","internalType":"uint256"},{"name":"mintTokens","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"redeemAllowed","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"redeemer","type":"address","internalType":"address"},{"name":"redeemTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"redeemVerify","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"redeemer","type":"address","internalType":"address"},{"name":"redeemAmount","type":"uint256","internalType":"uint256"},{"name":"redeemTokens","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"repayBorrowAllowed","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"payer","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"repayBorrowVerify","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"payer","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"repayAmount","type":"uint256","internalType":"uint256"},{"name":"borrowerIndex","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"seizeAllowed","inputs":[{"name":"cTokenCollateral","type":"address","internalType":"address"},{"name":"cTokenBorrowed","type":"address","internalType":"address"},{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"seizeTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"seizeVerify","inputs":[{"name":"cTokenCollateral","type":"address","internalType":"address"},{"name":"cTokenBorrowed","type":"address","internalType":"address"},{"name":"liquidator","type":"address","internalType":"address"},{"name":"borrower","type":"address","internalType":"address"},{"name":"seizeTokens","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferAllowed","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"transferTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferVerify","inputs":[{"name":"cToken","type":"address","internalType":"address"},{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"transferTokens","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isComptroller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"liquidateBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateCalculateSeizeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"mintAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"mintVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeemVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowerIndex\",\"type\":\"uint256\"}],\"name\":\"repayBorrowVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrowed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seizeVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transferTokens\",\"type\":\"uint256\"}],\"name\":\"transferVerify\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"enterMarkets(address[])\":{\"notice\":\"* Assets You Are In **\"},\"liquidateCalculateSeizeTokens(address,address,uint256)\":{\"notice\":\"* Liquidity/Liquidation Calculations **\"},\"mintAllowed(address,address,uint256)\":{\"notice\":\"* Policy Hooks **\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerInterface.sol\":\"ComptrollerInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"}},\"version\":1}","userdoc":{"methods":{"enterMarkets(address[])":{"notice":"* Assets You Are In **"},"liquidateCalculateSeizeTokens(address,address,uint256)":{"notice":"* Liquidity/Liquidation Calculations **"},"mintAllowed(address,address,uint256)":{"notice":"* Policy Hooks **"}}},"devdoc":{},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"borrowAllowed(address,address,uint256)":"da3d454c","borrowVerify(address,address,uint256)":"5c778605","enterMarkets(address[])":"c2998238","exitMarket(address)":"ede4edd0","isComptroller()":"007e3dd2","liquidateBorrowAllowed(address,address,address,address,uint256)":"5fc7e71e","liquidateBorrowVerify(address,address,address,address,uint256,uint256)":"47ef3b3b","liquidateCalculateSeizeTokens(address,address,uint256)":"c488847b","mintAllowed(address,address,uint256)":"4ef4c3e1","mintVerify(address,address,uint256,uint256)":"41c728b9","redeemAllowed(address,address,uint256)":"eabe7d91","redeemVerify(address,address,uint256,uint256)":"51dff989","repayBorrowAllowed(address,address,address,uint256)":"24008a62","repayBorrowVerify(address,address,address,uint256,uint256)":"1ededc91","seizeAllowed(address,address,address,address,uint256)":"d02f7351","seizeVerify(address,address,address,address,uint256)":"6d35bf91","transferAllowed(address,address,address,uint256)":"bdcdc258","transferVerify(address,address,address,uint256)":"6a56947e"}},"ewasm":{"wasm":""}}},"contracts/ComptrollerStorage.sol":{"ComptrollerV1Storage":{"abi":[{"type":"function","name":"accountAssets","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"contract CToken"}],"stateMutability":"view"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"closeFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"comptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"liquidationIncentiveMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"maxAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract PriceOracle"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingComptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerStorage.sol\":\"ComptrollerV1Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\",\"keccak256\":\"0x4cdd6e2b3db0368fe5d6cd84e0df65131e019170cd4bfbf5c83d067253786929\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":4363,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":4365,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"pendingAdmin","offset":0,"slot":"1","type":"t_address"},{"astId":4367,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"comptrollerImplementation","offset":0,"slot":"2","type":"t_address"},{"astId":4369,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"pendingComptrollerImplementation","offset":0,"slot":"3","type":"t_address"},{"astId":4374,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"oracle","offset":0,"slot":"4","type":"t_contract(PriceOracle)6080"},{"astId":4376,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"closeFactorMantissa","offset":0,"slot":"5","type":"t_uint256"},{"astId":4378,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"liquidationIncentiveMantissa","offset":0,"slot":"6","type":"t_uint256"},{"astId":4380,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"maxAssets","offset":0,"slot":"7","type":"t_uint256"},{"astId":4385,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV1Storage","label":"accountAssets","offset":0,"slot":"8","type":"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_contract(CToken)3504)dyn_storage":{"encoding":"dynamic_array","label":"contract CToken[]","numberOfBytes":"32","base":"t_contract(CToken)3504"},"t_contract(CToken)3504":{"encoding":"inplace","label":"contract CToken","numberOfBytes":"20"},"t_contract(PriceOracle)6080":{"encoding":"inplace","label":"contract PriceOracle","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => contract CToken[])","numberOfBytes":"32","value":"t_array(t_contract(CToken)3504)dyn_storage"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"assembly":"    /* \"contracts/ComptrollerStorage.sol\":521:1293  contract ComptrollerV1Storage is UnitrollerAdminStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ComptrollerStorage.sol\":521:1293  contract ComptrollerV1Storage is UnitrollerAdminStorage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ComptrollerStorage.sol\":521:1293  contract ComptrollerV1Storage is UnitrollerAdminStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/ComptrollerStorage.sol\":521:1293  contract ComptrollerV1Storage is UnitrollerAdminStorage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xbb82aa5e\n      gt\n      tag_12\n      jumpi\n      dup1\n      0xbb82aa5e\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xdce15449\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xdcfbc0c7\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xe8755446\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_12:\n      dup1\n      0x26782247\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x4ada90af\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x7dc0d1d0\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x94b2294b\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_3:\n      tag_13\n      tag_14\n      jump\t// in\n    tag_13:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_4:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_5:\n      tag_13\n      tag_18\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_6:\n      tag_15\n      tag_20\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_7:\n      tag_13\n      tag_22\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_8:\n      tag_13\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_24:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_25\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_9:\n      tag_13\n      tag_27\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_10:\n      tag_15\n      tag_29\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_11:\n      tag_13\n      tag_31\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_14:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_16:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_18:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_20:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_22:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_25:\n      mstore(0x20, 0x08)\n      dup2\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_32\n      jumpi\n      invalid\n    tag_32:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n      pop\n      dup3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_27:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_29:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_31:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158209fe2dff0035e8720b39173696ec9b8f87e44b72b04b3db90d5d0674656930dc764736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":521,"end":1293,"name":"PUSH","value":"80"},{"begin":521,"end":1293,"name":"PUSH","value":"40"},{"begin":521,"end":1293,"name":"MSTORE"},{"begin":521,"end":1293,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":521,"end":1293,"name":"POP"},{"begin":521,"end":1293,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":521,"end":1293,"name":"PUSH","value":"0"},{"begin":521,"end":1293,"name":"CODECOPY"},{"begin":521,"end":1293,"name":"PUSH","value":"0"},{"begin":521,"end":1293,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a723158209fe2dff0035e8720b39173696ec9b8f87e44b72b04b3db90d5d0674656930dc764736f6c63430005110032",".code":[{"begin":521,"end":1293,"name":"PUSH","value":"80"},{"begin":521,"end":1293,"name":"PUSH","value":"40"},{"begin":521,"end":1293,"name":"MSTORE"},{"begin":521,"end":1293,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":521,"end":1293,"name":"POP"},{"begin":521,"end":1293,"name":"PUSH","value":"4"},{"begin":521,"end":1293,"name":"CALLDATASIZE"},{"begin":521,"end":1293,"name":"LT"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"2"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"PUSH","value":"0"},{"begin":521,"end":1293,"name":"CALLDATALOAD"},{"begin":521,"end":1293,"name":"PUSH","value":"E0"},{"begin":521,"end":1293,"name":"SHR"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"BB82AA5E"},{"begin":521,"end":1293,"name":"GT"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"12"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"BB82AA5E"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"7"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"DCE15449"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"8"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"DCFBC0C7"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"9"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"E8755446"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"10"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"F851A440"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"11"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"2"},{"begin":521,"end":1293,"name":"JUMP"},{"begin":521,"end":1293,"name":"tag","value":"12"},{"begin":521,"end":1293,"name":"JUMPDEST"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"26782247"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"3"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"4ADA90AF"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"4"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"7DC0D1D0"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"5"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"PUSH","value":"94B2294B"},{"begin":521,"end":1293,"name":"EQ"},{"begin":521,"end":1293,"name":"PUSH [tag]","value":"6"},{"begin":521,"end":1293,"name":"JUMPI"},{"begin":521,"end":1293,"name":"tag","value":"2"},{"begin":521,"end":1293,"name":"JUMPDEST"},{"begin":521,"end":1293,"name":"PUSH","value":"0"},{"begin":521,"end":1293,"name":"DUP1"},{"begin":521,"end":1293,"name":"REVERT"},{"begin":273,"end":300,"name":"tag","value":"3"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"13"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"14"},{"begin":273,"end":300,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"13"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"40"},{"begin":273,"end":300,"name":"DUP1"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SWAP3"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP3"},{"begin":273,"end":300,"name":"MSTORE"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SUB"},{"begin":273,"end":300,"name":"PUSH","value":"20"},{"begin":273,"end":300,"name":"ADD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"RETURN"},{"begin":952,"end":992,"name":"tag","value":"4"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"15"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"16"},{"begin":952,"end":992,"name":"JUMP","value":"[in]"},{"begin":952,"end":992,"name":"tag","value":"15"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH","value":"40"},{"begin":952,"end":992,"name":"DUP1"},{"begin":952,"end":992,"name":"MLOAD"},{"begin":952,"end":992,"name":"SWAP2"},{"begin":952,"end":992,"name":"DUP3"},{"begin":952,"end":992,"name":"MSTORE"},{"begin":952,"end":992,"name":"MLOAD"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"DUP2"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"SUB"},{"begin":952,"end":992,"name":"PUSH","value":"20"},{"begin":952,"end":992,"name":"ADD"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"RETURN"},{"begin":663,"end":688,"name":"tag","value":"5"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"13"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"18"},{"begin":663,"end":688,"name":"JUMP","value":"[in]"},{"begin":1117,"end":1138,"name":"tag","value":"6"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"15"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"20"},{"begin":1117,"end":1138,"name":"JUMP","value":"[in]"},{"begin":364,"end":404,"name":"tag","value":"7"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"13"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"22"},{"begin":364,"end":404,"name":"JUMP","value":"[in]"},{"begin":1240,"end":1289,"name":"tag","value":"8"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"13"},{"begin":1240,"end":1289,"name":"PUSH","value":"4"},{"begin":1240,"end":1289,"name":"DUP1"},{"begin":1240,"end":1289,"name":"CALLDATASIZE"},{"begin":1240,"end":1289,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"40"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"24"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"24"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"25"},{"begin":1240,"end":1289,"name":"JUMP","value":"[in]"},{"begin":469,"end":516,"name":"tag","value":"9"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"13"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"27"},{"begin":469,"end":516,"name":"JUMP","value":"[in]"},{"begin":805,"end":836,"name":"tag","value":"10"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"15"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"29"},{"begin":805,"end":836,"name":"JUMP","value":"[in]"},{"begin":177,"end":197,"name":"tag","value":"11"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"13"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"31"},{"begin":177,"end":197,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"14"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"1"},{"begin":273,"end":300,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"JUMP","value":"[out]"},{"begin":952,"end":992,"name":"tag","value":"16"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH","value":"6"},{"begin":952,"end":992,"name":"SLOAD"},{"begin":952,"end":992,"name":"DUP2"},{"begin":952,"end":992,"name":"JUMP","value":"[out]"},{"begin":663,"end":688,"name":"tag","value":"18"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH","value":"4"},{"begin":663,"end":688,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":663,"end":688,"name":"AND"},{"begin":663,"end":688,"name":"DUP2"},{"begin":663,"end":688,"name":"JUMP","value":"[out]"},{"begin":1117,"end":1138,"name":"tag","value":"20"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH","value":"7"},{"begin":1117,"end":1138,"name":"SLOAD"},{"begin":1117,"end":1138,"name":"DUP2"},{"begin":1117,"end":1138,"name":"JUMP","value":"[out]"},{"begin":364,"end":404,"name":"tag","value":"22"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH","value":"2"},{"begin":364,"end":404,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":364,"end":404,"name":"AND"},{"begin":364,"end":404,"name":"DUP2"},{"begin":364,"end":404,"name":"JUMP","value":"[out]"},{"begin":1240,"end":1289,"name":"tag","value":"25"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"8"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"40"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"LT"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"32"},{"begin":1240,"end":1289,"name":"JUMPI"},{"begin":1240,"end":1289,"name":"INVALID"},{"begin":1240,"end":1289,"name":"tag","value":"32"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"JUMP","value":"[out]"},{"begin":469,"end":516,"name":"tag","value":"27"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH","value":"3"},{"begin":469,"end":516,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":469,"end":516,"name":"AND"},{"begin":469,"end":516,"name":"DUP2"},{"begin":469,"end":516,"name":"JUMP","value":"[out]"},{"begin":805,"end":836,"name":"tag","value":"29"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH","value":"5"},{"begin":805,"end":836,"name":"SLOAD"},{"begin":805,"end":836,"name":"DUP2"},{"begin":805,"end":836,"name":"JUMP","value":"[out]"},{"begin":177,"end":197,"name":"tag","value":"31"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH","value":"0"},{"begin":177,"end":197,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":177,"end":197,"name":"AND"},{"begin":177,"end":197,"name":"DUP2"},{"begin":177,"end":197,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b506101f9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063bb82aa5e11610066578063bb82aa5e146100e6578063dce15449146100ee578063dcfbc0c71461011a578063e875544614610122578063f851a4401461012a57610093565b806326782247146100985780634ada90af146100bc5780637dc0d1d0146100d657806394b2294b146100de575b600080fd5b6100a0610132565b604080516001600160a01b039092168252519081900360200190f35b6100c4610141565b60408051918252519081900360200190f35b6100a0610147565b6100c4610156565b6100a061015c565b6100a06004803603604081101561010457600080fd5b506001600160a01b03813516906020013561016b565b6100a06101a0565b6100c46101af565b6100a06101b5565b6001546001600160a01b031681565b60065481565b6004546001600160a01b031681565b60075481565b6002546001600160a01b031681565b6008602052816000526040600020818154811061018457fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60055481565b6000546001600160a01b03168156fea265627a7a723158209fe2dff0035e8720b39173696ec9b8f87e44b72b04b3db90d5d0674656930dc764736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F9 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB82AA5E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x12A JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC4 PUSH2 0x141 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0x147 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x156 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x15C JUMP JUMPDEST PUSH2 0xA0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x16B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x1A0 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x1AF JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x184 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP16 0xE2 0xDF CREATE SUB 0x5E DUP8 KECCAK256 0xB3 SWAP2 PUSH20 0x696EC9B8F87E44B72B04B3DB90D5D0674656930D 0xC7 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"521:772:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;521:772:4;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100935760003560e01c8063bb82aa5e11610066578063bb82aa5e146100e6578063dce15449146100ee578063dcfbc0c71461011a578063e875544614610122578063f851a4401461012a57610093565b806326782247146100985780634ada90af146100bc5780637dc0d1d0146100d657806394b2294b146100de575b600080fd5b6100a0610132565b604080516001600160a01b039092168252519081900360200190f35b6100c4610141565b60408051918252519081900360200190f35b6100a0610147565b6100c4610156565b6100a061015c565b6100a06004803603604081101561010457600080fd5b506001600160a01b03813516906020013561016b565b6100a06101a0565b6100c46101af565b6100a06101b5565b6001546001600160a01b031681565b60065481565b6004546001600160a01b031681565b60075481565b6002546001600160a01b031681565b6008602052816000526040600020818154811061018457fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b60055481565b6000546001600160a01b03168156fea265627a7a723158209fe2dff0035e8720b39173696ec9b8f87e44b72b04b3db90d5d0674656930dc764736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x93 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBB82AA5E GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0xEE JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x12A JUMPI PUSH2 0x93 JUMP JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0x98 JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0xD6 JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x132 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC4 PUSH2 0x141 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0x147 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x156 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x15C JUMP JUMPDEST PUSH2 0xA0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x16B JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x1A0 JUMP JUMPDEST PUSH2 0xC4 PUSH2 0x1AF JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x184 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SWAP16 0xE2 0xDF CREATE SUB 0x5E DUP8 KECCAK256 0xB3 SWAP2 PUSH20 0x696EC9B8F87E44B72B04B3DB90D5D0674656930D 0xC7 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"521:772:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;521:772:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;273:27;;;:::i;:::-;;;;-1:-1:-1;;;;;273:27:4;;;;;;;;;;;;;;952:40;;;:::i;:::-;;;;;;;;;;;;;;;;663:25;;;:::i;1117:21::-;;;:::i;364:40::-;;;:::i;1240:49::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1240:49:4;;;;;;;;:::i;469:47::-;;;:::i;805:31::-;;;:::i;177:20::-;;;:::i;273:27::-;;;-1:-1:-1;;;;;273:27:4;;:::o;952:40::-;;;;:::o;663:25::-;;;-1:-1:-1;;;;;663:25:4;;:::o;1117:21::-;;;;:::o;364:40::-;;;-1:-1:-1;;;;;364:40:4;;:::o;1240:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1240:49:4;;-1:-1:-1;1240:49:4;;-1:-1:-1;1240:49:4:o;469:47::-;;;-1:-1:-1;;;;;469:47:4;;:::o;805:31::-;;;;:::o;177:20::-;;;-1:-1:-1;;;;;177:20:4;;:::o","linkReferences":{}},"methodIdentifiers":{"accountAssets(address,uint256)":"dce15449","admin()":"f851a440","closeFactorMantissa()":"e8755446","comptrollerImplementation()":"bb82aa5e","liquidationIncentiveMantissa()":"4ada90af","maxAssets()":"94b2294b","oracle()":"7dc0d1d0","pendingAdmin()":"26782247","pendingComptrollerImplementation()":"dcfbc0c7"},"gasEstimates":{"creation":{"codeDepositCost":"101000","executionCost":"147","totalCost":"101147"},"external":{"accountAssets(address,uint256)":"2093","admin()":"1125","closeFactorMantissa()":"1064","comptrollerImplementation()":"1037","liquidationIncentiveMantissa()":"1021","maxAssets()":"1065","oracle()":"1082","pendingAdmin()":"1038","pendingComptrollerImplementation()":"1081"},"internal":{}}},"ewasm":{"wasm":""}},"ComptrollerV2Storage":{"abi":[{"type":"function","name":"_borrowGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"_mintGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"accountAssets","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"contract CToken"}],"stateMutability":"view"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"borrowGuardianPaused","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"closeFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"comptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"liquidationIncentiveMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"markets","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"isListed","type":"bool","internalType":"bool"},{"name":"collateralFactorMantissa","type":"uint256","internalType":"uint256"},{"name":"isComped","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"maxAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"mintGuardianPaused","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract PriceOracle"}],"stateMutability":"view"},{"type":"function","name":"pauseGuardian","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingComptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"seizeGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"transferGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerStorage.sol\":\"ComptrollerV2Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\",\"keccak256\":\"0x4cdd6e2b3db0368fe5d6cd84e0df65131e019170cd4bfbf5c83d067253786929\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":4363,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":4365,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"pendingAdmin","offset":0,"slot":"1","type":"t_address"},{"astId":4367,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"comptrollerImplementation","offset":0,"slot":"2","type":"t_address"},{"astId":4369,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"pendingComptrollerImplementation","offset":0,"slot":"3","type":"t_address"},{"astId":4374,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"oracle","offset":0,"slot":"4","type":"t_contract(PriceOracle)6080"},{"astId":4376,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"closeFactorMantissa","offset":0,"slot":"5","type":"t_uint256"},{"astId":4378,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"liquidationIncentiveMantissa","offset":0,"slot":"6","type":"t_uint256"},{"astId":4380,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"maxAssets","offset":0,"slot":"7","type":"t_uint256"},{"astId":4385,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"accountAssets","offset":0,"slot":"8","type":"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)"},{"astId":4403,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"markets","offset":0,"slot":"9","type":"t_mapping(t_address,t_struct(Market)4399_storage)"},{"astId":4405,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"pauseGuardian","offset":0,"slot":"10","type":"t_address"},{"astId":4407,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"_mintGuardianPaused","offset":20,"slot":"10","type":"t_bool"},{"astId":4409,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"_borrowGuardianPaused","offset":21,"slot":"10","type":"t_bool"},{"astId":4411,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"transferGuardianPaused","offset":22,"slot":"10","type":"t_bool"},{"astId":4413,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"seizeGuardianPaused","offset":23,"slot":"10","type":"t_bool"},{"astId":4417,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"mintGuardianPaused","offset":0,"slot":"11","type":"t_mapping(t_address,t_bool)"},{"astId":4421,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"borrowGuardianPaused","offset":0,"slot":"12","type":"t_mapping(t_address,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_contract(CToken)3504)dyn_storage":{"encoding":"dynamic_array","label":"contract CToken[]","numberOfBytes":"32","base":"t_contract(CToken)3504"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(CToken)3504":{"encoding":"inplace","label":"contract CToken","numberOfBytes":"20"},"t_contract(PriceOracle)6080":{"encoding":"inplace","label":"contract PriceOracle","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => contract CToken[])","numberOfBytes":"32","value":"t_array(t_contract(CToken)3504)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(Market)4399_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ComptrollerV2Storage.Market)","numberOfBytes":"32","value":"t_struct(Market)4399_storage"},"t_struct(Market)4399_storage":{"encoding":"inplace","label":"struct ComptrollerV2Storage.Market","numberOfBytes":"128","members":[{"astId":4390,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"isListed","offset":0,"slot":"0","type":"t_bool"},{"astId":4392,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"collateralFactorMantissa","offset":0,"slot":"1","type":"t_uint256"},{"astId":4396,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"accountMembership","offset":0,"slot":"2","type":"t_mapping(t_address,t_bool)"},{"astId":4398,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV2Storage","label":"isComped","offset":0,"slot":"3","type":"t_bool"}]},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"assembly":"    /* \"contracts/ComptrollerStorage.sol\":1295:2724  contract ComptrollerV2Storage is ComptrollerV1Storage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ComptrollerStorage.sol\":1295:2724  contract ComptrollerV2Storage is ComptrollerV1Storage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ComptrollerStorage.sol\":1295:2724  contract ComptrollerV2Storage is ComptrollerV1Storage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/ComptrollerStorage.sol\":1295:2724  contract ComptrollerV2Storage is ComptrollerV1Storage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8e8f294b\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xdce15449\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xdce15449\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xdcfbc0c7\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xe6653f3d\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xe8755446\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0x8e8f294b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x94b2294b\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xac0b0bb7\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xbb82aa5e\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x6d154ea5\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x6d154ea5\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x731f0c2b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x7dc0d1d0\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x87f76303\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x24a3d622\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x26782247\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3c94786f\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x4ada90af\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ComptrollerStorage.sol\":2426:2454  address public pauseGuardian */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_4:\n      tag_23\n      tag_26\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2460:2491  bool public _mintGuardianPaused */\n    tag_5:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_6:\n      tag_29\n      tag_30\n      jump\t// in\n    tag_29:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n    tag_7:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_32\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_32:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_33\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n    tag_8:\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_35:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_36\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_9:\n      tag_23\n      tag_38\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2536:2570  bool public transferGuardianPaused */\n    tag_10:\n      tag_27\n      tag_40\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n    tag_11:\n      tag_41\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_42\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_42:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_43\n      jump\t// in\n    tag_41:\n      0x40\n      dup1\n      mload\n      swap4\n      iszero\n      iszero\n      dup5\n      mstore\n      0x20\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      iszero\n      iszero\n      dup3\n      dup3\n      add\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_12:\n      tag_29\n      tag_45\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2576:2607  bool public seizeGuardianPaused */\n    tag_13:\n      tag_27\n      tag_47\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_14:\n      tag_23\n      tag_49\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_15:\n      tag_23\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_51\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_51:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_52\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_16:\n      tag_23\n      tag_54\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2497:2530  bool public _borrowGuardianPaused */\n    tag_17:\n      tag_27\n      tag_56\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_18:\n      tag_29\n      tag_58\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_19:\n      tag_23\n      tag_60\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2426:2454  address public pauseGuardian */\n    tag_24:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x0a))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_26:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2460:2491  bool public _mintGuardianPaused */\n    tag_28:\n      sload(0x0a)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_30:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n    tag_33:\n      mstore(0x20, 0x0c)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n    tag_36:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_38:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2536:2570  bool public transferGuardianPaused */\n    tag_40:\n      sload(0x0a)\n      shl(0xb0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n    tag_43:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x03\n      swap1\n      swap3\n      add\n      sload\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n      swap2\n      and\n      dup4\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_45:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2576:2607  bool public seizeGuardianPaused */\n    tag_47:\n      sload(0x0a)\n      shl(0xb8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_49:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_52:\n      mstore(0x20, 0x08)\n      dup2\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_61\n      jumpi\n      invalid\n    tag_61:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n      pop\n      dup3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_54:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2497:2530  bool public _borrowGuardianPaused */\n    tag_56:\n      sload(0x0a)\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_58:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_60:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a72315820bcbc45482f088929b015260fbfb6397d10b9d77c890af063c5b9394adbe515be64736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":1295,"end":2724,"name":"PUSH","value":"80"},{"begin":1295,"end":2724,"name":"PUSH","value":"40"},{"begin":1295,"end":2724,"name":"MSTORE"},{"begin":1295,"end":2724,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"POP"},{"begin":1295,"end":2724,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1295,"end":2724,"name":"PUSH","value":"0"},{"begin":1295,"end":2724,"name":"CODECOPY"},{"begin":1295,"end":2724,"name":"PUSH","value":"0"},{"begin":1295,"end":2724,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a72315820bcbc45482f088929b015260fbfb6397d10b9d77c890af063c5b9394adbe515be64736f6c63430005110032",".code":[{"begin":1295,"end":2724,"name":"PUSH","value":"80"},{"begin":1295,"end":2724,"name":"PUSH","value":"40"},{"begin":1295,"end":2724,"name":"MSTORE"},{"begin":1295,"end":2724,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"POP"},{"begin":1295,"end":2724,"name":"PUSH","value":"4"},{"begin":1295,"end":2724,"name":"CALLDATASIZE"},{"begin":1295,"end":2724,"name":"LT"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"2"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"PUSH","value":"0"},{"begin":1295,"end":2724,"name":"CALLDATALOAD"},{"begin":1295,"end":2724,"name":"PUSH","value":"E0"},{"begin":1295,"end":2724,"name":"SHR"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"8E8F294B"},{"begin":1295,"end":2724,"name":"GT"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"20"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"DCE15449"},{"begin":1295,"end":2724,"name":"GT"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"21"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"DCE15449"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"15"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"DCFBC0C7"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"16"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"E6653F3D"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"17"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"E8755446"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"18"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"F851A440"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"19"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"2"},{"begin":1295,"end":2724,"name":"JUMP"},{"begin":1295,"end":2724,"name":"tag","value":"21"},{"begin":1295,"end":2724,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"8E8F294B"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"11"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"94B2294B"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"12"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"AC0B0BB7"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"13"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"BB82AA5E"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"14"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"2"},{"begin":1295,"end":2724,"name":"JUMP"},{"begin":1295,"end":2724,"name":"tag","value":"20"},{"begin":1295,"end":2724,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"6D154EA5"},{"begin":1295,"end":2724,"name":"GT"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"22"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"6D154EA5"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"7"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"731F0C2B"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"8"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"7DC0D1D0"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"9"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"87F76303"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"10"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"2"},{"begin":1295,"end":2724,"name":"JUMP"},{"begin":1295,"end":2724,"name":"tag","value":"22"},{"begin":1295,"end":2724,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"24A3D622"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"3"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"26782247"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"4"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"3C94786F"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"5"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"PUSH","value":"4ADA90AF"},{"begin":1295,"end":2724,"name":"EQ"},{"begin":1295,"end":2724,"name":"PUSH [tag]","value":"6"},{"begin":1295,"end":2724,"name":"JUMPI"},{"begin":1295,"end":2724,"name":"tag","value":"2"},{"begin":1295,"end":2724,"name":"JUMPDEST"},{"begin":1295,"end":2724,"name":"PUSH","value":"0"},{"begin":1295,"end":2724,"name":"DUP1"},{"begin":1295,"end":2724,"name":"REVERT"},{"begin":2426,"end":2454,"name":"tag","value":"3"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH [tag]","value":"23"},{"begin":2426,"end":2454,"name":"PUSH [tag]","value":"24"},{"begin":2426,"end":2454,"name":"JUMP","value":"[in]"},{"begin":2426,"end":2454,"name":"tag","value":"23"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH","value":"40"},{"begin":2426,"end":2454,"name":"DUP1"},{"begin":2426,"end":2454,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"SWAP3"},{"begin":2426,"end":2454,"name":"AND"},{"begin":2426,"end":2454,"name":"DUP3"},{"begin":2426,"end":2454,"name":"MSTORE"},{"begin":2426,"end":2454,"name":"MLOAD"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"DUP2"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"SUB"},{"begin":2426,"end":2454,"name":"PUSH","value":"20"},{"begin":2426,"end":2454,"name":"ADD"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"RETURN"},{"begin":273,"end":300,"name":"tag","value":"4"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"23"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"26"},{"begin":273,"end":300,"name":"JUMP","value":"[in]"},{"begin":2460,"end":2491,"name":"tag","value":"5"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH [tag]","value":"27"},{"begin":2460,"end":2491,"name":"PUSH [tag]","value":"28"},{"begin":2460,"end":2491,"name":"JUMP","value":"[in]"},{"begin":2460,"end":2491,"name":"tag","value":"27"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH","value":"40"},{"begin":2460,"end":2491,"name":"DUP1"},{"begin":2460,"end":2491,"name":"MLOAD"},{"begin":2460,"end":2491,"name":"SWAP2"},{"begin":2460,"end":2491,"name":"ISZERO"},{"begin":2460,"end":2491,"name":"ISZERO"},{"begin":2460,"end":2491,"name":"DUP3"},{"begin":2460,"end":2491,"name":"MSTORE"},{"begin":2460,"end":2491,"name":"MLOAD"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"DUP2"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"SUB"},{"begin":2460,"end":2491,"name":"PUSH","value":"20"},{"begin":2460,"end":2491,"name":"ADD"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"RETURN"},{"begin":952,"end":992,"name":"tag","value":"6"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"29"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"30"},{"begin":952,"end":992,"name":"JUMP","value":"[in]"},{"begin":952,"end":992,"name":"tag","value":"29"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH","value":"40"},{"begin":952,"end":992,"name":"DUP1"},{"begin":952,"end":992,"name":"MLOAD"},{"begin":952,"end":992,"name":"SWAP2"},{"begin":952,"end":992,"name":"DUP3"},{"begin":952,"end":992,"name":"MSTORE"},{"begin":952,"end":992,"name":"MLOAD"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"DUP2"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"SUB"},{"begin":952,"end":992,"name":"PUSH","value":"20"},{"begin":952,"end":992,"name":"ADD"},{"begin":952,"end":992,"name":"SWAP1"},{"begin":952,"end":992,"name":"RETURN"},{"begin":2669,"end":2721,"name":"tag","value":"7"},{"begin":2669,"end":2721,"name":"JUMPDEST"},{"begin":2669,"end":2721,"name":"PUSH [tag]","value":"27"},{"begin":2669,"end":2721,"name":"PUSH","value":"4"},{"begin":2669,"end":2721,"name":"DUP1"},{"begin":2669,"end":2721,"name":"CALLDATASIZE"},{"begin":2669,"end":2721,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"32"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"32"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2669,"end":2721,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2669,"end":2721,"name":"AND"},{"begin":2669,"end":2721,"name":"PUSH [tag]","value":"33"},{"begin":2669,"end":2721,"name":"JUMP","value":"[in]"},{"begin":2613,"end":2663,"name":"tag","value":"8"},{"begin":2613,"end":2663,"name":"JUMPDEST"},{"begin":2613,"end":2663,"name":"PUSH [tag]","value":"27"},{"begin":2613,"end":2663,"name":"PUSH","value":"4"},{"begin":2613,"end":2663,"name":"DUP1"},{"begin":2613,"end":2663,"name":"CALLDATASIZE"},{"begin":2613,"end":2663,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"35"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"35"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2613,"end":2663,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2613,"end":2663,"name":"AND"},{"begin":2613,"end":2663,"name":"PUSH [tag]","value":"36"},{"begin":2613,"end":2663,"name":"JUMP","value":"[in]"},{"begin":663,"end":688,"name":"tag","value":"9"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"23"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"38"},{"begin":663,"end":688,"name":"JUMP","value":"[in]"},{"begin":2536,"end":2570,"name":"tag","value":"10"},{"begin":2536,"end":2570,"name":"JUMPDEST"},{"begin":2536,"end":2570,"name":"PUSH [tag]","value":"27"},{"begin":2536,"end":2570,"name":"PUSH [tag]","value":"40"},{"begin":2536,"end":2570,"name":"JUMP","value":"[in]"},{"begin":2114,"end":2155,"name":"tag","value":"11"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH [tag]","value":"41"},{"begin":2114,"end":2155,"name":"PUSH","value":"4"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"CALLDATASIZE"},{"begin":2114,"end":2155,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"42"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"42"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2114,"end":2155,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"PUSH [tag]","value":"43"},{"begin":2114,"end":2155,"name":"JUMP","value":"[in]"},{"begin":2114,"end":2155,"name":"tag","value":"41"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH","value":"40"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"MLOAD"},{"begin":2114,"end":2155,"name":"SWAP4"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"DUP5"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"20"},{"begin":2114,"end":2155,"name":"DUP5"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"MLOAD"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"DUP2"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SUB"},{"begin":2114,"end":2155,"name":"PUSH","value":"60"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"RETURN"},{"begin":1117,"end":1138,"name":"tag","value":"12"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"29"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"45"},{"begin":1117,"end":1138,"name":"JUMP","value":"[in]"},{"begin":2576,"end":2607,"name":"tag","value":"13"},{"begin":2576,"end":2607,"name":"JUMPDEST"},{"begin":2576,"end":2607,"name":"PUSH [tag]","value":"27"},{"begin":2576,"end":2607,"name":"PUSH [tag]","value":"47"},{"begin":2576,"end":2607,"name":"JUMP","value":"[in]"},{"begin":364,"end":404,"name":"tag","value":"14"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"23"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"49"},{"begin":364,"end":404,"name":"JUMP","value":"[in]"},{"begin":1240,"end":1289,"name":"tag","value":"15"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"23"},{"begin":1240,"end":1289,"name":"PUSH","value":"4"},{"begin":1240,"end":1289,"name":"DUP1"},{"begin":1240,"end":1289,"name":"CALLDATASIZE"},{"begin":1240,"end":1289,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"40"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"51"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"51"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"52"},{"begin":1240,"end":1289,"name":"JUMP","value":"[in]"},{"begin":469,"end":516,"name":"tag","value":"16"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"23"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"54"},{"begin":469,"end":516,"name":"JUMP","value":"[in]"},{"begin":2497,"end":2530,"name":"tag","value":"17"},{"begin":2497,"end":2530,"name":"JUMPDEST"},{"begin":2497,"end":2530,"name":"PUSH [tag]","value":"27"},{"begin":2497,"end":2530,"name":"PUSH [tag]","value":"56"},{"begin":2497,"end":2530,"name":"JUMP","value":"[in]"},{"begin":805,"end":836,"name":"tag","value":"18"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"29"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"58"},{"begin":805,"end":836,"name":"JUMP","value":"[in]"},{"begin":177,"end":197,"name":"tag","value":"19"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"23"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"60"},{"begin":177,"end":197,"name":"JUMP","value":"[in]"},{"begin":2426,"end":2454,"name":"tag","value":"24"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH","value":"A"},{"begin":2426,"end":2454,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2426,"end":2454,"name":"AND"},{"begin":2426,"end":2454,"name":"DUP2"},{"begin":2426,"end":2454,"name":"JUMP","value":"[out]"},{"begin":273,"end":300,"name":"tag","value":"26"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"1"},{"begin":273,"end":300,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"JUMP","value":"[out]"},{"begin":2460,"end":2491,"name":"tag","value":"28"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH","value":"A"},{"begin":2460,"end":2491,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"DIV"},{"begin":2460,"end":2491,"name":"PUSH","value":"FF"},{"begin":2460,"end":2491,"name":"AND"},{"begin":2460,"end":2491,"name":"DUP2"},{"begin":2460,"end":2491,"name":"JUMP","value":"[out]"},{"begin":952,"end":992,"name":"tag","value":"30"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH","value":"6"},{"begin":952,"end":992,"name":"SLOAD"},{"begin":952,"end":992,"name":"DUP2"},{"begin":952,"end":992,"name":"JUMP","value":"[out]"},{"begin":2669,"end":2721,"name":"tag","value":"33"},{"begin":2669,"end":2721,"name":"JUMPDEST"},{"begin":2669,"end":2721,"name":"PUSH","value":"C"},{"begin":2669,"end":2721,"name":"PUSH","value":"20"},{"begin":2669,"end":2721,"name":"MSTORE"},{"begin":2669,"end":2721,"name":"PUSH","value":"0"},{"begin":2669,"end":2721,"name":"SWAP1"},{"begin":2669,"end":2721,"name":"DUP2"},{"begin":2669,"end":2721,"name":"MSTORE"},{"begin":2669,"end":2721,"name":"PUSH","value":"40"},{"begin":2669,"end":2721,"name":"SWAP1"},{"begin":2669,"end":2721,"name":"KECCAK256"},{"begin":2669,"end":2721,"name":"SLOAD"},{"begin":2669,"end":2721,"name":"PUSH","value":"FF"},{"begin":2669,"end":2721,"name":"AND"},{"begin":2669,"end":2721,"name":"DUP2"},{"begin":2669,"end":2721,"name":"JUMP","value":"[out]"},{"begin":2613,"end":2663,"name":"tag","value":"36"},{"begin":2613,"end":2663,"name":"JUMPDEST"},{"begin":2613,"end":2663,"name":"PUSH","value":"B"},{"begin":2613,"end":2663,"name":"PUSH","value":"20"},{"begin":2613,"end":2663,"name":"MSTORE"},{"begin":2613,"end":2663,"name":"PUSH","value":"0"},{"begin":2613,"end":2663,"name":"SWAP1"},{"begin":2613,"end":2663,"name":"DUP2"},{"begin":2613,"end":2663,"name":"MSTORE"},{"begin":2613,"end":2663,"name":"PUSH","value":"40"},{"begin":2613,"end":2663,"name":"SWAP1"},{"begin":2613,"end":2663,"name":"KECCAK256"},{"begin":2613,"end":2663,"name":"SLOAD"},{"begin":2613,"end":2663,"name":"PUSH","value":"FF"},{"begin":2613,"end":2663,"name":"AND"},{"begin":2613,"end":2663,"name":"DUP2"},{"begin":2613,"end":2663,"name":"JUMP","value":"[out]"},{"begin":663,"end":688,"name":"tag","value":"38"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH","value":"4"},{"begin":663,"end":688,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":663,"end":688,"name":"AND"},{"begin":663,"end":688,"name":"DUP2"},{"begin":663,"end":688,"name":"JUMP","value":"[out]"},{"begin":2536,"end":2570,"name":"tag","value":"40"},{"begin":2536,"end":2570,"name":"JUMPDEST"},{"begin":2536,"end":2570,"name":"PUSH","value":"A"},{"begin":2536,"end":2570,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"B0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2536,"end":2570,"name":"SWAP1"},{"begin":2536,"end":2570,"name":"DIV"},{"begin":2536,"end":2570,"name":"PUSH","value":"FF"},{"begin":2536,"end":2570,"name":"AND"},{"begin":2536,"end":2570,"name":"DUP2"},{"begin":2536,"end":2570,"name":"JUMP","value":"[out]"},{"begin":2114,"end":2155,"name":"tag","value":"43"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH","value":"9"},{"begin":2114,"end":2155,"name":"PUSH","value":"20"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"0"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"DUP2"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"40"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"KECCAK256"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"1"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"3"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"FF"},{"begin":2114,"end":2155,"name":"SWAP2"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"SWAP2"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"DUP4"},{"begin":2114,"end":2155,"name":"JUMP","value":"[out]"},{"begin":1117,"end":1138,"name":"tag","value":"45"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH","value":"7"},{"begin":1117,"end":1138,"name":"SLOAD"},{"begin":1117,"end":1138,"name":"DUP2"},{"begin":1117,"end":1138,"name":"JUMP","value":"[out]"},{"begin":2576,"end":2607,"name":"tag","value":"47"},{"begin":2576,"end":2607,"name":"JUMPDEST"},{"begin":2576,"end":2607,"name":"PUSH","value":"A"},{"begin":2576,"end":2607,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"B8"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2576,"end":2607,"name":"SWAP1"},{"begin":2576,"end":2607,"name":"DIV"},{"begin":2576,"end":2607,"name":"PUSH","value":"FF"},{"begin":2576,"end":2607,"name":"AND"},{"begin":2576,"end":2607,"name":"DUP2"},{"begin":2576,"end":2607,"name":"JUMP","value":"[out]"},{"begin":364,"end":404,"name":"tag","value":"49"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH","value":"2"},{"begin":364,"end":404,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":364,"end":404,"name":"AND"},{"begin":364,"end":404,"name":"DUP2"},{"begin":364,"end":404,"name":"JUMP","value":"[out]"},{"begin":1240,"end":1289,"name":"tag","value":"52"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"8"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"40"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"LT"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"61"},{"begin":1240,"end":1289,"name":"JUMPI"},{"begin":1240,"end":1289,"name":"INVALID"},{"begin":1240,"end":1289,"name":"tag","value":"61"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"JUMP","value":"[out]"},{"begin":469,"end":516,"name":"tag","value":"54"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH","value":"3"},{"begin":469,"end":516,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":469,"end":516,"name":"AND"},{"begin":469,"end":516,"name":"DUP2"},{"begin":469,"end":516,"name":"JUMP","value":"[out]"},{"begin":2497,"end":2530,"name":"tag","value":"56"},{"begin":2497,"end":2530,"name":"JUMPDEST"},{"begin":2497,"end":2530,"name":"PUSH","value":"A"},{"begin":2497,"end":2530,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A8"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2497,"end":2530,"name":"SWAP1"},{"begin":2497,"end":2530,"name":"DIV"},{"begin":2497,"end":2530,"name":"PUSH","value":"FF"},{"begin":2497,"end":2530,"name":"AND"},{"begin":2497,"end":2530,"name":"DUP2"},{"begin":2497,"end":2530,"name":"JUMP","value":"[out]"},{"begin":805,"end":836,"name":"tag","value":"58"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH","value":"5"},{"begin":805,"end":836,"name":"SLOAD"},{"begin":805,"end":836,"name":"DUP2"},{"begin":805,"end":836,"name":"JUMP","value":"[out]"},{"begin":177,"end":197,"name":"tag","value":"60"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH","value":"0"},{"begin":177,"end":197,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":177,"end":197,"name":"AND"},{"begin":177,"end":197,"name":"DUP2"},{"begin":177,"end":197,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b506103e0806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638e8f294b116100a2578063dce1544911610071578063dce154491461022e578063dcfbc0c71461025a578063e6653f3d14610262578063e87554461461026a578063f851a440146102725761010b565b80638e8f294b146101ce57806394b2294b14610216578063ac0b0bb71461021e578063bb82aa5e146102265761010b565b80636d154ea5116100de5780636d154ea514610172578063731f0c2b146101985780637dc0d1d0146101be57806387f76303146101c65761010b565b806324a3d6221461011057806326782247146101345780633c94786f1461013c5780634ada90af14610158575b600080fd5b61011861027a565b604080516001600160a01b039092168252519081900360200190f35b610118610289565b610144610298565b604080519115158252519081900360200190f35b6101606102a8565b60408051918252519081900360200190f35b6101446004803603602081101561018857600080fd5b50356001600160a01b03166102ae565b610144600480360360208110156101ae57600080fd5b50356001600160a01b03166102c3565b6101186102d8565b6101446102e7565b6101f4600480360360208110156101e457600080fd5b50356001600160a01b03166102f7565b6040805193151584526020840192909252151582820152519081900360600190f35b61016061031d565b610144610323565b610118610333565b6101186004803603604081101561024457600080fd5b506001600160a01b038135169060200135610342565b610118610377565b610144610386565b610160610396565b61011861039c565b600a546001600160a01b031681565b6001546001600160a01b031681565b600a54600160a01b900460ff1681565b60065481565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b6004546001600160a01b031681565b600a54600160b01b900460ff1681565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60075481565b600a54600160b81b900460ff1681565b6002546001600160a01b031681565b6008602052816000526040600020818154811061035b57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600a54600160a81b900460ff1681565b60055481565b6000546001600160a01b03168156fea265627a7a72315820bcbc45482f088929b015260fbfb6397d10b9d77c890af063c5b9394adbe515be64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E0 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E8F294B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xDCE15449 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x272 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x226 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x6D154EA5 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x1C6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x158 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x289 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x144 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2AE JUMP JUMPDEST PUSH2 0x144 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2E7 JUMP JUMPDEST PUSH2 0x1F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x144 PUSH2 0x323 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x333 JUMP JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x342 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x377 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x386 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x396 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x39C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x35B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xBC 0xBC GASLIMIT 0x48 0x2F ADDMOD DUP10 0x29 0xB0 ISZERO 0x26 0xF 0xBF 0xB6 CODECOPY PUSH30 0x10B9D77C890AF063C5B9394ADBE515BE64736F6C63430005110032000000 ","sourceMap":"1295:1429:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1295:1429:4;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561001057600080fd5b506004361061010b5760003560e01c80638e8f294b116100a2578063dce1544911610071578063dce154491461022e578063dcfbc0c71461025a578063e6653f3d14610262578063e87554461461026a578063f851a440146102725761010b565b80638e8f294b146101ce57806394b2294b14610216578063ac0b0bb71461021e578063bb82aa5e146102265761010b565b80636d154ea5116100de5780636d154ea514610172578063731f0c2b146101985780637dc0d1d0146101be57806387f76303146101c65761010b565b806324a3d6221461011057806326782247146101345780633c94786f1461013c5780634ada90af14610158575b600080fd5b61011861027a565b604080516001600160a01b039092168252519081900360200190f35b610118610289565b610144610298565b604080519115158252519081900360200190f35b6101606102a8565b60408051918252519081900360200190f35b6101446004803603602081101561018857600080fd5b50356001600160a01b03166102ae565b610144600480360360208110156101ae57600080fd5b50356001600160a01b03166102c3565b6101186102d8565b6101446102e7565b6101f4600480360360208110156101e457600080fd5b50356001600160a01b03166102f7565b6040805193151584526020840192909252151582820152519081900360600190f35b61016061031d565b610144610323565b610118610333565b6101186004803603604081101561024457600080fd5b506001600160a01b038135169060200135610342565b610118610377565b610144610386565b610160610396565b61011861039c565b600a546001600160a01b031681565b6001546001600160a01b031681565b600a54600160a01b900460ff1681565b60065481565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b6004546001600160a01b031681565b600a54600160b01b900460ff1681565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60075481565b600a54600160b81b900460ff1681565b6002546001600160a01b031681565b6008602052816000526040600020818154811061035b57fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600a54600160a81b900460ff1681565b60055481565b6000546001600160a01b03168156fea265627a7a72315820bcbc45482f088929b015260fbfb6397d10b9d77c890af063c5b9394adbe515be64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E8F294B GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xDCE15449 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0x22E JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0x262 JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x272 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0x21E JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x226 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x6D154EA5 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x1C6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x158 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x118 PUSH2 0x289 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x298 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x144 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2AE JUMP JUMPDEST PUSH2 0x144 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2C3 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x2E7 JUMP JUMPDEST PUSH2 0x1F4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x160 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x144 PUSH2 0x323 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x333 JUMP JUMPDEST PUSH2 0x118 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x342 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x377 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x386 JUMP JUMPDEST PUSH2 0x160 PUSH2 0x396 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x39C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x35B JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xBC 0xBC GASLIMIT 0x48 0x2F ADDMOD DUP10 0x29 0xB0 ISZERO 0x26 0xF 0xBF 0xB6 CODECOPY PUSH30 0x10B9D77C890AF063C5B9394ADBE515BE64736F6C63430005110032000000 ","sourceMap":"1295:1429:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1295:1429:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2426:28;;;:::i;:::-;;;;-1:-1:-1;;;;;2426:28:4;;;;;;;;;;;;;;273:27;;;:::i;2460:31::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;952:40;;;:::i;:::-;;;;;;;;;;;;;;;;2669:52;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2669:52:4;-1:-1:-1;;;;;2669:52:4;;:::i;2613:50::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2613:50:4;-1:-1:-1;;;;;2613:50:4;;:::i;663:25::-;;;:::i;2536:34::-;;;:::i;2114:41::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2114:41:4;-1:-1:-1;;;;;2114:41:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1117:21;;;:::i;2576:31::-;;;:::i;364:40::-;;;:::i;1240:49::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1240:49:4;;;;;;;;:::i;469:47::-;;;:::i;2497:33::-;;;:::i;805:31::-;;;:::i;177:20::-;;;:::i;2426:28::-;;;-1:-1:-1;;;;;2426:28:4;;:::o;273:27::-;;;-1:-1:-1;;;;;273:27:4;;:::o;2460:31::-;;;-1:-1:-1;;;2460:31:4;;;;;:::o;952:40::-;;;;:::o;2669:52::-;;;;;;;;;;;;;;;:::o;2613:50::-;;;;;;;;;;;;;;;:::o;663:25::-;;;-1:-1:-1;;;;;663:25:4;;:::o;2536:34::-;;;-1:-1:-1;;;2536:34:4;;;;;:::o;2114:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1117:21::-;;;;:::o;2576:31::-;;;-1:-1:-1;;;2576:31:4;;;;;:::o;364:40::-;;;-1:-1:-1;;;;;364:40:4;;:::o;1240:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1240:49:4;;-1:-1:-1;1240:49:4;;-1:-1:-1;1240:49:4:o;469:47::-;;;-1:-1:-1;;;;;469:47:4;;:::o;2497:33::-;;;-1:-1:-1;;;2497:33:4;;;;;:::o;805:31::-;;;;:::o;177:20::-;;;-1:-1:-1;;;;;177:20:4;;:::o","linkReferences":{}},"methodIdentifiers":{"_borrowGuardianPaused()":"e6653f3d","_mintGuardianPaused()":"3c94786f","accountAssets(address,uint256)":"dce15449","admin()":"f851a440","borrowGuardianPaused(address)":"6d154ea5","closeFactorMantissa()":"e8755446","comptrollerImplementation()":"bb82aa5e","liquidationIncentiveMantissa()":"4ada90af","markets(address)":"8e8f294b","maxAssets()":"94b2294b","mintGuardianPaused(address)":"731f0c2b","oracle()":"7dc0d1d0","pauseGuardian()":"24a3d622","pendingAdmin()":"26782247","pendingComptrollerImplementation()":"dcfbc0c7","seizeGuardianPaused()":"ac0b0bb7","transferGuardianPaused()":"87f76303"},"gasEstimates":{"creation":{"codeDepositCost":"198400","executionCost":"238","totalCost":"198638"},"external":{"_borrowGuardianPaused()":"1093","_mintGuardianPaused()":"1095","accountAssets(address,uint256)":"2093","admin()":"1147","borrowGuardianPaused(address)":"1159","closeFactorMantissa()":"1086","comptrollerImplementation()":"1126","liquidationIncentiveMantissa()":"1088","markets(address)":"2843","maxAssets()":"1043","mintGuardianPaused(address)":"1181","oracle()":"1104","pauseGuardian()":"1061","pendingAdmin()":"1083","pendingComptrollerImplementation()":"1081","seizeGuardianPaused()":"1094","transferGuardianPaused()":"1116"},"internal":{}}},"ewasm":{"wasm":""}},"ComptrollerV3Storage":{"abi":[{"type":"function","name":"_borrowGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"_mintGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"accountAssets","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"contract CToken"}],"stateMutability":"view"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allMarkets","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"contract CToken"}],"stateMutability":"view"},{"type":"function","name":"borrowGuardianPaused","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"closeFactorMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compAccrued","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compBorrowState","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"index","type":"uint224","internalType":"uint224"},{"name":"block","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"compBorrowerIndex","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compRate","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compSpeeds","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compSupplierIndex","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"compSupplyState","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"index","type":"uint224","internalType":"uint224"},{"name":"block","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"comptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"liquidationIncentiveMantissa","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"markets","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"isListed","type":"bool","internalType":"bool"},{"name":"collateralFactorMantissa","type":"uint256","internalType":"uint256"},{"name":"isComped","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"maxAssets","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"mintGuardianPaused","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"oracle","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract PriceOracle"}],"stateMutability":"view"},{"type":"function","name":"pauseGuardian","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingComptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"seizeGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"transferGuardianPaused","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"_borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"accountAssets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"contract CToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"closeFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compBorrowerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"compRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSpeeds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplierIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compSupplyState\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"index\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"block\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidationIncentiveMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isComped\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"seizeGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferGuardianPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerStorage.sol\":\"ComptrollerV3Storage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\",\"keccak256\":\"0x4cdd6e2b3db0368fe5d6cd84e0df65131e019170cd4bfbf5c83d067253786929\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":4363,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":4365,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"pendingAdmin","offset":0,"slot":"1","type":"t_address"},{"astId":4367,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"comptrollerImplementation","offset":0,"slot":"2","type":"t_address"},{"astId":4369,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"pendingComptrollerImplementation","offset":0,"slot":"3","type":"t_address"},{"astId":4374,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"oracle","offset":0,"slot":"4","type":"t_contract(PriceOracle)6080"},{"astId":4376,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"closeFactorMantissa","offset":0,"slot":"5","type":"t_uint256"},{"astId":4378,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"liquidationIncentiveMantissa","offset":0,"slot":"6","type":"t_uint256"},{"astId":4380,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"maxAssets","offset":0,"slot":"7","type":"t_uint256"},{"astId":4385,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"accountAssets","offset":0,"slot":"8","type":"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)"},{"astId":4403,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"markets","offset":0,"slot":"9","type":"t_mapping(t_address,t_struct(Market)4399_storage)"},{"astId":4405,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"pauseGuardian","offset":0,"slot":"10","type":"t_address"},{"astId":4407,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"_mintGuardianPaused","offset":20,"slot":"10","type":"t_bool"},{"astId":4409,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"_borrowGuardianPaused","offset":21,"slot":"10","type":"t_bool"},{"astId":4411,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"transferGuardianPaused","offset":22,"slot":"10","type":"t_bool"},{"astId":4413,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"seizeGuardianPaused","offset":23,"slot":"10","type":"t_bool"},{"astId":4417,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"mintGuardianPaused","offset":0,"slot":"11","type":"t_mapping(t_address,t_bool)"},{"astId":4421,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"borrowGuardianPaused","offset":0,"slot":"12","type":"t_mapping(t_address,t_bool)"},{"astId":4432,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"allMarkets","offset":0,"slot":"13","type":"t_array(t_contract(CToken)3504)dyn_storage"},{"astId":4434,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compRate","offset":0,"slot":"14","type":"t_uint256"},{"astId":4438,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compSpeeds","offset":0,"slot":"15","type":"t_mapping(t_address,t_uint256)"},{"astId":4442,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compSupplyState","offset":0,"slot":"16","type":"t_mapping(t_address,t_struct(CompMarketState)4429_storage)"},{"astId":4446,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compBorrowState","offset":0,"slot":"17","type":"t_mapping(t_address,t_struct(CompMarketState)4429_storage)"},{"astId":4452,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compSupplierIndex","offset":0,"slot":"18","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4458,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compBorrowerIndex","offset":0,"slot":"19","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":4462,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"compAccrued","offset":0,"slot":"20","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_contract(CToken)3504)dyn_storage":{"encoding":"dynamic_array","label":"contract CToken[]","numberOfBytes":"32","base":"t_contract(CToken)3504"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_contract(CToken)3504":{"encoding":"inplace","label":"contract CToken","numberOfBytes":"20"},"t_contract(PriceOracle)6080":{"encoding":"inplace","label":"contract PriceOracle","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_contract(CToken)3504)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => contract CToken[])","numberOfBytes":"32","value":"t_array(t_contract(CToken)3504)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(CompMarketState)4429_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ComptrollerV3Storage.CompMarketState)","numberOfBytes":"32","value":"t_struct(CompMarketState)4429_storage"},"t_mapping(t_address,t_struct(Market)4399_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct ComptrollerV2Storage.Market)","numberOfBytes":"32","value":"t_struct(Market)4399_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_struct(CompMarketState)4429_storage":{"encoding":"inplace","label":"struct ComptrollerV3Storage.CompMarketState","numberOfBytes":"32","members":[{"astId":4426,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"index","offset":0,"slot":"0","type":"t_uint224"},{"astId":4428,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"block","offset":28,"slot":"0","type":"t_uint32"}]},"t_struct(Market)4399_storage":{"encoding":"inplace","label":"struct ComptrollerV2Storage.Market","numberOfBytes":"128","members":[{"astId":4390,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"isListed","offset":0,"slot":"0","type":"t_bool"},{"astId":4392,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"collateralFactorMantissa","offset":0,"slot":"1","type":"t_uint256"},{"astId":4396,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"accountMembership","offset":0,"slot":"2","type":"t_mapping(t_address,t_bool)"},{"astId":4398,"contract":"contracts/ComptrollerStorage.sol:ComptrollerV3Storage","label":"isComped","offset":0,"slot":"3","type":"t_bool"}]},"t_uint224":{"encoding":"inplace","label":"uint224","numberOfBytes":"28"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"evm":{"assembly":"    /* \"contracts/ComptrollerStorage.sol\":2726:4054  contract ComptrollerV3Storage is ComptrollerV2Storage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ComptrollerStorage.sol\":2726:4054  contract ComptrollerV3Storage is ComptrollerV2Storage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ComptrollerStorage.sol\":2726:4054  contract ComptrollerV3Storage is ComptrollerV2Storage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/ComptrollerStorage.sol\":2726:4054  contract ComptrollerV3Storage is ComptrollerV2Storage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8e8f294b\n      gt\n      tag_28\n      jumpi\n      dup1\n      0xca0af043\n      gt\n      tag_29\n      jumpi\n      dup1\n      0xdcfbc0c7\n      gt\n      tag_30\n      jumpi\n      dup1\n      0xdcfbc0c7\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xe6653f3d\n      eq\n      tag_25\n      jumpi\n      dup1\n      0xe8755446\n      eq\n      tag_26\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_27\n      jumpi\n      jump(tag_2)\n    tag_30:\n      dup1\n      0xca0af043\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xcc7ebdc4\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdce15449\n      eq\n      tag_23\n      jumpi\n      jump(tag_2)\n    tag_29:\n      dup1\n      0x8e8f294b\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x94b2294b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xaa900754\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xac0b0bb7\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xb21be7fd\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xbb82aa5e\n      eq\n      tag_20\n      jumpi\n      jump(tag_2)\n    tag_28:\n      dup1\n      0x6b79c38d\n      gt\n      tag_31\n      jumpi\n      dup1\n      0x6b79c38d\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x6d154ea5\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x731f0c2b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x7dc0d1d0\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x87f76303\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x8c57804e\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_31:\n      dup1\n      0x1d7b33d7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x24a3d622\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x26782247\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x3c94786f\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x4ada90af\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x52d84d1e\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ComptrollerStorage.sol\":3265:3307  mapping(address => uint) public compSpeeds */\n    tag_3:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_33\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_33:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":3265:3307  mapping(address => uint) public compSpeeds */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_34\n      jump\t// in\n    tag_32:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":2426:2454  address public pauseGuardian */\n    tag_4:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_5:\n      tag_35\n      tag_38\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2460:2491  bool public _mintGuardianPaused */\n    tag_6:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_7:\n      tag_32\n      tag_42\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3054:3080  CToken[] public allMarkets */\n    tag_8:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_44\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_44:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":3054:3080  CToken[] public allMarkets */\n      calldataload\n      tag_45\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3375:3433  mapping(address => CompMarketState) public compSupplyState */\n    tag_9:\n      tag_46\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_47\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_47:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":3375:3433  mapping(address => CompMarketState) public compSupplyState */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_48\n      jump\t// in\n    tag_46:\n      0x40\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      swap1\n      swap4\n      and\n      dup4\n      mstore\n      0xffffffff\n      swap1\n      swap2\n      and\n      0x20\n      dup4\n      add\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n    tag_10:\n      tag_39\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_50\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_50:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_51\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n    tag_11:\n      tag_39\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_53\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_53:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_54\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_12:\n      tag_35\n      tag_56\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2536:2570  bool public transferGuardianPaused */\n    tag_13:\n      tag_39\n      tag_58\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3501:3559  mapping(address => CompMarketState) public compBorrowState */\n    tag_14:\n      tag_46\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_60\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_60:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":3501:3559  mapping(address => CompMarketState) public compBorrowState */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_61\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n    tag_15:\n      tag_62\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_63\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_63:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_64\n      jump\t// in\n    tag_62:\n      0x40\n      dup1\n      mload\n      swap4\n      iszero\n      iszero\n      dup5\n      mstore\n      0x20\n      dup5\n      add\n      swap3\n      swap1\n      swap3\n      mstore\n      iszero\n      iszero\n      dup3\n      dup3\n      add\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_16:\n      tag_32\n      tag_66\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3162:3182  uint public compRate */\n    tag_17:\n      tag_32\n      tag_68\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2576:2607  bool public seizeGuardianPaused */\n    tag_18:\n      tag_39\n      tag_70\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3676:3745  mapping(address => mapping(address => uint)) public compSupplierIndex */\n    tag_19:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_72\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_72:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ComptrollerStorage.sol\":3676:3745  mapping(address => mapping(address => uint)) public compSupplierIndex */\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      add\n      calldataload\n      and\n      tag_73\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_20:\n      tag_35\n      tag_75\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3862:3931  mapping(address => mapping(address => uint)) public compBorrowerIndex */\n    tag_21:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_77\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_77:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ComptrollerStorage.sol\":3862:3931  mapping(address => mapping(address => uint)) public compBorrowerIndex */\n      dup2\n      calldataload\n      dup2\n      and\n      swap2\n      0x20\n      add\n      calldataload\n      and\n      tag_78\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":4008:4051  mapping(address => uint) public compAccrued */\n    tag_22:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_80\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_80:\n      pop\n        /* \"contracts/ComptrollerStorage.sol\":4008:4051  mapping(address => uint) public compAccrued */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_81\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_23:\n      tag_35\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x40\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_83\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_83:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      tag_84\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_24:\n      tag_35\n      tag_86\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":2497:2530  bool public _borrowGuardianPaused */\n    tag_25:\n      tag_39\n      tag_88\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_26:\n      tag_32\n      tag_90\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_27:\n      tag_35\n      tag_92\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":3265:3307  mapping(address => uint) public compSpeeds */\n    tag_34:\n      mstore(0x20, 0x0f)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2426:2454  address public pauseGuardian */\n    tag_36:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x0a))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_38:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2460:2491  bool public _mintGuardianPaused */\n    tag_40:\n      sload(0x0a)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":952:992  uint public liquidationIncentiveMantissa */\n    tag_42:\n      sload(0x06)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3054:3080  CToken[] public allMarkets */\n    tag_45:\n      0x0d\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_93\n      jumpi\n      invalid\n    tag_93:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3375:3433  mapping(address => CompMarketState) public compSupplyState */\n    tag_48:\n      mstore(0x20, 0x10)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xe0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n      dup3\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2669:2721  mapping(address => bool) public borrowGuardianPaused */\n    tag_51:\n      mstore(0x20, 0x0c)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2613:2663  mapping(address => bool) public mintGuardianPaused */\n    tag_54:\n      mstore(0x20, 0x0b)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":663:688  PriceOracle public oracle */\n    tag_56:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2536:2570  bool public transferGuardianPaused */\n    tag_58:\n      sload(0x0a)\n      shl(0xb0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3501:3559  mapping(address => CompMarketState) public compBorrowState */\n    tag_61:\n      mstore(0x20, 0x11)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xe0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      shl(0xe0, 0x01)\n      swap1\n      div\n      0xffffffff\n      and\n      dup3\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2114:2155  mapping(address => Market) public markets */\n    tag_64:\n      mstore(0x20, 0x09)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup3\n      add\n      sload\n      0x03\n      swap1\n      swap3\n      add\n      sload\n      0xff\n      swap2\n      dup3\n      and\n      swap3\n      swap2\n      and\n      dup4\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1117:1138  uint public maxAssets */\n    tag_66:\n      sload(0x07)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3162:3182  uint public compRate */\n    tag_68:\n      sload(0x0e)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2576:2607  bool public seizeGuardianPaused */\n    tag_70:\n      sload(0x0a)\n      shl(0xb8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3676:3745  mapping(address => mapping(address => uint)) public compSupplierIndex */\n    tag_73:\n      0x12\n      0x20\n      swap1\n      dup2\n      mstore\n      0x00\n      swap3\n      dup4\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      swap1\n      swap2\n      mstore\n      swap1\n      dup3\n      mstore\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_75:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":3862:3931  mapping(address => mapping(address => uint)) public compBorrowerIndex */\n    tag_78:\n      0x13\n      0x20\n      swap1\n      dup2\n      mstore\n      0x00\n      swap3\n      dup4\n      mstore\n      0x40\n      dup1\n      dup5\n      keccak256\n      swap1\n      swap2\n      mstore\n      swap1\n      dup3\n      mstore\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":4008:4051  mapping(address => uint) public compAccrued */\n    tag_81:\n      mstore(0x20, 0x14)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":1240:1289  mapping(address => CToken[]) public accountAssets */\n    tag_84:\n      mstore(0x20, 0x08)\n      dup2\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_95\n      jumpi\n      invalid\n    tag_95:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n      pop\n      dup3\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_86:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":2497:2530  bool public _borrowGuardianPaused */\n    tag_88:\n      sload(0x0a)\n      shl(0xa8, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":805:836  uint public closeFactorMantissa */\n    tag_90:\n      sload(0x05)\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_92:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158206646f2afa7d279c02e6840556f31ee2d8117301b473b15e74ddaf9172acc667c64736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":2726,"end":4054,"name":"PUSH","value":"80"},{"begin":2726,"end":4054,"name":"PUSH","value":"40"},{"begin":2726,"end":4054,"name":"MSTORE"},{"begin":2726,"end":4054,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"POP"},{"begin":2726,"end":4054,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":2726,"end":4054,"name":"PUSH","value":"0"},{"begin":2726,"end":4054,"name":"CODECOPY"},{"begin":2726,"end":4054,"name":"PUSH","value":"0"},{"begin":2726,"end":4054,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a723158206646f2afa7d279c02e6840556f31ee2d8117301b473b15e74ddaf9172acc667c64736f6c63430005110032",".code":[{"begin":2726,"end":4054,"name":"PUSH","value":"80"},{"begin":2726,"end":4054,"name":"PUSH","value":"40"},{"begin":2726,"end":4054,"name":"MSTORE"},{"begin":2726,"end":4054,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"POP"},{"begin":2726,"end":4054,"name":"PUSH","value":"4"},{"begin":2726,"end":4054,"name":"CALLDATASIZE"},{"begin":2726,"end":4054,"name":"LT"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"2"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"PUSH","value":"0"},{"begin":2726,"end":4054,"name":"CALLDATALOAD"},{"begin":2726,"end":4054,"name":"PUSH","value":"E0"},{"begin":2726,"end":4054,"name":"SHR"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"8E8F294B"},{"begin":2726,"end":4054,"name":"GT"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"28"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"CA0AF043"},{"begin":2726,"end":4054,"name":"GT"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"29"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"DCFBC0C7"},{"begin":2726,"end":4054,"name":"GT"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"30"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"DCFBC0C7"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"24"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"E6653F3D"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"25"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"E8755446"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"26"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"F851A440"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"27"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"2"},{"begin":2726,"end":4054,"name":"JUMP"},{"begin":2726,"end":4054,"name":"tag","value":"30"},{"begin":2726,"end":4054,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"CA0AF043"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"21"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"CC7EBDC4"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"22"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"DCE15449"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"23"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"2"},{"begin":2726,"end":4054,"name":"JUMP"},{"begin":2726,"end":4054,"name":"tag","value":"29"},{"begin":2726,"end":4054,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"8E8F294B"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"15"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"94B2294B"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"16"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"AA900754"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"17"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"AC0B0BB7"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"18"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"B21BE7FD"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"19"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"BB82AA5E"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"20"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"2"},{"begin":2726,"end":4054,"name":"JUMP"},{"begin":2726,"end":4054,"name":"tag","value":"28"},{"begin":2726,"end":4054,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"6B79C38D"},{"begin":2726,"end":4054,"name":"GT"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"31"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"6B79C38D"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"9"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"6D154EA5"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"10"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"731F0C2B"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"11"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"7DC0D1D0"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"12"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"87F76303"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"13"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"8C57804E"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"14"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"2"},{"begin":2726,"end":4054,"name":"JUMP"},{"begin":2726,"end":4054,"name":"tag","value":"31"},{"begin":2726,"end":4054,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"1D7B33D7"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"3"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"24A3D622"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"4"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"26782247"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"5"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"3C94786F"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"6"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"4ADA90AF"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"7"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"PUSH","value":"52D84D1E"},{"begin":2726,"end":4054,"name":"EQ"},{"begin":2726,"end":4054,"name":"PUSH [tag]","value":"8"},{"begin":2726,"end":4054,"name":"JUMPI"},{"begin":2726,"end":4054,"name":"tag","value":"2"},{"begin":2726,"end":4054,"name":"JUMPDEST"},{"begin":2726,"end":4054,"name":"PUSH","value":"0"},{"begin":2726,"end":4054,"name":"DUP1"},{"begin":2726,"end":4054,"name":"REVERT"},{"begin":3265,"end":3307,"name":"tag","value":"3"},{"begin":3265,"end":3307,"name":"JUMPDEST"},{"begin":3265,"end":3307,"name":"PUSH [tag]","value":"32"},{"begin":3265,"end":3307,"name":"PUSH","value":"4"},{"begin":3265,"end":3307,"name":"DUP1"},{"begin":3265,"end":3307,"name":"CALLDATASIZE"},{"begin":3265,"end":3307,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"33"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"33"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3265,"end":3307,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3265,"end":3307,"name":"AND"},{"begin":3265,"end":3307,"name":"PUSH [tag]","value":"34"},{"begin":3265,"end":3307,"name":"JUMP","value":"[in]"},{"begin":3265,"end":3307,"name":"tag","value":"32"},{"begin":3265,"end":3307,"name":"JUMPDEST"},{"begin":3265,"end":3307,"name":"PUSH","value":"40"},{"begin":3265,"end":3307,"name":"DUP1"},{"begin":3265,"end":3307,"name":"MLOAD"},{"begin":3265,"end":3307,"name":"SWAP2"},{"begin":3265,"end":3307,"name":"DUP3"},{"begin":3265,"end":3307,"name":"MSTORE"},{"begin":3265,"end":3307,"name":"MLOAD"},{"begin":3265,"end":3307,"name":"SWAP1"},{"begin":3265,"end":3307,"name":"DUP2"},{"begin":3265,"end":3307,"name":"SWAP1"},{"begin":3265,"end":3307,"name":"SUB"},{"begin":3265,"end":3307,"name":"PUSH","value":"20"},{"begin":3265,"end":3307,"name":"ADD"},{"begin":3265,"end":3307,"name":"SWAP1"},{"begin":3265,"end":3307,"name":"RETURN"},{"begin":2426,"end":2454,"name":"tag","value":"4"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH [tag]","value":"35"},{"begin":2426,"end":2454,"name":"PUSH [tag]","value":"36"},{"begin":2426,"end":2454,"name":"JUMP","value":"[in]"},{"begin":2426,"end":2454,"name":"tag","value":"35"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH","value":"40"},{"begin":2426,"end":2454,"name":"DUP1"},{"begin":2426,"end":2454,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"SWAP3"},{"begin":2426,"end":2454,"name":"AND"},{"begin":2426,"end":2454,"name":"DUP3"},{"begin":2426,"end":2454,"name":"MSTORE"},{"begin":2426,"end":2454,"name":"MLOAD"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"DUP2"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"SUB"},{"begin":2426,"end":2454,"name":"PUSH","value":"20"},{"begin":2426,"end":2454,"name":"ADD"},{"begin":2426,"end":2454,"name":"SWAP1"},{"begin":2426,"end":2454,"name":"RETURN"},{"begin":273,"end":300,"name":"tag","value":"5"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"35"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"38"},{"begin":273,"end":300,"name":"JUMP","value":"[in]"},{"begin":2460,"end":2491,"name":"tag","value":"6"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH [tag]","value":"39"},{"begin":2460,"end":2491,"name":"PUSH [tag]","value":"40"},{"begin":2460,"end":2491,"name":"JUMP","value":"[in]"},{"begin":2460,"end":2491,"name":"tag","value":"39"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH","value":"40"},{"begin":2460,"end":2491,"name":"DUP1"},{"begin":2460,"end":2491,"name":"MLOAD"},{"begin":2460,"end":2491,"name":"SWAP2"},{"begin":2460,"end":2491,"name":"ISZERO"},{"begin":2460,"end":2491,"name":"ISZERO"},{"begin":2460,"end":2491,"name":"DUP3"},{"begin":2460,"end":2491,"name":"MSTORE"},{"begin":2460,"end":2491,"name":"MLOAD"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"DUP2"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"SUB"},{"begin":2460,"end":2491,"name":"PUSH","value":"20"},{"begin":2460,"end":2491,"name":"ADD"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"RETURN"},{"begin":952,"end":992,"name":"tag","value":"7"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"32"},{"begin":952,"end":992,"name":"PUSH [tag]","value":"42"},{"begin":952,"end":992,"name":"JUMP","value":"[in]"},{"begin":3054,"end":3080,"name":"tag","value":"8"},{"begin":3054,"end":3080,"name":"JUMPDEST"},{"begin":3054,"end":3080,"name":"PUSH [tag]","value":"35"},{"begin":3054,"end":3080,"name":"PUSH","value":"4"},{"begin":3054,"end":3080,"name":"DUP1"},{"begin":3054,"end":3080,"name":"CALLDATASIZE"},{"begin":3054,"end":3080,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"44"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"44"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3054,"end":3080,"name":"CALLDATALOAD"},{"begin":3054,"end":3080,"name":"PUSH [tag]","value":"45"},{"begin":3054,"end":3080,"name":"JUMP","value":"[in]"},{"begin":3375,"end":3433,"name":"tag","value":"9"},{"begin":3375,"end":3433,"name":"JUMPDEST"},{"begin":3375,"end":3433,"name":"PUSH [tag]","value":"46"},{"begin":3375,"end":3433,"name":"PUSH","value":"4"},{"begin":3375,"end":3433,"name":"DUP1"},{"begin":3375,"end":3433,"name":"CALLDATASIZE"},{"begin":3375,"end":3433,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"47"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"47"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3375,"end":3433,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3375,"end":3433,"name":"AND"},{"begin":3375,"end":3433,"name":"PUSH [tag]","value":"48"},{"begin":3375,"end":3433,"name":"JUMP","value":"[in]"},{"begin":3375,"end":3433,"name":"tag","value":"46"},{"begin":3375,"end":3433,"name":"JUMPDEST"},{"begin":3375,"end":3433,"name":"PUSH","value":"40"},{"begin":3375,"end":3433,"name":"DUP1"},{"begin":3375,"end":3433,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"E0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"SWAP4"},{"begin":3375,"end":3433,"name":"AND"},{"begin":3375,"end":3433,"name":"DUP4"},{"begin":3375,"end":3433,"name":"MSTORE"},{"begin":3375,"end":3433,"name":"PUSH","value":"FFFFFFFF"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"SWAP2"},{"begin":3375,"end":3433,"name":"AND"},{"begin":3375,"end":3433,"name":"PUSH","value":"20"},{"begin":3375,"end":3433,"name":"DUP4"},{"begin":3375,"end":3433,"name":"ADD"},{"begin":3375,"end":3433,"name":"MSTORE"},{"begin":3375,"end":3433,"name":"DUP1"},{"begin":3375,"end":3433,"name":"MLOAD"},{"begin":3375,"end":3433,"name":"SWAP2"},{"begin":3375,"end":3433,"name":"DUP3"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"SUB"},{"begin":3375,"end":3433,"name":"ADD"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"RETURN"},{"begin":2669,"end":2721,"name":"tag","value":"10"},{"begin":2669,"end":2721,"name":"JUMPDEST"},{"begin":2669,"end":2721,"name":"PUSH [tag]","value":"39"},{"begin":2669,"end":2721,"name":"PUSH","value":"4"},{"begin":2669,"end":2721,"name":"DUP1"},{"begin":2669,"end":2721,"name":"CALLDATASIZE"},{"begin":2669,"end":2721,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"50"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"50"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2669,"end":2721,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2669,"end":2721,"name":"AND"},{"begin":2669,"end":2721,"name":"PUSH [tag]","value":"51"},{"begin":2669,"end":2721,"name":"JUMP","value":"[in]"},{"begin":2613,"end":2663,"name":"tag","value":"11"},{"begin":2613,"end":2663,"name":"JUMPDEST"},{"begin":2613,"end":2663,"name":"PUSH [tag]","value":"39"},{"begin":2613,"end":2663,"name":"PUSH","value":"4"},{"begin":2613,"end":2663,"name":"DUP1"},{"begin":2613,"end":2663,"name":"CALLDATASIZE"},{"begin":2613,"end":2663,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"53"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"53"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2613,"end":2663,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2613,"end":2663,"name":"AND"},{"begin":2613,"end":2663,"name":"PUSH [tag]","value":"54"},{"begin":2613,"end":2663,"name":"JUMP","value":"[in]"},{"begin":663,"end":688,"name":"tag","value":"12"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"35"},{"begin":663,"end":688,"name":"PUSH [tag]","value":"56"},{"begin":663,"end":688,"name":"JUMP","value":"[in]"},{"begin":2536,"end":2570,"name":"tag","value":"13"},{"begin":2536,"end":2570,"name":"JUMPDEST"},{"begin":2536,"end":2570,"name":"PUSH [tag]","value":"39"},{"begin":2536,"end":2570,"name":"PUSH [tag]","value":"58"},{"begin":2536,"end":2570,"name":"JUMP","value":"[in]"},{"begin":3501,"end":3559,"name":"tag","value":"14"},{"begin":3501,"end":3559,"name":"JUMPDEST"},{"begin":3501,"end":3559,"name":"PUSH [tag]","value":"46"},{"begin":3501,"end":3559,"name":"PUSH","value":"4"},{"begin":3501,"end":3559,"name":"DUP1"},{"begin":3501,"end":3559,"name":"CALLDATASIZE"},{"begin":3501,"end":3559,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"60"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"60"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3501,"end":3559,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3501,"end":3559,"name":"AND"},{"begin":3501,"end":3559,"name":"PUSH [tag]","value":"61"},{"begin":3501,"end":3559,"name":"JUMP","value":"[in]"},{"begin":2114,"end":2155,"name":"tag","value":"15"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH [tag]","value":"62"},{"begin":2114,"end":2155,"name":"PUSH","value":"4"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"CALLDATASIZE"},{"begin":2114,"end":2155,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"63"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"63"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2114,"end":2155,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"PUSH [tag]","value":"64"},{"begin":2114,"end":2155,"name":"JUMP","value":"[in]"},{"begin":2114,"end":2155,"name":"tag","value":"62"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH","value":"40"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"MLOAD"},{"begin":2114,"end":2155,"name":"SWAP4"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"DUP5"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"20"},{"begin":2114,"end":2155,"name":"DUP5"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"ISZERO"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"MLOAD"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"DUP2"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SUB"},{"begin":2114,"end":2155,"name":"PUSH","value":"60"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"RETURN"},{"begin":1117,"end":1138,"name":"tag","value":"16"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"32"},{"begin":1117,"end":1138,"name":"PUSH [tag]","value":"66"},{"begin":1117,"end":1138,"name":"JUMP","value":"[in]"},{"begin":3162,"end":3182,"name":"tag","value":"17"},{"begin":3162,"end":3182,"name":"JUMPDEST"},{"begin":3162,"end":3182,"name":"PUSH [tag]","value":"32"},{"begin":3162,"end":3182,"name":"PUSH [tag]","value":"68"},{"begin":3162,"end":3182,"name":"JUMP","value":"[in]"},{"begin":2576,"end":2607,"name":"tag","value":"18"},{"begin":2576,"end":2607,"name":"JUMPDEST"},{"begin":2576,"end":2607,"name":"PUSH [tag]","value":"39"},{"begin":2576,"end":2607,"name":"PUSH [tag]","value":"70"},{"begin":2576,"end":2607,"name":"JUMP","value":"[in]"},{"begin":3676,"end":3745,"name":"tag","value":"19"},{"begin":3676,"end":3745,"name":"JUMPDEST"},{"begin":3676,"end":3745,"name":"PUSH [tag]","value":"32"},{"begin":3676,"end":3745,"name":"PUSH","value":"4"},{"begin":3676,"end":3745,"name":"DUP1"},{"begin":3676,"end":3745,"name":"CALLDATASIZE"},{"begin":3676,"end":3745,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"40"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"72"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"72"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3676,"end":3745,"name":"DUP2"},{"begin":3676,"end":3745,"name":"CALLDATALOAD"},{"begin":3676,"end":3745,"name":"DUP2"},{"begin":3676,"end":3745,"name":"AND"},{"begin":3676,"end":3745,"name":"SWAP2"},{"begin":3676,"end":3745,"name":"PUSH","value":"20"},{"begin":3676,"end":3745,"name":"ADD"},{"begin":3676,"end":3745,"name":"CALLDATALOAD"},{"begin":3676,"end":3745,"name":"AND"},{"begin":3676,"end":3745,"name":"PUSH [tag]","value":"73"},{"begin":3676,"end":3745,"name":"JUMP","value":"[in]"},{"begin":364,"end":404,"name":"tag","value":"20"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"35"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"75"},{"begin":364,"end":404,"name":"JUMP","value":"[in]"},{"begin":3862,"end":3931,"name":"tag","value":"21"},{"begin":3862,"end":3931,"name":"JUMPDEST"},{"begin":3862,"end":3931,"name":"PUSH [tag]","value":"32"},{"begin":3862,"end":3931,"name":"PUSH","value":"4"},{"begin":3862,"end":3931,"name":"DUP1"},{"begin":3862,"end":3931,"name":"CALLDATASIZE"},{"begin":3862,"end":3931,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"40"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"77"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"77"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3862,"end":3931,"name":"DUP2"},{"begin":3862,"end":3931,"name":"CALLDATALOAD"},{"begin":3862,"end":3931,"name":"DUP2"},{"begin":3862,"end":3931,"name":"AND"},{"begin":3862,"end":3931,"name":"SWAP2"},{"begin":3862,"end":3931,"name":"PUSH","value":"20"},{"begin":3862,"end":3931,"name":"ADD"},{"begin":3862,"end":3931,"name":"CALLDATALOAD"},{"begin":3862,"end":3931,"name":"AND"},{"begin":3862,"end":3931,"name":"PUSH [tag]","value":"78"},{"begin":3862,"end":3931,"name":"JUMP","value":"[in]"},{"begin":4008,"end":4051,"name":"tag","value":"22"},{"begin":4008,"end":4051,"name":"JUMPDEST"},{"begin":4008,"end":4051,"name":"PUSH [tag]","value":"32"},{"begin":4008,"end":4051,"name":"PUSH","value":"4"},{"begin":4008,"end":4051,"name":"DUP1"},{"begin":4008,"end":4051,"name":"CALLDATASIZE"},{"begin":4008,"end":4051,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"80"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"80"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":4008,"end":4051,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":4008,"end":4051,"name":"AND"},{"begin":4008,"end":4051,"name":"PUSH [tag]","value":"81"},{"begin":4008,"end":4051,"name":"JUMP","value":"[in]"},{"begin":1240,"end":1289,"name":"tag","value":"23"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"35"},{"begin":1240,"end":1289,"name":"PUSH","value":"4"},{"begin":1240,"end":1289,"name":"DUP1"},{"begin":1240,"end":1289,"name":"CALLDATASIZE"},{"begin":1240,"end":1289,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"40"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"83"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"83"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"CALLDATALOAD"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"84"},{"begin":1240,"end":1289,"name":"JUMP","value":"[in]"},{"begin":469,"end":516,"name":"tag","value":"24"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"35"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"86"},{"begin":469,"end":516,"name":"JUMP","value":"[in]"},{"begin":2497,"end":2530,"name":"tag","value":"25"},{"begin":2497,"end":2530,"name":"JUMPDEST"},{"begin":2497,"end":2530,"name":"PUSH [tag]","value":"39"},{"begin":2497,"end":2530,"name":"PUSH [tag]","value":"88"},{"begin":2497,"end":2530,"name":"JUMP","value":"[in]"},{"begin":805,"end":836,"name":"tag","value":"26"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"32"},{"begin":805,"end":836,"name":"PUSH [tag]","value":"90"},{"begin":805,"end":836,"name":"JUMP","value":"[in]"},{"begin":177,"end":197,"name":"tag","value":"27"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"35"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"92"},{"begin":177,"end":197,"name":"JUMP","value":"[in]"},{"begin":3265,"end":3307,"name":"tag","value":"34"},{"begin":3265,"end":3307,"name":"JUMPDEST"},{"begin":3265,"end":3307,"name":"PUSH","value":"F"},{"begin":3265,"end":3307,"name":"PUSH","value":"20"},{"begin":3265,"end":3307,"name":"MSTORE"},{"begin":3265,"end":3307,"name":"PUSH","value":"0"},{"begin":3265,"end":3307,"name":"SWAP1"},{"begin":3265,"end":3307,"name":"DUP2"},{"begin":3265,"end":3307,"name":"MSTORE"},{"begin":3265,"end":3307,"name":"PUSH","value":"40"},{"begin":3265,"end":3307,"name":"SWAP1"},{"begin":3265,"end":3307,"name":"KECCAK256"},{"begin":3265,"end":3307,"name":"SLOAD"},{"begin":3265,"end":3307,"name":"DUP2"},{"begin":3265,"end":3307,"name":"JUMP","value":"[out]"},{"begin":2426,"end":2454,"name":"tag","value":"36"},{"begin":2426,"end":2454,"name":"JUMPDEST"},{"begin":2426,"end":2454,"name":"PUSH","value":"A"},{"begin":2426,"end":2454,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2426,"end":2454,"name":"AND"},{"begin":2426,"end":2454,"name":"DUP2"},{"begin":2426,"end":2454,"name":"JUMP","value":"[out]"},{"begin":273,"end":300,"name":"tag","value":"38"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"1"},{"begin":273,"end":300,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"JUMP","value":"[out]"},{"begin":2460,"end":2491,"name":"tag","value":"40"},{"begin":2460,"end":2491,"name":"JUMPDEST"},{"begin":2460,"end":2491,"name":"PUSH","value":"A"},{"begin":2460,"end":2491,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2460,"end":2491,"name":"SWAP1"},{"begin":2460,"end":2491,"name":"DIV"},{"begin":2460,"end":2491,"name":"PUSH","value":"FF"},{"begin":2460,"end":2491,"name":"AND"},{"begin":2460,"end":2491,"name":"DUP2"},{"begin":2460,"end":2491,"name":"JUMP","value":"[out]"},{"begin":952,"end":992,"name":"tag","value":"42"},{"begin":952,"end":992,"name":"JUMPDEST"},{"begin":952,"end":992,"name":"PUSH","value":"6"},{"begin":952,"end":992,"name":"SLOAD"},{"begin":952,"end":992,"name":"DUP2"},{"begin":952,"end":992,"name":"JUMP","value":"[out]"},{"begin":3054,"end":3080,"name":"tag","value":"45"},{"begin":3054,"end":3080,"name":"JUMPDEST"},{"begin":3054,"end":3080,"name":"PUSH","value":"D"},{"begin":3054,"end":3080,"name":"DUP2"},{"begin":3054,"end":3080,"name":"DUP2"},{"begin":3054,"end":3080,"name":"SLOAD"},{"begin":3054,"end":3080,"name":"DUP2"},{"begin":3054,"end":3080,"name":"LT"},{"begin":3054,"end":3080,"name":"PUSH [tag]","value":"93"},{"begin":3054,"end":3080,"name":"JUMPI"},{"begin":3054,"end":3080,"name":"INVALID"},{"begin":3054,"end":3080,"name":"tag","value":"93"},{"begin":3054,"end":3080,"name":"JUMPDEST"},{"begin":3054,"end":3080,"name":"PUSH","value":"0"},{"begin":3054,"end":3080,"name":"SWAP2"},{"begin":3054,"end":3080,"name":"DUP3"},{"begin":3054,"end":3080,"name":"MSTORE"},{"begin":3054,"end":3080,"name":"PUSH","value":"20"},{"begin":3054,"end":3080,"name":"SWAP1"},{"begin":3054,"end":3080,"name":"SWAP2"},{"begin":3054,"end":3080,"name":"KECCAK256"},{"begin":3054,"end":3080,"name":"ADD"},{"begin":3054,"end":3080,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3054,"end":3080,"name":"AND"},{"begin":3054,"end":3080,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3054,"end":3080,"name":"DUP2"},{"begin":3054,"end":3080,"name":"JUMP","value":"[out]"},{"begin":3375,"end":3433,"name":"tag","value":"48"},{"begin":3375,"end":3433,"name":"JUMPDEST"},{"begin":3375,"end":3433,"name":"PUSH","value":"10"},{"begin":3375,"end":3433,"name":"PUSH","value":"20"},{"begin":3375,"end":3433,"name":"MSTORE"},{"begin":3375,"end":3433,"name":"PUSH","value":"0"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"DUP2"},{"begin":3375,"end":3433,"name":"MSTORE"},{"begin":3375,"end":3433,"name":"PUSH","value":"40"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"KECCAK256"},{"begin":3375,"end":3433,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"E0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3375,"end":3433,"name":"DUP2"},{"begin":3375,"end":3433,"name":"AND"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"E0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":3375,"end":3433,"name":"SWAP1"},{"begin":3375,"end":3433,"name":"DIV"},{"begin":3375,"end":3433,"name":"PUSH","value":"FFFFFFFF"},{"begin":3375,"end":3433,"name":"AND"},{"begin":3375,"end":3433,"name":"DUP3"},{"begin":3375,"end":3433,"name":"JUMP","value":"[out]"},{"begin":2669,"end":2721,"name":"tag","value":"51"},{"begin":2669,"end":2721,"name":"JUMPDEST"},{"begin":2669,"end":2721,"name":"PUSH","value":"C"},{"begin":2669,"end":2721,"name":"PUSH","value":"20"},{"begin":2669,"end":2721,"name":"MSTORE"},{"begin":2669,"end":2721,"name":"PUSH","value":"0"},{"begin":2669,"end":2721,"name":"SWAP1"},{"begin":2669,"end":2721,"name":"DUP2"},{"begin":2669,"end":2721,"name":"MSTORE"},{"begin":2669,"end":2721,"name":"PUSH","value":"40"},{"begin":2669,"end":2721,"name":"SWAP1"},{"begin":2669,"end":2721,"name":"KECCAK256"},{"begin":2669,"end":2721,"name":"SLOAD"},{"begin":2669,"end":2721,"name":"PUSH","value":"FF"},{"begin":2669,"end":2721,"name":"AND"},{"begin":2669,"end":2721,"name":"DUP2"},{"begin":2669,"end":2721,"name":"JUMP","value":"[out]"},{"begin":2613,"end":2663,"name":"tag","value":"54"},{"begin":2613,"end":2663,"name":"JUMPDEST"},{"begin":2613,"end":2663,"name":"PUSH","value":"B"},{"begin":2613,"end":2663,"name":"PUSH","value":"20"},{"begin":2613,"end":2663,"name":"MSTORE"},{"begin":2613,"end":2663,"name":"PUSH","value":"0"},{"begin":2613,"end":2663,"name":"SWAP1"},{"begin":2613,"end":2663,"name":"DUP2"},{"begin":2613,"end":2663,"name":"MSTORE"},{"begin":2613,"end":2663,"name":"PUSH","value":"40"},{"begin":2613,"end":2663,"name":"SWAP1"},{"begin":2613,"end":2663,"name":"KECCAK256"},{"begin":2613,"end":2663,"name":"SLOAD"},{"begin":2613,"end":2663,"name":"PUSH","value":"FF"},{"begin":2613,"end":2663,"name":"AND"},{"begin":2613,"end":2663,"name":"DUP2"},{"begin":2613,"end":2663,"name":"JUMP","value":"[out]"},{"begin":663,"end":688,"name":"tag","value":"56"},{"begin":663,"end":688,"name":"JUMPDEST"},{"begin":663,"end":688,"name":"PUSH","value":"4"},{"begin":663,"end":688,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":663,"end":688,"name":"AND"},{"begin":663,"end":688,"name":"DUP2"},{"begin":663,"end":688,"name":"JUMP","value":"[out]"},{"begin":2536,"end":2570,"name":"tag","value":"58"},{"begin":2536,"end":2570,"name":"JUMPDEST"},{"begin":2536,"end":2570,"name":"PUSH","value":"A"},{"begin":2536,"end":2570,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"B0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2536,"end":2570,"name":"SWAP1"},{"begin":2536,"end":2570,"name":"DIV"},{"begin":2536,"end":2570,"name":"PUSH","value":"FF"},{"begin":2536,"end":2570,"name":"AND"},{"begin":2536,"end":2570,"name":"DUP2"},{"begin":2536,"end":2570,"name":"JUMP","value":"[out]"},{"begin":3501,"end":3559,"name":"tag","value":"61"},{"begin":3501,"end":3559,"name":"JUMPDEST"},{"begin":3501,"end":3559,"name":"PUSH","value":"11"},{"begin":3501,"end":3559,"name":"PUSH","value":"20"},{"begin":3501,"end":3559,"name":"MSTORE"},{"begin":3501,"end":3559,"name":"PUSH","value":"0"},{"begin":3501,"end":3559,"name":"SWAP1"},{"begin":3501,"end":3559,"name":"DUP2"},{"begin":3501,"end":3559,"name":"MSTORE"},{"begin":3501,"end":3559,"name":"PUSH","value":"40"},{"begin":3501,"end":3559,"name":"SWAP1"},{"begin":3501,"end":3559,"name":"KECCAK256"},{"begin":3501,"end":3559,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"E0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3501,"end":3559,"name":"DUP2"},{"begin":3501,"end":3559,"name":"AND"},{"begin":3501,"end":3559,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"E0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":3501,"end":3559,"name":"SWAP1"},{"begin":3501,"end":3559,"name":"DIV"},{"begin":3501,"end":3559,"name":"PUSH","value":"FFFFFFFF"},{"begin":3501,"end":3559,"name":"AND"},{"begin":3501,"end":3559,"name":"DUP3"},{"begin":3501,"end":3559,"name":"JUMP","value":"[out]"},{"begin":2114,"end":2155,"name":"tag","value":"64"},{"begin":2114,"end":2155,"name":"JUMPDEST"},{"begin":2114,"end":2155,"name":"PUSH","value":"9"},{"begin":2114,"end":2155,"name":"PUSH","value":"20"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"0"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"DUP2"},{"begin":2114,"end":2155,"name":"MSTORE"},{"begin":2114,"end":2155,"name":"PUSH","value":"40"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"KECCAK256"},{"begin":2114,"end":2155,"name":"DUP1"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"1"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"3"},{"begin":2114,"end":2155,"name":"SWAP1"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"ADD"},{"begin":2114,"end":2155,"name":"SLOAD"},{"begin":2114,"end":2155,"name":"PUSH","value":"FF"},{"begin":2114,"end":2155,"name":"SWAP2"},{"begin":2114,"end":2155,"name":"DUP3"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"SWAP3"},{"begin":2114,"end":2155,"name":"SWAP2"},{"begin":2114,"end":2155,"name":"AND"},{"begin":2114,"end":2155,"name":"DUP4"},{"begin":2114,"end":2155,"name":"JUMP","value":"[out]"},{"begin":1117,"end":1138,"name":"tag","value":"66"},{"begin":1117,"end":1138,"name":"JUMPDEST"},{"begin":1117,"end":1138,"name":"PUSH","value":"7"},{"begin":1117,"end":1138,"name":"SLOAD"},{"begin":1117,"end":1138,"name":"DUP2"},{"begin":1117,"end":1138,"name":"JUMP","value":"[out]"},{"begin":3162,"end":3182,"name":"tag","value":"68"},{"begin":3162,"end":3182,"name":"JUMPDEST"},{"begin":3162,"end":3182,"name":"PUSH","value":"E"},{"begin":3162,"end":3182,"name":"SLOAD"},{"begin":3162,"end":3182,"name":"DUP2"},{"begin":3162,"end":3182,"name":"JUMP","value":"[out]"},{"begin":2576,"end":2607,"name":"tag","value":"70"},{"begin":2576,"end":2607,"name":"JUMPDEST"},{"begin":2576,"end":2607,"name":"PUSH","value":"A"},{"begin":2576,"end":2607,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"B8"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2576,"end":2607,"name":"SWAP1"},{"begin":2576,"end":2607,"name":"DIV"},{"begin":2576,"end":2607,"name":"PUSH","value":"FF"},{"begin":2576,"end":2607,"name":"AND"},{"begin":2576,"end":2607,"name":"DUP2"},{"begin":2576,"end":2607,"name":"JUMP","value":"[out]"},{"begin":3676,"end":3745,"name":"tag","value":"73"},{"begin":3676,"end":3745,"name":"JUMPDEST"},{"begin":3676,"end":3745,"name":"PUSH","value":"12"},{"begin":3676,"end":3745,"name":"PUSH","value":"20"},{"begin":3676,"end":3745,"name":"SWAP1"},{"begin":3676,"end":3745,"name":"DUP2"},{"begin":3676,"end":3745,"name":"MSTORE"},{"begin":3676,"end":3745,"name":"PUSH","value":"0"},{"begin":3676,"end":3745,"name":"SWAP3"},{"begin":3676,"end":3745,"name":"DUP4"},{"begin":3676,"end":3745,"name":"MSTORE"},{"begin":3676,"end":3745,"name":"PUSH","value":"40"},{"begin":3676,"end":3745,"name":"DUP1"},{"begin":3676,"end":3745,"name":"DUP5"},{"begin":3676,"end":3745,"name":"KECCAK256"},{"begin":3676,"end":3745,"name":"SWAP1"},{"begin":3676,"end":3745,"name":"SWAP2"},{"begin":3676,"end":3745,"name":"MSTORE"},{"begin":3676,"end":3745,"name":"SWAP1"},{"begin":3676,"end":3745,"name":"DUP3"},{"begin":3676,"end":3745,"name":"MSTORE"},{"begin":3676,"end":3745,"name":"SWAP1"},{"begin":3676,"end":3745,"name":"KECCAK256"},{"begin":3676,"end":3745,"name":"SLOAD"},{"begin":3676,"end":3745,"name":"DUP2"},{"begin":3676,"end":3745,"name":"JUMP","value":"[out]"},{"begin":364,"end":404,"name":"tag","value":"75"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH","value":"2"},{"begin":364,"end":404,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":364,"end":404,"name":"AND"},{"begin":364,"end":404,"name":"DUP2"},{"begin":364,"end":404,"name":"JUMP","value":"[out]"},{"begin":3862,"end":3931,"name":"tag","value":"78"},{"begin":3862,"end":3931,"name":"JUMPDEST"},{"begin":3862,"end":3931,"name":"PUSH","value":"13"},{"begin":3862,"end":3931,"name":"PUSH","value":"20"},{"begin":3862,"end":3931,"name":"SWAP1"},{"begin":3862,"end":3931,"name":"DUP2"},{"begin":3862,"end":3931,"name":"MSTORE"},{"begin":3862,"end":3931,"name":"PUSH","value":"0"},{"begin":3862,"end":3931,"name":"SWAP3"},{"begin":3862,"end":3931,"name":"DUP4"},{"begin":3862,"end":3931,"name":"MSTORE"},{"begin":3862,"end":3931,"name":"PUSH","value":"40"},{"begin":3862,"end":3931,"name":"DUP1"},{"begin":3862,"end":3931,"name":"DUP5"},{"begin":3862,"end":3931,"name":"KECCAK256"},{"begin":3862,"end":3931,"name":"SWAP1"},{"begin":3862,"end":3931,"name":"SWAP2"},{"begin":3862,"end":3931,"name":"MSTORE"},{"begin":3862,"end":3931,"name":"SWAP1"},{"begin":3862,"end":3931,"name":"DUP3"},{"begin":3862,"end":3931,"name":"MSTORE"},{"begin":3862,"end":3931,"name":"SWAP1"},{"begin":3862,"end":3931,"name":"KECCAK256"},{"begin":3862,"end":3931,"name":"SLOAD"},{"begin":3862,"end":3931,"name":"DUP2"},{"begin":3862,"end":3931,"name":"JUMP","value":"[out]"},{"begin":4008,"end":4051,"name":"tag","value":"81"},{"begin":4008,"end":4051,"name":"JUMPDEST"},{"begin":4008,"end":4051,"name":"PUSH","value":"14"},{"begin":4008,"end":4051,"name":"PUSH","value":"20"},{"begin":4008,"end":4051,"name":"MSTORE"},{"begin":4008,"end":4051,"name":"PUSH","value":"0"},{"begin":4008,"end":4051,"name":"SWAP1"},{"begin":4008,"end":4051,"name":"DUP2"},{"begin":4008,"end":4051,"name":"MSTORE"},{"begin":4008,"end":4051,"name":"PUSH","value":"40"},{"begin":4008,"end":4051,"name":"SWAP1"},{"begin":4008,"end":4051,"name":"KECCAK256"},{"begin":4008,"end":4051,"name":"SLOAD"},{"begin":4008,"end":4051,"name":"DUP2"},{"begin":4008,"end":4051,"name":"JUMP","value":"[out]"},{"begin":1240,"end":1289,"name":"tag","value":"84"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"8"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"40"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":1240,"end":1289,"name":"DUP2"},{"begin":1240,"end":1289,"name":"LT"},{"begin":1240,"end":1289,"name":"PUSH [tag]","value":"95"},{"begin":1240,"end":1289,"name":"JUMPI"},{"begin":1240,"end":1289,"name":"INVALID"},{"begin":1240,"end":1289,"name":"tag","value":"95"},{"begin":1240,"end":1289,"name":"JUMPDEST"},{"begin":1240,"end":1289,"name":"PUSH","value":"0"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"MSTORE"},{"begin":1240,"end":1289,"name":"PUSH","value":"20"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":1240,"end":1289,"name":"KECCAK256"},{"begin":1240,"end":1289,"name":"ADD"},{"begin":1240,"end":1289,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1240,"end":1289,"name":"AND"},{"begin":1240,"end":1289,"name":"SWAP2"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"DUP3"},{"begin":1240,"end":1289,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1240,"end":1289,"name":"JUMP","value":"[out]"},{"begin":469,"end":516,"name":"tag","value":"86"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH","value":"3"},{"begin":469,"end":516,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":469,"end":516,"name":"AND"},{"begin":469,"end":516,"name":"DUP2"},{"begin":469,"end":516,"name":"JUMP","value":"[out]"},{"begin":2497,"end":2530,"name":"tag","value":"88"},{"begin":2497,"end":2530,"name":"JUMPDEST"},{"begin":2497,"end":2530,"name":"PUSH","value":"A"},{"begin":2497,"end":2530,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A8"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":2497,"end":2530,"name":"SWAP1"},{"begin":2497,"end":2530,"name":"DIV"},{"begin":2497,"end":2530,"name":"PUSH","value":"FF"},{"begin":2497,"end":2530,"name":"AND"},{"begin":2497,"end":2530,"name":"DUP2"},{"begin":2497,"end":2530,"name":"JUMP","value":"[out]"},{"begin":805,"end":836,"name":"tag","value":"90"},{"begin":805,"end":836,"name":"JUMPDEST"},{"begin":805,"end":836,"name":"PUSH","value":"5"},{"begin":805,"end":836,"name":"SLOAD"},{"begin":805,"end":836,"name":"DUP2"},{"begin":805,"end":836,"name":"JUMP","value":"[out]"},{"begin":177,"end":197,"name":"tag","value":"92"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH","value":"0"},{"begin":177,"end":197,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":177,"end":197,"name":"AND"},{"begin":177,"end":197,"name":"DUP2"},{"begin":177,"end":197,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b50610668806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c80638e8f294b116100de578063ca0af04311610097578063dcfbc0c711610071578063dcfbc0c714610403578063e6653f3d1461040b578063e875544614610413578063f851a4401461041b57610173565b8063ca0af04314610383578063cc7ebdc4146103b1578063dce15449146103d757610173565b80638e8f294b146102ed57806394b2294b14610335578063aa9007541461033d578063ac0b0bb714610345578063b21be7fd1461034d578063bb82aa5e1461037b57610173565b80636b79c38d116101305780636b79c38d1461021d5780636d154ea51461026b578063731f0c2b146102915780637dc0d1d0146102b757806387f76303146102bf5780638c57804e146102c757610173565b80631d7b33d71461017857806324a3d622146101b057806326782247146101d45780633c94786f146101dc5780634ada90af146101f857806352d84d1e14610200575b600080fd5b61019e6004803603602081101561018e57600080fd5b50356001600160a01b0316610423565b60408051918252519081900360200190f35b6101b8610435565b604080516001600160a01b039092168252519081900360200190f35b6101b8610444565b6101e4610453565b604080519115158252519081900360200190f35b61019e610463565b6101b86004803603602081101561021657600080fd5b5035610469565b6102436004803603602081101561023357600080fd5b50356001600160a01b0316610490565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b6101e46004803603602081101561028157600080fd5b50356001600160a01b03166104ba565b6101e4600480360360208110156102a757600080fd5b50356001600160a01b03166104cf565b6101b86104e4565b6101e46104f3565b610243600480360360208110156102dd57600080fd5b50356001600160a01b0316610503565b6103136004803603602081101561030357600080fd5b50356001600160a01b031661052d565b6040805193151584526020840192909252151582820152519081900360600190f35b61019e610553565b61019e610559565b6101e461055f565b61019e6004803603604081101561036357600080fd5b506001600160a01b038135811691602001351661056f565b6101b861058c565b61019e6004803603604081101561039957600080fd5b506001600160a01b038135811691602001351661059b565b61019e600480360360208110156103c757600080fd5b50356001600160a01b03166105b8565b6101b8600480360360408110156103ed57600080fd5b506001600160a01b0381351690602001356105ca565b6101b86105ff565b6101e461060e565b61019e61061e565b6101b8610624565b600f6020526000908152604090205481565b600a546001600160a01b031681565b6001546001600160a01b031681565b600a54600160a01b900460ff1681565b60065481565b600d818154811061047657fe5b6000918252602090912001546001600160a01b0316905081565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b6004546001600160a01b031681565b600a54600160b01b900460ff1681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60075481565b600e5481565b600a54600160b81b900460ff1681565b601260209081526000928352604080842090915290825290205481565b6002546001600160a01b031681565b601360209081526000928352604080842090915290825290205481565b60146020526000908152604090205481565b600860205281600052604060002081815481106105e357fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600a54600160a81b900460ff1681565b60055481565b6000546001600160a01b03168156fea265627a7a723158206646f2afa7d279c02e6840556f31ee2d8117301b473b15e74ddaf9172acc667c64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x668 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E8F294B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xCA0AF043 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDCFBC0C7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x41B JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0xCA0AF043 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0xCC7EBDC4 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0x3D7 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0xAA900754 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0xB21BE7FD EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x37B JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x6B79C38D GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x6B79C38D EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x8C57804E EQ PUSH2 0x2C7 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1D7B33D7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0x52D84D1E EQ PUSH2 0x200 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x423 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B8 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B8 PUSH2 0x444 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH2 0x463 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x469 JUMP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x490 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4BA JUMP JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4CF JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x4E4 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x503 JUMP JUMPDEST PUSH2 0x313 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH2 0x553 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x559 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x55F JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x56F JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x58C JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x59B JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x19E PUSH2 0x61E JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x624 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x476 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5E3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH7 0x46F2AFA7D279C0 0x2E PUSH9 0x40556F31EE2D811730 SHL SELFBALANCE EXTCODESIZE ISZERO 0xE7 0x4D 0xDA 0xF9 OR 0x2A 0xCC PUSH7 0x7C64736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"2726:1328:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2726:1328:4;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106101735760003560e01c80638e8f294b116100de578063ca0af04311610097578063dcfbc0c711610071578063dcfbc0c714610403578063e6653f3d1461040b578063e875544614610413578063f851a4401461041b57610173565b8063ca0af04314610383578063cc7ebdc4146103b1578063dce15449146103d757610173565b80638e8f294b146102ed57806394b2294b14610335578063aa9007541461033d578063ac0b0bb714610345578063b21be7fd1461034d578063bb82aa5e1461037b57610173565b80636b79c38d116101305780636b79c38d1461021d5780636d154ea51461026b578063731f0c2b146102915780637dc0d1d0146102b757806387f76303146102bf5780638c57804e146102c757610173565b80631d7b33d71461017857806324a3d622146101b057806326782247146101d45780633c94786f146101dc5780634ada90af146101f857806352d84d1e14610200575b600080fd5b61019e6004803603602081101561018e57600080fd5b50356001600160a01b0316610423565b60408051918252519081900360200190f35b6101b8610435565b604080516001600160a01b039092168252519081900360200190f35b6101b8610444565b6101e4610453565b604080519115158252519081900360200190f35b61019e610463565b6101b86004803603602081101561021657600080fd5b5035610469565b6102436004803603602081101561023357600080fd5b50356001600160a01b0316610490565b604080516001600160e01b03909316835263ffffffff90911660208301528051918290030190f35b6101e46004803603602081101561028157600080fd5b50356001600160a01b03166104ba565b6101e4600480360360208110156102a757600080fd5b50356001600160a01b03166104cf565b6101b86104e4565b6101e46104f3565b610243600480360360208110156102dd57600080fd5b50356001600160a01b0316610503565b6103136004803603602081101561030357600080fd5b50356001600160a01b031661052d565b6040805193151584526020840192909252151582820152519081900360600190f35b61019e610553565b61019e610559565b6101e461055f565b61019e6004803603604081101561036357600080fd5b506001600160a01b038135811691602001351661056f565b6101b861058c565b61019e6004803603604081101561039957600080fd5b506001600160a01b038135811691602001351661059b565b61019e600480360360208110156103c757600080fd5b50356001600160a01b03166105b8565b6101b8600480360360408110156103ed57600080fd5b506001600160a01b0381351690602001356105ca565b6101b86105ff565b6101e461060e565b61019e61061e565b6101b8610624565b600f6020526000908152604090205481565b600a546001600160a01b031681565b6001546001600160a01b031681565b600a54600160a01b900460ff1681565b60065481565b600d818154811061047657fe5b6000918252602090912001546001600160a01b0316905081565b6010602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b600c6020526000908152604090205460ff1681565b600b6020526000908152604090205460ff1681565b6004546001600160a01b031681565b600a54600160b01b900460ff1681565b6011602052600090815260409020546001600160e01b03811690600160e01b900463ffffffff1682565b60096020526000908152604090208054600182015460039092015460ff91821692911683565b60075481565b600e5481565b600a54600160b81b900460ff1681565b601260209081526000928352604080842090915290825290205481565b6002546001600160a01b031681565b601360209081526000928352604080842090915290825290205481565b60146020526000908152604090205481565b600860205281600052604060002081815481106105e357fe5b6000918252602090912001546001600160a01b03169150829050565b6003546001600160a01b031681565b600a54600160a81b900460ff1681565b60055481565b6000546001600160a01b03168156fea265627a7a723158206646f2afa7d279c02e6840556f31ee2d8117301b473b15e74ddaf9172acc667c64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x173 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E8F294B GT PUSH2 0xDE JUMPI DUP1 PUSH4 0xCA0AF043 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDCFBC0C7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0xE6653F3D EQ PUSH2 0x40B JUMPI DUP1 PUSH4 0xE8755446 EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x41B JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0xCA0AF043 EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0xCC7EBDC4 EQ PUSH2 0x3B1 JUMPI DUP1 PUSH4 0xDCE15449 EQ PUSH2 0x3D7 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x8E8F294B EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0x94B2294B EQ PUSH2 0x335 JUMPI DUP1 PUSH4 0xAA900754 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xAC0B0BB7 EQ PUSH2 0x345 JUMPI DUP1 PUSH4 0xB21BE7FD EQ PUSH2 0x34D JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x37B JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x6B79C38D GT PUSH2 0x130 JUMPI DUP1 PUSH4 0x6B79C38D EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x6D154EA5 EQ PUSH2 0x26B JUMPI DUP1 PUSH4 0x731F0C2B EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x7DC0D1D0 EQ PUSH2 0x2B7 JUMPI DUP1 PUSH4 0x87F76303 EQ PUSH2 0x2BF JUMPI DUP1 PUSH4 0x8C57804E EQ PUSH2 0x2C7 JUMPI PUSH2 0x173 JUMP JUMPDEST DUP1 PUSH4 0x1D7B33D7 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x24A3D622 EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x26782247 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x3C94786F EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x4ADA90AF EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0x52D84D1E EQ PUSH2 0x200 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x18E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x423 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B8 PUSH2 0x435 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x1B8 PUSH2 0x444 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x453 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH2 0x463 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x469 JUMP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x490 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x281 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4BA JUMP JUMPDEST PUSH2 0x1E4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4CF JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x4E4 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x4F3 JUMP JUMPDEST PUSH2 0x243 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x503 JUMP JUMPDEST PUSH2 0x313 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE ISZERO ISZERO DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 RETURN JUMPDEST PUSH2 0x19E PUSH2 0x553 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x559 JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x55F JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x56F JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x58C JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x399 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x59B JUMP JUMPDEST PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x3C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x1B8 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x3ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x5CA JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x5FF JUMP JUMPDEST PUSH2 0x1E4 PUSH2 0x60E JUMP JUMPDEST PUSH2 0x19E PUSH2 0x61E JUMP JUMPDEST PUSH2 0x1B8 PUSH2 0x624 JUMP JUMPDEST PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xD DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x476 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xE0 SHL SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP3 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF SWAP2 DUP3 AND SWAP3 SWAP2 AND DUP4 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xB8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x12 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x14 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x5E3 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 POP DUP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0xA8 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH7 0x46F2AFA7D279C0 0x2E PUSH9 0x40556F31EE2D811730 SHL SELFBALANCE EXTCODESIZE ISZERO 0xE7 0x4D 0xDA 0xF9 OR 0x2A 0xCC PUSH7 0x7C64736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"2726:1328:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2726:1328:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3265:42;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3265:42:4;-1:-1:-1;;;;;3265:42:4;;:::i;:::-;;;;;;;;;;;;;;;;2426:28;;;:::i;:::-;;;;-1:-1:-1;;;;;2426:28:4;;;;;;;;;;;;;;273:27;;;:::i;2460:31::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;952:40;;;:::i;3054:26::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3054:26:4;;:::i;3375:58::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3375:58:4;-1:-1:-1;;;;;3375:58:4;;:::i;:::-;;;;-1:-1:-1;;;;;3375:58:4;;;;;;;;;;;;;;;;;;;;;;2669:52;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2669:52:4;-1:-1:-1;;;;;2669:52:4;;:::i;2613:50::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2613:50:4;-1:-1:-1;;;;;2613:50:4;;:::i;663:25::-;;;:::i;2536:34::-;;;:::i;3501:58::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3501:58:4;-1:-1:-1;;;;;3501:58:4;;:::i;2114:41::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2114:41:4;-1:-1:-1;;;;;2114:41:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1117:21;;;:::i;3162:20::-;;;:::i;2576:31::-;;;:::i;3676:69::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3676:69:4;;;;;;;;;;:::i;364:40::-;;;:::i;3862:69::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3862:69:4;;;;;;;;;;:::i;4008:43::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4008:43:4;-1:-1:-1;;;;;4008:43:4;;:::i;1240:49::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1240:49:4;;;;;;;;:::i;469:47::-;;;:::i;2497:33::-;;;:::i;805:31::-;;;:::i;177:20::-;;;:::i;3265:42::-;;;;;;;;;;;;;:::o;2426:28::-;;;-1:-1:-1;;;;;2426:28:4;;:::o;273:27::-;;;-1:-1:-1;;;;;273:27:4;;:::o;2460:31::-;;;-1:-1:-1;;;2460:31:4;;;;;:::o;952:40::-;;;;:::o;3054:26::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3054:26:4;;-1:-1:-1;3054:26:4;:::o;3375:58::-;;;;;;;;;;;;-1:-1:-1;;;;;3375:58:4;;;-1:-1:-1;;;3375:58:4;;;;;:::o;2669:52::-;;;;;;;;;;;;;;;:::o;2613:50::-;;;;;;;;;;;;;;;:::o;663:25::-;;;-1:-1:-1;;;;;663:25:4;;:::o;2536:34::-;;;-1:-1:-1;;;2536:34:4;;;;;:::o;3501:58::-;;;;;;;;;;;;-1:-1:-1;;;;;3501:58:4;;;-1:-1:-1;;;3501:58:4;;;;;:::o;2114:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1117:21::-;;;;:::o;3162:20::-;;;;:::o;2576:31::-;;;-1:-1:-1;;;2576:31:4;;;;;:::o;3676:69::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;364:40::-;;;-1:-1:-1;;;;;364:40:4;;:::o;3862:69::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;4008:43::-;;;;;;;;;;;;;:::o;1240:49::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1240:49:4;;-1:-1:-1;1240:49:4;;-1:-1:-1;1240:49:4:o;469:47::-;;;-1:-1:-1;;;;;469:47:4;;:::o;2497:33::-;;;-1:-1:-1;;;2497:33:4;;;;;:::o;805:31::-;;;;:::o;177:20::-;;;-1:-1:-1;;;;;177:20:4;;:::o","linkReferences":{}},"methodIdentifiers":{"_borrowGuardianPaused()":"e6653f3d","_mintGuardianPaused()":"3c94786f","accountAssets(address,uint256)":"dce15449","admin()":"f851a440","allMarkets(uint256)":"52d84d1e","borrowGuardianPaused(address)":"6d154ea5","closeFactorMantissa()":"e8755446","compAccrued(address)":"cc7ebdc4","compBorrowState(address)":"8c57804e","compBorrowerIndex(address,address)":"ca0af043","compRate()":"aa900754","compSpeeds(address)":"1d7b33d7","compSupplierIndex(address,address)":"b21be7fd","compSupplyState(address)":"6b79c38d","comptrollerImplementation()":"bb82aa5e","liquidationIncentiveMantissa()":"4ada90af","markets(address)":"8e8f294b","maxAssets()":"94b2294b","mintGuardianPaused(address)":"731f0c2b","oracle()":"7dc0d1d0","pauseGuardian()":"24a3d622","pendingAdmin()":"26782247","pendingComptrollerImplementation()":"dcfbc0c7","seizeGuardianPaused()":"ac0b0bb7","transferGuardianPaused()":"87f76303"},"gasEstimates":{"creation":{"codeDepositCost":"328000","executionCost":"368","totalCost":"328368"},"external":{"_borrowGuardianPaused()":"1093","_mintGuardianPaused()":"1117","accountAssets(address,uint256)":"2160","admin()":"1147","allMarkets(uint256)":"2104","borrowGuardianPaused(address)":"1181","closeFactorMantissa()":"1086","compAccrued(address)":"1191","compBorrowState(address)":"1352","compBorrowerIndex(address,address)":"1262","compRate()":"1065","compSpeeds(address)":"1148","compSupplierIndex(address,address)":"1328","compSupplyState(address)":"1242","comptrollerImplementation()":"1170","liquidationIncentiveMantissa()":"1110","markets(address)":"2843","maxAssets()":"1043","mintGuardianPaused(address)":"1203","oracle()":"1126","pauseGuardian()":"1083","pendingAdmin()":"1105","pendingComptrollerImplementation()":"1081","seizeGuardianPaused()":"1116","transferGuardianPaused()":"1138"},"internal":{}}},"ewasm":{"wasm":""}},"UnitrollerAdminStorage":{"abi":[{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"comptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingComptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ComptrollerStorage.sol\":\"UnitrollerAdminStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\",\"keccak256\":\"0x4cdd6e2b3db0368fe5d6cd84e0df65131e019170cd4bfbf5c83d067253786929\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"}},\"version\":1}","userdoc":{},"devdoc":{},"storageLayout":{"storage":[{"astId":4363,"contract":"contracts/ComptrollerStorage.sol:UnitrollerAdminStorage","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":4365,"contract":"contracts/ComptrollerStorage.sol:UnitrollerAdminStorage","label":"pendingAdmin","offset":0,"slot":"1","type":"t_address"},{"astId":4367,"contract":"contracts/ComptrollerStorage.sol:UnitrollerAdminStorage","label":"comptrollerImplementation","offset":0,"slot":"2","type":"t_address"},{"astId":4369,"contract":"contracts/ComptrollerStorage.sol:UnitrollerAdminStorage","label":"pendingComptrollerImplementation","offset":0,"slot":"3","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"    /* \"contracts/ComptrollerStorage.sol\":78:519  contract UnitrollerAdminStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ComptrollerStorage.sol\":78:519  contract UnitrollerAdminStorage {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ComptrollerStorage.sol\":78:519  contract UnitrollerAdminStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/ComptrollerStorage.sol\":78:519  contract UnitrollerAdminStorage {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x26782247\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xbb82aa5e\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xdcfbc0c7\n      eq\n      tag_5\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_3:\n      tag_7\n      tag_8\n      jump\t// in\n    tag_7:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_4:\n      tag_7\n      tag_10\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_5:\n      tag_7\n      tag_12\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_6:\n      tag_7\n      tag_14\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_8:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_10:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_12:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_14:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n\n    auxdata: 0xa265627a7a72315820d97dac6f93d4d49373ae3cd237a409465c61fd894e46d46d5426dd3dc78ae3a864736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":78,"end":519,"name":"PUSH","value":"80"},{"begin":78,"end":519,"name":"PUSH","value":"40"},{"begin":78,"end":519,"name":"MSTORE"},{"begin":78,"end":519,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":78,"end":519,"name":"POP"},{"begin":78,"end":519,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":78,"end":519,"name":"PUSH","value":"0"},{"begin":78,"end":519,"name":"CODECOPY"},{"begin":78,"end":519,"name":"PUSH","value":"0"},{"begin":78,"end":519,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a72315820d97dac6f93d4d49373ae3cd237a409465c61fd894e46d46d5426dd3dc78ae3a864736f6c63430005110032",".code":[{"begin":78,"end":519,"name":"PUSH","value":"80"},{"begin":78,"end":519,"name":"PUSH","value":"40"},{"begin":78,"end":519,"name":"MSTORE"},{"begin":78,"end":519,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":78,"end":519,"name":"POP"},{"begin":78,"end":519,"name":"PUSH","value":"4"},{"begin":78,"end":519,"name":"CALLDATASIZE"},{"begin":78,"end":519,"name":"LT"},{"begin":78,"end":519,"name":"PUSH [tag]","value":"2"},{"begin":78,"end":519,"name":"JUMPI"},{"begin":78,"end":519,"name":"PUSH","value":"0"},{"begin":78,"end":519,"name":"CALLDATALOAD"},{"begin":78,"end":519,"name":"PUSH","value":"E0"},{"begin":78,"end":519,"name":"SHR"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"PUSH","value":"26782247"},{"begin":78,"end":519,"name":"EQ"},{"begin":78,"end":519,"name":"PUSH [tag]","value":"3"},{"begin":78,"end":519,"name":"JUMPI"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"PUSH","value":"BB82AA5E"},{"begin":78,"end":519,"name":"EQ"},{"begin":78,"end":519,"name":"PUSH [tag]","value":"4"},{"begin":78,"end":519,"name":"JUMPI"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"PUSH","value":"DCFBC0C7"},{"begin":78,"end":519,"name":"EQ"},{"begin":78,"end":519,"name":"PUSH [tag]","value":"5"},{"begin":78,"end":519,"name":"JUMPI"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"PUSH","value":"F851A440"},{"begin":78,"end":519,"name":"EQ"},{"begin":78,"end":519,"name":"PUSH [tag]","value":"6"},{"begin":78,"end":519,"name":"JUMPI"},{"begin":78,"end":519,"name":"tag","value":"2"},{"begin":78,"end":519,"name":"JUMPDEST"},{"begin":78,"end":519,"name":"PUSH","value":"0"},{"begin":78,"end":519,"name":"DUP1"},{"begin":78,"end":519,"name":"REVERT"},{"begin":273,"end":300,"name":"tag","value":"3"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"7"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"8"},{"begin":273,"end":300,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"7"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"40"},{"begin":273,"end":300,"name":"DUP1"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SWAP3"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP3"},{"begin":273,"end":300,"name":"MSTORE"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SUB"},{"begin":273,"end":300,"name":"PUSH","value":"20"},{"begin":273,"end":300,"name":"ADD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"RETURN"},{"begin":364,"end":404,"name":"tag","value":"4"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"7"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"10"},{"begin":364,"end":404,"name":"JUMP","value":"[in]"},{"begin":469,"end":516,"name":"tag","value":"5"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"7"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"12"},{"begin":469,"end":516,"name":"JUMP","value":"[in]"},{"begin":177,"end":197,"name":"tag","value":"6"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"7"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"14"},{"begin":177,"end":197,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"8"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"1"},{"begin":273,"end":300,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"JUMP","value":"[out]"},{"begin":364,"end":404,"name":"tag","value":"10"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH","value":"2"},{"begin":364,"end":404,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":364,"end":404,"name":"AND"},{"begin":364,"end":404,"name":"DUP2"},{"begin":364,"end":404,"name":"JUMP","value":"[out]"},{"begin":469,"end":516,"name":"tag","value":"12"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH","value":"3"},{"begin":469,"end":516,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":469,"end":516,"name":"AND"},{"begin":469,"end":516,"name":"DUP2"},{"begin":469,"end":516,"name":"JUMP","value":"[out]"},{"begin":177,"end":197,"name":"tag","value":"14"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH","value":"0"},{"begin":177,"end":197,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":177,"end":197,"name":"AND"},{"begin":177,"end":197,"name":"DUP2"},{"begin":177,"end":197,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b5060f08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c80632678224714604b578063bb82aa5e14606d578063dcfbc0c7146073578063f851a440146079575b600080fd5b6051607f565b604080516001600160a01b039092168252519081900360200190f35b6051608e565b6051609d565b605160ac565b6001546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b6000546001600160a01b03168156fea265627a7a72315820d97dac6f93d4d49373ae3cd237a409465c61fd894e46d46d5426dd3dc78ae3a864736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xF0 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26782247 EQ PUSH1 0x4B JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH1 0x6D JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH1 0x73 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH1 0x79 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x51 PUSH1 0x7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x51 PUSH1 0x8E JUMP JUMPDEST PUSH1 0x51 PUSH1 0x9D JUMP JUMPDEST PUSH1 0x51 PUSH1 0xAC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xD9 PUSH30 0xAC6F93D4D49373AE3CD237A409465C61FD894E46D46D5426DD3DC78AE3A8 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"78:441:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:441:4;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052348015600f57600080fd5b506004361060465760003560e01c80632678224714604b578063bb82aa5e14606d578063dcfbc0c7146073578063f851a440146079575b600080fd5b6051607f565b604080516001600160a01b039092168252519081900360200190f35b6051608e565b6051609d565b605160ac565b6001546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b6000546001600160a01b03168156fea265627a7a72315820d97dac6f93d4d49373ae3cd237a409465c61fd894e46d46d5426dd3dc78ae3a864736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x46 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x26782247 EQ PUSH1 0x4B JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH1 0x6D JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH1 0x73 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH1 0x79 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x51 PUSH1 0x7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x51 PUSH1 0x8E JUMP JUMPDEST PUSH1 0x51 PUSH1 0x9D JUMP JUMPDEST PUSH1 0x51 PUSH1 0xAC JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xD9 PUSH30 0xAC6F93D4D49373AE3CD237A409465C61FD894E46D46D5426DD3DC78AE3A8 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"78:441:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;78:441:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;273:27;;;:::i;:::-;;;;-1:-1:-1;;;;;273:27:4;;;;;;;;;;;;;;364:40;;;:::i;469:47::-;;;:::i;177:20::-;;;:::i;273:27::-;;;-1:-1:-1;;;;;273:27:4;;:::o;364:40::-;;;-1:-1:-1;;;;;364:40:4;;:::o;469:47::-;;;-1:-1:-1;;;;;469:47:4;;:::o;177:20::-;;;-1:-1:-1;;;;;177:20:4;;:::o","linkReferences":{}},"methodIdentifiers":{"admin()":"f851a440","comptrollerImplementation()":"bb82aa5e","pendingAdmin()":"26782247","pendingComptrollerImplementation()":"dcfbc0c7"},"gasEstimates":{"creation":{"codeDepositCost":"48000","executionCost":"99","totalCost":"48099"},"external":{"admin()":"1081","comptrollerImplementation()":"1037","pendingAdmin()":"1015","pendingComptrollerImplementation()":"1059"},"internal":{}}},"ewasm":{"wasm":""}}},"contracts/EIP20Interface.sol":{"EIP20Interface":{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"remaining","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decimals","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"symbol","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"The number of tokens allowed to be spent (-1 means infinite)\"},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"Whether or not the approval succeeded\"},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance\"},\"totalSupply()\":{\"return\":\"The supply of tokens\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"return\":\"Whether or not the transfer succeeded\"},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"return\":\"Whether or not the transfer succeeded\"}},\"title\":\"ERC 20 Token Standard Interface https://eips.ethereum.org/EIPS/eip-20\"},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of the specified address\"},\"totalSupply()\":{\"notice\":\"Get the total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/EIP20Interface.sol\":\"EIP20Interface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"}},\"version\":1}","userdoc":{"methods":{"allowance(address,address)":{"notice":"Get the current allowance from `owner` for `spender`"},"approve(address,uint256)":{"notice":"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{"notice":"Gets the balance of the specified address"},"totalSupply()":{"notice":"Get the total number of tokens in circulation"},"transfer(address,uint256)":{"notice":"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{"notice":"Transfer `amount` tokens from `src` to `dst`"}}},"devdoc":{"methods":{"allowance(address,address)":{"params":{"owner":"The address of the account which owns the tokens to be spent","spender":"The address of the account which may transfer tokens"}},"approve(address,uint256)":{"details":"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)","params":{"amount":"The number of tokens that are approved (-1 means infinite)","spender":"The address of the account which may transfer tokens"}},"balanceOf(address)":{"params":{"owner":"The address from which the balance will be retrieved"}},"totalSupply()":{},"transfer(address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account"}},"transferFrom(address,address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account","src":"The address of the source account"}}},"title":"ERC 20 Token Standard Interface https://eips.ethereum.org/EIPS/eip-20"},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"ewasm":{"wasm":""}}},"contracts/EIP20NonStandardInterface.sol":{"EIP20NonStandardInterface":{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"remaining","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"}],"outputs":[{"name":"balance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"src","type":"address","internalType":"address"},{"name":"dst","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Version of ERC20 with no return values for `transfer` and `transferFrom` See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"The number of tokens allowed to be spent\"},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved\",\"spender\":\"The address of the account which may transfer tokens\"},\"return\":\"Whether or not the approval succeeded\"},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address from which the balance will be retrieved\"},\"return\":\"The balance\"},\"totalSupply()\":{\"return\":\"The supply of tokens\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"}}},\"title\":\"EIP20NonStandardInterface\"},\"userdoc\":{\"methods\":{\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of the specified address\"},\"totalSupply()\":{\"notice\":\"Get the total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/EIP20NonStandardInterface.sol\":\"EIP20NonStandardInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"}},\"version\":1}","userdoc":{"methods":{"allowance(address,address)":{"notice":"Get the current allowance from `owner` for `spender`"},"approve(address,uint256)":{"notice":"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{"notice":"Gets the balance of the specified address"},"totalSupply()":{"notice":"Get the total number of tokens in circulation"},"transfer(address,uint256)":{"notice":"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{"notice":"Transfer `amount` tokens from `src` to `dst`"}}},"devdoc":{"details":"Version of ERC20 with no return values for `transfer` and `transferFrom` See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca","methods":{"allowance(address,address)":{"params":{"owner":"The address of the account which owns the tokens to be spent","spender":"The address of the account which may transfer tokens"}},"approve(address,uint256)":{"details":"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)","params":{"amount":"The number of tokens that are approved","spender":"The address of the account which may transfer tokens"}},"balanceOf(address)":{"params":{"owner":"The address from which the balance will be retrieved"}},"totalSupply()":{},"transfer(address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account"}},"transferFrom(address,address,uint256)":{"params":{"amount":"The number of tokens to transfer","dst":"The address of the destination account","src":"The address of the source account"}}},"title":"EIP20NonStandardInterface"},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"ewasm":{"wasm":""}}},"contracts/ErrorReporter.sol":{"ComptrollerErrorReporter":{"abi":[{"type":"event","name":"Failure","inputs":[{"name":"error","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"detail","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ErrorReporter.sol\":\"ComptrollerErrorReporter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"assembly":"    /* \"contracts/ErrorReporter.sol\":26:2307  contract ComptrollerErrorReporter {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ErrorReporter.sol\":26:2307  contract ComptrollerErrorReporter {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ErrorReporter.sol\":26:2307  contract ComptrollerErrorReporter {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a723158208904d9adb26fcbf672e2d3cb7c2a7b185190983e003a2e50a4aefcbb1660e33264736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":26,"end":2307,"name":"PUSH","value":"80"},{"begin":26,"end":2307,"name":"PUSH","value":"40"},{"begin":26,"end":2307,"name":"MSTORE"},{"begin":26,"end":2307,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":26,"end":2307,"name":"POP"},{"begin":26,"end":2307,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":26,"end":2307,"name":"DUP1"},{"begin":26,"end":2307,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":26,"end":2307,"name":"PUSH","value":"0"},{"begin":26,"end":2307,"name":"CODECOPY"},{"begin":26,"end":2307,"name":"PUSH","value":"0"},{"begin":26,"end":2307,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a723158208904d9adb26fcbf672e2d3cb7c2a7b185190983e003a2e50a4aefcbb1660e33264736f6c63430005110032",".code":[{"begin":26,"end":2307,"name":"PUSH","value":"80"},{"begin":26,"end":2307,"name":"PUSH","value":"40"},{"begin":26,"end":2307,"name":"MSTORE"},{"begin":26,"end":2307,"name":"PUSH","value":"0"},{"begin":26,"end":2307,"name":"DUP1"},{"begin":26,"end":2307,"name":"REVERT"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a723158208904d9adb26fcbf672e2d3cb7c2a7b185190983e003a2e50a4aefcbb1660e33264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP10 DIV 0xD9 0xAD 0xB2 PUSH16 0xCBF672E2D3CB7C2A7B185190983E003A 0x2E POP LOG4 0xAE 0xFC 0xBB AND PUSH1 0xE3 ORIGIN PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"26:2281:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;26:2281:7;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052600080fdfea265627a7a723158208904d9adb26fcbf672e2d3cb7c2a7b185190983e003a2e50a4aefcbb1660e33264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP10 DIV 0xD9 0xAD 0xB2 PUSH16 0xCBF672E2D3CB7C2A7B185190983E003A 0x2E POP LOG4 0xAE 0xFC 0xBB AND PUSH1 0xE3 ORIGIN PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"26:2281:7:-;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"12400","executionCost":"66","totalCost":"12466"},"external":{},"internal":{"fail(enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo)":"infinite","failOpaque(enum ComptrollerErrorReporter.Error,enum ComptrollerErrorReporter.FailureInfo,uint256)":"infinite"}}},"ewasm":{"wasm":""}},"TokenErrorReporter":{"abi":[{"type":"event","name":"Failure","inputs":[{"name":"error","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"detail","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/ErrorReporter.sol\":\"TokenErrorReporter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"}},\"version\":1}","userdoc":{},"devdoc":{},"evm":{"assembly":"    /* \"contracts/ErrorReporter.sol\":2309:7685  contract TokenErrorReporter {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/ErrorReporter.sol\":2309:7685  contract TokenErrorReporter {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ErrorReporter.sol\":2309:7685  contract TokenErrorReporter {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a7231582086c99b2a4996a4de8e77e77e486a6438fda9f3c48090d477340793b731360e7e64736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":2309,"end":7685,"name":"PUSH","value":"80"},{"begin":2309,"end":7685,"name":"PUSH","value":"40"},{"begin":2309,"end":7685,"name":"MSTORE"},{"begin":2309,"end":7685,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":2309,"end":7685,"name":"POP"},{"begin":2309,"end":7685,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":2309,"end":7685,"name":"DUP1"},{"begin":2309,"end":7685,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":2309,"end":7685,"name":"PUSH","value":"0"},{"begin":2309,"end":7685,"name":"CODECOPY"},{"begin":2309,"end":7685,"name":"PUSH","value":"0"},{"begin":2309,"end":7685,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a7231582086c99b2a4996a4de8e77e77e486a6438fda9f3c48090d477340793b731360e7e64736f6c63430005110032",".code":[{"begin":2309,"end":7685,"name":"PUSH","value":"80"},{"begin":2309,"end":7685,"name":"PUSH","value":"40"},{"begin":2309,"end":7685,"name":"MSTORE"},{"begin":2309,"end":7685,"name":"PUSH","value":"0"},{"begin":2309,"end":7685,"name":"DUP1"},{"begin":2309,"end":7685,"name":"REVERT"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582086c99b2a4996a4de8e77e77e486a6438fda9f3c48090d477340793b731360e7e64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP7 0xC9 SWAP12 0x2A 0x49 SWAP7 LOG4 0xDE DUP15 PUSH24 0xE77E486A6438FDA9F3C48090D477340793B731360E7E6473 PUSH16 0x6C634300051100320000000000000000 ","sourceMap":"2309:5376:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2309:5376:7;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052600080fdfea265627a7a7231582086c99b2a4996a4de8e77e77e486a6438fda9f3c48090d477340793b731360e7e64736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 DUP7 0xC9 SWAP12 0x2A 0x49 SWAP7 LOG4 0xDE DUP15 PUSH24 0xE77E486A6438FDA9F3C48090D477340793B731360E7E6473 PUSH16 0x6C634300051100320000000000000000 ","sourceMap":"2309:5376:7:-;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"12400","executionCost":"66","totalCost":"12466"},"external":{},"internal":{"fail(enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo)":"infinite","failOpaque(enum TokenErrorReporter.Error,enum TokenErrorReporter.FailureInfo,uint256)":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/Exponential.sol":{"Exponential":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Compound\",\"methods\":{},\"title\":\"Exponential module for storing fixed-precision decimals\"},\"userdoc\":{\"methods\":{},\"notice\":\"Exp is a struct which stores decimals with a fixed precision of 18 decimal places.        Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:        `Exp({mantissa: 5100000000000000000})`.\"}},\"settings\":{\"compilationTarget\":{\"contracts/Exponential.sol\":\"Exponential\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"}},\"version\":1}","userdoc":{"notice":"Exp is a struct which stores decimals with a fixed precision of 18 decimal places.        Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:        `Exp({mantissa: 5100000000000000000})`."},"devdoc":{"author":"Compound","title":"Exponential module for storing fixed-precision decimals"},"evm":{"assembly":"    /* \"contracts/Exponential.sol\":380:12392  contract Exponential is CarefulMath {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/Exponential.sol\":380:12392  contract Exponential is CarefulMath {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Exponential.sol\":380:12392  contract Exponential is CarefulMath {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa265627a7a7231582072868c02d42bea97f89b7933f90bfe6c7089e353ea5ee94a599ef7ff17ca5e3364736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":380,"end":12392,"name":"PUSH","value":"80"},{"begin":380,"end":12392,"name":"PUSH","value":"40"},{"begin":380,"end":12392,"name":"MSTORE"},{"begin":380,"end":12392,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":380,"end":12392,"name":"POP"},{"begin":380,"end":12392,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":380,"end":12392,"name":"DUP1"},{"begin":380,"end":12392,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":380,"end":12392,"name":"PUSH","value":"0"},{"begin":380,"end":12392,"name":"CODECOPY"},{"begin":380,"end":12392,"name":"PUSH","value":"0"},{"begin":380,"end":12392,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a7231582072868c02d42bea97f89b7933f90bfe6c7089e353ea5ee94a599ef7ff17ca5e3364736f6c63430005110032",".code":[{"begin":380,"end":12392,"name":"PUSH","value":"80"},{"begin":380,"end":12392,"name":"PUSH","value":"40"},{"begin":380,"end":12392,"name":"MSTORE"},{"begin":380,"end":12392,"name":"PUSH","value":"0"},{"begin":380,"end":12392,"name":"DUP1"},{"begin":380,"end":12392,"name":"REVERT"}]}}},"bytecode":{"object":"6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582072868c02d42bea97f89b7933f90bfe6c7089e353ea5ee94a599ef7ff17ca5e3364736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH19 0x868C02D42BEA97F89B7933F90BFE6C7089E353 0xEA 0x5E 0xE9 0x4A MSIZE SWAP15 0xF7 SELFDESTRUCT OR 0xCA 0x5E CALLER PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"380:12012:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;380:12012:8;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"6080604052600080fdfea265627a7a7231582072868c02d42bea97f89b7933f90bfe6c7089e353ea5ee94a599ef7ff17ca5e3364736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH19 0x868C02D42BEA97F89B7933F90BFE6C7089E353 0xEA 0x5E 0xE9 0x4A MSIZE SWAP15 0xF7 SELFDESTRUCT OR 0xCA 0x5E CALLER PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ","sourceMap":"380:12012:8:-;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"12400","executionCost":"66","totalCost":"12466"},"external":{},"internal":{"addExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","add_(struct Exponential.Double memory,struct Exponential.Double memory)":"infinite","add_(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","add_(uint256,uint256)":"infinite","add_(uint256,uint256,string memory)":"infinite","divExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","divScalar(struct Exponential.Exp memory,uint256)":"infinite","divScalarByExp(uint256,struct Exponential.Exp memory)":"infinite","divScalarByExpTruncate(uint256,struct Exponential.Exp memory)":"infinite","div_(struct Exponential.Double memory,struct Exponential.Double memory)":"infinite","div_(struct Exponential.Double memory,uint256)":"infinite","div_(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","div_(struct Exponential.Exp memory,uint256)":"infinite","div_(uint256,struct Exponential.Double memory)":"infinite","div_(uint256,struct Exponential.Exp memory)":"infinite","div_(uint256,uint256)":"infinite","div_(uint256,uint256,string memory)":"infinite","fraction(uint256,uint256)":"infinite","getExp(uint256,uint256)":"infinite","greaterThanExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","isZeroExp(struct Exponential.Exp memory)":"infinite","lessThanExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","lessThanOrEqualExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","mulExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","mulExp(uint256,uint256)":"infinite","mulExp3(struct Exponential.Exp memory,struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","mulScalar(struct Exponential.Exp memory,uint256)":"infinite","mulScalarTruncate(struct Exponential.Exp memory,uint256)":"infinite","mulScalarTruncateAddUInt(struct Exponential.Exp memory,uint256,uint256)":"infinite","mul_(struct Exponential.Double memory,struct Exponential.Double memory)":"infinite","mul_(struct Exponential.Double memory,uint256)":"infinite","mul_(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","mul_(struct Exponential.Exp memory,uint256)":"infinite","mul_(uint256,struct Exponential.Double memory)":"infinite","mul_(uint256,struct Exponential.Exp memory)":"infinite","mul_(uint256,uint256)":"infinite","mul_(uint256,uint256,string memory)":"infinite","safe224(uint256,string memory)":"infinite","safe32(uint256,string memory)":"infinite","subExp(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","sub_(struct Exponential.Double memory,struct Exponential.Double memory)":"infinite","sub_(struct Exponential.Exp memory,struct Exponential.Exp memory)":"infinite","sub_(uint256,uint256)":"infinite","sub_(uint256,uint256,string memory)":"infinite","truncate(struct Exponential.Exp memory)":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/InterestRateModel.sol":{"InterestRateModel":{"abi":[{"type":"function","name":"getBorrowRate","inputs":[{"name":"cash","type":"uint256","internalType":"uint256"},{"name":"borrows","type":"uint256","internalType":"uint256"},{"name":"reserves","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getSupplyRate","inputs":[{"name":"cash","type":"uint256","internalType":"uint256"},{"name":"borrows","type":"uint256","internalType":"uint256"},{"name":"reserves","type":"uint256","internalType":"uint256"},{"name":"reserveFactorMantissa","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isInterestRateModel","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound\",\"methods\":{\"getBorrowRate(uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The total amount of borrows the market has outstanding\",\"cash\":\"The total amount of cash the market has\",\"reserves\":\"The total amnount of reserves the market has\"},\"return\":\"The borrow rate per block (as a percentage, and scaled by 1e18)\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"params\":{\"borrows\":\"The total amount of borrows the market has outstanding\",\"cash\":\"The total amount of cash the market has\",\"reserveFactorMantissa\":\"The current reserve factor the market has\",\"reserves\":\"The total amnount of reserves the market has\"},\"return\":\"The supply rate per block (as a percentage, and scaled by 1e18)\"}},\"title\":\"Compound's InterestRateModel Interface\"},\"userdoc\":{\"methods\":{\"getBorrowRate(uint256,uint256,uint256)\":{\"notice\":\"Calculates the current borrow interest rate per block\"},\"getSupplyRate(uint256,uint256,uint256,uint256)\":{\"notice\":\"Calculates the current supply interest rate per block\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/InterestRateModel.sol\":\"InterestRateModel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"}},\"version\":1}","userdoc":{"methods":{"getBorrowRate(uint256,uint256,uint256)":{"notice":"Calculates the current borrow interest rate per block"},"getSupplyRate(uint256,uint256,uint256,uint256)":{"notice":"Calculates the current supply interest rate per block"}}},"devdoc":{"author":"Compound","methods":{"getBorrowRate(uint256,uint256,uint256)":{"params":{"borrows":"The total amount of borrows the market has outstanding","cash":"The total amount of cash the market has","reserves":"The total amnount of reserves the market has"}},"getSupplyRate(uint256,uint256,uint256,uint256)":{"params":{"borrows":"The total amount of borrows the market has outstanding","cash":"The total amount of cash the market has","reserveFactorMantissa":"The current reserve factor the market has","reserves":"The total amnount of reserves the market has"}}},"title":"Compound's InterestRateModel Interface"},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getBorrowRate(uint256,uint256,uint256)":"15f24053","getSupplyRate(uint256,uint256,uint256,uint256)":"b8168816","isInterestRateModel()":"2191f92a"}},"ewasm":{"wasm":""}}},"contracts/PriceOracle.sol":{"PriceOracle":{"abi":[{"type":"function","name":"getUnderlyingPrice","inputs":[{"name":"cToken","type":"address","internalType":"contract CToken"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isPriceOracle","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"contract CToken\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPriceOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getUnderlyingPrice(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"return\":\"The underlying asset price mantissa (scaled by 1e18). Zero means the price is unavailable.\"}}},\"userdoc\":{\"methods\":{\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken asset\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"}},\"version\":1}","userdoc":{"methods":{"getUnderlyingPrice(address)":{"notice":"Get the underlying price of a cToken asset"}}},"devdoc":{"methods":{"getUnderlyingPrice(address)":{"params":{"cToken":"The cToken to get the underlying price of"}}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getUnderlyingPrice(address)":"fc57d4df","isPriceOracle()":"66331bba"}},"ewasm":{"wasm":""}}},"contracts/Unitroller.sol":{"Unitroller":{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"fallback","stateMutability":"payable"},{"type":"function","name":"_acceptAdmin","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_acceptImplementation","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setPendingAdmin","inputs":[{"name":"newPendingAdmin","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"_setPendingImplementation","inputs":[{"name":"newPendingImplementation","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"admin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"comptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingAdmin","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"pendingComptrollerImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"event","name":"Failure","inputs":[{"name":"error","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"info","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"detail","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"NewAdmin","inputs":[{"name":"oldAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewImplementation","inputs":[{"name":"oldImplementation","type":"address","indexed":false,"internalType":"address"},{"name":"newImplementation","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewPendingAdmin","inputs":[{"name":"oldPendingAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newPendingAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"NewPendingImplementation","inputs":[{"name":"oldPendingImplementation","type":"address","indexed":false,"internalType":"address"},{"name":"newPendingImplementation","type":"address","indexed":false,"internalType":"address"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"error\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"detail\",\"type\":\"uint256\"}],\"name\":\"Failure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"NewPendingImplementation\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"_acceptImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingImplementation\",\"type\":\"address\"}],\"name\":\"_setPendingImplementation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"comptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingComptrollerImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`. CTokens should reference this contract as their comptroller.\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_acceptImplementation()\":{\"details\":\"Admin function for new implementation to accept it's role as implementation\",\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"return\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"title\":\"ComptrollerCore\"},\"userdoc\":{\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_acceptImplementation()\":{\"notice\":\"Accepts new implementation of comptroller. msg.sender must be pendingImplementation\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setPendingImplementation(address)\":{\"notice\":\"* Admin Functions **\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Unitroller.sol\":\"Unitroller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Exponential.sol\\\";\\nimport \\\"./EIP20Interface.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\ncontract CToken is CTokenInterface, Exponential, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        require(msg.sender == admin, \\\"only admin may initialize the market\\\");\\n        require(accrualBlockNumber == 0 && borrowIndex == 0, \\\"market may only be initialized once\\\");\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        require(initialExchangeRateMantissa > 0, \\\"initial exchange rate must be greater than zero.\\\");\\n\\n        // Set the comptroller\\n        uint err = _setComptroller(comptroller_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting comptroller failed\\\");\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        err = _setInterestRateModelFresh(interestRateModel_);\\n        require(err == uint(Error.NO_ERROR), \\\"setting interest rate model failed\\\");\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.TRANSFER_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            return fail(Error.BAD_INPUT, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = uint(-1);\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /* Do the calculations, checking for {under,over}flow */\\n        MathError mathErr;\\n        uint allowanceNew;\\n        uint srcTokensNew;\\n        uint dstTokensNew;\\n\\n        (mathErr, allowanceNew) = subUInt(startingAllowance, tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ALLOWED);\\n        }\\n\\n        (mathErr, srcTokensNew) = subUInt(accountTokens[src], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_NOT_ENOUGH);\\n        }\\n\\n        (mathErr, dstTokensNew) = addUInt(accountTokens[dst], tokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return fail(Error.MATH_ERROR, FailureInfo.TRANSFER_TOO_MUCH);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = srcTokensNew;\\n        accountTokens[dst] = dstTokensNew;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != uint(-1)) {\\n            transferAllowances[src][spender] = allowanceNew;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        comptroller.transferVerify(address(this), src, dst, tokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint) {\\n        Exp memory exchangeRate = Exp({mantissa: exchangeRateCurrent()});\\n        (MathError mErr, uint balance) = mulScalarTruncate(exchangeRate, accountTokens[owner]);\\n        require(mErr == MathError.NO_ERROR, \\\"balance could not be calculated\\\");\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {\\n        uint cTokenBalance = accountTokens[account];\\n        uint borrowBalance;\\n        uint exchangeRateMantissa;\\n\\n        MathError mErr;\\n\\n        (mErr, borrowBalance) = borrowBalanceStoredInternal(account);\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        (mErr, exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (mErr != MathError.NO_ERROR) {\\n            return (uint(Error.MATH_ERROR), 0, 0, 0);\\n        }\\n\\n        return (uint(Error.NO_ERROR), cTokenBalance, borrowBalance, exchangeRateMantissa);\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) public view returns (uint) {\\n        (MathError err, uint result) = borrowBalanceStoredInternal(account);\\n        require(err == MathError.NO_ERROR, \\\"borrowBalanceStored: borrowBalanceStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {\\n        /* Note: we do not assert that the market is up to date */\\n        MathError mathErr;\\n        uint principalTimesIndex;\\n        uint result;\\n\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        (mathErr, principalTimesIndex) = mulUInt(borrowSnapshot.principal, borrowIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        (mathErr, result) = divUInt(principalTimesIndex, borrowSnapshot.interestIndex);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return (mathErr, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, result);\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() public nonReentrant returns (uint) {\\n        require(accrueInterest() == uint(Error.NO_ERROR), \\\"accrue interest failed\\\");\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() public view returns (uint) {\\n        (MathError err, uint result) = exchangeRateStoredInternal();\\n        require(err == MathError.NO_ERROR, \\\"exchangeRateStored: exchangeRateStoredInternal failed\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return (error code, calculated exchange rate scaled by 1e18)\\n     */\\n    function exchangeRateStoredInternal() internal view returns (MathError, uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return (MathError.NO_ERROR, initialExchangeRateMantissa);\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n            MathError mathErr;\\n\\n            (mathErr, cashPlusBorrowsMinusReserves) = addThenSubUInt(totalCash, totalBorrows, totalReserves);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            (mathErr, exchangeRate) = getExp(cashPlusBorrowsMinusReserves, _totalSupply);\\n            if (mathErr != MathError.NO_ERROR) {\\n                return (mathErr, 0);\\n            }\\n\\n            return (MathError.NO_ERROR, exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return uint(Error.NO_ERROR);\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        require(borrowRateMantissa <= borrowRateMaxMantissa, \\\"borrow rate is absurdly high\\\");\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        (MathError mathErr, uint blockDelta) = subUInt(currentBlockNumber, accrualBlockNumberPrior);\\n        require(mathErr == MathError.NO_ERROR, \\\"could not calculate block delta\\\");\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrowsNew = interestAccumulated + totalBorrows\\n         *  totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        Exp memory simpleInterestFactor;\\n        uint interestAccumulated;\\n        uint totalBorrowsNew;\\n        uint totalReservesNew;\\n        uint borrowIndexNew;\\n\\n        (mathErr, simpleInterestFactor) = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, interestAccumulated) = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalBorrowsNew) = addUInt(interestAccumulated, borrowsPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, totalReservesNew) = mulScalarTruncateAddUInt(Exp({mantissa: reserveFactorMantissa}), interestAccumulated, reservesPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, borrowIndexNew) = mulScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        totalBorrows = totalBorrowsNew;\\n        totalReserves = totalReservesNew;\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndexNew, totalBorrowsNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.MINT_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        return mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    struct MintLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint mintTokens;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n        uint actualMintAmount;\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual mint amount.\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.MINT_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.MINT_FRESHNESS_CHECK), 0);\\n        }\\n\\n        MintLocalVars memory vars;\\n\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        vars.actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        (vars.mathErr, vars.mintTokens) = divScalarByExpTruncate(vars.actualMintAmount, Exp({mantissa: vars.exchangeRateMantissa}));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_EXCHANGE_CALCULATION_FAILED\\\");\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = addUInt(totalSupply, vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.accountTokensNew) = addUInt(accountTokens[minter], vars.mintTokens);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[minter] = vars.accountTokensNew;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, vars.actualMintAmount, vars.mintTokens);\\n        emit Transfer(address(this), minter, vars.mintTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.mintVerify(address(this), minter, vars.actualMintAmount, vars.mintTokens);\\n\\n        return (uint(Error.NO_ERROR), vars.actualMintAmount);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted redeem failed\\n            return fail(Error(error), FailureInfo.REDEEM_ACCRUE_INTEREST_FAILED);\\n        }\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        return redeemFresh(msg.sender, 0, redeemAmount);\\n    }\\n\\n    struct RedeemLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint exchangeRateMantissa;\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        uint totalSupplyNew;\\n        uint accountTokensNew;\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {\\n        require(redeemTokensIn == 0 || redeemAmountIn == 0, \\\"one of redeemTokensIn or redeemAmountIn must be zero\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        (vars.mathErr, vars.exchangeRateMantissa) = exchangeRateStoredInternal();\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_RATE_READ_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            vars.redeemTokens = redeemTokensIn;\\n\\n            (vars.mathErr, vars.redeemAmount) = mulScalarTruncate(Exp({mantissa: vars.exchangeRateMantissa}), redeemTokensIn);\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n\\n            (vars.mathErr, vars.redeemTokens) = divScalarByExpTruncate(redeemAmountIn, Exp({mantissa: vars.exchangeRateMantissa}));\\n            if (vars.mathErr != MathError.NO_ERROR) {\\n                return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED, uint(vars.mathErr));\\n            }\\n\\n            vars.redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, vars.redeemTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REDEEM_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDEEM_FRESHNESS_CHECK);\\n        }\\n\\n        /*\\n         * We calculate the new total supply and redeemer balance, checking for underflow:\\n         *  totalSupplyNew = totalSupply - redeemTokens\\n         *  accountTokensNew = accountTokens[redeemer] - redeemTokens\\n         */\\n        (vars.mathErr, vars.totalSupplyNew) = subUInt(totalSupply, vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountTokensNew) = subUInt(accountTokens[redeemer], vars.redeemTokens);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < vars.redeemAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, vars.redeemAmount);\\n\\n        /* We write previously calculated values into storage */\\n        totalSupply = vars.totalSupplyNew;\\n        accountTokens[redeemer] = vars.accountTokensNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), vars.redeemTokens);\\n        emit Redeem(redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, vars.redeemAmount, vars.redeemTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return fail(Error(error), FailureInfo.BORROW_ACCRUE_INTEREST_FAILED);\\n        }\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return borrowFresh(msg.sender, borrowAmount);\\n    }\\n\\n    struct BorrowLocalVars {\\n        MathError mathErr;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.BORROW_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.BORROW_FRESHNESS_CHECK);\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.BORROW_CASH_NOT_AVAILABLE);\\n        }\\n\\n        BorrowLocalVars memory vars;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowsNew = accountBorrows + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.accountBorrowsNew) = addUInt(vars.accountBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = addUInt(totalBorrows, borrowAmount);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED, uint(vars.mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.borrowVerify(address(this), borrower, borrowAmount);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BORROW_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted borrow failed\\n            return (fail(Error(error), FailureInfo.REPAY_BEHALF_ACCRUE_INTEREST_FAILED), 0);\\n        }\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        return repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    struct RepayBorrowLocalVars {\\n        Error err;\\n        MathError mathErr;\\n        uint repayAmount;\\n        uint borrowerIndex;\\n        uint accountBorrows;\\n        uint accountBorrowsNew;\\n        uint totalBorrowsNew;\\n        uint actualRepayAmount;\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of undelrying tokens being returned\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);\\n        }\\n\\n        RepayBorrowLocalVars memory vars;\\n\\n        /* We remember the original borrowerIndex for verification purposes */\\n        vars.borrowerIndex = accountBorrows[borrower].interestIndex;\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);\\n        if (vars.mathErr != MathError.NO_ERROR) {\\n            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);\\n        }\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        if (repayAmount == uint(-1)) {\\n            vars.repayAmount = vars.accountBorrows;\\n        } else {\\n            vars.repayAmount = repayAmount;\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\\\");\\n\\n        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\\\");\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = vars.accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = vars.totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);\\n\\n        /* We call the defense hook */\\n        comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);\\n\\n        return (uint(Error.NO_ERROR), vars.actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED), 0);\\n        }\\n\\n        error = cTokenCollateral.accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            return (fail(Error(error), FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED), 0);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        return liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return (uint, uint) An error code (0=success, otherwise a failure, see ErrorReporter.sol), and the actual repayment amount.\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == uint(-1)) {\\n            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);\\n        }\\n\\n\\n        /* Fail if repayBorrow fails */\\n        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);\\n        if (repayBorrowError != uint(Error.NO_ERROR)) {\\n            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n        require(amountSeizeError == uint(Error.NO_ERROR), \\\"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\\\");\\n\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, \\\"LIQUIDATE_SEIZE_TOO_MUCH\\\");\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        uint seizeError;\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* Revert if seize tokens fails (since we cannot be sure of side effects) */\\n        require(seizeError == uint(Error.NO_ERROR), \\\"token seizure failed\\\");\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);\\n\\n        return (uint(Error.NO_ERROR), actualRepayAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {\\n        return seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            return failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION, allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            return fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER);\\n        }\\n\\n        MathError mathErr;\\n        uint borrowerTokensNew;\\n        uint liquidatorTokensNew;\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        (mathErr, borrowerTokensNew) = subUInt(accountTokens[borrower], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        (mathErr, liquidatorTokensNew) = addUInt(accountTokens[liquidator], seizeTokens);\\n        if (mathErr != MathError.NO_ERROR) {\\n            return failOpaque(Error.MATH_ERROR, FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED, uint(mathErr));\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the previously calculated values into storage */\\n        accountTokens[borrower] = borrowerTokensNew;\\n        accountTokens[liquidator] = liquidatorTokensNew;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, seizeTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.seizeVerify(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COMPTROLLER_OWNER_CHECK);\\n        }\\n\\n        ComptrollerInterface oldComptroller = comptroller;\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        require(newComptroller.isComptroller(), \\\"marker method returned false\\\");\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        // Emit NewComptroller(oldComptroller, newComptroller)\\n        emit NewComptroller(oldComptroller, newComptroller);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reserve factor change failed.\\n            return fail(Error(error), FailureInfo.SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_RESERVE_FACTOR_ADMIN_CHECK);\\n        }\\n\\n        // Verify market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_RESERVE_FACTOR_FRESH_CHECK);\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            return fail(Error.BAD_INPUT, FailureInfo.SET_RESERVE_FACTOR_BOUNDS_CHECK);\\n        }\\n\\n        uint oldReserveFactorMantissa = reserveFactorMantissa;\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        emit NewReserveFactor(oldReserveFactorMantissa, newReserveFactorMantissa);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring from msg.sender\\n     * @param addAmount Amount of addition to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.ADD_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n\\n        // _addReservesFresh emits reserve-addition-specific logs on errors, so we don't need to.\\n        (error, ) = _addReservesFresh(addAmount);\\n        return error;\\n    }\\n\\n    /**\\n     * @notice Add reserves by transferring from caller\\n     * @dev Requires fresh interest accrual\\n     * @param addAmount Amount of addition to reserves\\n     * @return (uint, uint) An error code (0=success, otherwise a failure (see ErrorReporter.sol for details)) and the actual amount added, net token fees\\n     */\\n    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {\\n        // totalReserves + actualAddAmount\\n        uint totalReservesNew;\\n        uint actualAddAmount;\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.ADD_RESERVES_FRESH_CHECK), actualAddAmount);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the caller and the addAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional addAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *  it returns the amount actually transferred, in case of a fee.\\n         */\\n\\n        actualAddAmount = doTransferIn(msg.sender, addAmount);\\n\\n        totalReservesNew = totalReserves + actualAddAmount;\\n\\n        /* Revert on overflow */\\n        require(totalReservesNew >= totalReserves, \\\"add reserves unexpected overflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] + actualAddAmount\\n        totalReserves = totalReservesNew;\\n\\n        /* Emit NewReserves(admin, actualAddAmount, reserves[n+1]) */\\n        emit ReservesAdded(msg.sender, actualAddAmount, totalReservesNew);\\n\\n        /* Return (NO_ERROR, actualAddAmount) */\\n        return (uint(Error.NO_ERROR), actualAddAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted reduce reserves failed.\\n            return fail(Error(error), FailureInfo.REDUCE_RESERVES_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // totalReserves - reduceAmount\\n        uint totalReservesNew;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_ADMIN_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.REDUCE_RESERVES_FRESH_CHECK);\\n        }\\n\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            return fail(Error.TOKEN_INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CASH_NOT_AVAILABLE);\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            return fail(Error.BAD_INPUT, FailureInfo.REDUCE_RESERVES_VALIDATION);\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReservesNew = totalReserves - reduceAmount;\\n        // We checked reduceAmount <= totalReserves above, so this should never revert.\\n        require(totalReservesNew <= totalReserves, \\\"reduce reserves unexpected underflow\\\");\\n\\n        // Store reserves[n+1] = reserves[n] - reduceAmount\\n        totalReserves = totalReservesNew;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReservesNew);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {\\n        uint error = accrueInterest();\\n        if (error != uint(Error.NO_ERROR)) {\\n            // accrueInterest emits logs on errors, but on top of that we want to log the fact that an attempted change of interest rate model failed\\n            return fail(Error(error), FailureInfo.SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED);\\n        }\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n\\n        // Used to store old model for use in the event that is emitted on success\\n        InterestRateModel oldInterestRateModel;\\n\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_INTEREST_RATE_MODEL_OWNER_CHECK);\\n        }\\n\\n        // We fail gracefully unless market's block number equals current block number\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            return fail(Error.MARKET_NOT_FRESH, FailureInfo.SET_INTEREST_RATE_MODEL_FRESH_CHECK);\\n        }\\n\\n        // Track the market's current interest rate model\\n        oldInterestRateModel = interestRateModel;\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        require(newInterestRateModel.isInterestRateModel(), \\\"marker method returned false\\\");\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure tather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) internal;\\n\\n\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0x16c3298d5c193a3ba224c9832d88d354da77d01c36037b58ad2cdfe3b82df42c\"},\"contracts/CTokenInterfaces.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    /**\\n     * @notice Maximum borrow rate that can ever be applied (.0005% / block)\\n     */\\n\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    /**\\n     * @notice Maximum fraction of interest that can be set aside for reserves\\n     */\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    /**\\n     * @notice Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n     */\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    /**\\n     * @notice Official record of token balances for each account\\n     */\\n    mapping (address => uint) internal accountTokens;\\n\\n    /**\\n     * @notice Approved token transfer amounts on behalf of others\\n     */\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    /**\\n     * @notice Mapping of account addresses to outstanding borrow balances\\n     */\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n}\\n\\ncontract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    /**\\n     * @notice Failure event\\n     */\\n    event Failure(uint error, uint info, uint detail);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) public view returns (uint);\\n    function exchangeRateCurrent() public returns (uint);\\n    function exchangeRateStored() public view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() public returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint);\\n    function _acceptAdmin() external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) external returns (uint);\\n    function _reduceReserves(uint reduceAmount) external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\ncontract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _addReserves(uint addAmount) external returns (uint);\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\ncontract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) public;\\n}\\n\\ncontract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public;\\n}\\n\",\"keccak256\":\"0xbedd7a46507f6e249f4019c9cadf95d5e3af38fa914c9572a81f6d79c946bd66\"},\"contracts/CarefulMath.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\",\"keccak256\":\"0x0647348f27e41d22555d99eebd217dee02a4d737df6accd7cce5347a7487c7de\"},\"contracts/ComptrollerInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) external returns (uint);\\n    function mintVerify(address cToken, address minter, uint mintAmount, uint mintTokens) external;\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) external returns (uint);\\n    function borrowVerify(address cToken, address borrower, uint borrowAmount) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount,\\n        uint borrowerIndex) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) external returns (uint);\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount,\\n        uint seizeTokens) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external returns (uint);\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) external;\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) external returns (uint);\\n    function transferVerify(address cToken, address src, address dst, uint transferTokens) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) external view returns (uint, uint);\\n}\\n\",\"keccak256\":\"0xede7670d2dd7b25d0187aecd2c28b7b5ca7d7c1bdac144fbedecf5d4bdd92a6b\"},\"contracts/ComptrollerStorage.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract UnitrollerAdminStorage {\\n    /**\\n    * @notice Administrator for this contract\\n    */\\n    address public admin;\\n\\n    /**\\n    * @notice Pending administrator for this contract\\n    */\\n    address public pendingAdmin;\\n\\n    /**\\n    * @notice Active brains of Unitroller\\n    */\\n    address public comptrollerImplementation;\\n\\n    /**\\n    * @notice Pending brains of Unitroller\\n    */\\n    address public pendingComptrollerImplementation;\\n}\\n\\ncontract ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\n    /**\\n     * @notice Oracle which gives the price of any given asset\\n     */\\n    PriceOracle public oracle;\\n\\n    /**\\n     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n     */\\n    uint public closeFactorMantissa;\\n\\n    /**\\n     * @notice Multiplier representing the discount on collateral that a liquidator receives\\n     */\\n    uint public liquidationIncentiveMantissa;\\n\\n    /**\\n     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n     */\\n    uint public maxAssets;\\n\\n    /**\\n     * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n     */\\n    mapping(address => CToken[]) public accountAssets;\\n\\n}\\n\\ncontract ComptrollerV2Storage is ComptrollerV1Storage {\\n    struct Market {\\n        /// @notice Whether or not this market is listed\\n        bool isListed;\\n\\n        /**\\n         * @notice Multiplier representing the most one can borrow against their collateral in this market.\\n         *  For instance, 0.9 to allow borrowing 90% of collateral value.\\n         *  Must be between 0 and 1, and stored as a mantissa.\\n         */\\n        uint collateralFactorMantissa;\\n\\n        /// @notice Per-market mapping of \\\"accounts in this asset\\\"\\n        mapping(address => bool) accountMembership;\\n\\n        /// @notice Whether or not this market receives COMP\\n        bool isComped;\\n    }\\n\\n    /**\\n     * @notice Official mapping of cTokens -> Market metadata\\n     * @dev Used e.g. to determine if a market is supported\\n     */\\n    mapping(address => Market) public markets;\\n\\n\\n    /**\\n     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n     *  Actions which allow users to remove their own assets cannot be paused.\\n     *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n     */\\n    address public pauseGuardian;\\n    bool public _mintGuardianPaused;\\n    bool public _borrowGuardianPaused;\\n    bool public transferGuardianPaused;\\n    bool public seizeGuardianPaused;\\n    mapping(address => bool) public mintGuardianPaused;\\n    mapping(address => bool) public borrowGuardianPaused;\\n}\\n\\ncontract ComptrollerV3Storage is ComptrollerV2Storage {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    /// @notice A list of all markets\\n    CToken[] public allMarkets;\\n\\n    /// @notice The rate at which the flywheel distributes COMP, per block\\n    uint public compRate;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint) public compSpeeds;\\n\\n    /// @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP market borrow state for each market\\n    mapping(address => CompMarketState) public compBorrowState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compSupplierIndex;\\n\\n    /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint)) public compBorrowerIndex;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint) public compAccrued;\\n}\\n\",\"keccak256\":\"0x4cdd6e2b3db0368fe5d6cd84e0df65131e019170cd4bfbf5c83d067253786929\"},\"contracts/EIP20Interface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xfd8ed2eac6d0b4d9ee6b32628ba68bae17544b66f190a5f7ce0c6ad024579dc8\"},\"contracts/EIP20NonStandardInterface.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x9719f12e4b80b51147ac195553a198cf8b0c516e7e4d04fc324a23ed15cbafb2\"},\"contracts/ErrorReporter.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\ncontract ComptrollerErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        INVALID_CLOSE_FACTOR,\\n        INVALID_COLLATERAL_FACTOR,\\n        INVALID_LIQUIDATION_INCENTIVE,\\n        MARKET_NOT_ENTERED, // no longer possible\\n        MARKET_NOT_LISTED,\\n        MARKET_ALREADY_LISTED,\\n        MATH_ERROR,\\n        NONZERO_BORROW_BALANCE,\\n        PRICE_ERROR,\\n        REJECTION,\\n        SNAPSHOT_ERROR,\\n        TOO_MANY_ASSETS,\\n        TOO_MUCH_REPAY\\n    }\\n\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\\n        EXIT_MARKET_BALANCE_OWED,\\n        EXIT_MARKET_REJECTION,\\n        SET_CLOSE_FACTOR_OWNER_CHECK,\\n        SET_CLOSE_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_NO_EXISTS,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\\n        SET_IMPLEMENTATION_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\\n        SET_LIQUIDATION_INCENTIVE_VALIDATION,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\\n        SET_PRICE_ORACLE_OWNER_CHECK,\\n        SUPPORT_MARKET_EXISTS,\\n        SUPPORT_MARKET_OWNER_CHECK,\\n        SET_PAUSE_GUARDIAN_OWNER_CHECK\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    enum Error {\\n        NO_ERROR,\\n        UNAUTHORIZED,\\n        BAD_INPUT,\\n        COMPTROLLER_REJECTION,\\n        COMPTROLLER_CALCULATION_ERROR,\\n        INTEREST_RATE_MODEL_ERROR,\\n        INVALID_ACCOUNT_PAIR,\\n        INVALID_CLOSE_AMOUNT_REQUESTED,\\n        INVALID_COLLATERAL_FACTOR,\\n        MATH_ERROR,\\n        MARKET_NOT_FRESH,\\n        MARKET_NOT_LISTED,\\n        TOKEN_INSUFFICIENT_ALLOWANCE,\\n        TOKEN_INSUFFICIENT_BALANCE,\\n        TOKEN_INSUFFICIENT_CASH,\\n        TOKEN_TRANSFER_IN_FAILED,\\n        TOKEN_TRANSFER_OUT_FAILED\\n    }\\n\\n    /*\\n     * Note: FailureInfo (but not Error) is kept in alphabetical order\\n     *       This is because FailureInfo grows significantly faster, and\\n     *       the order of Error has some meaning, while the order of FailureInfo\\n     *       is entirely arbitrary.\\n     */\\n    enum FailureInfo {\\n        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\\n        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\\n        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\\n        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        BORROW_ACCRUE_INTEREST_FAILED,\\n        BORROW_CASH_NOT_AVAILABLE,\\n        BORROW_FRESHNESS_CHECK,\\n        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        BORROW_MARKET_NOT_LISTED,\\n        BORROW_COMPTROLLER_REJECTION,\\n        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\\n        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\\n        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\\n        LIQUIDATE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\\n        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\\n        LIQUIDATE_FRESHNESS_CHECK,\\n        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\\n        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\\n        LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,\\n        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\\n        LIQUIDATE_SEIZE_TOO_MUCH,\\n        MINT_ACCRUE_INTEREST_FAILED,\\n        MINT_COMPTROLLER_REJECTION,\\n        MINT_EXCHANGE_CALCULATION_FAILED,\\n        MINT_EXCHANGE_RATE_READ_FAILED,\\n        MINT_FRESHNESS_CHECK,\\n        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        MINT_TRANSFER_IN_FAILED,\\n        MINT_TRANSFER_IN_NOT_POSSIBLE,\\n        REDEEM_ACCRUE_INTEREST_FAILED,\\n        REDEEM_COMPTROLLER_REJECTION,\\n        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\\n        REDEEM_EXCHANGE_RATE_READ_FAILED,\\n        REDEEM_FRESHNESS_CHECK,\\n        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\\n        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\\n        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\\n        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\\n        REDUCE_RESERVES_ADMIN_CHECK,\\n        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\\n        REDUCE_RESERVES_FRESH_CHECK,\\n        REDUCE_RESERVES_VALIDATION,\\n        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\\n        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_COMPTROLLER_REJECTION,\\n        REPAY_BORROW_FRESHNESS_CHECK,\\n        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\\n        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\\n        SET_COLLATERAL_FACTOR_OWNER_CHECK,\\n        SET_COLLATERAL_FACTOR_VALIDATION,\\n        SET_COMPTROLLER_OWNER_CHECK,\\n        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\\n        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\\n        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\\n        SET_MAX_ASSETS_OWNER_CHECK,\\n        SET_ORACLE_MARKET_NOT_LISTED,\\n        SET_PENDING_ADMIN_OWNER_CHECK,\\n        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\\n        SET_RESERVE_FACTOR_ADMIN_CHECK,\\n        SET_RESERVE_FACTOR_FRESH_CHECK,\\n        SET_RESERVE_FACTOR_BOUNDS_CHECK,\\n        TRANSFER_COMPTROLLER_REJECTION,\\n        TRANSFER_NOT_ALLOWED,\\n        TRANSFER_NOT_ENOUGH,\\n        TRANSFER_TOO_MUCH,\\n        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\\n        ADD_RESERVES_FRESH_CHECK,\\n        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE\\n    }\\n\\n    /**\\n      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\\n      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\\n      **/\\n    event Failure(uint error, uint info, uint detail);\\n\\n    /**\\n      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\\n      */\\n    function fail(Error err, FailureInfo info) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), 0);\\n\\n        return uint(err);\\n    }\\n\\n    /**\\n      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\\n      */\\n    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\\n        emit Failure(uint(err), uint(info), opaqueError);\\n\\n        return uint(err);\\n    }\\n}\",\"keccak256\":\"0x5179afb1071c0fd555e5c1f1d2565f72dbe1740cc3dd02f6e52037f150afc5c9\"},\"contracts/Exponential.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CarefulMath.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\\n\",\"keccak256\":\"0xaa59feeb5759614eb9a9af023f843e5e638f4cff7df0060c2f8b2b804d13db7f\"},\"contracts/InterestRateModel.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\ncontract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amnount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x081c9ed2b26861141f9d133cd6bcfac29f7abbaf12a09881fb2b37741ecbbfee\"},\"contracts/PriceOracle.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./CToken.sol\\\";\\n\\ncontract PriceOracle {\\n    /// @notice Indicator that this is a PriceOracle contract (for inspection)\\n    bool public constant isPriceOracle = true;\\n\\n    /**\\n      * @notice Get the underlying price of a cToken asset\\n      * @param cToken The cToken to get the underlying price of\\n      * @return The underlying asset price mantissa (scaled by 1e18).\\n      *  Zero means the price is unavailable.\\n      */\\n    function getUnderlyingPrice(CToken cToken) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe79ebc23bba508eb2479e7b3340abf566da1ab62131f106aee1aac3dc53816ef\"},\"contracts/Unitroller.sol\":{\"content\":\"pragma solidity ^0.5.16;\\n\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./ComptrollerStorage.sol\\\";\\n/**\\n * @title ComptrollerCore\\n * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\\n * CTokens should reference this contract as their comptroller.\\n */\\ncontract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is changed\\n      */\\n    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\\n      */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is changed\\n      */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\\n      */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    constructor() public {\\n        // Set admin to caller\\n        admin = msg.sender;\\n    }\\n\\n    /*** Admin Functions ***/\\n    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\\n\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\\n        }\\n\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = newPendingImplementation;\\n\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\\n    * @dev Admin function for new implementation to accept it's role as implementation\\n    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n    */\\n    function _acceptImplementation() public returns (uint) {\\n        // Check caller is pendingImplementation and pendingImplementation \\u2260 address(0)\\n        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldImplementation = comptrollerImplementation;\\n        address oldPendingImplementation = pendingComptrollerImplementation;\\n\\n        comptrollerImplementation = pendingComptrollerImplementation;\\n\\n        pendingComptrollerImplementation = address(0);\\n\\n        emit NewImplementation(oldImplementation, comptrollerImplementation);\\n        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\\n        }\\n\\n        // Save current value, if any, for inclusion in log\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\\n        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() public returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\\n            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\\n        }\\n\\n        // Save current values for inclusion in log\\n        address oldAdmin = admin;\\n        address oldPendingAdmin = pendingAdmin;\\n\\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(oldAdmin, admin);\\n        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\\n\\n        return uint(Error.NO_ERROR);\\n    }\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * It returns to the external caller whatever the implementation returns\\n     * or forwards reverts.\\n     */\\n    function () payable external {\\n        // delegate all other functions to current implementation\\n        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\\n\\n        assembly {\\n              let free_mem_ptr := mload(0x40)\\n              returndatacopy(free_mem_ptr, 0, returndatasize)\\n\\n              switch success\\n              case 0 { revert(free_mem_ptr, returndatasize) }\\n              default { return(free_mem_ptr, returndatasize) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51f81451eab9d5c4849507e724f2b2c53e41f54e5359fdbeae89432a727c16df\"}},\"version\":1}","userdoc":{"methods":{"_acceptAdmin()":{"notice":"Accepts transfer of admin rights. msg.sender must be pendingAdmin"},"_acceptImplementation()":{"notice":"Accepts new implementation of comptroller. msg.sender must be pendingImplementation"},"_setPendingAdmin(address)":{"notice":"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."},"_setPendingImplementation(address)":{"notice":"* Admin Functions **"}}},"devdoc":{"details":"Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`. CTokens should reference this contract as their comptroller.","methods":{"_acceptAdmin()":{"details":"Admin function for pending admin to accept role and update admin"},"_acceptImplementation()":{"details":"Admin function for new implementation to accept it's role as implementation"},"_setPendingAdmin(address)":{"details":"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.","params":{"newPendingAdmin":"New pending admin."}}},"title":"ComptrollerCore"},"storageLayout":{"storage":[{"astId":4363,"contract":"contracts/Unitroller.sol:Unitroller","label":"admin","offset":0,"slot":"0","type":"t_address"},{"astId":4365,"contract":"contracts/Unitroller.sol:Unitroller","label":"pendingAdmin","offset":0,"slot":"1","type":"t_address"},{"astId":4367,"contract":"contracts/Unitroller.sol:Unitroller","label":"comptrollerImplementation","offset":0,"slot":"2","type":"t_address"},{"astId":4369,"contract":"contracts/Unitroller.sol:Unitroller","label":"pendingComptrollerImplementation","offset":0,"slot":"3","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"evm":{"assembly":"    /* \"contracts/Unitroller.sol\":310:5653  contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Unitroller.sol\":1116:1203  constructor() public {... */\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n  pop\n    /* \"contracts/Unitroller.sol\":1178:1183  admin */\n  0x00\n    /* \"contracts/Unitroller.sol\":1178:1196  admin = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"contracts/Unitroller.sol\":1186:1196  msg.sender */\n  caller\n    /* \"contracts/Unitroller.sol\":1178:1196  admin = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"contracts/Unitroller.sol\":310:5653  contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Unitroller.sol\":310:5653  contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xdcfbc0c7\n      gt\n      tag_10\n      jumpi\n      dup1\n      0xdcfbc0c7\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xe992a041\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xe9c714f2\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf851a440\n      eq\n      tag_9\n      jumpi\n      jump(tag_1)\n    tag_10:\n      dup1\n      0x26782247\n      eq\n      tag_2\n      jumpi\n      dup1\n      0xb71d1a0c\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xbb82aa5e\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xc1e80334\n      eq\n      tag_5\n      jumpi\n    tag_1:\n        /* \"contracts/Unitroller.sol\":5303:5328  comptrollerImplementation */\n      sload(0x02)\n        /* \"contracts/Unitroller.sol\":5303:5351  comptrollerImplementation.delegatecall(msg.data) */\n      mload(0x40)\n        /* \"contracts/Unitroller.sol\":5285:5297  bool success */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Unitroller.sol\":5303:5328  comptrollerImplementation */\n      and\n      swap1\n        /* \"contracts/Unitroller.sol\":5285:5297  bool success */\n      dup3\n      swap1\n        /* \"contracts/Unitroller.sol\":5342:5350  msg.data */\n      calldatasize\n      swap1\n        /* \"contracts/Unitroller.sol\":5303:5351  comptrollerImplementation.delegatecall(msg.data) */\n      dup1\n        /* \"contracts/Unitroller.sol\":5285:5297  bool success */\n      dup4\n        /* \"contracts/Unitroller.sol\":5342:5350  msg.data */\n      dup4\n      dup1\n        /* \"contracts/Unitroller.sol\":5285:5297  bool success */\n      dup3\n        /* \"contracts/Unitroller.sol\":5303:5351  comptrollerImplementation.delegatecall(msg.data) */\n      dup5\n        /* \"--CODEGEN--\":1:34   */\n      calldatacopy\n        /* \"contracts/Unitroller.sol\":5303:5351  comptrollerImplementation.delegatecall(msg.data) */\n      mload(0x40)\n        /* \"--CODEGEN--\":45:61   */\n      swap3\n      add\n      swap5\n      pop\n        /* \"contracts/Unitroller.sol\":5303:5351  comptrollerImplementation.delegatecall(msg.data) */\n      0x00\n      swap4\n      pop\n      swap1\n      swap2\n      pop\n      pop\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      gas\n      delegatecall\n      swap2\n      pop\n      pop\n      returndatasize\n        /* \"--CODEGEN--\":14:15   */\n      dup1\n        /* \"--CODEGEN--\":21:22   */\n      0x00\n        /* \"--CODEGEN--\":16:47   */\n      dup2\n      eq\n      tag_14\n      jumpi\n        /* \"--CODEGEN--\":75:79   */\n      0x40\n        /* \"--CODEGEN--\":69:80   */\n      mload\n        /* \"--CODEGEN--\":64:80   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":144:148   */\n      0x1f\n        /* \"--CODEGEN--\":140:149   */\n      not\n        /* \"--CODEGEN--\":133:137   */\n      0x3f\n        /* \"--CODEGEN--\":115:131   */\n      returndatasize\n        /* \"--CODEGEN--\":111:138   */\n      add\n        /* \"--CODEGEN--\":107:150   */\n      and\n        /* \"--CODEGEN--\":104:105   */\n      dup3\n        /* \"--CODEGEN--\":100:151   */\n      add\n        /* \"--CODEGEN--\":94:98   */\n      0x40\n        /* \"--CODEGEN--\":87:152   */\n      mstore\n        /* \"--CODEGEN--\":169:185   */\n      returndatasize\n        /* \"--CODEGEN--\":166:167   */\n      dup3\n        /* \"--CODEGEN--\":159:186   */\n      mstore\n        /* \"--CODEGEN--\":225:241   */\n      returndatasize\n        /* \"--CODEGEN--\":222:223   */\n      0x00\n        /* \"--CODEGEN--\":215:219   */\n      0x20\n        /* \"--CODEGEN--\":212:213   */\n      dup5\n        /* \"--CODEGEN--\":208:220   */\n      add\n        /* \"--CODEGEN--\":193:242   */\n      returndatacopy\n        /* \"--CODEGEN--\":7:249   */\n      jump(tag_13)\n        /* \"--CODEGEN--\":16:47   */\n    tag_14:\n        /* \"--CODEGEN--\":36:40   */\n      0x60\n        /* \"--CODEGEN--\":31:40   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":7:249   */\n    tag_13:\n      pop\n        /* \"contracts/Unitroller.sol\":5284:5351  (bool success, ) = comptrollerImplementation.delegatecall(msg.data) */\n      pop\n      swap1\n      pop\n        /* \"contracts/Unitroller.sol\":5413:5417  0x40 */\n      0x40\n        /* \"contracts/Unitroller.sol\":5407:5418  mload(0x40) */\n      mload\n        /* \"contracts/Unitroller.sol\":5465:5479  returndatasize */\n      returndatasize\n        /* \"contracts/Unitroller.sol\":5462:5463  0 */\n      0x00\n        /* \"contracts/Unitroller.sol\":5448:5460  free_mem_ptr */\n      dup3\n        /* \"contracts/Unitroller.sol\":5433:5480  returndatacopy(free_mem_ptr, 0, returndatasize) */\n      returndatacopy\n        /* \"contracts/Unitroller.sol\":5503:5510  success */\n      dup2\n        /* \"contracts/Unitroller.sol\":5525:5572  case 0 { revert(free_mem_ptr, returndatasize) } */\n      dup1\n      iszero\n      tag_16\n      jumpi\n        /* \"contracts/Unitroller.sol\":5618:5632  returndatasize */\n      returndatasize\n        /* \"contracts/Unitroller.sol\":5604:5616  free_mem_ptr */\n      dup3\n        /* \"contracts/Unitroller.sol\":5597:5633  return(free_mem_ptr, returndatasize) */\n      return\n        /* \"contracts/Unitroller.sol\":5525:5572  case 0 { revert(free_mem_ptr, returndatasize) } */\n    tag_16:\n        /* \"contracts/Unitroller.sol\":5555:5569  returndatasize */\n      returndatasize\n        /* \"contracts/Unitroller.sol\":5541:5553  free_mem_ptr */\n      dup3\n        /* \"contracts/Unitroller.sol\":5534:5570  revert(free_mem_ptr, returndatasize) */\n      revert\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_2:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_17\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_17:\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n      pop\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/Unitroller.sol\":3377:3998  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {... */\n    tag_3:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_20\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_20:\n        /* \"contracts/Unitroller.sol\":3377:3998  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {... */\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_22\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_22:\n      pop\n        /* \"contracts/Unitroller.sol\":3377:3998  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_23\n      jump\t// in\n    tag_21:\n      0x40\n      dup1\n      mload\n      swap2\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_4:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_24\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_24:\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n      pop\n      tag_18\n      tag_26\n      jump\t// in\n        /* \"contracts/Unitroller.sol\":2058:2970  function _acceptImplementation() public returns (uint) {... */\n    tag_5:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_27\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_27:\n        /* \"contracts/Unitroller.sol\":2058:2970  function _acceptImplementation() public returns (uint) {... */\n      pop\n      tag_21\n      tag_29\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_6:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_30\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_30:\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n      pop\n      tag_18\n      tag_32\n      jump\t// in\n        /* \"contracts/Unitroller.sol\":1239:1766  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {... */\n    tag_7:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_33\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_33:\n        /* \"contracts/Unitroller.sol\":1239:1766  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {... */\n      pop\n      tag_21\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_35\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_35:\n      pop\n        /* \"contracts/Unitroller.sol\":1239:1766  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {... */\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_36\n      jump\t// in\n        /* \"contracts/Unitroller.sol\":4269:4989  function _acceptAdmin() public returns (uint) {... */\n    tag_8:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_37\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_37:\n        /* \"contracts/Unitroller.sol\":4269:4989  function _acceptAdmin() public returns (uint) {... */\n      pop\n      tag_21\n      tag_39\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_9:\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_40\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_40:\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n      pop\n      tag_18\n      tag_42\n      jump\t// in\n        /* \"contracts/ComptrollerStorage.sol\":273:300  address public pendingAdmin */\n    tag_19:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      jump\t// out\n        /* \"contracts/Unitroller.sol\":3377:3998  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {... */\n    tag_23:\n        /* \"contracts/Unitroller.sol\":3444:3448  uint */\n      0x00\n        /* \"contracts/Unitroller.sol\":3510:3515  admin */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/Unitroller.sol\":3496:3506  msg.sender */\n      caller\n        /* \"contracts/Unitroller.sol\":3496:3515  msg.sender != admin */\n      eq\n        /* \"contracts/Unitroller.sol\":3492:3616  if (msg.sender != admin) {... */\n      tag_44\n      jumpi\n        /* \"contracts/Unitroller.sol\":3538:3605  fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK) */\n      tag_45\n        /* \"contracts/Unitroller.sol\":3543:3561  Error.UNAUTHORIZED */\n      0x01\n        /* \"contracts/Unitroller.sol\":3563:3604  FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK */\n      0x0e\n        /* \"contracts/Unitroller.sol\":3538:3542  fail */\n      tag_46\n        /* \"contracts/Unitroller.sol\":3538:3605  fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK) */\n      jump\t// in\n    tag_45:\n        /* \"contracts/Unitroller.sol\":3531:3605  return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK) */\n      swap1\n      pop\n      jump(tag_43)\n        /* \"contracts/Unitroller.sol\":3492:3616  if (msg.sender != admin) {... */\n    tag_44:\n        /* \"contracts/Unitroller.sol\":3712:3724  pendingAdmin */\n      0x01\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Unitroller.sol\":3792:3822  pendingAdmin = newPendingAdmin */\n      dup5\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"contracts/Unitroller.sol\":3904:3953  NewPendingAdmin(oldPendingAdmin, newPendingAdmin) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Unitroller.sol\":3712:3724  pendingAdmin */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"contracts/Unitroller.sol\":3904:3953  NewPendingAdmin(oldPendingAdmin, newPendingAdmin) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      dup2\n      mload\n      0xca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9\n      swap3\n      swap2\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":3976:3990  Error.NO_ERROR */\n      0x00\n        /* \"contracts/Unitroller.sol\":3971:3991  uint(Error.NO_ERROR) */\n    tag_47:\n        /* \"contracts/Unitroller.sol\":3964:3991  return uint(Error.NO_ERROR) */\n      swap2\n      pop\n      pop\n        /* \"contracts/Unitroller.sol\":3377:3998  function _setPendingAdmin(address newPendingAdmin) public returns (uint) {... */\n    tag_43:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":364:404  address public comptrollerImplementation */\n    tag_26:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x02))\n      dup2\n      jump\t// out\n        /* \"contracts/Unitroller.sol\":2058:2970  function _acceptImplementation() public returns (uint) {... */\n    tag_29:\n        /* \"contracts/Unitroller.sol\":2231:2263  pendingComptrollerImplementation */\n      sload(0x03)\n        /* \"contracts/Unitroller.sol\":2107:2111  uint */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Unitroller.sol\":2231:2263  pendingComptrollerImplementation */\n      and\n        /* \"contracts/Unitroller.sol\":2217:2227  msg.sender */\n      caller\n        /* \"contracts/Unitroller.sol\":2217:2263  msg.sender != pendingComptrollerImplementation */\n      eq\n      iszero\n      dup1\n        /* \"contracts/Unitroller.sol\":2217:2313  msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0) */\n      tag_49\n      jumpi\n      pop\n        /* \"contracts/Unitroller.sol\":2267:2299  pendingComptrollerImplementation */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n        /* \"contracts/Unitroller.sol\":2267:2313  pendingComptrollerImplementation == address(0) */\n      iszero\n        /* \"contracts/Unitroller.sol\":2217:2313  msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0) */\n    tag_49:\n        /* \"contracts/Unitroller.sol\":2213:2428  if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {... */\n      iszero\n      tag_50\n      jumpi\n        /* \"contracts/Unitroller.sol\":2336:2417  fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) */\n      tag_51\n        /* \"contracts/Unitroller.sol\":2341:2359  Error.UNAUTHORIZED */\n      0x01\n        /* \"contracts/Unitroller.sol\":2361:2416  FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK */\n      dup1\n        /* \"contracts/Unitroller.sol\":2336:2340  fail */\n      tag_46\n        /* \"contracts/Unitroller.sol\":2336:2417  fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) */\n      jump\t// in\n    tag_51:\n        /* \"contracts/Unitroller.sol\":2329:2417  return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK) */\n      swap1\n      pop\n      jump(tag_48)\n        /* \"contracts/Unitroller.sol\":2213:2428  if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {... */\n    tag_50:\n        /* \"contracts/Unitroller.sol\":2518:2543  comptrollerImplementation */\n      0x02\n      dup1\n      sload\n        /* \"contracts/Unitroller.sol\":2588:2620  pendingComptrollerImplementation */\n      0x03\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup3\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"contracts/Unitroller.sol\":2631:2691  comptrollerImplementation = pendingComptrollerImplementation */\n      dup1\n      dup7\n      and\n      dup3\n      or\n      swap7\n      dup8\n      swap1\n      sstore\n        /* \"contracts/Unitroller.sol\":2702:2747  pendingComptrollerImplementation = address(0) */\n      swap1\n      swap3\n      and\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Unitroller.sol\":2763:2826  NewImplementation(oldImplementation, comptrollerImplementation) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Unitroller.sol\":2518:2543  comptrollerImplementation */\n      swap4\n      dup4\n      and\n        /* \"contracts/Unitroller.sol\":2763:2826  NewImplementation(oldImplementation, comptrollerImplementation) */\n      dup1\n      dup6\n      mstore\n        /* \"contracts/Unitroller.sol\":2800:2825  comptrollerImplementation */\n      swap5\n      swap1\n      swap3\n      and\n        /* \"contracts/Unitroller.sol\":2763:2826  NewImplementation(oldImplementation, comptrollerImplementation) */\n      0x20\n      dup5\n      add\n      mstore\n      dup2\n      mload\n        /* \"contracts/Unitroller.sol\":2588:2620  pendingComptrollerImplementation */\n      swap1\n      swap3\n        /* \"contracts/Unitroller.sol\":2763:2826  NewImplementation(oldImplementation, comptrollerImplementation) */\n      0xd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a\n      swap3\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":2892:2924  pendingComptrollerImplementation */\n      sload(0x03)\n        /* \"contracts/Unitroller.sol\":2841:2925  NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      dup3\n      mstore\n        /* \"contracts/Unitroller.sol\":2892:2924  pendingComptrollerImplementation */\n      swap1\n      swap3\n      and\n        /* \"contracts/Unitroller.sol\":2841:2925  NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation) */\n      0x20\n      dup4\n      add\n      mstore\n      dup1\n      mload\n      0xe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":2948:2962  Error.NO_ERROR */\n      0x00\n        /* \"contracts/Unitroller.sol\":2943:2963  uint(Error.NO_ERROR) */\n    tag_52:\n        /* \"contracts/Unitroller.sol\":2936:2963  return uint(Error.NO_ERROR) */\n      swap3\n      pop\n      pop\n      pop\n        /* \"contracts/Unitroller.sol\":2058:2970  function _acceptImplementation() public returns (uint) {... */\n    tag_48:\n      swap1\n      jump\t// out\n        /* \"contracts/ComptrollerStorage.sol\":469:516  address public pendingComptrollerImplementation */\n    tag_32:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x03))\n      dup2\n      jump\t// out\n        /* \"contracts/Unitroller.sol\":1239:1766  function _setPendingImplementation(address newPendingImplementation) public returns (uint) {... */\n    tag_36:\n        /* \"contracts/Unitroller.sol\":1324:1328  uint */\n      0x00\n        /* \"contracts/Unitroller.sol\":1359:1364  admin */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/Unitroller.sol\":1345:1355  msg.sender */\n      caller\n        /* \"contracts/Unitroller.sol\":1345:1364  msg.sender != admin */\n      eq\n        /* \"contracts/Unitroller.sol\":1341:1474  if (msg.sender != admin) {... */\n      tag_54\n      jumpi\n        /* \"contracts/Unitroller.sol\":1387:1463  fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK) */\n      tag_45\n        /* \"contracts/Unitroller.sol\":1392:1410  Error.UNAUTHORIZED */\n      0x01\n        /* \"contracts/Unitroller.sol\":1412:1462  FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK */\n      0x0f\n        /* \"contracts/Unitroller.sol\":1387:1391  fail */\n      tag_46\n        /* \"contracts/Unitroller.sol\":1387:1463  fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK) */\n      jump\t// in\n        /* \"contracts/Unitroller.sol\":1341:1474  if (msg.sender != admin) {... */\n    tag_54:\n        /* \"contracts/Unitroller.sol\":1519:1551  pendingComptrollerImplementation */\n      0x03\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Unitroller.sol\":1562:1621  pendingComptrollerImplementation = newPendingImplementation */\n      dup5\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      or\n      swap3\n      dup4\n      swap1\n      sstore\n        /* \"contracts/Unitroller.sol\":1637:1721  NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Unitroller.sol\":1519:1551  pendingComptrollerImplementation */\n      swap3\n      dup3\n      and\n        /* \"contracts/Unitroller.sol\":1637:1721  NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation) */\n      dup1\n      dup5\n      mstore\n        /* \"contracts/Unitroller.sol\":1688:1720  pendingComptrollerImplementation */\n      swap4\n      swap1\n      swap2\n      and\n        /* \"contracts/Unitroller.sol\":1637:1721  NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation) */\n      0x20\n      dup4\n      add\n      mstore\n      dup1\n      mload\n      0xe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d815\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":1744:1758  Error.NO_ERROR */\n      0x00\n        /* \"contracts/Unitroller.sol\":1739:1759  uint(Error.NO_ERROR) */\n      jump(tag_47)\n        /* \"contracts/Unitroller.sol\":4269:4989  function _acceptAdmin() public returns (uint) {... */\n    tag_39:\n        /* \"contracts/Unitroller.sol\":4415:4427  pendingAdmin */\n      sload(0x01)\n        /* \"contracts/Unitroller.sol\":4309:4313  uint */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/Unitroller.sol\":4415:4427  pendingAdmin */\n      and\n        /* \"contracts/Unitroller.sol\":4401:4411  msg.sender */\n      caller\n        /* \"contracts/Unitroller.sol\":4401:4427  msg.sender != pendingAdmin */\n      eq\n      iszero\n      dup1\n        /* \"contracts/Unitroller.sol\":4401:4455  msg.sender != pendingAdmin || msg.sender == address(0) */\n      tag_58\n      jumpi\n      pop\n        /* \"contracts/Unitroller.sol\":4431:4441  msg.sender */\n      caller\n        /* \"contracts/Unitroller.sol\":4431:4455  msg.sender == address(0) */\n      iszero\n        /* \"contracts/Unitroller.sol\":4401:4455  msg.sender != pendingAdmin || msg.sender == address(0) */\n    tag_58:\n        /* \"contracts/Unitroller.sol\":4397:4559  if (msg.sender != pendingAdmin || msg.sender == address(0)) {... */\n      iszero\n      tag_59\n      jumpi\n        /* \"contracts/Unitroller.sol\":4478:4548  fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK) */\n      tag_51\n        /* \"contracts/Unitroller.sol\":4483:4501  Error.UNAUTHORIZED */\n      0x01\n        /* \"contracts/Unitroller.sol\":4503:4547  FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK */\n      0x00\n        /* \"contracts/Unitroller.sol\":4478:4482  fail */\n      tag_46\n        /* \"contracts/Unitroller.sol\":4478:4548  fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK) */\n      jump\t// in\n        /* \"contracts/Unitroller.sol\":4397:4559  if (msg.sender != pendingAdmin || msg.sender == address(0)) {... */\n    tag_59:\n        /* \"contracts/Unitroller.sol\":4621:4637  address oldAdmin */\n      0x00\n        /* \"contracts/Unitroller.sol\":4640:4645  admin */\n      dup1\n      sload\n      0x01\n        /* \"contracts/Unitroller.sol\":4681:4693  pendingAdmin */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup3\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"contracts/Unitroller.sol\":4751:4771  admin = pendingAdmin */\n      dup1\n      dup7\n      and\n      dup3\n      or\n      swap7\n      dup8\n      swap1\n      sstore\n        /* \"contracts/Unitroller.sol\":4817:4842  pendingAdmin = address(0) */\n      swap1\n      swap3\n      and\n      swap1\n      swap3\n      sstore\n        /* \"contracts/Unitroller.sol\":4858:4883  NewAdmin(oldAdmin, admin) */\n      0x40\n      dup1\n      mload\n        /* \"contracts/Unitroller.sol\":4640:4645  admin */\n      swap4\n      dup4\n      and\n        /* \"contracts/Unitroller.sol\":4858:4883  NewAdmin(oldAdmin, admin) */\n      dup1\n      dup6\n      mstore\n        /* \"contracts/Unitroller.sol\":4877:4882  admin */\n      swap5\n      swap1\n      swap3\n      and\n        /* \"contracts/Unitroller.sol\":4858:4883  NewAdmin(oldAdmin, admin) */\n      0x20\n      dup5\n      add\n      mstore\n      dup2\n      mload\n        /* \"contracts/Unitroller.sol\":4681:4693  pendingAdmin */\n      swap1\n      swap3\n        /* \"contracts/Unitroller.sol\":4858:4883  NewAdmin(oldAdmin, admin) */\n      0xf9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc\n      swap3\n      swap1\n      dup3\n      swap1\n      sub\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":4931:4943  pendingAdmin */\n      sload(0x01)\n        /* \"contracts/Unitroller.sol\":4898:4944  NewPendingAdmin(oldPendingAdmin, pendingAdmin) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup6\n      and\n      dup3\n      mstore\n        /* \"contracts/Unitroller.sol\":4931:4943  pendingAdmin */\n      swap1\n      swap3\n      and\n        /* \"contracts/Unitroller.sol\":4898:4944  NewPendingAdmin(oldPendingAdmin, pendingAdmin) */\n      0x20\n      dup4\n      add\n      mstore\n      dup1\n      mload\n      0xca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log1\n        /* \"contracts/Unitroller.sol\":4967:4981  Error.NO_ERROR */\n      0x00\n        /* \"contracts/Unitroller.sol\":4962:4982  uint(Error.NO_ERROR) */\n      jump(tag_52)\n        /* \"contracts/ComptrollerStorage.sol\":177:197  address public admin */\n    tag_42:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n      dup2\n      jump\t// out\n        /* \"contracts/ErrorReporter.sol\":1855:2004  function fail(Error err, FailureInfo info) internal returns (uint) {... */\n    tag_46:\n        /* \"contracts/ErrorReporter.sol\":1916:1920  uint */\n      0x00\n        /* \"contracts/ErrorReporter.sol\":1937:1970  Failure(uint(err), uint(info), 0) */\n      0x45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa0\n        /* \"contracts/ErrorReporter.sol\":1950:1953  err */\n      dup4\n        /* \"contracts/ErrorReporter.sol\":1945:1954  uint(err) */\n      0x11\n      dup2\n      gt\n      iszero\n      tag_63\n      jumpi\n      invalid\n    tag_63:\n        /* \"contracts/ErrorReporter.sol\":1961:1965  info */\n      dup4\n        /* \"contracts/ErrorReporter.sol\":1956:1966  uint(info) */\n      0x13\n      dup2\n      gt\n      iszero\n      tag_64\n      jumpi\n      invalid\n    tag_64:\n        /* \"contracts/ErrorReporter.sol\":1937:1970  Failure(uint(err), uint(info), 0) */\n      0x40\n      dup1\n      mload\n      swap3\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"contracts/ErrorReporter.sol\":1968:1969  0 */\n      0x00\n        /* \"contracts/ErrorReporter.sol\":1937:1970  Failure(uint(err), uint(info), 0) */\n      dup3\n      dup3\n      add\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x60\n      add\n      swap1\n      log1\n        /* \"contracts/ErrorReporter.sol\":1993:1996  err */\n      dup3\n        /* \"contracts/ErrorReporter.sol\":1988:1997  uint(err) */\n      0x11\n      dup2\n      gt\n      iszero\n      tag_65\n      jumpi\n      invalid\n    tag_65:\n        /* \"contracts/ErrorReporter.sol\":1981:1997  return uint(err) */\n      swap4\n        /* \"contracts/ErrorReporter.sol\":1855:2004  function fail(Error err, FailureInfo info) internal returns (uint) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158201bdd75bbdbd8b8ca2942abce849b86e2b131beda745ef9fb090277884d28ea4264736f6c63430005110032\n}\n","legacyAssembly":{".code":[{"begin":310,"end":5653,"name":"PUSH","value":"80"},{"begin":310,"end":5653,"name":"PUSH","value":"40"},{"begin":310,"end":5653,"name":"MSTORE"},{"begin":1116,"end":1203,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"1"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"1"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1178,"end":1183,"name":"PUSH","value":"0"},{"begin":1178,"end":1196,"name":"DUP1"},{"begin":1178,"end":1196,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":1178,"end":1196,"name":"AND"},{"begin":1186,"end":1196,"name":"CALLER"},{"begin":1178,"end":1196,"name":"OR"},{"begin":1178,"end":1196,"name":"SWAP1"},{"begin":1178,"end":1196,"name":"SSTORE"},{"begin":310,"end":5653,"name":"PUSH #[$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH [$]","value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":310,"end":5653,"name":"PUSH","value":"0"},{"begin":310,"end":5653,"name":"CODECOPY"},{"begin":310,"end":5653,"name":"PUSH","value":"0"},{"begin":310,"end":5653,"name":"RETURN"}],".data":{"0":{".auxdata":"a265627a7a723158201bdd75bbdbd8b8ca2942abce849b86e2b131beda745ef9fb090277884d28ea4264736f6c63430005110032",".code":[{"begin":310,"end":5653,"name":"PUSH","value":"80"},{"begin":310,"end":5653,"name":"PUSH","value":"40"},{"begin":310,"end":5653,"name":"MSTORE"},{"begin":310,"end":5653,"name":"PUSH","value":"4"},{"begin":310,"end":5653,"name":"CALLDATASIZE"},{"begin":310,"end":5653,"name":"LT"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"1"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"PUSH","value":"0"},{"begin":310,"end":5653,"name":"CALLDATALOAD"},{"begin":310,"end":5653,"name":"PUSH","value":"E0"},{"begin":310,"end":5653,"name":"SHR"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"DCFBC0C7"},{"begin":310,"end":5653,"name":"GT"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"10"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"DCFBC0C7"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"6"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"E992A041"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"7"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"E9C714F2"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"8"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"F851A440"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"9"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"1"},{"begin":310,"end":5653,"name":"JUMP"},{"begin":310,"end":5653,"name":"tag","value":"10"},{"begin":310,"end":5653,"name":"JUMPDEST"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"26782247"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"2"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"B71D1A0C"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"3"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"BB82AA5E"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"4"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"DUP1"},{"begin":310,"end":5653,"name":"PUSH","value":"C1E80334"},{"begin":310,"end":5653,"name":"EQ"},{"begin":310,"end":5653,"name":"PUSH [tag]","value":"5"},{"begin":310,"end":5653,"name":"JUMPI"},{"begin":310,"end":5653,"name":"tag","value":"1"},{"begin":310,"end":5653,"name":"JUMPDEST"},{"begin":5303,"end":5328,"name":"PUSH","value":"2"},{"begin":5303,"end":5328,"name":"SLOAD"},{"begin":5303,"end":5351,"name":"PUSH","value":"40"},{"begin":5303,"end":5351,"name":"MLOAD"},{"begin":5285,"end":5297,"name":"PUSH","value":"0"},{"begin":5285,"end":5297,"name":"SWAP2"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":5303,"end":5328,"name":"AND"},{"begin":5303,"end":5328,"name":"SWAP1"},{"begin":5285,"end":5297,"name":"DUP3"},{"begin":5285,"end":5297,"name":"SWAP1"},{"begin":5342,"end":5350,"name":"CALLDATASIZE"},{"begin":5342,"end":5350,"name":"SWAP1"},{"begin":5303,"end":5351,"name":"DUP1"},{"begin":5285,"end":5297,"name":"DUP4"},{"begin":5342,"end":5350,"name":"DUP4"},{"begin":5342,"end":5350,"name":"DUP1"},{"begin":5285,"end":5297,"name":"DUP3"},{"begin":5303,"end":5351,"name":"DUP5"},{"begin":1,"end":34,"name":"CALLDATACOPY"},{"begin":5303,"end":5351,"name":"PUSH","value":"40"},{"begin":5303,"end":5351,"name":"MLOAD"},{"begin":45,"end":61,"name":"SWAP3"},{"begin":45,"end":61,"name":"ADD"},{"begin":45,"end":61,"name":"SWAP5"},{"begin":-1,"end":-1,"name":"POP"},{"begin":5303,"end":5351,"name":"PUSH","value":"0"},{"begin":5303,"end":5351,"name":"SWAP4"},{"begin":-1,"end":-1,"name":"POP"},{"begin":5303,"end":5351,"name":"SWAP1"},{"begin":5303,"end":5351,"name":"SWAP2"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"POP"},{"begin":5303,"end":5351,"name":"DUP1"},{"begin":5303,"end":5351,"name":"DUP4"},{"begin":5303,"end":5351,"name":"SUB"},{"begin":5303,"end":5351,"name":"DUP2"},{"begin":5303,"end":5351,"name":"DUP6"},{"begin":5303,"end":5351,"name":"GAS"},{"begin":5303,"end":5351,"name":"DELEGATECALL"},{"begin":5303,"end":5351,"name":"SWAP2"},{"begin":5303,"end":5351,"name":"POP"},{"begin":5303,"end":5351,"name":"POP"},{"begin":5303,"end":5351,"name":"RETURNDATASIZE"},{"begin":14,"end":15,"name":"DUP1"},{"begin":21,"end":22,"name":"PUSH","value":"0"},{"begin":16,"end":47,"name":"DUP2"},{"begin":16,"end":47,"name":"EQ"},{"begin":16,"end":47,"name":"PUSH [tag]","value":"14"},{"begin":16,"end":47,"name":"JUMPI"},{"begin":75,"end":79,"name":"PUSH","value":"40"},{"begin":69,"end":80,"name":"MLOAD"},{"begin":64,"end":80,"name":"SWAP2"},{"begin":64,"end":80,"name":"POP"},{"begin":144,"end":148,"name":"PUSH","value":"1F"},{"begin":140,"end":149,"name":"NOT"},{"begin":133,"end":137,"name":"PUSH","value":"3F"},{"begin":115,"end":131,"name":"RETURNDATASIZE"},{"begin":111,"end":138,"name":"ADD"},{"begin":107,"end":150,"name":"AND"},{"begin":104,"end":105,"name":"DUP3"},{"begin":100,"end":151,"name":"ADD"},{"begin":94,"end":98,"name":"PUSH","value":"40"},{"begin":87,"end":152,"name":"MSTORE"},{"begin":169,"end":185,"name":"RETURNDATASIZE"},{"begin":166,"end":167,"name":"DUP3"},{"begin":159,"end":186,"name":"MSTORE"},{"begin":225,"end":241,"name":"RETURNDATASIZE"},{"begin":222,"end":223,"name":"PUSH","value":"0"},{"begin":215,"end":219,"name":"PUSH","value":"20"},{"begin":212,"end":213,"name":"DUP5"},{"begin":208,"end":220,"name":"ADD"},{"begin":193,"end":242,"name":"RETURNDATACOPY"},{"begin":7,"end":249,"name":"PUSH [tag]","value":"13"},{"begin":7,"end":249,"name":"JUMP"},{"begin":16,"end":47,"name":"tag","value":"14"},{"begin":16,"end":47,"name":"JUMPDEST"},{"begin":36,"end":40,"name":"PUSH","value":"60"},{"begin":31,"end":40,"name":"SWAP2"},{"begin":31,"end":40,"name":"POP"},{"begin":7,"end":249,"name":"tag","value":"13"},{"begin":7,"end":249,"name":"JUMPDEST"},{"begin":7,"end":249,"name":"POP"},{"begin":5284,"end":5351,"name":"POP"},{"begin":5284,"end":5351,"name":"SWAP1"},{"begin":5284,"end":5351,"name":"POP"},{"begin":5413,"end":5417,"name":"PUSH","value":"40"},{"begin":5407,"end":5418,"name":"MLOAD"},{"begin":5465,"end":5479,"name":"RETURNDATASIZE"},{"begin":5462,"end":5463,"name":"PUSH","value":"0"},{"begin":5448,"end":5460,"name":"DUP3"},{"begin":5433,"end":5480,"name":"RETURNDATACOPY"},{"begin":5503,"end":5510,"name":"DUP2"},{"begin":5525,"end":5572,"name":"DUP1"},{"begin":5525,"end":5572,"name":"ISZERO"},{"begin":5525,"end":5572,"name":"PUSH [tag]","value":"16"},{"begin":5525,"end":5572,"name":"JUMPI"},{"begin":5618,"end":5632,"name":"RETURNDATASIZE"},{"begin":5604,"end":5616,"name":"DUP3"},{"begin":5597,"end":5633,"name":"RETURN"},{"begin":5525,"end":5572,"name":"tag","value":"16"},{"begin":5525,"end":5572,"name":"JUMPDEST"},{"begin":5555,"end":5569,"name":"RETURNDATASIZE"},{"begin":5541,"end":5553,"name":"DUP3"},{"begin":5534,"end":5570,"name":"REVERT"},{"begin":273,"end":300,"name":"tag","value":"2"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"17"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"17"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"POP"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"18"},{"begin":273,"end":300,"name":"PUSH [tag]","value":"19"},{"begin":273,"end":300,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"18"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"40"},{"begin":273,"end":300,"name":"DUP1"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SWAP3"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP3"},{"begin":273,"end":300,"name":"MSTORE"},{"begin":273,"end":300,"name":"MLOAD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"SUB"},{"begin":273,"end":300,"name":"PUSH","value":"20"},{"begin":273,"end":300,"name":"ADD"},{"begin":273,"end":300,"name":"SWAP1"},{"begin":273,"end":300,"name":"RETURN"},{"begin":3377,"end":3998,"name":"tag","value":"3"},{"begin":3377,"end":3998,"name":"JUMPDEST"},{"begin":3377,"end":3998,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"20"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"20"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":3377,"end":3998,"name":"POP"},{"begin":3377,"end":3998,"name":"PUSH [tag]","value":"21"},{"begin":3377,"end":3998,"name":"PUSH","value":"4"},{"begin":3377,"end":3998,"name":"DUP1"},{"begin":3377,"end":3998,"name":"CALLDATASIZE"},{"begin":3377,"end":3998,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"22"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"22"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":3377,"end":3998,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3377,"end":3998,"name":"AND"},{"begin":3377,"end":3998,"name":"PUSH [tag]","value":"23"},{"begin":3377,"end":3998,"name":"JUMP","value":"[in]"},{"begin":3377,"end":3998,"name":"tag","value":"21"},{"begin":3377,"end":3998,"name":"JUMPDEST"},{"begin":3377,"end":3998,"name":"PUSH","value":"40"},{"begin":3377,"end":3998,"name":"DUP1"},{"begin":3377,"end":3998,"name":"MLOAD"},{"begin":3377,"end":3998,"name":"SWAP2"},{"begin":3377,"end":3998,"name":"DUP3"},{"begin":3377,"end":3998,"name":"MSTORE"},{"begin":3377,"end":3998,"name":"MLOAD"},{"begin":3377,"end":3998,"name":"SWAP1"},{"begin":3377,"end":3998,"name":"DUP2"},{"begin":3377,"end":3998,"name":"SWAP1"},{"begin":3377,"end":3998,"name":"SUB"},{"begin":3377,"end":3998,"name":"PUSH","value":"20"},{"begin":3377,"end":3998,"name":"ADD"},{"begin":3377,"end":3998,"name":"SWAP1"},{"begin":3377,"end":3998,"name":"RETURN"},{"begin":364,"end":404,"name":"tag","value":"4"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"24"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"24"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"POP"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"18"},{"begin":364,"end":404,"name":"PUSH [tag]","value":"26"},{"begin":364,"end":404,"name":"JUMP","value":"[in]"},{"begin":2058,"end":2970,"name":"tag","value":"5"},{"begin":2058,"end":2970,"name":"JUMPDEST"},{"begin":2058,"end":2970,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"27"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"27"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":2058,"end":2970,"name":"POP"},{"begin":2058,"end":2970,"name":"PUSH [tag]","value":"21"},{"begin":2058,"end":2970,"name":"PUSH [tag]","value":"29"},{"begin":2058,"end":2970,"name":"JUMP","value":"[in]"},{"begin":469,"end":516,"name":"tag","value":"6"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"30"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"30"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"POP"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"18"},{"begin":469,"end":516,"name":"PUSH [tag]","value":"32"},{"begin":469,"end":516,"name":"JUMP","value":"[in]"},{"begin":1239,"end":1766,"name":"tag","value":"7"},{"begin":1239,"end":1766,"name":"JUMPDEST"},{"begin":1239,"end":1766,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"33"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"33"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":1239,"end":1766,"name":"POP"},{"begin":1239,"end":1766,"name":"PUSH [tag]","value":"21"},{"begin":1239,"end":1766,"name":"PUSH","value":"4"},{"begin":1239,"end":1766,"name":"DUP1"},{"begin":1239,"end":1766,"name":"CALLDATASIZE"},{"begin":1239,"end":1766,"name":"SUB"},{"begin":13,"end":15,"name":"PUSH","value":"20"},{"begin":8,"end":11,"name":"DUP2"},{"begin":5,"end":16,"name":"LT"},{"begin":2,"end":4,"name":"ISZERO"},{"begin":2,"end":4,"name":"PUSH [tag]","value":"35"},{"begin":2,"end":4,"name":"JUMPI"},{"begin":29,"end":30,"name":"PUSH","value":"0"},{"begin":26,"end":27,"name":"DUP1"},{"begin":19,"end":31,"name":"REVERT"},{"begin":2,"end":4,"name":"tag","value":"35"},{"begin":2,"end":4,"name":"JUMPDEST"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1239,"end":1766,"name":"CALLDATALOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1239,"end":1766,"name":"AND"},{"begin":1239,"end":1766,"name":"PUSH [tag]","value":"36"},{"begin":1239,"end":1766,"name":"JUMP","value":"[in]"},{"begin":4269,"end":4989,"name":"tag","value":"8"},{"begin":4269,"end":4989,"name":"JUMPDEST"},{"begin":4269,"end":4989,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"37"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"37"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":4269,"end":4989,"name":"POP"},{"begin":4269,"end":4989,"name":"PUSH [tag]","value":"21"},{"begin":4269,"end":4989,"name":"PUSH [tag]","value":"39"},{"begin":4269,"end":4989,"name":"JUMP","value":"[in]"},{"begin":177,"end":197,"name":"tag","value":"9"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"CALLVALUE"},{"begin":8,"end":17,"name":"DUP1"},{"begin":5,"end":7,"name":"ISZERO"},{"begin":5,"end":7,"name":"PUSH [tag]","value":"40"},{"begin":5,"end":7,"name":"JUMPI"},{"begin":30,"end":31,"name":"PUSH","value":"0"},{"begin":27,"end":28,"name":"DUP1"},{"begin":20,"end":32,"name":"REVERT"},{"begin":5,"end":7,"name":"tag","value":"40"},{"begin":5,"end":7,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"POP"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"18"},{"begin":177,"end":197,"name":"PUSH [tag]","value":"42"},{"begin":177,"end":197,"name":"JUMP","value":"[in]"},{"begin":273,"end":300,"name":"tag","value":"19"},{"begin":273,"end":300,"name":"JUMPDEST"},{"begin":273,"end":300,"name":"PUSH","value":"1"},{"begin":273,"end":300,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":273,"end":300,"name":"AND"},{"begin":273,"end":300,"name":"DUP2"},{"begin":273,"end":300,"name":"JUMP","value":"[out]"},{"begin":3377,"end":3998,"name":"tag","value":"23"},{"begin":3377,"end":3998,"name":"JUMPDEST"},{"begin":3444,"end":3448,"name":"PUSH","value":"0"},{"begin":3510,"end":3515,"name":"DUP1"},{"begin":3510,"end":3515,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3510,"end":3515,"name":"AND"},{"begin":3496,"end":3506,"name":"CALLER"},{"begin":3496,"end":3515,"name":"EQ"},{"begin":3492,"end":3616,"name":"PUSH [tag]","value":"44"},{"begin":3492,"end":3616,"name":"JUMPI"},{"begin":3538,"end":3605,"name":"PUSH [tag]","value":"45"},{"begin":3543,"end":3561,"name":"PUSH","value":"1"},{"begin":3563,"end":3604,"name":"PUSH","value":"E"},{"begin":3538,"end":3542,"name":"PUSH [tag]","value":"46"},{"begin":3538,"end":3605,"name":"JUMP","value":"[in]"},{"begin":3538,"end":3605,"name":"tag","value":"45"},{"begin":3538,"end":3605,"name":"JUMPDEST"},{"begin":3531,"end":3605,"name":"SWAP1"},{"begin":3531,"end":3605,"name":"POP"},{"begin":3531,"end":3605,"name":"PUSH [tag]","value":"43"},{"begin":3531,"end":3605,"name":"JUMP"},{"begin":3492,"end":3616,"name":"tag","value":"44"},{"begin":3492,"end":3616,"name":"JUMPDEST"},{"begin":3712,"end":3724,"name":"PUSH","value":"1"},{"begin":3712,"end":3724,"name":"DUP1"},{"begin":3712,"end":3724,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":3792,"end":3822,"name":"DUP5"},{"begin":3792,"end":3822,"name":"DUP2"},{"begin":3792,"end":3822,"name":"AND"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":3792,"end":3822,"name":"DUP4"},{"begin":3792,"end":3822,"name":"AND"},{"begin":3792,"end":3822,"name":"DUP2"},{"begin":3792,"end":3822,"name":"OR"},{"begin":3792,"end":3822,"name":"SWAP1"},{"begin":3792,"end":3822,"name":"SWAP4"},{"begin":3792,"end":3822,"name":"SSTORE"},{"begin":3904,"end":3953,"name":"PUSH","value":"40"},{"begin":3904,"end":3953,"name":"DUP1"},{"begin":3904,"end":3953,"name":"MLOAD"},{"begin":3712,"end":3724,"name":"SWAP2"},{"begin":3712,"end":3724,"name":"SWAP1"},{"begin":3712,"end":3724,"name":"SWAP3"},{"begin":3712,"end":3724,"name":"AND"},{"begin":3904,"end":3953,"name":"DUP1"},{"begin":3904,"end":3953,"name":"DUP3"},{"begin":3904,"end":3953,"name":"MSTORE"},{"begin":3904,"end":3953,"name":"PUSH","value":"20"},{"begin":3904,"end":3953,"name":"DUP3"},{"begin":3904,"end":3953,"name":"ADD"},{"begin":3904,"end":3953,"name":"SWAP4"},{"begin":3904,"end":3953,"name":"SWAP1"},{"begin":3904,"end":3953,"name":"SWAP4"},{"begin":3904,"end":3953,"name":"MSTORE"},{"begin":3904,"end":3953,"name":"DUP2"},{"begin":3904,"end":3953,"name":"MLOAD"},{"begin":3904,"end":3953,"name":"PUSH","value":"CA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9"},{"begin":3904,"end":3953,"name":"SWAP3"},{"begin":3904,"end":3953,"name":"SWAP2"},{"begin":3904,"end":3953,"name":"DUP2"},{"begin":3904,"end":3953,"name":"SWAP1"},{"begin":3904,"end":3953,"name":"SUB"},{"begin":3904,"end":3953,"name":"SWAP1"},{"begin":3904,"end":3953,"name":"SWAP2"},{"begin":3904,"end":3953,"name":"ADD"},{"begin":3904,"end":3953,"name":"SWAP1"},{"begin":3904,"end":3953,"name":"LOG1"},{"begin":3976,"end":3990,"name":"PUSH","value":"0"},{"begin":3971,"end":3991,"name":"tag","value":"47"},{"begin":3971,"end":3991,"name":"JUMPDEST"},{"begin":3964,"end":3991,"name":"SWAP2"},{"begin":3964,"end":3991,"name":"POP"},{"begin":3964,"end":3991,"name":"POP"},{"begin":3377,"end":3998,"name":"tag","value":"43"},{"begin":3377,"end":3998,"name":"JUMPDEST"},{"begin":3377,"end":3998,"name":"SWAP2"},{"begin":3377,"end":3998,"name":"SWAP1"},{"begin":3377,"end":3998,"name":"POP"},{"begin":3377,"end":3998,"name":"JUMP","value":"[out]"},{"begin":364,"end":404,"name":"tag","value":"26"},{"begin":364,"end":404,"name":"JUMPDEST"},{"begin":364,"end":404,"name":"PUSH","value":"2"},{"begin":364,"end":404,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":364,"end":404,"name":"AND"},{"begin":364,"end":404,"name":"DUP2"},{"begin":364,"end":404,"name":"JUMP","value":"[out]"},{"begin":2058,"end":2970,"name":"tag","value":"29"},{"begin":2058,"end":2970,"name":"JUMPDEST"},{"begin":2231,"end":2263,"name":"PUSH","value":"3"},{"begin":2231,"end":2263,"name":"SLOAD"},{"begin":2107,"end":2111,"name":"PUSH","value":"0"},{"begin":2107,"end":2111,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2231,"end":2263,"name":"AND"},{"begin":2217,"end":2227,"name":"CALLER"},{"begin":2217,"end":2263,"name":"EQ"},{"begin":2217,"end":2263,"name":"ISZERO"},{"begin":2217,"end":2263,"name":"DUP1"},{"begin":2217,"end":2313,"name":"PUSH [tag]","value":"49"},{"begin":2217,"end":2313,"name":"JUMPI"},{"begin":-1,"end":-1,"name":"POP"},{"begin":2267,"end":2299,"name":"PUSH","value":"3"},{"begin":2267,"end":2299,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2267,"end":2299,"name":"AND"},{"begin":2267,"end":2313,"name":"ISZERO"},{"begin":2217,"end":2313,"name":"tag","value":"49"},{"begin":2217,"end":2313,"name":"JUMPDEST"},{"begin":2213,"end":2428,"name":"ISZERO"},{"begin":2213,"end":2428,"name":"PUSH [tag]","value":"50"},{"begin":2213,"end":2428,"name":"JUMPI"},{"begin":2336,"end":2417,"name":"PUSH [tag]","value":"51"},{"begin":2341,"end":2359,"name":"PUSH","value":"1"},{"begin":2361,"end":2416,"name":"DUP1"},{"begin":2336,"end":2340,"name":"PUSH [tag]","value":"46"},{"begin":2336,"end":2417,"name":"JUMP","value":"[in]"},{"begin":2336,"end":2417,"name":"tag","value":"51"},{"begin":2336,"end":2417,"name":"JUMPDEST"},{"begin":2329,"end":2417,"name":"SWAP1"},{"begin":2329,"end":2417,"name":"POP"},{"begin":2329,"end":2417,"name":"PUSH [tag]","value":"48"},{"begin":2329,"end":2417,"name":"JUMP"},{"begin":2213,"end":2428,"name":"tag","value":"50"},{"begin":2213,"end":2428,"name":"JUMPDEST"},{"begin":2518,"end":2543,"name":"PUSH","value":"2"},{"begin":2518,"end":2543,"name":"DUP1"},{"begin":2518,"end":2543,"name":"SLOAD"},{"begin":2588,"end":2620,"name":"PUSH","value":"3"},{"begin":2588,"end":2620,"name":"DUP1"},{"begin":2588,"end":2620,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2588,"end":2620,"name":"DUP1"},{"begin":2588,"end":2620,"name":"DUP3"},{"begin":2588,"end":2620,"name":"AND"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":2631,"end":2691,"name":"DUP1"},{"begin":2631,"end":2691,"name":"DUP7"},{"begin":2631,"end":2691,"name":"AND"},{"begin":2631,"end":2691,"name":"DUP3"},{"begin":2631,"end":2691,"name":"OR"},{"begin":2631,"end":2691,"name":"SWAP7"},{"begin":2631,"end":2691,"name":"DUP8"},{"begin":2631,"end":2691,"name":"SWAP1"},{"begin":2631,"end":2691,"name":"SSTORE"},{"begin":2702,"end":2747,"name":"SWAP1"},{"begin":2702,"end":2747,"name":"SWAP3"},{"begin":2702,"end":2747,"name":"AND"},{"begin":2702,"end":2747,"name":"SWAP1"},{"begin":2702,"end":2747,"name":"SWAP3"},{"begin":2702,"end":2747,"name":"SSTORE"},{"begin":2763,"end":2826,"name":"PUSH","value":"40"},{"begin":2763,"end":2826,"name":"DUP1"},{"begin":2763,"end":2826,"name":"MLOAD"},{"begin":2518,"end":2543,"name":"SWAP4"},{"begin":2518,"end":2543,"name":"DUP4"},{"begin":2518,"end":2543,"name":"AND"},{"begin":2763,"end":2826,"name":"DUP1"},{"begin":2763,"end":2826,"name":"DUP6"},{"begin":2763,"end":2826,"name":"MSTORE"},{"begin":2800,"end":2825,"name":"SWAP5"},{"begin":2800,"end":2825,"name":"SWAP1"},{"begin":2800,"end":2825,"name":"SWAP3"},{"begin":2800,"end":2825,"name":"AND"},{"begin":2763,"end":2826,"name":"PUSH","value":"20"},{"begin":2763,"end":2826,"name":"DUP5"},{"begin":2763,"end":2826,"name":"ADD"},{"begin":2763,"end":2826,"name":"MSTORE"},{"begin":2763,"end":2826,"name":"DUP2"},{"begin":2763,"end":2826,"name":"MLOAD"},{"begin":2588,"end":2620,"name":"SWAP1"},{"begin":2588,"end":2620,"name":"SWAP3"},{"begin":2763,"end":2826,"name":"PUSH","value":"D604DE94D45953F9138079EC1B82D533CB2160C906D1076D1F7ED54BEFBCA97A"},{"begin":2763,"end":2826,"name":"SWAP3"},{"begin":2763,"end":2826,"name":"SWAP1"},{"begin":2763,"end":2826,"name":"DUP3"},{"begin":2763,"end":2826,"name":"SWAP1"},{"begin":2763,"end":2826,"name":"SUB"},{"begin":2763,"end":2826,"name":"ADD"},{"begin":2763,"end":2826,"name":"SWAP1"},{"begin":2763,"end":2826,"name":"LOG1"},{"begin":2892,"end":2924,"name":"PUSH","value":"3"},{"begin":2892,"end":2924,"name":"SLOAD"},{"begin":2841,"end":2925,"name":"PUSH","value":"40"},{"begin":2841,"end":2925,"name":"DUP1"},{"begin":2841,"end":2925,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":2841,"end":2925,"name":"DUP1"},{"begin":2841,"end":2925,"name":"DUP6"},{"begin":2841,"end":2925,"name":"AND"},{"begin":2841,"end":2925,"name":"DUP3"},{"begin":2841,"end":2925,"name":"MSTORE"},{"begin":2892,"end":2924,"name":"SWAP1"},{"begin":2892,"end":2924,"name":"SWAP3"},{"begin":2892,"end":2924,"name":"AND"},{"begin":2841,"end":2925,"name":"PUSH","value":"20"},{"begin":2841,"end":2925,"name":"DUP4"},{"begin":2841,"end":2925,"name":"ADD"},{"begin":2841,"end":2925,"name":"MSTORE"},{"begin":2841,"end":2925,"name":"DUP1"},{"begin":2841,"end":2925,"name":"MLOAD"},{"begin":2841,"end":2925,"name":"PUSH","value":"E945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815"},{"begin":2841,"end":2925,"name":"SWAP3"},{"begin":2841,"end":2925,"name":"DUP2"},{"begin":2841,"end":2925,"name":"SWAP1"},{"begin":2841,"end":2925,"name":"SUB"},{"begin":2841,"end":2925,"name":"SWAP1"},{"begin":2841,"end":2925,"name":"SWAP2"},{"begin":2841,"end":2925,"name":"ADD"},{"begin":2841,"end":2925,"name":"SWAP1"},{"begin":2841,"end":2925,"name":"LOG1"},{"begin":2948,"end":2962,"name":"PUSH","value":"0"},{"begin":2943,"end":2963,"name":"tag","value":"52"},{"begin":2943,"end":2963,"name":"JUMPDEST"},{"begin":2936,"end":2963,"name":"SWAP3"},{"begin":2936,"end":2963,"name":"POP"},{"begin":2936,"end":2963,"name":"POP"},{"begin":2936,"end":2963,"name":"POP"},{"begin":2058,"end":2970,"name":"tag","value":"48"},{"begin":2058,"end":2970,"name":"JUMPDEST"},{"begin":2058,"end":2970,"name":"SWAP1"},{"begin":2058,"end":2970,"name":"JUMP","value":"[out]"},{"begin":469,"end":516,"name":"tag","value":"32"},{"begin":469,"end":516,"name":"JUMPDEST"},{"begin":469,"end":516,"name":"PUSH","value":"3"},{"begin":469,"end":516,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":469,"end":516,"name":"AND"},{"begin":469,"end":516,"name":"DUP2"},{"begin":469,"end":516,"name":"JUMP","value":"[out]"},{"begin":1239,"end":1766,"name":"tag","value":"36"},{"begin":1239,"end":1766,"name":"JUMPDEST"},{"begin":1324,"end":1328,"name":"PUSH","value":"0"},{"begin":1359,"end":1364,"name":"DUP1"},{"begin":1359,"end":1364,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1359,"end":1364,"name":"AND"},{"begin":1345,"end":1355,"name":"CALLER"},{"begin":1345,"end":1364,"name":"EQ"},{"begin":1341,"end":1474,"name":"PUSH [tag]","value":"54"},{"begin":1341,"end":1474,"name":"JUMPI"},{"begin":1387,"end":1463,"name":"PUSH [tag]","value":"45"},{"begin":1392,"end":1410,"name":"PUSH","value":"1"},{"begin":1412,"end":1462,"name":"PUSH","value":"F"},{"begin":1387,"end":1391,"name":"PUSH [tag]","value":"46"},{"begin":1387,"end":1463,"name":"JUMP","value":"[in]"},{"begin":1341,"end":1474,"name":"tag","value":"54"},{"begin":1341,"end":1474,"name":"JUMPDEST"},{"begin":1519,"end":1551,"name":"PUSH","value":"3"},{"begin":1519,"end":1551,"name":"DUP1"},{"begin":1519,"end":1551,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":1562,"end":1621,"name":"DUP5"},{"begin":1562,"end":1621,"name":"DUP2"},{"begin":1562,"end":1621,"name":"AND"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":1562,"end":1621,"name":"DUP4"},{"begin":1562,"end":1621,"name":"AND"},{"begin":1562,"end":1621,"name":"OR"},{"begin":1562,"end":1621,"name":"SWAP3"},{"begin":1562,"end":1621,"name":"DUP4"},{"begin":1562,"end":1621,"name":"SWAP1"},{"begin":1562,"end":1621,"name":"SSTORE"},{"begin":1637,"end":1721,"name":"PUSH","value":"40"},{"begin":1637,"end":1721,"name":"DUP1"},{"begin":1637,"end":1721,"name":"MLOAD"},{"begin":1519,"end":1551,"name":"SWAP3"},{"begin":1519,"end":1551,"name":"DUP3"},{"begin":1519,"end":1551,"name":"AND"},{"begin":1637,"end":1721,"name":"DUP1"},{"begin":1637,"end":1721,"name":"DUP5"},{"begin":1637,"end":1721,"name":"MSTORE"},{"begin":1688,"end":1720,"name":"SWAP4"},{"begin":1688,"end":1720,"name":"SWAP1"},{"begin":1688,"end":1720,"name":"SWAP2"},{"begin":1688,"end":1720,"name":"AND"},{"begin":1637,"end":1721,"name":"PUSH","value":"20"},{"begin":1637,"end":1721,"name":"DUP4"},{"begin":1637,"end":1721,"name":"ADD"},{"begin":1637,"end":1721,"name":"MSTORE"},{"begin":1637,"end":1721,"name":"DUP1"},{"begin":1637,"end":1721,"name":"MLOAD"},{"begin":1637,"end":1721,"name":"PUSH","value":"E945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815"},{"begin":1637,"end":1721,"name":"SWAP3"},{"begin":1637,"end":1721,"name":"DUP2"},{"begin":1637,"end":1721,"name":"SWAP1"},{"begin":1637,"end":1721,"name":"SUB"},{"begin":1637,"end":1721,"name":"SWAP1"},{"begin":1637,"end":1721,"name":"SWAP2"},{"begin":1637,"end":1721,"name":"ADD"},{"begin":1637,"end":1721,"name":"SWAP1"},{"begin":1637,"end":1721,"name":"LOG1"},{"begin":1744,"end":1758,"name":"PUSH","value":"0"},{"begin":1739,"end":1759,"name":"PUSH [tag]","value":"47"},{"begin":1739,"end":1759,"name":"JUMP"},{"begin":4269,"end":4989,"name":"tag","value":"39"},{"begin":4269,"end":4989,"name":"JUMPDEST"},{"begin":4415,"end":4427,"name":"PUSH","value":"1"},{"begin":4415,"end":4427,"name":"SLOAD"},{"begin":4309,"end":4313,"name":"PUSH","value":"0"},{"begin":4309,"end":4313,"name":"SWAP1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":4415,"end":4427,"name":"AND"},{"begin":4401,"end":4411,"name":"CALLER"},{"begin":4401,"end":4427,"name":"EQ"},{"begin":4401,"end":4427,"name":"ISZERO"},{"begin":4401,"end":4427,"name":"DUP1"},{"begin":4401,"end":4455,"name":"PUSH [tag]","value":"58"},{"begin":4401,"end":4455,"name":"JUMPI"},{"begin":-1,"end":-1,"name":"POP"},{"begin":4431,"end":4441,"name":"CALLER"},{"begin":4431,"end":4455,"name":"ISZERO"},{"begin":4401,"end":4455,"name":"tag","value":"58"},{"begin":4401,"end":4455,"name":"JUMPDEST"},{"begin":4397,"end":4559,"name":"ISZERO"},{"begin":4397,"end":4559,"name":"PUSH [tag]","value":"59"},{"begin":4397,"end":4559,"name":"JUMPI"},{"begin":4478,"end":4548,"name":"PUSH [tag]","value":"51"},{"begin":4483,"end":4501,"name":"PUSH","value":"1"},{"begin":4503,"end":4547,"name":"PUSH","value":"0"},{"begin":4478,"end":4482,"name":"PUSH [tag]","value":"46"},{"begin":4478,"end":4548,"name":"JUMP","value":"[in]"},{"begin":4397,"end":4559,"name":"tag","value":"59"},{"begin":4397,"end":4559,"name":"JUMPDEST"},{"begin":4621,"end":4637,"name":"PUSH","value":"0"},{"begin":4640,"end":4645,"name":"DUP1"},{"begin":4640,"end":4645,"name":"SLOAD"},{"begin":4640,"end":4645,"name":"PUSH","value":"1"},{"begin":4681,"end":4693,"name":"DUP1"},{"begin":4681,"end":4693,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":4681,"end":4693,"name":"DUP1"},{"begin":4681,"end":4693,"name":"DUP3"},{"begin":4681,"end":4693,"name":"AND"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":-1,"end":-1,"name":"NOT"},{"begin":4751,"end":4771,"name":"DUP1"},{"begin":4751,"end":4771,"name":"DUP7"},{"begin":4751,"end":4771,"name":"AND"},{"begin":4751,"end":4771,"name":"DUP3"},{"begin":4751,"end":4771,"name":"OR"},{"begin":4751,"end":4771,"name":"SWAP7"},{"begin":4751,"end":4771,"name":"DUP8"},{"begin":4751,"end":4771,"name":"SWAP1"},{"begin":4751,"end":4771,"name":"SSTORE"},{"begin":4817,"end":4842,"name":"SWAP1"},{"begin":4817,"end":4842,"name":"SWAP3"},{"begin":4817,"end":4842,"name":"AND"},{"begin":4817,"end":4842,"name":"SWAP1"},{"begin":4817,"end":4842,"name":"SWAP3"},{"begin":4817,"end":4842,"name":"SSTORE"},{"begin":4858,"end":4883,"name":"PUSH","value":"40"},{"begin":4858,"end":4883,"name":"DUP1"},{"begin":4858,"end":4883,"name":"MLOAD"},{"begin":4640,"end":4645,"name":"SWAP4"},{"begin":4640,"end":4645,"name":"DUP4"},{"begin":4640,"end":4645,"name":"AND"},{"begin":4858,"end":4883,"name":"DUP1"},{"begin":4858,"end":4883,"name":"DUP6"},{"begin":4858,"end":4883,"name":"MSTORE"},{"begin":4877,"end":4882,"name":"SWAP5"},{"begin":4877,"end":4882,"name":"SWAP1"},{"begin":4877,"end":4882,"name":"SWAP3"},{"begin":4877,"end":4882,"name":"AND"},{"begin":4858,"end":4883,"name":"PUSH","value":"20"},{"begin":4858,"end":4883,"name":"DUP5"},{"begin":4858,"end":4883,"name":"ADD"},{"begin":4858,"end":4883,"name":"MSTORE"},{"begin":4858,"end":4883,"name":"DUP2"},{"begin":4858,"end":4883,"name":"MLOAD"},{"begin":4681,"end":4693,"name":"SWAP1"},{"begin":4681,"end":4693,"name":"SWAP3"},{"begin":4858,"end":4883,"name":"PUSH","value":"F9FFABCA9C8276E99321725BCB43FB076A6C66A54B7F21C4E8146D8519B417DC"},{"begin":4858,"end":4883,"name":"SWAP3"},{"begin":4858,"end":4883,"name":"SWAP1"},{"begin":4858,"end":4883,"name":"DUP3"},{"begin":4858,"end":4883,"name":"SWAP1"},{"begin":4858,"end":4883,"name":"SUB"},{"begin":4858,"end":4883,"name":"ADD"},{"begin":4858,"end":4883,"name":"SWAP1"},{"begin":4858,"end":4883,"name":"LOG1"},{"begin":4931,"end":4943,"name":"PUSH","value":"1"},{"begin":4931,"end":4943,"name":"SLOAD"},{"begin":4898,"end":4944,"name":"PUSH","value":"40"},{"begin":4898,"end":4944,"name":"DUP1"},{"begin":4898,"end":4944,"name":"MLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":4898,"end":4944,"name":"DUP1"},{"begin":4898,"end":4944,"name":"DUP6"},{"begin":4898,"end":4944,"name":"AND"},{"begin":4898,"end":4944,"name":"DUP3"},{"begin":4898,"end":4944,"name":"MSTORE"},{"begin":4931,"end":4943,"name":"SWAP1"},{"begin":4931,"end":4943,"name":"SWAP3"},{"begin":4931,"end":4943,"name":"AND"},{"begin":4898,"end":4944,"name":"PUSH","value":"20"},{"begin":4898,"end":4944,"name":"DUP4"},{"begin":4898,"end":4944,"name":"ADD"},{"begin":4898,"end":4944,"name":"MSTORE"},{"begin":4898,"end":4944,"name":"DUP1"},{"begin":4898,"end":4944,"name":"MLOAD"},{"begin":4898,"end":4944,"name":"PUSH","value":"CA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9"},{"begin":4898,"end":4944,"name":"SWAP3"},{"begin":4898,"end":4944,"name":"DUP2"},{"begin":4898,"end":4944,"name":"SWAP1"},{"begin":4898,"end":4944,"name":"SUB"},{"begin":4898,"end":4944,"name":"SWAP1"},{"begin":4898,"end":4944,"name":"SWAP2"},{"begin":4898,"end":4944,"name":"ADD"},{"begin":4898,"end":4944,"name":"SWAP1"},{"begin":4898,"end":4944,"name":"LOG1"},{"begin":4967,"end":4981,"name":"PUSH","value":"0"},{"begin":4962,"end":4982,"name":"PUSH [tag]","value":"52"},{"begin":4962,"end":4982,"name":"JUMP"},{"begin":177,"end":197,"name":"tag","value":"42"},{"begin":177,"end":197,"name":"JUMPDEST"},{"begin":177,"end":197,"name":"PUSH","value":"0"},{"begin":177,"end":197,"name":"SLOAD"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"1"},{"begin":-1,"end":-1,"name":"PUSH","value":"A0"},{"begin":-1,"end":-1,"name":"SHL"},{"begin":-1,"end":-1,"name":"SUB"},{"begin":177,"end":197,"name":"AND"},{"begin":177,"end":197,"name":"DUP2"},{"begin":177,"end":197,"name":"JUMP","value":"[out]"},{"begin":1855,"end":2004,"name":"tag","value":"46"},{"begin":1855,"end":2004,"name":"JUMPDEST"},{"begin":1916,"end":1920,"name":"PUSH","value":"0"},{"begin":1937,"end":1970,"name":"PUSH","value":"45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0"},{"begin":1950,"end":1953,"name":"DUP4"},{"begin":1945,"end":1954,"name":"PUSH","value":"11"},{"begin":1945,"end":1954,"name":"DUP2"},{"begin":1945,"end":1954,"name":"GT"},{"begin":1945,"end":1954,"name":"ISZERO"},{"begin":1945,"end":1954,"name":"PUSH [tag]","value":"63"},{"begin":1945,"end":1954,"name":"JUMPI"},{"begin":1945,"end":1954,"name":"INVALID"},{"begin":1945,"end":1954,"name":"tag","value":"63"},{"begin":1945,"end":1954,"name":"JUMPDEST"},{"begin":1961,"end":1965,"name":"DUP4"},{"begin":1956,"end":1966,"name":"PUSH","value":"13"},{"begin":1956,"end":1966,"name":"DUP2"},{"begin":1956,"end":1966,"name":"GT"},{"begin":1956,"end":1966,"name":"ISZERO"},{"begin":1956,"end":1966,"name":"PUSH [tag]","value":"64"},{"begin":1956,"end":1966,"name":"JUMPI"},{"begin":1956,"end":1966,"name":"INVALID"},{"begin":1956,"end":1966,"name":"tag","value":"64"},{"begin":1956,"end":1966,"name":"JUMPDEST"},{"begin":1937,"end":1970,"name":"PUSH","value":"40"},{"begin":1937,"end":1970,"name":"DUP1"},{"begin":1937,"end":1970,"name":"MLOAD"},{"begin":1937,"end":1970,"name":"SWAP3"},{"begin":1937,"end":1970,"name":"DUP4"},{"begin":1937,"end":1970,"name":"MSTORE"},{"begin":1937,"end":1970,"name":"PUSH","value":"20"},{"begin":1937,"end":1970,"name":"DUP4"},{"begin":1937,"end":1970,"name":"ADD"},{"begin":1937,"end":1970,"name":"SWAP2"},{"begin":1937,"end":1970,"name":"SWAP1"},{"begin":1937,"end":1970,"name":"SWAP2"},{"begin":1937,"end":1970,"name":"MSTORE"},{"begin":1968,"end":1969,"name":"PUSH","value":"0"},{"begin":1937,"end":1970,"name":"DUP3"},{"begin":1937,"end":1970,"name":"DUP3"},{"begin":1937,"end":1970,"name":"ADD"},{"begin":1937,"end":1970,"name":"MSTORE"},{"begin":1937,"end":1970,"name":"MLOAD"},{"begin":1937,"end":1970,"name":"SWAP1"},{"begin":1937,"end":1970,"name":"DUP2"},{"begin":1937,"end":1970,"name":"SWAP1"},{"begin":1937,"end":1970,"name":"SUB"},{"begin":1937,"end":1970,"name":"PUSH","value":"60"},{"begin":1937,"end":1970,"name":"ADD"},{"begin":1937,"end":1970,"name":"SWAP1"},{"begin":1937,"end":1970,"name":"LOG1"},{"begin":1993,"end":1996,"name":"DUP3"},{"begin":1988,"end":1997,"name":"PUSH","value":"11"},{"begin":1988,"end":1997,"name":"DUP2"},{"begin":1988,"end":1997,"name":"GT"},{"begin":1988,"end":1997,"name":"ISZERO"},{"begin":1988,"end":1997,"name":"PUSH [tag]","value":"65"},{"begin":1988,"end":1997,"name":"JUMPI"},{"begin":1988,"end":1997,"name":"INVALID"},{"begin":1988,"end":1997,"name":"tag","value":"65"},{"begin":1988,"end":1997,"name":"JUMPDEST"},{"begin":1981,"end":1997,"name":"SWAP4"},{"begin":1855,"end":2004,"name":"SWAP3"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"POP"},{"begin":-1,"end":-1,"name":"POP"},{"begin":1855,"end":2004,"name":"JUMP","value":"[out]"}]}}},"bytecode":{"object":"608060405234801561001057600080fd5b50600080546001600160a01b031916331790556105e4806100326000396000f3fe60806040526004361061007b5760003560e01c8063dcfbc0c71161004e578063dcfbc0c71461019e578063e992a041146101b3578063e9c714f2146101e6578063f851a440146101fb5761007b565b806326782247146100fe578063b71d1a0c1461012f578063bb82aa5e14610174578063c1e8033414610189575b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d80600081146100de576040519150601f19603f3d011682016040523d82523d6000602084013e6100e3565b606091505b505090506040513d6000823e8180156100fa573d82f35b3d82fd5b34801561010a57600080fd5b50610113610210565b604080516001600160a01b039092168252519081900360200190f35b34801561013b57600080fd5b506101626004803603602081101561015257600080fd5b50356001600160a01b031661021f565b60408051918252519081900360200190f35b34801561018057600080fd5b506101136102b0565b34801561019557600080fd5b506101626102bf565b3480156101aa57600080fd5b506101136103ba565b3480156101bf57600080fd5b50610162600480360360208110156101d657600080fd5b50356001600160a01b03166103c9565b3480156101f257600080fd5b5061016261044d565b34801561020757600080fd5b50610113610533565b6001546001600160a01b031681565b600080546001600160a01b031633146102455761023e6001600e610542565b90506102ab565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9150505b919050565b6002546001600160a01b031681565b6003546000906001600160a01b0316331415806102e557506003546001600160a01b0316155b156102fc576102f5600180610542565b90506103b7565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b925050505b90565b6003546001600160a01b031681565b600080546001600160a01b031633146103e85761023e6001600f610542565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160006102a7565b6001546000906001600160a01b031633141580610468575033155b15610479576102f560016000610542565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006103b2565b6000546001600160a01b031681565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561057157fe5b83601381111561057d57fe5b604080519283526020830191909152600082820152519081900360600190a18260118111156105a857fe5b939250505056fea265627a7a723158201bdd75bbdbd8b8ca2942abce849b86e2b131beda745ef9fb090277884d28ea4264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x5E4 DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDCFBC0C7 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xE992A041 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xE9C714F2 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x1FB JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB71D1A0C EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xC1E80334 EQ PUSH2 0x189 JUMPI JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 CALLDATASIZE SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY DUP2 DUP1 ISZERO PUSH2 0xFA JUMPI RETURNDATASIZE DUP3 RETURN JUMPDEST RETURNDATASIZE DUP3 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x210 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x2B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x3BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH2 0x44D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x533 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x245 JUMPI PUSH2 0x23E PUSH1 0x1 PUSH1 0xE PUSH2 0x542 JUMP JUMPDEST SWAP1 POP PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD PUSH32 0xCA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO DUP1 PUSH2 0x2E5 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2FC JUMPI PUSH2 0x2F5 PUSH1 0x1 DUP1 PUSH2 0x542 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP7 AND DUP3 OR SWAP7 DUP8 SWAP1 SSTORE SWAP1 SWAP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP4 AND DUP1 DUP6 MSTORE SWAP5 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD SWAP1 SWAP3 PUSH32 0xD604DE94D45953F9138079EC1B82D533CB2160C906D1076D1F7ED54BEFBCA97A SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xE945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E8 JUMPI PUSH2 0x23E PUSH1 0x1 PUSH1 0xF PUSH2 0x542 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP3 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 DUP3 AND DUP1 DUP5 MSTORE SWAP4 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xE945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 PUSH2 0x2A7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO DUP1 PUSH2 0x468 JUMPI POP CALLER ISZERO JUMPDEST ISZERO PUSH2 0x479 JUMPI PUSH2 0x2F5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP7 AND DUP3 OR SWAP7 DUP8 SWAP1 SSTORE SWAP1 SWAP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP4 AND DUP1 DUP6 MSTORE SWAP5 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD SWAP1 SWAP3 PUSH32 0xF9FFABCA9C8276E99321725BCB43FB076A6C66A54B7F21C4E8146D8519B417DC SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xCA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 PUSH2 0x3B2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x571 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x57D JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x5A8 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SHL 0xDD PUSH22 0xBBDBD8B8CA2942ABCE849B86E2B131BEDA745EF9FB09 MUL PUSH24 0x884D28EA4264736F6C634300051100320000000000000000 ","sourceMap":"310:5343:11:-;;;1116:87;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1178:5:11;:18;;-1:-1:-1;;;;;;1178:18:11;1186:10;1178:18;;;310:5343;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"60806040526004361061007b5760003560e01c8063dcfbc0c71161004e578063dcfbc0c71461019e578063e992a041146101b3578063e9c714f2146101e6578063f851a440146101fb5761007b565b806326782247146100fe578063b71d1a0c1461012f578063bb82aa5e14610174578063c1e8033414610189575b6002546040516000916001600160a01b031690829036908083838082843760405192019450600093509091505080830381855af49150503d80600081146100de576040519150601f19603f3d011682016040523d82523d6000602084013e6100e3565b606091505b505090506040513d6000823e8180156100fa573d82f35b3d82fd5b34801561010a57600080fd5b50610113610210565b604080516001600160a01b039092168252519081900360200190f35b34801561013b57600080fd5b506101626004803603602081101561015257600080fd5b50356001600160a01b031661021f565b60408051918252519081900360200190f35b34801561018057600080fd5b506101136102b0565b34801561019557600080fd5b506101626102bf565b3480156101aa57600080fd5b506101136103ba565b3480156101bf57600080fd5b50610162600480360360208110156101d657600080fd5b50356001600160a01b03166103c9565b3480156101f257600080fd5b5061016261044d565b34801561020757600080fd5b50610113610533565b6001546001600160a01b031681565b600080546001600160a01b031633146102455761023e6001600e610542565b90506102ab565b600180546001600160a01b038481166001600160a01b0319831681179093556040805191909216808252602082019390935281517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9929181900390910190a160005b9150505b919050565b6002546001600160a01b031681565b6003546000906001600160a01b0316331415806102e557506003546001600160a01b0316155b156102fc576102f5600180610542565b90506103b7565b60028054600380546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927fd604de94d45953f9138079ec1b82d533cb2160c906d1076d1f7ed54befbca97a92908290030190a1600354604080516001600160a01b038085168252909216602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160005b925050505b90565b6003546001600160a01b031681565b600080546001600160a01b031633146103e85761023e6001600f610542565b600380546001600160a01b038481166001600160a01b0319831617928390556040805192821680845293909116602083015280517fe945ccee5d701fc83f9b8aa8ca94ea4219ec1fcbd4f4cab4f0ea57c5c3e1d8159281900390910190a160006102a7565b6001546000906001600160a01b031633141580610468575033155b15610479576102f560016000610542565b60008054600180546001600160a01b038082166001600160a01b031980861682179687905590921690925560408051938316808552949092166020840152815190927ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc92908290030190a1600154604080516001600160a01b038085168252909216602083015280517fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a99281900390910190a160006103b2565b6000546001600160a01b031681565b60007f45b96fe442630264581b197e84bbada861235052c5a1aadfff9ea4e40a969aa083601181111561057157fe5b83601381111561057d57fe5b604080519283526020830191909152600082820152519081900360600190a18260118111156105a857fe5b939250505056fea265627a7a723158201bdd75bbdbd8b8ca2942abce849b86e2b131beda745ef9fb090277884d28ea4264736f6c63430005110032","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDCFBC0C7 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xDCFBC0C7 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0xE992A041 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xE9C714F2 EQ PUSH2 0x1E6 JUMPI DUP1 PUSH4 0xF851A440 EQ PUSH2 0x1FB JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x26782247 EQ PUSH2 0xFE JUMPI DUP1 PUSH4 0xB71D1A0C EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xBB82AA5E EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xC1E80334 EQ PUSH2 0x189 JUMPI JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP3 SWAP1 CALLDATASIZE SWAP1 DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x40 MLOAD SWAP3 ADD SWAP5 POP PUSH1 0x0 SWAP4 POP SWAP1 SWAP2 POP POP DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY DUP2 DUP1 ISZERO PUSH2 0xFA JUMPI RETURNDATASIZE DUP3 RETURN JUMPDEST RETURNDATASIZE DUP3 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x210 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x21F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x2B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH2 0x2BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x3BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 PUSH2 0x44D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x533 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x245 JUMPI PUSH2 0x23E PUSH1 0x1 PUSH1 0xE PUSH2 0x542 JUMP JUMPDEST SWAP1 POP PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP2 MLOAD PUSH32 0xCA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO DUP1 PUSH2 0x2E5 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2FC JUMPI PUSH2 0x2F5 PUSH1 0x1 DUP1 PUSH2 0x542 JUMP JUMPDEST SWAP1 POP PUSH2 0x3B7 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP7 AND DUP3 OR SWAP7 DUP8 SWAP1 SSTORE SWAP1 SWAP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP4 AND DUP1 DUP6 MSTORE SWAP5 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD SWAP1 SWAP3 PUSH32 0xD604DE94D45953F9138079EC1B82D533CB2160C906D1076D1F7ED54BEFBCA97A SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x3 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xE945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3E8 JUMPI PUSH2 0x23E PUSH1 0x1 PUSH1 0xF PUSH2 0x542 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND OR SWAP3 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 DUP3 AND DUP1 DUP5 MSTORE SWAP4 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xE945CCEE5D701FC83F9B8AA8CA94EA4219EC1FCBD4F4CAB4F0EA57C5C3E1D815 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 PUSH2 0x2A7 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO DUP1 PUSH2 0x468 JUMPI POP CALLER ISZERO JUMPDEST ISZERO PUSH2 0x479 JUMPI PUSH2 0x2F5 PUSH1 0x1 PUSH1 0x0 PUSH2 0x542 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP1 DUP7 AND DUP3 OR SWAP7 DUP8 SWAP1 SSTORE SWAP1 SWAP3 AND SWAP1 SWAP3 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP4 AND DUP1 DUP6 MSTORE SWAP5 SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD SWAP1 SWAP3 PUSH32 0xF9FFABCA9C8276E99321725BCB43FB076A6C66A54B7F21C4E8146D8519B417DC SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP3 MSTORE SWAP1 SWAP3 AND PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 0xCA4F2F25D0898EDD99413412FB94012F9E54EC8142F9B093E7720646A95B16A9 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 0x0 PUSH2 0x3B2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x45B96FE442630264581B197E84BBADA861235052C5A1AADFFF9EA4E40A969AA0 DUP4 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x571 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x13 DUP2 GT ISZERO PUSH2 0x57D JUMPI INVALID JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x60 ADD SWAP1 LOG1 DUP3 PUSH1 0x11 DUP2 GT ISZERO PUSH2 0x5A8 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 SHL 0xDD PUSH22 0xBBDBD8B8CA2942ABCE849B86E2B131BEDA745EF9FB09 MUL PUSH24 0x884D28EA4264736F6C634300051100320000000000000000 ","sourceMap":"310:5343:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5303:25;;:48;;5285:12;;-1:-1:-1;;;;;5303:25:11;;5285:12;;5342:8;;5303:48;5285:12;5342:8;;5285:12;5303:48;1:33:-1;5303:48:11;;45:16:-1;;;-1:-1;5303:48:11;;-1:-1:-1;5303:48:11;;-1:-1:-1;;5303:48:11;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5284:67:11;;;5413:4;5407:11;5465:14;5462:1;5448:12;5433:47;5503:7;5525:47;;;;5618:14;5604:12;5597:36;5525:47;5555:14;5541:12;5534:36;273:27:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;273:27:4;;;:::i;:::-;;;;-1:-1:-1;;;;;273:27:4;;;;;;;;;;;;;;3377:621:11;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3377:621:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3377:621:11;-1:-1:-1;;;;;3377:621:11;;:::i;:::-;;;;;;;;;;;;;;;;364:40:4;;8:9:-1;5:2;;;30:1;27;20:12;5:2;364:40:4;;;:::i;2058:912:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2058:912:11;;;:::i;469:47:4:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;469:47:4;;;:::i;1239:527:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1239:527:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1239:527:11;-1:-1:-1;;;;;1239:527:11;;:::i;4269:720::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4269:720:11;;;:::i;177:20:4:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;177:20:4;;;:::i;273:27::-;;;-1:-1:-1;;;;;273:27:4;;:::o;3377:621:11:-;3444:4;3510:5;;-1:-1:-1;;;;;3510:5:11;3496:10;:19;3492:124;;3538:67;3543:18;3563:41;3538:4;:67::i;:::-;3531:74;;;;3492:124;3712:12;;;-1:-1:-1;;;;;3792:30:11;;;-1:-1:-1;;;;;;3792:30:11;;;;;;;3904:49;;;3712:12;;;;3904:49;;;;;;;;;;;;;;;;;;;;;;;3976:14;3971:20;3964:27;;;3377:621;;;;:::o;364:40:4:-;;;-1:-1:-1;;;;;364:40:4;;:::o;2058:912:11:-;2231:32;;2107:4;;-1:-1:-1;;;;;2231:32:11;2217:10;:46;;;:96;;-1:-1:-1;2267:32:11;;-1:-1:-1;;;;;2267:32:11;:46;2217:96;2213:215;;;2336:81;2341:18;2361:55;2336:4;:81::i;:::-;2329:88;;;;2213:215;2518:25;;;2588:32;;;-1:-1:-1;;;;;2588:32:11;;;-1:-1:-1;;;;;;2631:60:11;;;;;;;;;2702:45;;;;;;2763:63;;;2518:25;;;2763:63;;;2800:25;;;;2763:63;;;;;;2588:32;;2763:63;;;;;;;;;2892:32;;2841:84;;;-1:-1:-1;;;;;2841:84:11;;;;;2892:32;;;2841:84;;;;;;;;;;;;;;;;2948:14;2943:20;2936:27;;;;2058:912;;:::o;469:47:4:-;;;-1:-1:-1;;;;;469:47:4;;:::o;1239:527:11:-;1324:4;1359:5;;-1:-1:-1;;;;;1359:5:11;1345:10;:19;1341:133;;1387:76;1392:18;1412:50;1387:4;:76::i;1341:133::-;1519:32;;;-1:-1:-1;;;;;1562:59:11;;;-1:-1:-1;;;;;;1562:59:11;;;;;;;1637:84;;;1519:32;;;1637:84;;;1688:32;;;;1637:84;;;;;;;;;;;;;;;;1744:14;1739:20;;4269:720;4415:12;;4309:4;;-1:-1:-1;;;;;4415:12:11;4401:10;:26;;;:54;;-1:-1:-1;4431:10:11;:24;4401:54;4397:162;;;4478:70;4483:18;4503:44;4478:4;:70::i;4397:162::-;4621:16;4640:5;;;4681:12;;-1:-1:-1;;;;;4681:12:11;;;-1:-1:-1;;;;;;4751:20:11;;;;;;;;;4817:25;;;;;;4858;;;4640:5;;;4858:25;;;4877:5;;;;4858:25;;;;;;4681:12;;4858:25;;;;;;;;;4931:12;;4898:46;;;-1:-1:-1;;;;;4898:46:11;;;;;4931:12;;;4898:46;;;;;;;;;;;;;;;;4967:14;4962:20;;177::4;;;-1:-1:-1;;;;;177:20:4;;:::o;1855:149:7:-;1916:4;1937:33;1950:3;1945:9;;;;;;;;1961:4;1956:10;;;;;;;;1937:33;;;;;;;;;;;;;1968:1;1937:33;;;;;;;;;;;;;1993:3;1988:9;;;;;;;;1981:16;1855:149;-1:-1:-1;;;1855:149:7:o","linkReferences":{}},"methodIdentifiers":{"_acceptAdmin()":"e9c714f2","_acceptImplementation()":"c1e80334","_setPendingAdmin(address)":"b71d1a0c","_setPendingImplementation(address)":"e992a041","admin()":"f851a440","comptrollerImplementation()":"bb82aa5e","pendingAdmin()":"26782247","pendingComptrollerImplementation()":"dcfbc0c7"},"gasEstimates":{"creation":{"codeDepositCost":"301600","executionCost":"21178","totalCost":"322778"},"external":{"":"infinite","_acceptAdmin()":"46343","_acceptImplementation()":"47174","_setPendingAdmin(address)":"23356","_setPendingImplementation(address)":"23363","admin()":"1103","comptrollerImplementation()":"1082","pendingAdmin()":"1038","pendingComptrollerImplementation()":"1037"},"internal":{}}},"ewasm":{"wasm":""}}}}}],"expires_at":18446744073709551615}