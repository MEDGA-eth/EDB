{"data":[{"SourceCode":{"language":"Solidity","sources":{"contracts/lib/helpers/ISignaturesValidator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n"},"contracts/lib/openzeppelin/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\n\npragma solidity ^0.7.0;\n\nimport \"../helpers/BalancerErrors.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _enterNonReentrant();\n        _;\n        _exitNonReentrant();\n    }\n\n    function _enterNonReentrant() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        _require(_status != _ENTERED, Errors.REENTRANCY);\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _exitNonReentrant() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/lib/openzeppelin/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\n// work differently from the OpenZeppelin version if it is not.\n\npragma solidity ^0.7.0;\n\nimport \"../helpers/BalancerErrors.sol\";\n\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     *\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\n     */\n    function _callOptionalReturn(address token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n        (bool success, bytes memory returndata) = token.call(data);\n\n        // If the low-level call didn't succeed we return whatever was returned from it.\n        assembly {\n            if eq(success, 0) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\n    }\n}\n"},"contracts/vault/interfaces/IWETH.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\n/**\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\n */\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"},"contracts/vault/interfaces/IFlashLoanRecipient.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// Inspired by Aave Protocol's IFlashLoanReceiver.\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"},"contracts/vault/interfaces/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n"},"contracts/lib/openzeppelin/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"contracts/lib/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthentication {\n    /**\n     * @dev Returns the action identifier associated with the external function described by `selector`.\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32);\n}\n"},"contracts/lib/helpers/BalancerErrors.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// solhint-disable\n\n/**\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n * supported.\n */\nfunction _require(bool condition, uint256 errorCode) pure {\n    if (!condition) _revert(errorCode);\n}\n\n/**\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n */\nfunction _revert(uint256 errorCode) pure {\n    // We're going to dynamically create a revert string based on the error code, with the following format:\n    // 'BAL#{errorCode}'\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\n    //\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\n    // number (8 to 16 bits) than the individual string characters.\n    //\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\n    assembly {\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\n        // the '0' character.\n\n        let units := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let tenths := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let hundreds := add(mod(errorCode, 10), 0x30)\n\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\n        // characters to it, each shifted by a multiple of 8.\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\n        // array).\n\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\n\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\n        // message will have the following layout:\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\n\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\n        // The string length is fixed: 7 characters.\n        mstore(0x24, 7)\n        // Finally, the string itself is stored.\n        mstore(0x44, revertReason)\n\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\n        revert(0, 100)\n    }\n}\n\nlibrary Errors {\n    // Math\n    uint256 internal constant ADD_OVERFLOW = 0;\n    uint256 internal constant SUB_OVERFLOW = 1;\n    uint256 internal constant SUB_UNDERFLOW = 2;\n    uint256 internal constant MUL_OVERFLOW = 3;\n    uint256 internal constant ZERO_DIVISION = 4;\n    uint256 internal constant DIV_INTERNAL = 5;\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\n    uint256 internal constant INVALID_EXPONENT = 9;\n\n    // Input\n    uint256 internal constant OUT_OF_BOUNDS = 100;\n    uint256 internal constant UNSORTED_ARRAY = 101;\n    uint256 internal constant UNSORTED_TOKENS = 102;\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\n    uint256 internal constant ZERO_TOKEN = 104;\n\n    // Shared pools\n    uint256 internal constant MIN_TOKENS = 200;\n    uint256 internal constant MAX_TOKENS = 201;\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\n    uint256 internal constant MINIMUM_BPT = 204;\n    uint256 internal constant CALLER_NOT_VAULT = 205;\n    uint256 internal constant UNINITIALIZED = 206;\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\n    uint256 internal constant EXPIRED_PERMIT = 209;\n\n    // Pools\n    uint256 internal constant MIN_AMP = 300;\n    uint256 internal constant MAX_AMP = 301;\n    uint256 internal constant MIN_WEIGHT = 302;\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\n    uint256 internal constant MAX_IN_RATIO = 304;\n    uint256 internal constant MAX_OUT_RATIO = 305;\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\n    uint256 internal constant INVALID_TOKEN = 309;\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\n    uint256 internal constant ZERO_INVARIANT = 311;\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\n    uint256 internal constant ORACLE_BAD_SECS = 316;\n\n    // Lib\n    uint256 internal constant REENTRANCY = 400;\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\n    uint256 internal constant PAUSED = 402;\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\n\n    // Vault\n    uint256 internal constant INVALID_POOL_ID = 500;\n    uint256 internal constant CALLER_NOT_POOL = 501;\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\n    uint256 internal constant INVALID_SIGNATURE = 504;\n    uint256 internal constant EXIT_BELOW_MIN = 505;\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\n    uint256 internal constant SWAP_LIMIT = 507;\n    uint256 internal constant SWAP_DEADLINE = 508;\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\n    uint256 internal constant INSUFFICIENT_ETH = 516;\n    uint256 internal constant UNALLOCATED_ETH = 517;\n    uint256 internal constant ETH_TRANSFER = 518;\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\n    uint256 internal constant TOKENS_MISMATCH = 520;\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\n    uint256 internal constant POOL_NO_TOKENS = 527;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\n\n    // Fees\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\n}\n"},"contracts/lib/helpers/ITemporarilyPausable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the TemporarilyPausable helper.\n */\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n"},"contracts/vault/ProtocolFeesCollector.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../lib/openzeppelin/IERC20.sol\";\nimport \"../lib/helpers/InputHelpers.sol\";\nimport \"../lib/helpers/Authentication.sol\";\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\nimport \"../lib/openzeppelin/SafeERC20.sol\";\n\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IAuthorizer.sol\";\n\n/**\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\n * Vault performs to reduce its overall bytecode size.\n *\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\n * to the Vault's own authorizer.\n */\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\n\n    IVault public immutable vault;\n\n    // All fee percentages are 18-decimal fixed point numbers.\n\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\n    // when users join and exit them.\n    uint256 private _swapFeePercentage;\n\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\n    uint256 private _flashLoanFeePercentage;\n\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\n\n    constructor(IVault _vault)\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\n        // identifiers.\n        Authentication(bytes32(uint256(address(this))))\n    {\n        vault = _vault;\n    }\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external nonReentrant authenticate {\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n            token.safeTransfer(recipient, amount);\n        }\n    }\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\n        _swapFeePercentage = newSwapFeePercentage;\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\n    }\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\n        _require(\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\n        );\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\n    }\n\n    function getSwapFeePercentage() external view returns (uint256) {\n        return _swapFeePercentage;\n    }\n\n    function getFlashLoanFeePercentage() external view returns (uint256) {\n        return _flashLoanFeePercentage;\n    }\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\n        feeAmounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\n        }\n    }\n\n    function getAuthorizer() external view returns (IAuthorizer) {\n        return _getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        return _getAuthorizer().canPerform(actionId, account, address(this));\n    }\n\n    function _getAuthorizer() internal view returns (IAuthorizer) {\n        return vault.getAuthorizer();\n    }\n}\n"},"contracts/lib/helpers/InputHelpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../openzeppelin/IERC20.sol\";\n\nimport \"./BalancerErrors.sol\";\n\nimport \"../../vault/interfaces/IAsset.sol\";\n\nlibrary InputHelpers {\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureInputLengthMatch(\n        uint256 a,\n        uint256 b,\n        uint256 c\n    ) internal pure {\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\n        address[] memory addressArray;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addressArray := array\n        }\n        ensureArrayIsSorted(addressArray);\n    }\n\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\n        address[] memory addressArray;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addressArray := array\n        }\n        ensureArrayIsSorted(addressArray);\n    }\n\n    function ensureArrayIsSorted(address[] memory array) internal pure {\n        if (array.length < 2) {\n            return;\n        }\n\n        address previous = array[0];\n        for (uint256 i = 1; i < array.length; ++i) {\n            address current = array[i];\n            _require(previous < current, Errors.UNSORTED_ARRAY);\n            previous = current;\n        }\n    }\n}\n"},"contracts/lib/helpers/Authentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"./BalancerErrors.sol\";\nimport \"./IAuthentication.sol\";\n\n/**\n * @dev Building block for performing access control on external functions.\n *\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\n * to external functions to only make them callable by authorized accounts.\n *\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\n */\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n     */\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call the entry point function.\n     */\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\n    }\n\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n"},"contracts/vault/interfaces/IAsset.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"},"contracts/vault/interfaces/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\nimport \"./IWETH.sol\";\nimport \"./IAsset.sol\";\nimport \"./IAuthorizer.sol\";\nimport \"./IFlashLoanRecipient.sol\";\nimport \"../ProtocolFeesCollector.sol\";\n\nimport \"../../lib/helpers/ISignaturesValidator.sol\";\nimport \"../../lib/helpers/ITemporarilyPausable.sol\";\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":1500},"outputSelection":{"*":{"*":["evm.bytecode","evm.deployedBytecode","abi"]}},"metadata":{"useLiteralContent":true},"libraries":{}}},"ABI":"[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ProtocolFeesCollector","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":1,"Runs":1500,"ConstructorArguments":"0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":0,"SwarmSource":""},{"contracts/lib/helpers/Authentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"./BalancerErrors.sol\";\nimport \"./IAuthentication.sol\";\n\n/**\n * @dev Building block for performing access control on external functions.\n *\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\n * to external functions to only make them callable by authorized accounts.\n *\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\n */\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n     */\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call the entry point function.\n     */\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\n    }\n\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n"},"contracts/lib/helpers/BalancerErrors.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// solhint-disable\n\n/**\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n * supported.\n */\nfunction _require(bool condition, uint256 errorCode) pure {\n    if (!condition) _revert(errorCode);\n}\n\n/**\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n */\nfunction _revert(uint256 errorCode) pure {\n    // We're going to dynamically create a revert string based on the error code, with the following format:\n    // 'BAL#{errorCode}'\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\n    //\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\n    // number (8 to 16 bits) than the individual string characters.\n    //\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\n    assembly {\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\n        // the '0' character.\n\n        let units := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let tenths := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let hundreds := add(mod(errorCode, 10), 0x30)\n\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\n        // characters to it, each shifted by a multiple of 8.\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\n        // array).\n\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\n\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\n        // message will have the following layout:\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\n\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\n        // The string length is fixed: 7 characters.\n        mstore(0x24, 7)\n        // Finally, the string itself is stored.\n        mstore(0x44, revertReason)\n\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\n        revert(0, 100)\n    }\n}\n\nlibrary Errors {\n    // Math\n    uint256 internal constant ADD_OVERFLOW = 0;\n    uint256 internal constant SUB_OVERFLOW = 1;\n    uint256 internal constant SUB_UNDERFLOW = 2;\n    uint256 internal constant MUL_OVERFLOW = 3;\n    uint256 internal constant ZERO_DIVISION = 4;\n    uint256 internal constant DIV_INTERNAL = 5;\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\n    uint256 internal constant INVALID_EXPONENT = 9;\n\n    // Input\n    uint256 internal constant OUT_OF_BOUNDS = 100;\n    uint256 internal constant UNSORTED_ARRAY = 101;\n    uint256 internal constant UNSORTED_TOKENS = 102;\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\n    uint256 internal constant ZERO_TOKEN = 104;\n\n    // Shared pools\n    uint256 internal constant MIN_TOKENS = 200;\n    uint256 internal constant MAX_TOKENS = 201;\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\n    uint256 internal constant MINIMUM_BPT = 204;\n    uint256 internal constant CALLER_NOT_VAULT = 205;\n    uint256 internal constant UNINITIALIZED = 206;\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\n    uint256 internal constant EXPIRED_PERMIT = 209;\n\n    // Pools\n    uint256 internal constant MIN_AMP = 300;\n    uint256 internal constant MAX_AMP = 301;\n    uint256 internal constant MIN_WEIGHT = 302;\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\n    uint256 internal constant MAX_IN_RATIO = 304;\n    uint256 internal constant MAX_OUT_RATIO = 305;\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\n    uint256 internal constant INVALID_TOKEN = 309;\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\n    uint256 internal constant ZERO_INVARIANT = 311;\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\n    uint256 internal constant ORACLE_BAD_SECS = 316;\n\n    // Lib\n    uint256 internal constant REENTRANCY = 400;\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\n    uint256 internal constant PAUSED = 402;\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\n\n    // Vault\n    uint256 internal constant INVALID_POOL_ID = 500;\n    uint256 internal constant CALLER_NOT_POOL = 501;\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\n    uint256 internal constant INVALID_SIGNATURE = 504;\n    uint256 internal constant EXIT_BELOW_MIN = 505;\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\n    uint256 internal constant SWAP_LIMIT = 507;\n    uint256 internal constant SWAP_DEADLINE = 508;\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\n    uint256 internal constant INSUFFICIENT_ETH = 516;\n    uint256 internal constant UNALLOCATED_ETH = 517;\n    uint256 internal constant ETH_TRANSFER = 518;\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\n    uint256 internal constant TOKENS_MISMATCH = 520;\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\n    uint256 internal constant POOL_NO_TOKENS = 527;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\n\n    // Fees\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\n}\n"},"contracts/lib/helpers/IAuthentication.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthentication {\n    /**\n     * @dev Returns the action identifier associated with the external function described by `selector`.\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32);\n}\n"},"contracts/lib/helpers/ISignaturesValidator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n"},"contracts/lib/helpers/ITemporarilyPausable.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface for the TemporarilyPausable helper.\n */\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n"},"contracts/lib/helpers/InputHelpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../openzeppelin/IERC20.sol\";\n\nimport \"./BalancerErrors.sol\";\n\nimport \"../../vault/interfaces/IAsset.sol\";\n\nlibrary InputHelpers {\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureInputLengthMatch(\n        uint256 a,\n        uint256 b,\n        uint256 c\n    ) internal pure {\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\n    }\n\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\n        address[] memory addressArray;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addressArray := array\n        }\n        ensureArrayIsSorted(addressArray);\n    }\n\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\n        address[] memory addressArray;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addressArray := array\n        }\n        ensureArrayIsSorted(addressArray);\n    }\n\n    function ensureArrayIsSorted(address[] memory array) internal pure {\n        if (array.length < 2) {\n            return;\n        }\n\n        address previous = array[0];\n        for (uint256 i = 1; i < array.length; ++i) {\n            address current = array[i];\n            _require(previous < current, Errors.UNSORTED_ARRAY);\n            previous = current;\n        }\n    }\n}\n"},"contracts/lib/openzeppelin/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"contracts/lib/openzeppelin/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\n\npragma solidity ^0.7.0;\n\nimport \"../helpers/BalancerErrors.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _enterNonReentrant();\n        _;\n        _exitNonReentrant();\n    }\n\n    function _enterNonReentrant() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        _require(_status != _ENTERED, Errors.REENTRANCY);\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _exitNonReentrant() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"contracts/lib/openzeppelin/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\n// work differently from the OpenZeppelin version if it is not.\n\npragma solidity ^0.7.0;\n\nimport \"../helpers/BalancerErrors.sol\";\n\nimport \"./IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     *\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\n     */\n    function _callOptionalReturn(address token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n        (bool success, bytes memory returndata) = token.call(data);\n\n        // If the low-level call didn't succeed we return whatever was returned from it.\n        assembly {\n            if eq(success, 0) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\n    }\n}\n"},"contracts/vault/ProtocolFeesCollector.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../lib/openzeppelin/IERC20.sol\";\nimport \"../lib/helpers/InputHelpers.sol\";\nimport \"../lib/helpers/Authentication.sol\";\nimport \"../lib/openzeppelin/ReentrancyGuard.sol\";\nimport \"../lib/openzeppelin/SafeERC20.sol\";\n\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IAuthorizer.sol\";\n\n/**\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\n * Vault performs to reduce its overall bytecode size.\n *\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\n * to the Vault's own authorizer.\n */\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\n\n    IVault public immutable vault;\n\n    // All fee percentages are 18-decimal fixed point numbers.\n\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\n    // when users join and exit them.\n    uint256 private _swapFeePercentage;\n\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\n    uint256 private _flashLoanFeePercentage;\n\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\n\n    constructor(IVault _vault)\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\n        // identifiers.\n        Authentication(bytes32(uint256(address(this))))\n    {\n        vault = _vault;\n    }\n\n    function withdrawCollectedFees(\n        IERC20[] calldata tokens,\n        uint256[] calldata amounts,\n        address recipient\n    ) external nonReentrant authenticate {\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\n\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            IERC20 token = tokens[i];\n            uint256 amount = amounts[i];\n            token.safeTransfer(recipient, amount);\n        }\n    }\n\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\n        _swapFeePercentage = newSwapFeePercentage;\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\n    }\n\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\n        _require(\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\n        );\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\n    }\n\n    function getSwapFeePercentage() external view returns (uint256) {\n        return _swapFeePercentage;\n    }\n\n    function getFlashLoanFeePercentage() external view returns (uint256) {\n        return _flashLoanFeePercentage;\n    }\n\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\n        feeAmounts = new uint256[](tokens.length);\n        for (uint256 i = 0; i < tokens.length; ++i) {\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\n        }\n    }\n\n    function getAuthorizer() external view returns (IAuthorizer) {\n        return _getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        return _getAuthorizer().canPerform(actionId, account, address(this));\n    }\n\n    function _getAuthorizer() internal view returns (IAuthorizer) {\n        return vault.getAuthorizer();\n    }\n}\n"},"contracts/vault/interfaces/IAsset.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n/**\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n * types.\n *\n * This concept is unrelated to a Pool's Asset Managers.\n */\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n"},"contracts/vault/interfaces/IAuthorizer.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n"},"contracts/vault/interfaces/IFlashLoanRecipient.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\n// Inspired by Aave Protocol's IFlashLoanReceiver.\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n"},"contracts/vault/interfaces/IVault.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\nimport \"./IWETH.sol\";\nimport \"./IAsset.sol\";\nimport \"./IAuthorizer.sol\";\nimport \"./IFlashLoanRecipient.sol\";\nimport \"../ProtocolFeesCollector.sol\";\n\nimport \"../../lib/helpers/ISignaturesValidator.sol\";\nimport \"../../lib/helpers/ITemporarilyPausable.sol\";\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n"},"contracts/vault/interfaces/IWETH.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity ^0.7.0;\n\nimport \"../../lib/openzeppelin/IERC20.sol\";\n\n/**\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\n */\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n"}},{"sources":{"contracts/lib/helpers/Authentication.sol":{"id":0,"ast":{"absolutePath":"contracts/lib/helpers/Authentication.sol","id":77,"exportedSymbols":{"Authentication":[76]},"nodeType":"SourceUnit","src":"688:2328:0","nodes":[{"id":1,"nodeType":"PragmaDirective","src":"688:23:0","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":2,"nodeType":"ImportDirective","src":"713:30:0","nodes":[],"absolutePath":"contracts/lib/helpers/BalancerErrors.sol","file":"./BalancerErrors.sol","scope":77,"sourceUnit":404,"symbolAliases":[],"unitAlias":""},{"id":3,"nodeType":"ImportDirective","src":"744:31:0","nodes":[],"absolutePath":"contracts/lib/helpers/IAuthentication.sol","file":"./IAuthentication.sol","scope":77,"sourceUnit":415,"symbolAliases":[],"unitAlias":""},{"id":76,"nodeType":"ContractDefinition","src":"1171:1844:0","nodes":[{"id":8,"nodeType":"VariableDeclaration","src":"1229:48:0","nodes":[],"constant":false,"mutability":"immutable","name":"_actionIdDisambiguator","scope":76,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":7,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1229:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"id":19,"nodeType":"FunctionDefinition","src":"1876:106:0","nodes":[],"body":{"id":18,"nodeType":"Block","src":"1919:63:0","nodes":[],"statements":[{"expression":{"id":16,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":14,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"1929:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":15,"name":"actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"1954:21:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1929:46:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":17,"nodeType":"ExpressionStatement","src":"1929:46:0"}]},"documentation":{"id":9,"nodeType":"StructuredDocumentation","src":"1284:587:0","text":" @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n multi contract systems.\n There are two main uses for it:\n  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n    unique. The contract's own address is a good option.\n  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n    shared by the entire family (and no other contract) should be used instead."},"implemented":true,"kind":"constructor","modifiers":[],"name":"","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":11,"mutability":"mutable","name":"actionIdDisambiguator","nodeType":"VariableDeclaration","scope":19,"src":"1888:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":10,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1888:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1887:31:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"1919:0:0"},"scope":76,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":27,"nodeType":"ModifierDefinition","src":"2122:73:0","nodes":[],"body":{"id":26,"nodeType":"Block","src":"2146:49:0","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"_authenticateCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49,"src":"2156:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2156:21:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"2156:21:0"},{"id":25,"nodeType":"PlaceholderStatement","src":"2187:1:0"}]},"documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"1988:129:0","text":" @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions."},"name":"authenticate","parameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"2143:2:0"},"virtual":false,"visibility":"internal"},{"id":49,"nodeType":"FunctionDefinition","src":"2300:181:0","nodes":[],"body":{"id":48,"nodeType":"Block","src":"2345:136:0","nodes":[],"statements":[{"assignments":[32],"declarations":[{"constant":false,"id":32,"mutability":"mutable","name":"actionId","nodeType":"VariableDeclaration","scope":48,"src":"2355:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":31,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2355:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":37,"initialValue":{"arguments":[{"expression":{"id":34,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2386:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sig","nodeType":"MemberAccess","src":"2386:7:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":33,"name":"getActionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"2374:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bytes32_$","typeString":"function (bytes4) view returns (bytes32)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2374:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2355:39:0"},{"expression":{"arguments":[{"arguments":[{"id":40,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"2425:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":41,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2435:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":42,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2435:10:0","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":39,"name":"_canPerform","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"2413:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2413:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":44,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2448:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"SENDER_NOT_ALLOWED","nodeType":"MemberAccess","referencedDeclaration":234,"src":"2448:25:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":38,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2404:8:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2404:70:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":47,"nodeType":"ExpressionStatement","src":"2404:70:0"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"2201:94:0","text":" @dev Reverts unless the caller is allowed to call the entry point function."},"implemented":true,"kind":"function","modifiers":[],"name":"_authenticateCaller","parameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"2328:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"2345:0:0"},"scope":76,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":66,"nodeType":"FunctionDefinition","src":"2487:430:0","nodes":[],"body":{"id":65,"nodeType":"Block","src":"2564:353:0","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":60,"name":"_actionIdDisambiguator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"2876:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":61,"name":"selector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"2900:8:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":58,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2859:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":59,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2859:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2859:50:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":57,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2849:9:0","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2849:61:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":56,"id":64,"nodeType":"Return","src":"2842:68:0"}]},"baseFunctions":[413],"functionSelector":"851c1bb3","implemented":true,"kind":"function","modifiers":[],"name":"getActionId","overrides":{"id":53,"nodeType":"OverrideSpecifier","overrides":[],"src":"2537:8:0"},"parameters":{"id":52,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"selector","nodeType":"VariableDeclaration","scope":66,"src":"2508:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":50,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2508:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2507:17:0"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":55,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":66,"src":"2555:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":54,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2555:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2554:9:0"},"scope":76,"stateMutability":"view","virtual":false,"visibility":"public"},{"id":75,"nodeType":"FunctionDefinition","src":"2923:90:0","nodes":[],"implemented":false,"kind":"function","modifiers":[],"name":"_canPerform","parameters":{"id":71,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68,"mutability":"mutable","name":"actionId","nodeType":"VariableDeclaration","scope":75,"src":"2944:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":67,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2944:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":70,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":75,"src":"2962:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":69,"name":"address","nodeType":"ElementaryTypeName","src":"2962:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2943:32:0"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":75,"src":"3007:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":72,"name":"bool","nodeType":"ElementaryTypeName","src":"3007:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3006:6:0"},"scope":76,"stateMutability":"view","virtual":true,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"IAuthentication","nodeType":"UserDefinedTypeName","referencedDeclaration":414,"src":"1207:15:0","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthentication_$414","typeString":"contract IAuthentication"}},"id":6,"nodeType":"InheritanceSpecifier","src":"1207:15:0"}],"contractDependencies":[414],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"777:393:0","text":" @dev Building block for performing access control on external functions.\n This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\n to external functions to only make them callable by authorized accounts.\n Derived contracts must implement the `_canPerform` function, which holds the actual access control logic."},"fullyImplemented":false,"linearizedBaseContracts":[76,414],"name":"Authentication","scope":77}],"license":"GPL-3.0-or-later"}},"contracts/lib/helpers/BalancerErrors.sol":{"id":1,"ast":{"absolutePath":"contracts/lib/helpers/BalancerErrors.sol","id":404,"exportedSymbols":{"Errors":[403],"_require":[94],"_revert":[102]},"nodeType":"SourceUnit","src":"688:9450:1","nodes":[{"id":78,"nodeType":"PragmaDirective","src":"688:23:1","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":94,"nodeType":"FunctionDefinition","src":"866:101:1","nodes":[],"body":{"id":93,"nodeType":"Block","src":"924:43:1","nodes":[],"statements":[{"condition":{"id":87,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"934:10:1","subExpression":{"id":86,"name":"condition","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"935:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":92,"nodeType":"IfStatement","src":"930:34:1","trueBody":{"expression":{"arguments":[{"id":89,"name":"errorCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"954:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":88,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"946:7:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"946:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":91,"nodeType":"ExpressionStatement","src":"946:18:1"}}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"733:132:1","text":" @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n supported."},"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_require","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"condition","nodeType":"VariableDeclaration","scope":94,"src":"884:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"884:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"errorCode","nodeType":"VariableDeclaration","scope":94,"src":"900:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"900:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"883:35:1"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":404,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":102,"nodeType":"FunctionDefinition","src":"1074:3172:1","nodes":[],"body":{"id":101,"nodeType":"Block","src":"1115:3131:1","nodes":[],"statements":[{"AST":{"nodeType":"YulBlock","src":"1904:2340:1","statements":[{"nodeType":"YulVariableDeclaration","src":"2178:42:1","value":{"arguments":[{"arguments":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2199:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2210:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"2195:3:1"},"nodeType":"YulFunctionCall","src":"2195:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2215:4:1","type":"","value":"0x30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2191:3:1"},"nodeType":"YulFunctionCall","src":"2191:29:1"},"variables":[{"name":"units","nodeType":"YulTypedName","src":"2182:5:1","type":""}]},{"nodeType":"YulAssignment","src":"2230:31:1","value":{"arguments":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2247:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2258:2:1","type":"","value":"10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2243:3:1"},"nodeType":"YulFunctionCall","src":"2243:18:1"},"variableNames":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2230:9:1"}]},{"nodeType":"YulVariableDeclaration","src":"2270:43:1","value":{"arguments":[{"arguments":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2292:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2303:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"2288:3:1"},"nodeType":"YulFunctionCall","src":"2288:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2308:4:1","type":"","value":"0x30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2284:3:1"},"nodeType":"YulFunctionCall","src":"2284:29:1"},"variables":[{"name":"tenths","nodeType":"YulTypedName","src":"2274:6:1","type":""}]},{"nodeType":"YulAssignment","src":"2323:31:1","value":{"arguments":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2340:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2351:2:1","type":"","value":"10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"2336:3:1"},"nodeType":"YulFunctionCall","src":"2336:18:1"},"variableNames":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2323:9:1"}]},{"nodeType":"YulVariableDeclaration","src":"2363:45:1","value":{"arguments":[{"arguments":[{"name":"errorCode","nodeType":"YulIdentifier","src":"2387:9:1"},{"kind":"number","nodeType":"YulLiteral","src":"2398:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"2383:3:1"},"nodeType":"YulFunctionCall","src":"2383:18:1"},{"kind":"number","nodeType":"YulLiteral","src":"2403:4:1","type":"","value":"0x30"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2379:3:1"},"nodeType":"YulFunctionCall","src":"2379:29:1"},"variables":[{"name":"hundreds","nodeType":"YulTypedName","src":"2367:8:1","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2970:103:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2994:3:1","type":"","value":"200"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3003:16:1","type":"","value":"0x42414c23000000"},{"arguments":[{"arguments":[{"name":"units","nodeType":"YulIdentifier","src":"3029:5:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3040:1:1","type":"","value":"8"},{"name":"tenths","nodeType":"YulIdentifier","src":"3043:6:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3036:3:1"},"nodeType":"YulFunctionCall","src":"3036:14:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3025:3:1"},"nodeType":"YulFunctionCall","src":"3025:26:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3057:2:1","type":"","value":"16"},{"name":"hundreds","nodeType":"YulIdentifier","src":"3061:8:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3053:3:1"},"nodeType":"YulFunctionCall","src":"3053:17:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3021:3:1"},"nodeType":"YulFunctionCall","src":"3021:50:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2999:3:1"},"nodeType":"YulFunctionCall","src":"2999:73:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2990:3:1"},"nodeType":"YulFunctionCall","src":"2990:83:1"},"variables":[{"name":"revertReason","nodeType":"YulTypedName","src":"2974:12:1","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3588:3:1","type":"","value":"0x0"},{"kind":"number","nodeType":"YulLiteral","src":"3593:66:1","type":"","value":"0x08c379a000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3581:6:1"},"nodeType":"YulFunctionCall","src":"3581:79:1"},"nodeType":"YulExpressionStatement","src":"3581:79:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3793:4:1","type":"","value":"0x04"},{"kind":"number","nodeType":"YulLiteral","src":"3799:66:1","type":"","value":"0x0000000000000000000000000000000000000000000000000000000000000020"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3786:6:1"},"nodeType":"YulFunctionCall","src":"3786:80:1"},"nodeType":"YulExpressionStatement","src":"3786:80:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3935:4:1","type":"","value":"0x24"},{"kind":"number","nodeType":"YulLiteral","src":"3941:1:1","type":"","value":"7"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3928:6:1"},"nodeType":"YulFunctionCall","src":"3928:15:1"},"nodeType":"YulExpressionStatement","src":"3928:15:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4008:4:1","type":"","value":"0x44"},{"name":"revertReason","nodeType":"YulIdentifier","src":"4014:12:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4001:6:1"},"nodeType":"YulFunctionCall","src":"4001:26:1"},"nodeType":"YulExpressionStatement","src":"4001:26:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4231:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4234:3:1","type":"","value":"100"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4224:6:1"},"nodeType":"YulFunctionCall","src":"4224:14:1"},"nodeType":"YulExpressionStatement","src":"4224:14:1"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":97,"isOffset":false,"isSlot":false,"src":"2199:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2230:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2247:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2292:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2323:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2340:9:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"2387:9:1","valueSize":1}],"id":100,"nodeType":"InlineAssembly","src":"1895:2349:1"}]},"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"969:104:1","text":" @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported."},"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_revert","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"errorCode","nodeType":"VariableDeclaration","scope":102,"src":"1091:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"1091:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1090:19:1"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"1115:0:1"},"scope":404,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":403,"nodeType":"ContractDefinition","src":"4248:5889:1","nodes":[{"id":105,"nodeType":"VariableDeclaration","src":"4281:42:1","nodes":[],"constant":true,"mutability":"constant","name":"ADD_OVERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"4281:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4322:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"id":108,"nodeType":"VariableDeclaration","src":"4329:42:1","nodes":[],"constant":true,"mutability":"constant","name":"SUB_OVERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":106,"name":"uint256","nodeType":"ElementaryTypeName","src":"4329:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4370:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"internal"},{"id":111,"nodeType":"VariableDeclaration","src":"4377:43:1","nodes":[],"constant":true,"mutability":"constant","name":"SUB_UNDERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":109,"name":"uint256","nodeType":"ElementaryTypeName","src":"4377:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"internal"},{"id":114,"nodeType":"VariableDeclaration","src":"4426:42:1","nodes":[],"constant":true,"mutability":"constant","name":"MUL_OVERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"4426:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:1","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"internal"},{"id":117,"nodeType":"VariableDeclaration","src":"4474:43:1","nodes":[],"constant":true,"mutability":"constant","name":"ZERO_DIVISION","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":115,"name":"uint256","nodeType":"ElementaryTypeName","src":"4474:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"34","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4516:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"visibility":"internal"},{"id":120,"nodeType":"VariableDeclaration","src":"4523:42:1","nodes":[],"constant":true,"mutability":"constant","name":"DIV_INTERNAL","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4523:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":119,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4564:1:1","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"internal"},{"id":123,"nodeType":"VariableDeclaration","src":"4571:45:1","nodes":[],"constant":true,"mutability":"constant","name":"X_OUT_OF_BOUNDS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"4571:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"36","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4615:1:1","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"visibility":"internal"},{"id":126,"nodeType":"VariableDeclaration","src":"4622:45:1","nodes":[],"constant":true,"mutability":"constant","name":"Y_OUT_OF_BOUNDS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":124,"name":"uint256","nodeType":"ElementaryTypeName","src":"4622:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"37","id":125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4666:1:1","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"visibility":"internal"},{"id":129,"nodeType":"VariableDeclaration","src":"4673:51:1","nodes":[],"constant":true,"mutability":"constant","name":"PRODUCT_OUT_OF_BOUNDS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"4673:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4723:1:1","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"visibility":"internal"},{"id":132,"nodeType":"VariableDeclaration","src":"4730:46:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_EXPONENT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":130,"name":"uint256","nodeType":"ElementaryTypeName","src":"4730:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4775:1:1","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"visibility":"internal"},{"id":135,"nodeType":"VariableDeclaration","src":"4796:45:1","nodes":[],"constant":true,"mutability":"constant","name":"OUT_OF_BOUNDS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":133,"name":"uint256","nodeType":"ElementaryTypeName","src":"4796:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4838:3:1","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"internal"},{"id":138,"nodeType":"VariableDeclaration","src":"4847:46:1","nodes":[],"constant":true,"mutability":"constant","name":"UNSORTED_ARRAY","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":136,"name":"uint256","nodeType":"ElementaryTypeName","src":"4847:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313031","id":137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4890:3:1","typeDescriptions":{"typeIdentifier":"t_rational_101_by_1","typeString":"int_const 101"},"value":"101"},"visibility":"internal"},{"id":141,"nodeType":"VariableDeclaration","src":"4899:47:1","nodes":[],"constant":true,"mutability":"constant","name":"UNSORTED_TOKENS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":139,"name":"uint256","nodeType":"ElementaryTypeName","src":"4899:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313032","id":140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4943:3:1","typeDescriptions":{"typeIdentifier":"t_rational_102_by_1","typeString":"int_const 102"},"value":"102"},"visibility":"internal"},{"id":144,"nodeType":"VariableDeclaration","src":"4952:53:1","nodes":[],"constant":true,"mutability":"constant","name":"INPUT_LENGTH_MISMATCH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4952:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313033","id":143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5002:3:1","typeDescriptions":{"typeIdentifier":"t_rational_103_by_1","typeString":"int_const 103"},"value":"103"},"visibility":"internal"},{"id":147,"nodeType":"VariableDeclaration","src":"5011:42:1","nodes":[],"constant":true,"mutability":"constant","name":"ZERO_TOKEN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":145,"name":"uint256","nodeType":"ElementaryTypeName","src":"5011:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313034","id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5050:3:1","typeDescriptions":{"typeIdentifier":"t_rational_104_by_1","typeString":"int_const 104"},"value":"104"},"visibility":"internal"},{"id":150,"nodeType":"VariableDeclaration","src":"5080:42:1","nodes":[],"constant":true,"mutability":"constant","name":"MIN_TOKENS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":148,"name":"uint256","nodeType":"ElementaryTypeName","src":"5080:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323030","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5119:3:1","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},"visibility":"internal"},{"id":153,"nodeType":"VariableDeclaration","src":"5128:42:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_TOKENS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":151,"name":"uint256","nodeType":"ElementaryTypeName","src":"5128:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323031","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5167:3:1","typeDescriptions":{"typeIdentifier":"t_rational_201_by_1","typeString":"int_const 201"},"value":"201"},"visibility":"internal"},{"id":156,"nodeType":"VariableDeclaration","src":"5176:55:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_SWAP_FEE_PERCENTAGE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"5176:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323032","id":155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5228:3:1","typeDescriptions":{"typeIdentifier":"t_rational_202_by_1","typeString":"int_const 202"},"value":"202"},"visibility":"internal"},{"id":159,"nodeType":"VariableDeclaration","src":"5237:55:1","nodes":[],"constant":true,"mutability":"constant","name":"MIN_SWAP_FEE_PERCENTAGE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":157,"name":"uint256","nodeType":"ElementaryTypeName","src":"5237:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323033","id":158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5289:3:1","typeDescriptions":{"typeIdentifier":"t_rational_203_by_1","typeString":"int_const 203"},"value":"203"},"visibility":"internal"},{"id":162,"nodeType":"VariableDeclaration","src":"5298:43:1","nodes":[],"constant":true,"mutability":"constant","name":"MINIMUM_BPT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":160,"name":"uint256","nodeType":"ElementaryTypeName","src":"5298:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323034","id":161,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5338:3:1","typeDescriptions":{"typeIdentifier":"t_rational_204_by_1","typeString":"int_const 204"},"value":"204"},"visibility":"internal"},{"id":165,"nodeType":"VariableDeclaration","src":"5347:48:1","nodes":[],"constant":true,"mutability":"constant","name":"CALLER_NOT_VAULT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":163,"name":"uint256","nodeType":"ElementaryTypeName","src":"5347:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323035","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5392:3:1","typeDescriptions":{"typeIdentifier":"t_rational_205_by_1","typeString":"int_const 205"},"value":"205"},"visibility":"internal"},{"id":168,"nodeType":"VariableDeclaration","src":"5401:45:1","nodes":[],"constant":true,"mutability":"constant","name":"UNINITIALIZED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"5401:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323036","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5443:3:1","typeDescriptions":{"typeIdentifier":"t_rational_206_by_1","typeString":"int_const 206"},"value":"206"},"visibility":"internal"},{"id":171,"nodeType":"VariableDeclaration","src":"5452:49:1","nodes":[],"constant":true,"mutability":"constant","name":"BPT_IN_MAX_AMOUNT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":169,"name":"uint256","nodeType":"ElementaryTypeName","src":"5452:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323037","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5498:3:1","typeDescriptions":{"typeIdentifier":"t_rational_207_by_1","typeString":"int_const 207"},"value":"207"},"visibility":"internal"},{"id":174,"nodeType":"VariableDeclaration","src":"5507:50:1","nodes":[],"constant":true,"mutability":"constant","name":"BPT_OUT_MIN_AMOUNT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":172,"name":"uint256","nodeType":"ElementaryTypeName","src":"5507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323038","id":173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5554:3:1","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"value":"208"},"visibility":"internal"},{"id":177,"nodeType":"VariableDeclaration","src":"5563:46:1","nodes":[],"constant":true,"mutability":"constant","name":"EXPIRED_PERMIT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":175,"name":"uint256","nodeType":"ElementaryTypeName","src":"5563:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323039","id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5606:3:1","typeDescriptions":{"typeIdentifier":"t_rational_209_by_1","typeString":"int_const 209"},"value":"209"},"visibility":"internal"},{"id":180,"nodeType":"VariableDeclaration","src":"5629:39:1","nodes":[],"constant":true,"mutability":"constant","name":"MIN_AMP","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":178,"name":"uint256","nodeType":"ElementaryTypeName","src":"5629:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333030","id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5665:3:1","typeDescriptions":{"typeIdentifier":"t_rational_300_by_1","typeString":"int_const 300"},"value":"300"},"visibility":"internal"},{"id":183,"nodeType":"VariableDeclaration","src":"5674:39:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_AMP","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":181,"name":"uint256","nodeType":"ElementaryTypeName","src":"5674:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333031","id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5710:3:1","typeDescriptions":{"typeIdentifier":"t_rational_301_by_1","typeString":"int_const 301"},"value":"301"},"visibility":"internal"},{"id":186,"nodeType":"VariableDeclaration","src":"5719:42:1","nodes":[],"constant":true,"mutability":"constant","name":"MIN_WEIGHT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"5719:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333032","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5758:3:1","typeDescriptions":{"typeIdentifier":"t_rational_302_by_1","typeString":"int_const 302"},"value":"302"},"visibility":"internal"},{"id":189,"nodeType":"VariableDeclaration","src":"5767:49:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_STABLE_TOKENS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":187,"name":"uint256","nodeType":"ElementaryTypeName","src":"5767:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333033","id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5813:3:1","typeDescriptions":{"typeIdentifier":"t_rational_303_by_1","typeString":"int_const 303"},"value":"303"},"visibility":"internal"},{"id":192,"nodeType":"VariableDeclaration","src":"5822:44:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_IN_RATIO","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":190,"name":"uint256","nodeType":"ElementaryTypeName","src":"5822:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333034","id":191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5863:3:1","typeDescriptions":{"typeIdentifier":"t_rational_304_by_1","typeString":"int_const 304"},"value":"304"},"visibility":"internal"},{"id":195,"nodeType":"VariableDeclaration","src":"5872:45:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_OUT_RATIO","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":193,"name":"uint256","nodeType":"ElementaryTypeName","src":"5872:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333035","id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5914:3:1","typeDescriptions":{"typeIdentifier":"t_rational_305_by_1","typeString":"int_const 305"},"value":"305"},"visibility":"internal"},{"id":198,"nodeType":"VariableDeclaration","src":"5923:56:1","nodes":[],"constant":true,"mutability":"constant","name":"MIN_BPT_IN_FOR_TOKEN_OUT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":196,"name":"uint256","nodeType":"ElementaryTypeName","src":"5923:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333036","id":197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5976:3:1","typeDescriptions":{"typeIdentifier":"t_rational_306_by_1","typeString":"int_const 306"},"value":"306"},"visibility":"internal"},{"id":201,"nodeType":"VariableDeclaration","src":"5985:56:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_OUT_BPT_FOR_TOKEN_IN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":199,"name":"uint256","nodeType":"ElementaryTypeName","src":"5985:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333037","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6038:3:1","typeDescriptions":{"typeIdentifier":"t_rational_307_by_1","typeString":"int_const 307"},"value":"307"},"visibility":"internal"},{"id":204,"nodeType":"VariableDeclaration","src":"6047:59:1","nodes":[],"constant":true,"mutability":"constant","name":"NORMALIZED_WEIGHT_INVARIANT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":202,"name":"uint256","nodeType":"ElementaryTypeName","src":"6047:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333038","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6103:3:1","typeDescriptions":{"typeIdentifier":"t_rational_308_by_1","typeString":"int_const 308"},"value":"308"},"visibility":"internal"},{"id":207,"nodeType":"VariableDeclaration","src":"6112:45:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_TOKEN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":205,"name":"uint256","nodeType":"ElementaryTypeName","src":"6112:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333039","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6154:3:1","typeDescriptions":{"typeIdentifier":"t_rational_309_by_1","typeString":"int_const 309"},"value":"309"},"visibility":"internal"},{"id":210,"nodeType":"VariableDeclaration","src":"6163:51:1","nodes":[],"constant":true,"mutability":"constant","name":"UNHANDLED_JOIN_KIND","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":208,"name":"uint256","nodeType":"ElementaryTypeName","src":"6163:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333130","id":209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6211:3:1","typeDescriptions":{"typeIdentifier":"t_rational_310_by_1","typeString":"int_const 310"},"value":"310"},"visibility":"internal"},{"id":213,"nodeType":"VariableDeclaration","src":"6220:46:1","nodes":[],"constant":true,"mutability":"constant","name":"ZERO_INVARIANT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":211,"name":"uint256","nodeType":"ElementaryTypeName","src":"6220:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333131","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6263:3:1","typeDescriptions":{"typeIdentifier":"t_rational_311_by_1","typeString":"int_const 311"},"value":"311"},"visibility":"internal"},{"id":216,"nodeType":"VariableDeclaration","src":"6272:60:1","nodes":[],"constant":true,"mutability":"constant","name":"ORACLE_INVALID_SECONDS_QUERY","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":214,"name":"uint256","nodeType":"ElementaryTypeName","src":"6272:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333132","id":215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6329:3:1","typeDescriptions":{"typeIdentifier":"t_rational_312_by_1","typeString":"int_const 312"},"value":"312"},"visibility":"internal"},{"id":219,"nodeType":"VariableDeclaration","src":"6338:54:1","nodes":[],"constant":true,"mutability":"constant","name":"ORACLE_NOT_INITIALIZED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"6338:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333133","id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6389:3:1","typeDescriptions":{"typeIdentifier":"t_rational_313_by_1","typeString":"int_const 313"},"value":"313"},"visibility":"internal"},{"id":222,"nodeType":"VariableDeclaration","src":"6398:52:1","nodes":[],"constant":true,"mutability":"constant","name":"ORACLE_QUERY_TOO_OLD","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":220,"name":"uint256","nodeType":"ElementaryTypeName","src":"6398:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333134","id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6447:3:1","typeDescriptions":{"typeIdentifier":"t_rational_314_by_1","typeString":"int_const 314"},"value":"314"},"visibility":"internal"},{"id":225,"nodeType":"VariableDeclaration","src":"6456:52:1","nodes":[],"constant":true,"mutability":"constant","name":"ORACLE_INVALID_INDEX","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":223,"name":"uint256","nodeType":"ElementaryTypeName","src":"6456:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333135","id":224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6505:3:1","typeDescriptions":{"typeIdentifier":"t_rational_315_by_1","typeString":"int_const 315"},"value":"315"},"visibility":"internal"},{"id":228,"nodeType":"VariableDeclaration","src":"6514:47:1","nodes":[],"constant":true,"mutability":"constant","name":"ORACLE_BAD_SECS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":226,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"333136","id":227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6558:3:1","typeDescriptions":{"typeIdentifier":"t_rational_316_by_1","typeString":"int_const 316"},"value":"316"},"visibility":"internal"},{"id":231,"nodeType":"VariableDeclaration","src":"6579:42:1","nodes":[],"constant":true,"mutability":"constant","name":"REENTRANCY","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":229,"name":"uint256","nodeType":"ElementaryTypeName","src":"6579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343030","id":230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6618:3:1","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"visibility":"internal"},{"id":234,"nodeType":"VariableDeclaration","src":"6627:50:1","nodes":[],"constant":true,"mutability":"constant","name":"SENDER_NOT_ALLOWED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":232,"name":"uint256","nodeType":"ElementaryTypeName","src":"6627:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343031","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6674:3:1","typeDescriptions":{"typeIdentifier":"t_rational_401_by_1","typeString":"int_const 401"},"value":"401"},"visibility":"internal"},{"id":237,"nodeType":"VariableDeclaration","src":"6683:38:1","nodes":[],"constant":true,"mutability":"constant","name":"PAUSED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":235,"name":"uint256","nodeType":"ElementaryTypeName","src":"6683:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343032","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6718:3:1","typeDescriptions":{"typeIdentifier":"t_rational_402_by_1","typeString":"int_const 402"},"value":"402"},"visibility":"internal"},{"id":240,"nodeType":"VariableDeclaration","src":"6727:52:1","nodes":[],"constant":true,"mutability":"constant","name":"PAUSE_WINDOW_EXPIRED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":238,"name":"uint256","nodeType":"ElementaryTypeName","src":"6727:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343033","id":239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6776:3:1","typeDescriptions":{"typeIdentifier":"t_rational_403_by_1","typeString":"int_const 403"},"value":"403"},"visibility":"internal"},{"id":243,"nodeType":"VariableDeclaration","src":"6785:57:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_PAUSE_WINDOW_DURATION","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":241,"name":"uint256","nodeType":"ElementaryTypeName","src":"6785:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343034","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6839:3:1","typeDescriptions":{"typeIdentifier":"t_rational_404_by_1","typeString":"int_const 404"},"value":"404"},"visibility":"internal"},{"id":246,"nodeType":"VariableDeclaration","src":"6848:58:1","nodes":[],"constant":true,"mutability":"constant","name":"MAX_BUFFER_PERIOD_DURATION","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"6848:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343035","id":245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6903:3:1","typeDescriptions":{"typeIdentifier":"t_rational_405_by_1","typeString":"int_const 405"},"value":"405"},"visibility":"internal"},{"id":249,"nodeType":"VariableDeclaration","src":"6912:52:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":247,"name":"uint256","nodeType":"ElementaryTypeName","src":"6912:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343036","id":248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6961:3:1","typeDescriptions":{"typeIdentifier":"t_rational_406_by_1","typeString":"int_const 406"},"value":"406"},"visibility":"internal"},{"id":252,"nodeType":"VariableDeclaration","src":"6970:54:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_ALLOWANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":250,"name":"uint256","nodeType":"ElementaryTypeName","src":"6970:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343037","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7021:3:1","typeDescriptions":{"typeIdentifier":"t_rational_407_by_1","typeString":"int_const 407"},"value":"407"},"visibility":"internal"},{"id":255,"nodeType":"VariableDeclaration","src":"7030:64:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_TRANSFER_FROM_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":253,"name":"uint256","nodeType":"ElementaryTypeName","src":"7030:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343038","id":254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7091:3:1","typeDescriptions":{"typeIdentifier":"t_rational_408_by_1","typeString":"int_const 408"},"value":"408"},"visibility":"internal"},{"id":258,"nodeType":"VariableDeclaration","src":"7100:62:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_TRANSFER_TO_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":256,"name":"uint256","nodeType":"ElementaryTypeName","src":"7100:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343039","id":257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7159:3:1","typeDescriptions":{"typeIdentifier":"t_rational_409_by_1","typeString":"int_const 409"},"value":"409"},"visibility":"internal"},{"id":261,"nodeType":"VariableDeclaration","src":"7168:58:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_MINT_TO_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"7168:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343130","id":260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7223:3:1","typeDescriptions":{"typeIdentifier":"t_rational_410_by_1","typeString":"int_const 410"},"value":"410"},"visibility":"internal"},{"id":264,"nodeType":"VariableDeclaration","src":"7232:60:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_BURN_FROM_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":262,"name":"uint256","nodeType":"ElementaryTypeName","src":"7232:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343131","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7289:3:1","typeDescriptions":{"typeIdentifier":"t_rational_411_by_1","typeString":"int_const 411"},"value":"411"},"visibility":"internal"},{"id":267,"nodeType":"VariableDeclaration","src":"7298:63:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_APPROVE_FROM_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"7298:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343132","id":266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7358:3:1","typeDescriptions":{"typeIdentifier":"t_rational_412_by_1","typeString":"int_const 412"},"value":"412"},"visibility":"internal"},{"id":270,"nodeType":"VariableDeclaration","src":"7367:61:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_APPROVE_TO_ZERO_ADDRESS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":268,"name":"uint256","nodeType":"ElementaryTypeName","src":"7367:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343133","id":269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7425:3:1","typeDescriptions":{"typeIdentifier":"t_rational_413_by_1","typeString":"int_const 413"},"value":"413"},"visibility":"internal"},{"id":273,"nodeType":"VariableDeclaration","src":"7434:64:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_TRANSFER_EXCEEDS_ALLOWANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":271,"name":"uint256","nodeType":"ElementaryTypeName","src":"7434:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343134","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7495:3:1","typeDescriptions":{"typeIdentifier":"t_rational_414_by_1","typeString":"int_const 414"},"value":"414"},"visibility":"internal"},{"id":276,"nodeType":"VariableDeclaration","src":"7504:68:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_DECREASED_ALLOWANCE_BELOW_ZERO","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":274,"name":"uint256","nodeType":"ElementaryTypeName","src":"7504:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343135","id":275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7569:3:1","typeDescriptions":{"typeIdentifier":"t_rational_415_by_1","typeString":"int_const 415"},"value":"415"},"visibility":"internal"},{"id":279,"nodeType":"VariableDeclaration","src":"7578:62:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_TRANSFER_EXCEEDS_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":277,"name":"uint256","nodeType":"ElementaryTypeName","src":"7578:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343136","id":278,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7637:3:1","typeDescriptions":{"typeIdentifier":"t_rational_416_by_1","typeString":"int_const 416"},"value":"416"},"visibility":"internal"},{"id":282,"nodeType":"VariableDeclaration","src":"7646:60:1","nodes":[],"constant":true,"mutability":"constant","name":"ERC20_BURN_EXCEEDS_ALLOWANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":280,"name":"uint256","nodeType":"ElementaryTypeName","src":"7646:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343137","id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7703:3:1","typeDescriptions":{"typeIdentifier":"t_rational_417_by_1","typeString":"int_const 417"},"value":"417"},"visibility":"internal"},{"id":285,"nodeType":"VariableDeclaration","src":"7712:54:1","nodes":[],"constant":true,"mutability":"constant","name":"SAFE_ERC20_CALL_FAILED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":283,"name":"uint256","nodeType":"ElementaryTypeName","src":"7712:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343138","id":284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7763:3:1","typeDescriptions":{"typeIdentifier":"t_rational_418_by_1","typeString":"int_const 418"},"value":"418"},"visibility":"internal"},{"id":288,"nodeType":"VariableDeclaration","src":"7772:60:1","nodes":[],"constant":true,"mutability":"constant","name":"ADDRESS_INSUFFICIENT_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"7772:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343139","id":287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7829:3:1","typeDescriptions":{"typeIdentifier":"t_rational_419_by_1","typeString":"int_const 419"},"value":"419"},"visibility":"internal"},{"id":291,"nodeType":"VariableDeclaration","src":"7838:57:1","nodes":[],"constant":true,"mutability":"constant","name":"ADDRESS_CANNOT_SEND_VALUE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":289,"name":"uint256","nodeType":"ElementaryTypeName","src":"7838:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343230","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7892:3:1","typeDescriptions":{"typeIdentifier":"t_rational_420_by_1","typeString":"int_const 420"},"value":"420"},"visibility":"internal"},{"id":294,"nodeType":"VariableDeclaration","src":"7901:63:1","nodes":[],"constant":true,"mutability":"constant","name":"SAFE_CAST_VALUE_CANT_FIT_INT256","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":292,"name":"uint256","nodeType":"ElementaryTypeName","src":"7901:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343231","id":293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7961:3:1","typeDescriptions":{"typeIdentifier":"t_rational_421_by_1","typeString":"int_const 421"},"value":"421"},"visibility":"internal"},{"id":297,"nodeType":"VariableDeclaration","src":"7970:54:1","nodes":[],"constant":true,"mutability":"constant","name":"GRANT_SENDER_NOT_ADMIN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"7970:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343232","id":296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8021:3:1","typeDescriptions":{"typeIdentifier":"t_rational_422_by_1","typeString":"int_const 422"},"value":"422"},"visibility":"internal"},{"id":300,"nodeType":"VariableDeclaration","src":"8030:55:1","nodes":[],"constant":true,"mutability":"constant","name":"REVOKE_SENDER_NOT_ADMIN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":298,"name":"uint256","nodeType":"ElementaryTypeName","src":"8030:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343233","id":299,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8082:3:1","typeDescriptions":{"typeIdentifier":"t_rational_423_by_1","typeString":"int_const 423"},"value":"423"},"visibility":"internal"},{"id":303,"nodeType":"VariableDeclaration","src":"8091:59:1","nodes":[],"constant":true,"mutability":"constant","name":"RENOUNCE_SENDER_NOT_ALLOWED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":301,"name":"uint256","nodeType":"ElementaryTypeName","src":"8091:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343234","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8147:3:1","typeDescriptions":{"typeIdentifier":"t_rational_424_by_1","typeString":"int_const 424"},"value":"424"},"visibility":"internal"},{"id":306,"nodeType":"VariableDeclaration","src":"8156:53:1","nodes":[],"constant":true,"mutability":"constant","name":"BUFFER_PERIOD_EXPIRED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":304,"name":"uint256","nodeType":"ElementaryTypeName","src":"8156:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343235","id":305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8206:3:1","typeDescriptions":{"typeIdentifier":"t_rational_425_by_1","typeString":"int_const 425"},"value":"425"},"visibility":"internal"},{"id":309,"nodeType":"VariableDeclaration","src":"8229:47:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_POOL_ID","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":307,"name":"uint256","nodeType":"ElementaryTypeName","src":"8229:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353030","id":308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8273:3:1","typeDescriptions":{"typeIdentifier":"t_rational_500_by_1","typeString":"int_const 500"},"value":"500"},"visibility":"internal"},{"id":312,"nodeType":"VariableDeclaration","src":"8282:47:1","nodes":[],"constant":true,"mutability":"constant","name":"CALLER_NOT_POOL","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"8282:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353031","id":311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8326:3:1","typeDescriptions":{"typeIdentifier":"t_rational_501_by_1","typeString":"int_const 501"},"value":"501"},"visibility":"internal"},{"id":315,"nodeType":"VariableDeclaration","src":"8335:56:1","nodes":[],"constant":true,"mutability":"constant","name":"SENDER_NOT_ASSET_MANAGER","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":313,"name":"uint256","nodeType":"ElementaryTypeName","src":"8335:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353032","id":314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8388:3:1","typeDescriptions":{"typeIdentifier":"t_rational_502_by_1","typeString":"int_const 502"},"value":"502"},"visibility":"internal"},{"id":318,"nodeType":"VariableDeclaration","src":"8397:57:1","nodes":[],"constant":true,"mutability":"constant","name":"USER_DOESNT_ALLOW_RELAYER","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353033","id":317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8451:3:1","typeDescriptions":{"typeIdentifier":"t_rational_503_by_1","typeString":"int_const 503"},"value":"503"},"visibility":"internal"},{"id":321,"nodeType":"VariableDeclaration","src":"8460:49:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_SIGNATURE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":319,"name":"uint256","nodeType":"ElementaryTypeName","src":"8460:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353034","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8506:3:1","typeDescriptions":{"typeIdentifier":"t_rational_504_by_1","typeString":"int_const 504"},"value":"504"},"visibility":"internal"},{"id":324,"nodeType":"VariableDeclaration","src":"8515:46:1","nodes":[],"constant":true,"mutability":"constant","name":"EXIT_BELOW_MIN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":322,"name":"uint256","nodeType":"ElementaryTypeName","src":"8515:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353035","id":323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8558:3:1","typeDescriptions":{"typeIdentifier":"t_rational_505_by_1","typeString":"int_const 505"},"value":"505"},"visibility":"internal"},{"id":327,"nodeType":"VariableDeclaration","src":"8567:46:1","nodes":[],"constant":true,"mutability":"constant","name":"JOIN_ABOVE_MAX","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":325,"name":"uint256","nodeType":"ElementaryTypeName","src":"8567:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353036","id":326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8610:3:1","typeDescriptions":{"typeIdentifier":"t_rational_506_by_1","typeString":"int_const 506"},"value":"506"},"visibility":"internal"},{"id":330,"nodeType":"VariableDeclaration","src":"8619:42:1","nodes":[],"constant":true,"mutability":"constant","name":"SWAP_LIMIT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":328,"name":"uint256","nodeType":"ElementaryTypeName","src":"8619:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353037","id":329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8658:3:1","typeDescriptions":{"typeIdentifier":"t_rational_507_by_1","typeString":"int_const 507"},"value":"507"},"visibility":"internal"},{"id":333,"nodeType":"VariableDeclaration","src":"8667:45:1","nodes":[],"constant":true,"mutability":"constant","name":"SWAP_DEADLINE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":331,"name":"uint256","nodeType":"ElementaryTypeName","src":"8667:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353038","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8709:3:1","typeDescriptions":{"typeIdentifier":"t_rational_508_by_1","typeString":"int_const 508"},"value":"508"},"visibility":"internal"},{"id":336,"nodeType":"VariableDeclaration","src":"8718:54:1","nodes":[],"constant":true,"mutability":"constant","name":"CANNOT_SWAP_SAME_TOKEN","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"8718:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353039","id":335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:1","typeDescriptions":{"typeIdentifier":"t_rational_509_by_1","typeString":"int_const 509"},"value":"509"},"visibility":"internal"},{"id":339,"nodeType":"VariableDeclaration","src":"8778:60:1","nodes":[],"constant":true,"mutability":"constant","name":"UNKNOWN_AMOUNT_IN_FIRST_SWAP","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":337,"name":"uint256","nodeType":"ElementaryTypeName","src":"8778:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353130","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8835:3:1","typeDescriptions":{"typeIdentifier":"t_rational_510_by_1","typeString":"int_const 510"},"value":"510"},"visibility":"internal"},{"id":342,"nodeType":"VariableDeclaration","src":"8844:60:1","nodes":[],"constant":true,"mutability":"constant","name":"MALCONSTRUCTED_MULTIHOP_SWAP","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":340,"name":"uint256","nodeType":"ElementaryTypeName","src":"8844:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353131","id":341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8901:3:1","typeDescriptions":{"typeIdentifier":"t_rational_511_by_1","typeString":"int_const 511"},"value":"511"},"visibility":"internal"},{"id":345,"nodeType":"VariableDeclaration","src":"8910:57:1","nodes":[],"constant":true,"mutability":"constant","name":"INTERNAL_BALANCE_OVERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":343,"name":"uint256","nodeType":"ElementaryTypeName","src":"8910:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353132","id":344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8964:3:1","typeDescriptions":{"typeIdentifier":"t_rational_512_by_1","typeString":"int_const 512"},"value":"512"},"visibility":"internal"},{"id":348,"nodeType":"VariableDeclaration","src":"8973:61:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_INTERNAL_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":346,"name":"uint256","nodeType":"ElementaryTypeName","src":"8973:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353133","id":347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9031:3:1","typeDescriptions":{"typeIdentifier":"t_rational_513_by_1","typeString":"int_const 513"},"value":"513"},"visibility":"internal"},{"id":351,"nodeType":"VariableDeclaration","src":"9040:60:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_ETH_INTERNAL_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":349,"name":"uint256","nodeType":"ElementaryTypeName","src":"9040:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353134","id":350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9097:3:1","typeDescriptions":{"typeIdentifier":"t_rational_514_by_1","typeString":"int_const 514"},"value":"514"},"visibility":"internal"},{"id":354,"nodeType":"VariableDeclaration","src":"9106:57:1","nodes":[],"constant":true,"mutability":"constant","name":"INVALID_POST_LOAN_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":352,"name":"uint256","nodeType":"ElementaryTypeName","src":"9106:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353135","id":353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9160:3:1","typeDescriptions":{"typeIdentifier":"t_rational_515_by_1","typeString":"int_const 515"},"value":"515"},"visibility":"internal"},{"id":357,"nodeType":"VariableDeclaration","src":"9169:48:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_ETH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":355,"name":"uint256","nodeType":"ElementaryTypeName","src":"9169:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353136","id":356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9214:3:1","typeDescriptions":{"typeIdentifier":"t_rational_516_by_1","typeString":"int_const 516"},"value":"516"},"visibility":"internal"},{"id":360,"nodeType":"VariableDeclaration","src":"9223:47:1","nodes":[],"constant":true,"mutability":"constant","name":"UNALLOCATED_ETH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":358,"name":"uint256","nodeType":"ElementaryTypeName","src":"9223:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353137","id":359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9267:3:1","typeDescriptions":{"typeIdentifier":"t_rational_517_by_1","typeString":"int_const 517"},"value":"517"},"visibility":"internal"},{"id":363,"nodeType":"VariableDeclaration","src":"9276:44:1","nodes":[],"constant":true,"mutability":"constant","name":"ETH_TRANSFER","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":361,"name":"uint256","nodeType":"ElementaryTypeName","src":"9276:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353138","id":362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9317:3:1","typeDescriptions":{"typeIdentifier":"t_rational_518_by_1","typeString":"int_const 518"},"value":"518"},"visibility":"internal"},{"id":366,"nodeType":"VariableDeclaration","src":"9326:55:1","nodes":[],"constant":true,"mutability":"constant","name":"CANNOT_USE_ETH_SENTINEL","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":364,"name":"uint256","nodeType":"ElementaryTypeName","src":"9326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353139","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:3:1","typeDescriptions":{"typeIdentifier":"t_rational_519_by_1","typeString":"int_const 519"},"value":"519"},"visibility":"internal"},{"id":369,"nodeType":"VariableDeclaration","src":"9387:47:1","nodes":[],"constant":true,"mutability":"constant","name":"TOKENS_MISMATCH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":367,"name":"uint256","nodeType":"ElementaryTypeName","src":"9387:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353230","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:3:1","typeDescriptions":{"typeIdentifier":"t_rational_520_by_1","typeString":"int_const 520"},"value":"520"},"visibility":"internal"},{"id":372,"nodeType":"VariableDeclaration","src":"9440:52:1","nodes":[],"constant":true,"mutability":"constant","name":"TOKEN_NOT_REGISTERED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":370,"name":"uint256","nodeType":"ElementaryTypeName","src":"9440:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353231","id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9489:3:1","typeDescriptions":{"typeIdentifier":"t_rational_521_by_1","typeString":"int_const 521"},"value":"521"},"visibility":"internal"},{"id":375,"nodeType":"VariableDeclaration","src":"9498:56:1","nodes":[],"constant":true,"mutability":"constant","name":"TOKEN_ALREADY_REGISTERED","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":373,"name":"uint256","nodeType":"ElementaryTypeName","src":"9498:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353232","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9551:3:1","typeDescriptions":{"typeIdentifier":"t_rational_522_by_1","typeString":"int_const 522"},"value":"522"},"visibility":"internal"},{"id":378,"nodeType":"VariableDeclaration","src":"9560:50:1","nodes":[],"constant":true,"mutability":"constant","name":"TOKENS_ALREADY_SET","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"9560:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353233","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9607:3:1","typeDescriptions":{"typeIdentifier":"t_rational_523_by_1","typeString":"int_const 523"},"value":"523"},"visibility":"internal"},{"id":381,"nodeType":"VariableDeclaration","src":"9616:55:1","nodes":[],"constant":true,"mutability":"constant","name":"TOKENS_LENGTH_MUST_BE_2","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":379,"name":"uint256","nodeType":"ElementaryTypeName","src":"9616:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353234","id":380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9668:3:1","typeDescriptions":{"typeIdentifier":"t_rational_524_by_1","typeString":"int_const 524"},"value":"524"},"visibility":"internal"},{"id":384,"nodeType":"VariableDeclaration","src":"9677:53:1","nodes":[],"constant":true,"mutability":"constant","name":"NONZERO_TOKEN_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":382,"name":"uint256","nodeType":"ElementaryTypeName","src":"9677:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353235","id":383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9727:3:1","typeDescriptions":{"typeIdentifier":"t_rational_525_by_1","typeString":"int_const 525"},"value":"525"},"visibility":"internal"},{"id":387,"nodeType":"VariableDeclaration","src":"9736:54:1","nodes":[],"constant":true,"mutability":"constant","name":"BALANCE_TOTAL_OVERFLOW","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":385,"name":"uint256","nodeType":"ElementaryTypeName","src":"9736:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353236","id":386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9787:3:1","typeDescriptions":{"typeIdentifier":"t_rational_526_by_1","typeString":"int_const 526"},"value":"526"},"visibility":"internal"},{"id":390,"nodeType":"VariableDeclaration","src":"9796:46:1","nodes":[],"constant":true,"mutability":"constant","name":"POOL_NO_TOKENS","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"9796:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353237","id":389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9839:3:1","typeDescriptions":{"typeIdentifier":"t_rational_527_by_1","typeString":"int_const 527"},"value":"527"},"visibility":"internal"},{"id":393,"nodeType":"VariableDeclaration","src":"9848:63:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_FLASH_LOAN_BALANCE","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":391,"name":"uint256","nodeType":"ElementaryTypeName","src":"9848:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"353238","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9908:3:1","typeDescriptions":{"typeIdentifier":"t_rational_528_by_1","typeString":"int_const 528"},"value":"528"},"visibility":"internal"},{"id":396,"nodeType":"VariableDeclaration","src":"9930:60:1","nodes":[],"constant":true,"mutability":"constant","name":"SWAP_FEE_PERCENTAGE_TOO_HIGH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":394,"name":"uint256","nodeType":"ElementaryTypeName","src":"9930:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"363030","id":395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9987:3:1","typeDescriptions":{"typeIdentifier":"t_rational_600_by_1","typeString":"int_const 600"},"value":"600"},"visibility":"internal"},{"id":399,"nodeType":"VariableDeclaration","src":"9996:66:1","nodes":[],"constant":true,"mutability":"constant","name":"FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":397,"name":"uint256","nodeType":"ElementaryTypeName","src":"9996:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"363031","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10059:3:1","typeDescriptions":{"typeIdentifier":"t_rational_601_by_1","typeString":"int_const 601"},"value":"601"},"visibility":"internal"},{"id":402,"nodeType":"VariableDeclaration","src":"10068:66:1","nodes":[],"constant":true,"mutability":"constant","name":"INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT","scope":403,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":400,"name":"uint256","nodeType":"ElementaryTypeName","src":"10068:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"363032","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10131:3:1","typeDescriptions":{"typeIdentifier":"t_rational_602_by_1","typeString":"int_const 602"},"value":"602"},"visibility":"internal"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"linearizedBaseContracts":[403],"name":"Errors","scope":404}],"license":"GPL-3.0-or-later"}},"contracts/lib/helpers/IAuthentication.sol":{"id":2,"ast":{"absolutePath":"contracts/lib/helpers/IAuthentication.sol","id":415,"exportedSymbols":{"IAuthentication":[414]},"nodeType":"SourceUnit","src":"688:251:2","nodes":[{"id":405,"nodeType":"PragmaDirective","src":"688:23:2","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":414,"nodeType":"ContractDefinition","src":"713:225:2","nodes":[{"id":413,"nodeType":"FunctionDefinition","src":"866:70:2","nodes":[],"documentation":{"id":406,"nodeType":"StructuredDocumentation","src":"745:116:2","text":" @dev Returns the action identifier associated with the external function described by `selector`."},"functionSelector":"851c1bb3","implemented":false,"kind":"function","modifiers":[],"name":"getActionId","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":408,"mutability":"mutable","name":"selector","nodeType":"VariableDeclaration","scope":413,"src":"887:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"887:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"886:17:2"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":413,"src":"927:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"927:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"926:9:2"},"scope":414,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[414],"name":"IAuthentication","scope":415}],"license":"GPL-3.0-or-later"}},"contracts/lib/helpers/ISignaturesValidator.sol":{"id":3,"ast":{"absolutePath":"contracts/lib/helpers/ISignaturesValidator.sol","id":433,"exportedSymbols":{"ISignaturesValidator":[432]},"nodeType":"SourceUnit","src":"688:450:3","nodes":[{"id":416,"nodeType":"PragmaDirective","src":"688:23:3","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":432,"nodeType":"ContractDefinition","src":"809:328:3","nodes":[{"id":423,"nodeType":"FunctionDefinition","src":"911:62:3","nodes":[],"documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"846:60:3","text":" @dev Returns the EIP712 domain separator."},"functionSelector":"ed24911d","implemented":false,"kind":"function","modifiers":[],"name":"getDomainSeparator","parameters":{"id":419,"nodeType":"ParameterList","parameters":[],"src":"938:2:3"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":423,"src":"964:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":420,"name":"bytes32","nodeType":"ElementaryTypeName","src":"964:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"963:9:3"},"scope":432,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":431,"nodeType":"FunctionDefinition","src":"1067:68:3","nodes":[],"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"979:83:3","text":" @dev Returns the next nonce used by an address to sign messages."},"functionSelector":"90193b7c","implemented":false,"kind":"function","modifiers":[],"name":"getNextNonce","parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":431,"src":"1089:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":425,"name":"address","nodeType":"ElementaryTypeName","src":"1089:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1088:14:3"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":431,"src":"1126:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"1126:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1125:9:3"},"scope":432,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"713:95:3","text":" @dev Interface for the SignatureValidator helper, used to support meta-transactions."},"fullyImplemented":false,"linearizedBaseContracts":[432],"name":"ISignaturesValidator","scope":433}],"license":"GPL-3.0-or-later"}},"contracts/lib/helpers/ITemporarilyPausable.sol":{"id":4,"ast":{"absolutePath":"contracts/lib/helpers/ITemporarilyPausable.sol","id":452,"exportedSymbols":{"ITemporarilyPausable":[451]},"nodeType":"SourceUnit","src":"688:510:4","nodes":[{"id":434,"nodeType":"PragmaDirective","src":"688:23:4","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":451,"nodeType":"ContractDefinition","src":"775:422:4","nodes":[{"id":440,"nodeType":"EventDefinition","src":"900:38:4","nodes":[],"anonymous":false,"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"812:83:4","text":" @dev Emitted every time the pause state changes by `_setPaused`."},"name":"PausedStateChanged","parameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"indexed":false,"mutability":"mutable","name":"paused","nodeType":"VariableDeclaration","scope":440,"src":"925:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":437,"name":"bool","nodeType":"ElementaryTypeName","src":"925:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"924:13:4"}},{"id":450,"nodeType":"FunctionDefinition","src":"1006:189:4","nodes":[],"documentation":{"id":441,"nodeType":"StructuredDocumentation","src":"944:57:4","text":" @dev Returns the current paused state."},"functionSelector":"1c0de051","implemented":false,"kind":"function","modifiers":[],"name":"getPausedState","parameters":{"id":442,"nodeType":"ParameterList","parameters":[],"src":"1029:2:4"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"paused","nodeType":"VariableDeclaration","scope":450,"src":"1092:11:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":443,"name":"bool","nodeType":"ElementaryTypeName","src":"1092:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"pauseWindowEndTime","nodeType":"VariableDeclaration","scope":450,"src":"1117:26:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":445,"name":"uint256","nodeType":"ElementaryTypeName","src":"1117:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":448,"mutability":"mutable","name":"bufferPeriodEndTime","nodeType":"VariableDeclaration","scope":450,"src":"1157:27:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":447,"name":"uint256","nodeType":"ElementaryTypeName","src":"1157:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1078:116:4"},"scope":451,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"713:61:4","text":" @dev Interface for the TemporarilyPausable helper."},"fullyImplemented":false,"linearizedBaseContracts":[451],"name":"ITemporarilyPausable","scope":452}],"license":"GPL-3.0-or-later"}},"contracts/lib/helpers/InputHelpers.sol":{"id":5,"ast":{"absolutePath":"contracts/lib/helpers/InputHelpers.sol","id":583,"exportedSymbols":{"InputHelpers":[582]},"nodeType":"SourceUnit","src":"688:1429:5","nodes":[{"id":453,"nodeType":"PragmaDirective","src":"688:23:5","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":454,"nodeType":"ImportDirective","src":"713:36:5","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"../openzeppelin/IERC20.sol","scope":583,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":455,"nodeType":"ImportDirective","src":"751:30:5","nodes":[],"absolutePath":"contracts/lib/helpers/BalancerErrors.sol","file":"./BalancerErrors.sol","scope":583,"sourceUnit":404,"symbolAliases":[],"unitAlias":""},{"id":456,"nodeType":"ImportDirective","src":"783:43:5","nodes":[],"absolutePath":"contracts/vault/interfaces/IAsset.sol","file":"../../vault/interfaces/IAsset.sol","scope":583,"sourceUnit":1085,"symbolAliases":[],"unitAlias":""},{"id":582,"nodeType":"ContractDefinition","src":"828:1288:5","nodes":[{"id":472,"nodeType":"FunctionDefinition","src":"855:131:5","nodes":[],"body":{"id":471,"nodeType":"Block","src":"923:63:5","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":464,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"942:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":465,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"947:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":467,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"950:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"INPUT_LENGTH_MISMATCH","nodeType":"MemberAccess","referencedDeclaration":144,"src":"950:28:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":463,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"933:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"933:46:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":470,"nodeType":"ExpressionStatement","src":"933:46:5"}]},"implemented":true,"kind":"function","modifiers":[],"name":"ensureInputLengthMatch","parameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":472,"src":"887:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":457,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":472,"src":"898:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":459,"name":"uint256","nodeType":"ElementaryTypeName","src":"898:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"886:22:5"},"returnParameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"923:0:5"},"scope":582,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":494,"nodeType":"FunctionDefinition","src":"992:182:5","nodes":[],"body":{"id":493,"nodeType":"Block","src":"1101:73:5","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":482,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"1120:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":483,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"1125:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1120:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":485,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"1130:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":486,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":478,"src":"1135:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1130:6:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1120:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":489,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"1138:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"INPUT_LENGTH_MISMATCH","nodeType":"MemberAccess","referencedDeclaration":144,"src":"1138:28:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":481,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"1111:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1111:56:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":492,"nodeType":"ExpressionStatement","src":"1111:56:5"}]},"implemented":true,"kind":"function","modifiers":[],"name":"ensureInputLengthMatch","parameters":{"id":479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":474,"mutability":"mutable","name":"a","nodeType":"VariableDeclaration","scope":494,"src":"1033:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":473,"name":"uint256","nodeType":"ElementaryTypeName","src":"1033:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"b","nodeType":"VariableDeclaration","scope":494,"src":"1052:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":475,"name":"uint256","nodeType":"ElementaryTypeName","src":"1052:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":478,"mutability":"mutable","name":"c","nodeType":"VariableDeclaration","scope":494,"src":"1071:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":477,"name":"uint256","nodeType":"ElementaryTypeName","src":"1071:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1023:63:5"},"returnParameters":{"id":480,"nodeType":"ParameterList","parameters":[],"src":"1101:0:5"},"scope":582,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":512,"nodeType":"FunctionDefinition","src":"1180:274:5","nodes":[],"body":{"id":511,"nodeType":"Block","src":"1246:208:5","nodes":[],"statements":[{"assignments":[504],"declarations":[{"constant":false,"id":504,"mutability":"mutable","name":"addressArray","nodeType":"VariableDeclaration","scope":511,"src":"1256:29:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":502,"name":"address","nodeType":"ElementaryTypeName","src":"1256:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":503,"nodeType":"ArrayTypeName","src":"1256:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":505,"nodeType":"VariableDeclarationStatement","src":"1256:29:5"},{"AST":{"nodeType":"YulBlock","src":"1360:45:5","statements":[{"nodeType":"YulAssignment","src":"1374:21:5","value":{"name":"array","nodeType":"YulIdentifier","src":"1390:5:5"},"variableNames":[{"name":"addressArray","nodeType":"YulIdentifier","src":"1374:12:5"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":504,"isOffset":false,"isSlot":false,"src":"1374:12:5","valueSize":1},{"declaration":497,"isOffset":false,"isSlot":false,"src":"1390:5:5","valueSize":1}],"id":506,"nodeType":"InlineAssembly","src":"1351:54:5"},{"expression":{"arguments":[{"id":508,"name":"addressArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"1434:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":507,"name":"ensureArrayIsSorted","nodeType":"Identifier","overloadedDeclarations":[512,530,581],"referencedDeclaration":581,"src":"1414:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory) pure"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":510,"nodeType":"ExpressionStatement","src":"1414:33:5"}]},"implemented":true,"kind":"function","modifiers":[],"name":"ensureArrayIsSorted","parameters":{"id":498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":497,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":512,"src":"1209:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":495,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"1209:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"id":496,"nodeType":"ArrayTypeName","src":"1209:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"}],"src":"1208:23:5"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[],"src":"1246:0:5"},"scope":582,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":530,"nodeType":"FunctionDefinition","src":"1460:274:5","nodes":[],"body":{"id":529,"nodeType":"Block","src":"1526:208:5","nodes":[],"statements":[{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"addressArray","nodeType":"VariableDeclaration","scope":529,"src":"1536:29:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":520,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":521,"nodeType":"ArrayTypeName","src":"1536:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":523,"nodeType":"VariableDeclarationStatement","src":"1536:29:5"},{"AST":{"nodeType":"YulBlock","src":"1640:45:5","statements":[{"nodeType":"YulAssignment","src":"1654:21:5","value":{"name":"array","nodeType":"YulIdentifier","src":"1670:5:5"},"variableNames":[{"name":"addressArray","nodeType":"YulIdentifier","src":"1654:12:5"}]}]},"evmVersion":"istanbul","externalReferences":[{"declaration":522,"isOffset":false,"isSlot":false,"src":"1654:12:5","valueSize":1},{"declaration":515,"isOffset":false,"isSlot":false,"src":"1670:5:5","valueSize":1}],"id":524,"nodeType":"InlineAssembly","src":"1631:54:5"},{"expression":{"arguments":[{"id":526,"name":"addressArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":522,"src":"1714:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":525,"name":"ensureArrayIsSorted","nodeType":"Identifier","overloadedDeclarations":[512,530,581],"referencedDeclaration":581,"src":"1694:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_address_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory) pure"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1694:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":528,"nodeType":"ExpressionStatement","src":"1694:33:5"}]},"implemented":true,"kind":"function","modifiers":[],"name":"ensureArrayIsSorted","parameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":530,"src":"1489:21:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":513,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"1489:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":514,"nodeType":"ArrayTypeName","src":"1489:8:5","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"1488:23:5"},"returnParameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"1526:0:5"},"scope":582,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":581,"nodeType":"FunctionDefinition","src":"1740:374:5","nodes":[],"body":{"id":580,"nodeType":"Block","src":"1807:307:5","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":536,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1821:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1821:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"32","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1821:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":542,"nodeType":"IfStatement","src":"1817:53:5","trueBody":{"id":541,"nodeType":"Block","src":"1839:31:5","statements":[{"functionReturnParameters":535,"id":540,"nodeType":"Return","src":"1853:7:5"}]}},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"previous","nodeType":"VariableDeclaration","scope":580,"src":"1880:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":543,"name":"address","nodeType":"ElementaryTypeName","src":"1880:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":548,"initialValue":{"baseExpression":{"id":545,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1899:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":547,"indexExpression":{"hexValue":"30","id":546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1905:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1899:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1880:27:5"},{"body":{"id":578,"nodeType":"Block","src":"1960:148:5","statements":[{"assignments":[561],"declarations":[{"constant":false,"id":561,"mutability":"mutable","name":"current","nodeType":"VariableDeclaration","scope":578,"src":"1974:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"1974:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":565,"initialValue":{"baseExpression":{"id":562,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1992:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":564,"indexExpression":{"id":563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1998:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1992:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1974:26:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":567,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"2023:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":568,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2034:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2023:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":570,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2043:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"UNSORTED_ARRAY","nodeType":"MemberAccess","referencedDeclaration":138,"src":"2043:21:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":566,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2014:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2014:51:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":573,"nodeType":"ExpressionStatement","src":"2014:51:5"},{"expression":{"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":574,"name":"previous","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"2079:8:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":575,"name":"current","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2090:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2079:18:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":577,"nodeType":"ExpressionStatement","src":"2079:18:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":553,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1937:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":554,"name":"array","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"1941:5:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1941:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1937:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"initializationExpression":{"assignments":[550],"declarations":[{"constant":false,"id":550,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":579,"src":"1922:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":549,"name":"uint256","nodeType":"ElementaryTypeName","src":"1922:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":552,"initialValue":{"hexValue":"31","id":551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1934:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"1922:13:5"},"loopExpression":{"expression":{"id":558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1955:3:5","subExpression":{"id":557,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":550,"src":"1957:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":559,"nodeType":"ExpressionStatement","src":"1955:3:5"},"nodeType":"ForStatement","src":"1917:191:5"}]},"implemented":true,"kind":"function","modifiers":[],"name":"ensureArrayIsSorted","parameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"array","nodeType":"VariableDeclaration","scope":581,"src":"1769:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"1769:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":532,"nodeType":"ArrayTypeName","src":"1769:9:5","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1768:24:5"},"returnParameters":{"id":535,"nodeType":"ParameterList","parameters":[],"src":"1807:0:5"},"scope":582,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","fullyImplemented":true,"linearizedBaseContracts":[582],"name":"InputHelpers","scope":583}],"license":"GPL-3.0-or-later"}},"contracts/lib/openzeppelin/IERC20.sol":{"id":6,"ast":{"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","id":661,"exportedSymbols":{"IERC20":[660]},"nodeType":"SourceUnit","src":"33:2693:6","nodes":[{"id":584,"nodeType":"PragmaDirective","src":"33:23:6","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":660,"nodeType":"ContractDefinition","src":"129:2596:6","nodes":[{"id":591,"nodeType":"FunctionDefinition","src":"223:55:6","nodes":[],"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"152:66:6","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","parameters":{"id":587,"nodeType":"ParameterList","parameters":[],"src":"243:2:6"},"returnParameters":{"id":590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":591,"src":"269:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"269:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"268:9:6"},"scope":660,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":599,"nodeType":"FunctionDefinition","src":"361:68:6","nodes":[],"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"284:72:6","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":599,"src":"380:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"380:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"379:17:6"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":599,"src":"420:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"420:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"419:9:6"},"scope":660,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":609,"nodeType":"FunctionDefinition","src":"649:77:6","nodes":[],"documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"435:209:6","text":" @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","implemented":false,"kind":"function","modifiers":[],"name":"transfer","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":609,"src":"667:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"667:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":609,"src":"686:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":603,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"666:35:6"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":609,"src":"720:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":606,"name":"bool","nodeType":"ElementaryTypeName","src":"720:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"719:6:6"},"scope":660,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":619,"nodeType":"FunctionDefinition","src":"1001:83:6","nodes":[],"documentation":{"id":610,"nodeType":"StructuredDocumentation","src":"732:264:6","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","implemented":false,"kind":"function","modifiers":[],"name":"allowance","parameters":{"id":615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":612,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":619,"src":"1020:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":611,"name":"address","nodeType":"ElementaryTypeName","src":"1020:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":614,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":619,"src":"1035:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"1035:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1019:32:6"},"returnParameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":617,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":619,"src":"1075:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1074:9:6"},"scope":660,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":629,"nodeType":"FunctionDefinition","src":"1737:74:6","nodes":[],"documentation":{"id":620,"nodeType":"StructuredDocumentation","src":"1090:642:6","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","implemented":false,"kind":"function","modifiers":[],"name":"approve","parameters":{"id":625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":622,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":629,"src":"1754:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":621,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":624,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":629,"src":"1771:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1753:33:6"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":629,"src":"1805:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":626,"name":"bool","nodeType":"ElementaryTypeName","src":"1805:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1804:6:6"},"scope":660,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":641,"nodeType":"FunctionDefinition","src":"2118:127:6","nodes":[],"documentation":{"id":630,"nodeType":"StructuredDocumentation","src":"1817:296:6","text":" @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","parameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":632,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":641,"src":"2149:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":631,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":634,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":641,"src":"2173:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":633,"name":"address","nodeType":"ElementaryTypeName","src":"2173:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":636,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":641,"src":"2200:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":635,"name":"uint256","nodeType":"ElementaryTypeName","src":"2200:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2139:81:6"},"returnParameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":639,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":641,"src":"2239:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":638,"name":"bool","nodeType":"ElementaryTypeName","src":"2239:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2238:6:6"},"scope":660,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":650,"nodeType":"EventDefinition","src":"2414:72:6","nodes":[],"anonymous":false,"documentation":{"id":642,"nodeType":"StructuredDocumentation","src":"2251:158:6","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"name":"Transfer","parameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":644,"indexed":true,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":650,"src":"2429:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":643,"name":"address","nodeType":"ElementaryTypeName","src":"2429:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":646,"indexed":true,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":650,"src":"2451:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"2451:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":648,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":650,"src":"2471:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":647,"name":"uint256","nodeType":"ElementaryTypeName","src":"2471:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2428:57:6"}},{"id":659,"nodeType":"EventDefinition","src":"2645:78:6","nodes":[],"anonymous":false,"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"2492:148:6","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"name":"Approval","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"indexed":true,"mutability":"mutable","name":"owner","nodeType":"VariableDeclaration","scope":659,"src":"2660:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"2660:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":655,"indexed":true,"mutability":"mutable","name":"spender","nodeType":"VariableDeclaration","scope":659,"src":"2683:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"2683:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"indexed":false,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":659,"src":"2708:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":656,"name":"uint256","nodeType":"ElementaryTypeName","src":"2708:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2659:63:6"}}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"58:70:6","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"linearizedBaseContracts":[660],"name":"IERC20","scope":661}],"license":"MIT"}},"contracts/lib/openzeppelin/ReentrancyGuard.sol":{"id":7,"ast":{"absolutePath":"contracts/lib/openzeppelin/ReentrancyGuard.sol","id":717,"exportedSymbols":{"ReentrancyGuard":[716]},"nodeType":"SourceUnit","src":"374:2749:7","nodes":[{"id":662,"nodeType":"PragmaDirective","src":"374:23:7","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":663,"nodeType":"ImportDirective","src":"399:39:7","nodes":[],"absolutePath":"contracts/lib/helpers/BalancerErrors.sol","file":"../helpers/BalancerErrors.sol","scope":717,"sourceUnit":404,"symbolAliases":[],"unitAlias":""},{"id":716,"nodeType":"ContractDefinition","src":"1191:1931:7","nodes":[{"id":667,"nodeType":"VariableDeclaration","src":"1979:41:7","nodes":[],"constant":true,"mutability":"constant","name":"_NOT_ENTERED","scope":716,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1979:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2019:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":670,"nodeType":"VariableDeclaration","src":"2026:37:7","nodes":[],"constant":true,"mutability":"constant","name":"_ENTERED","scope":716,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":668,"name":"uint256","nodeType":"ElementaryTypeName","src":"2026:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:7","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":672,"nodeType":"VariableDeclaration","src":"2070:23:7","nodes":[],"constant":false,"mutability":"mutable","name":"_status","scope":716,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":671,"name":"uint256","nodeType":"ElementaryTypeName","src":"2070:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":680,"nodeType":"FunctionDefinition","src":"2100:53:7","nodes":[],"body":{"id":679,"nodeType":"Block","src":"2114:39:7","nodes":[],"statements":[{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":675,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2124:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":676,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"2134:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2124:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":678,"nodeType":"ExpressionStatement","src":"2124:22:7"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","parameters":{"id":673,"nodeType":"ParameterList","parameters":[],"src":"2111:2:7"},"returnParameters":{"id":674,"nodeType":"ParameterList","parameters":[],"src":"2114:0:7"},"scope":716,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":691,"nodeType":"ModifierDefinition","src":"2528:101:7","nodes":[],"body":{"id":690,"nodeType":"Block","src":"2552:77:7","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":683,"name":"_enterNonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"2562:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2562:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"2562:20:7"},{"id":686,"nodeType":"PlaceholderStatement","src":"2592:1:7"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":687,"name":"_exitNonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"2603:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2603:19:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":689,"nodeType":"ExpressionStatement","src":"2603:19:7"}]},"documentation":{"id":681,"nodeType":"StructuredDocumentation","src":"2159:364:7","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and make it call a\n `private` function that does the actual work."},"name":"nonReentrant","parameters":{"id":682,"nodeType":"ParameterList","parameters":[],"src":"2549:2:7"},"virtual":false,"visibility":"internal"},{"id":707,"nodeType":"FunctionDefinition","src":"2635:271:7","nodes":[],"body":{"id":706,"nodeType":"Block","src":"2673:233:7","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":695,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2767:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":696,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"2778:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2767:19:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":698,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2788:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"REENTRANCY","nodeType":"MemberAccess","referencedDeclaration":231,"src":"2788:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":694,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2758:8:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2758:48:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":701,"nodeType":"ExpressionStatement","src":"2758:48:7"},{"expression":{"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":702,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"2881:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":703,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"2891:8:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2881:18:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":705,"nodeType":"ExpressionStatement","src":"2881:18:7"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_enterNonReentrant","parameters":{"id":692,"nodeType":"ParameterList","parameters":[],"src":"2662:2:7"},"returnParameters":{"id":693,"nodeType":"ParameterList","parameters":[],"src":"2673:0:7"},"scope":716,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":715,"nodeType":"FunctionDefinition","src":"2912:208:7","nodes":[],"body":{"id":714,"nodeType":"Block","src":"2949:171:7","nodes":[],"statements":[{"expression":{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":710,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"3091:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":711,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"3101:12:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3091:22:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":713,"nodeType":"ExpressionStatement","src":"3091:22:7"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_exitNonReentrant","parameters":{"id":708,"nodeType":"ParameterList","parameters":[],"src":"2938:2:7"},"returnParameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"2949:0:7"},"scope":716,"stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":664,"nodeType":"StructuredDocumentation","src":"440:750:7","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[716],"name":"ReentrancyGuard","scope":717}],"license":"MIT"}},"contracts/lib/openzeppelin/SafeERC20.sol":{"id":8,"ast":{"absolutePath":"contracts/lib/openzeppelin/SafeERC20.sol","id":812,"exportedSymbols":{"SafeERC20":[811]},"nodeType":"SourceUnit","src":"313:2184:8","nodes":[{"id":718,"nodeType":"PragmaDirective","src":"313:23:8","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":719,"nodeType":"ImportDirective","src":"338:39:8","nodes":[],"absolutePath":"contracts/lib/helpers/BalancerErrors.sol","file":"../helpers/BalancerErrors.sol","scope":812,"sourceUnit":404,"symbolAliases":[],"unitAlias":""},{"id":720,"nodeType":"ImportDirective","src":"379:22:8","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"./IERC20.sol","scope":812,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":811,"nodeType":"ContractDefinition","src":"861:1635:8","nodes":[{"id":746,"nodeType":"FunctionDefinition","src":"885:214:8","nodes":[],"body":{"id":745,"nodeType":"Block","src":"987:112:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":733,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"1025:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}],"id":732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1017:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":731,"name":"address","nodeType":"ElementaryTypeName","src":"1017:7:8","typeDescriptions":{}}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1017:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":737,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"1056:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":609,"src":"1056:14:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1056:23:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":740,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"1081:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":741,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"1085:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":735,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1033:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1033:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1033:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":730,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"997:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"997:95:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":744,"nodeType":"ExpressionStatement","src":"997:95:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","parameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":746,"src":"916:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":722,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"916:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":746,"src":"938:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"938:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":727,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":746,"src":"958:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":726,"name":"uint256","nodeType":"ElementaryTypeName","src":"958:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"906:71:8"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[],"src":"987:0:8"},"scope":811,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":774,"nodeType":"FunctionDefinition","src":"1105:250:8","nodes":[],"body":{"id":773,"nodeType":"Block","src":"1233:122:8","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"id":760,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1271:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}],"id":759,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1263:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":758,"name":"address","nodeType":"ElementaryTypeName","src":"1263:7:8","typeDescriptions":{}}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1263:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"expression":{"expression":{"id":764,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":748,"src":"1302:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":641,"src":"1302:18:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"1302:27:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":767,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":750,"src":"1331:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":768,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"1337:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":754,"src":"1341:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":762,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1279:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1279:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1279:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":757,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"1243:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1243:105:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":772,"nodeType":"ExpressionStatement","src":"1243:105:8"}]},"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","parameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":774,"src":"1140:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":747,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"1140:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"from","nodeType":"VariableDeclaration","scope":774,"src":"1162:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"1162:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"to","nodeType":"VariableDeclaration","scope":774,"src":"1184:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"1184:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"value","nodeType":"VariableDeclaration","scope":774,"src":"1204:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":753,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1130:93:8"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[],"src":"1233:0:8"},"scope":811,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":810,"nodeType":"FunctionDefinition","src":"1695:799:8","nodes":[],"body":{"id":809,"nodeType":"Block","src":"1766:728:8","nodes":[],"statements":[{"assignments":[783,785],"declarations":[{"constant":false,"id":783,"mutability":"mutable","name":"success","nodeType":"VariableDeclaration","scope":809,"src":"1938:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":782,"name":"bool","nodeType":"ElementaryTypeName","src":"1938:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":785,"mutability":"mutable","name":"returndata","nodeType":"VariableDeclaration","scope":809,"src":"1952:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":784,"name":"bytes","nodeType":"ElementaryTypeName","src":"1952:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":790,"initialValue":{"arguments":[{"id":788,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":779,"src":"1990:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":786,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1979:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"1979:10:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1979:16:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1937:58:8"},{"AST":{"nodeType":"YulBlock","src":"2104:156:8","statements":[{"body":{"nodeType":"YulBlock","src":"2136:114:8","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2169:1:8","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2172:1:8","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2175:14:8"},"nodeType":"YulFunctionCall","src":"2175:16:8"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"2154:14:8"},"nodeType":"YulFunctionCall","src":"2154:38:8"},"nodeType":"YulExpressionStatement","src":"2154:38:8"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2216:1:8","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"2219:14:8"},"nodeType":"YulFunctionCall","src":"2219:16:8"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2209:6:8"},"nodeType":"YulFunctionCall","src":"2209:27:8"},"nodeType":"YulExpressionStatement","src":"2209:27:8"}]},"condition":{"arguments":[{"name":"success","nodeType":"YulIdentifier","src":"2124:7:8"},{"kind":"number","nodeType":"YulLiteral","src":"2133:1:8","type":"","value":"0"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2121:2:8"},"nodeType":"YulFunctionCall","src":"2121:14:8"},"nodeType":"YulIf","src":"2118:2:8"}]},"evmVersion":"istanbul","externalReferences":[{"declaration":783,"isOffset":false,"isSlot":false,"src":"2124:7:8","valueSize":1}],"id":791,"nodeType":"InlineAssembly","src":"2095:165:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":793,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"2399:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2399:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2420:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2399:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":799,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"2436:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":801,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2449:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":800,"name":"bool","nodeType":"ElementaryTypeName","src":"2449:4:8","typeDescriptions":{}}}],"id":802,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2448:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":797,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2425:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":798,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"2425:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2425:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2399:56:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":805,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2457:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"SAFE_ERC20_CALL_FAILED","nodeType":"MemberAccess","referencedDeclaration":285,"src":"2457:29:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":792,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2390:8:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2390:97:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":808,"nodeType":"ExpressionStatement","src":"2390:97:8"}]},"documentation":{"id":775,"nodeType":"StructuredDocumentation","src":"1361:329:8","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert."},"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","parameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":777,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":810,"src":"1724:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"1724:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"data","nodeType":"VariableDeclaration","scope":810,"src":"1739:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":778,"name":"bytes","nodeType":"ElementaryTypeName","src":"1739:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1723:34:8"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[],"src":"1766:0:8"},"scope":811,"stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"library","documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"403:457:8","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"linearizedBaseContracts":[811],"name":"SafeERC20","scope":812}],"license":"MIT"}},"contracts/vault/ProtocolFeesCollector.sol":{"id":9,"ast":{"absolutePath":"contracts/vault/ProtocolFeesCollector.sol","id":1081,"exportedSymbols":{"ProtocolFeesCollector":[1080]},"nodeType":"SourceUnit","src":"688:4215:9","nodes":[{"id":813,"nodeType":"PragmaDirective","src":"688:23:9","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":814,"nodeType":"PragmaDirective","src":"712:33:9","nodes":[],"literals":["experimental","ABIEncoderV2"]},{"id":815,"nodeType":"ImportDirective","src":"747:40:9","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"../lib/openzeppelin/IERC20.sol","scope":1081,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":816,"nodeType":"ImportDirective","src":"788:41:9","nodes":[],"absolutePath":"contracts/lib/helpers/InputHelpers.sol","file":"../lib/helpers/InputHelpers.sol","scope":1081,"sourceUnit":583,"symbolAliases":[],"unitAlias":""},{"id":817,"nodeType":"ImportDirective","src":"830:43:9","nodes":[],"absolutePath":"contracts/lib/helpers/Authentication.sol","file":"../lib/helpers/Authentication.sol","scope":1081,"sourceUnit":77,"symbolAliases":[],"unitAlias":""},{"id":818,"nodeType":"ImportDirective","src":"874:49:9","nodes":[],"absolutePath":"contracts/lib/openzeppelin/ReentrancyGuard.sol","file":"../lib/openzeppelin/ReentrancyGuard.sol","scope":1081,"sourceUnit":717,"symbolAliases":[],"unitAlias":""},{"id":819,"nodeType":"ImportDirective","src":"924:43:9","nodes":[],"absolutePath":"contracts/lib/openzeppelin/SafeERC20.sol","file":"../lib/openzeppelin/SafeERC20.sol","scope":1081,"sourceUnit":812,"symbolAliases":[],"unitAlias":""},{"id":820,"nodeType":"ImportDirective","src":"969:33:9","nodes":[],"absolutePath":"contracts/vault/interfaces/IVault.sol","file":"./interfaces/IVault.sol","scope":1081,"sourceUnit":1581,"symbolAliases":[],"unitAlias":""},{"id":821,"nodeType":"ImportDirective","src":"1003:38:9","nodes":[],"absolutePath":"contracts/vault/interfaces/IAuthorizer.sol","file":"./interfaces/IAuthorizer.sol","scope":1081,"sourceUnit":1100,"symbolAliases":[],"unitAlias":""},{"id":1080,"nodeType":"ContractDefinition","src":"1494:3408:9","nodes":[{"id":829,"nodeType":"UsingForDirective","src":"1566:27:9","nodes":[],"libraryName":{"id":827,"name":"SafeERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":811,"src":"1572:9:9","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$811","typeString":"library SafeERC20"}},"typeName":{"id":828,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"1586:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}}},{"id":832,"nodeType":"VariableDeclaration","src":"1665:66:9","nodes":[],"constant":true,"mutability":"constant","name":"_MAX_PROTOCOL_SWAP_FEE_PERCENTAGE","scope":1080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1665:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3530653136","id":831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1726:5:9","typeDescriptions":{"typeIdentifier":"t_rational_500000000000000000_by_1","typeString":"int_const 500000000000000000"},"value":"50e16"},"visibility":"private"},{"id":835,"nodeType":"VariableDeclaration","src":"1744:71:9","nodes":[],"constant":true,"mutability":"constant","name":"_MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE","scope":1080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":833,"name":"uint256","nodeType":"ElementaryTypeName","src":"1744:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653136","id":834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1811:4:9","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"value":"1e16"},"visibility":"private"},{"id":837,"nodeType":"VariableDeclaration","src":"1828:29:9","nodes":[],"constant":false,"functionSelector":"fbfa77cf","mutability":"immutable","name":"vault","scope":1080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"},"typeName":{"id":836,"name":"IVault","nodeType":"UserDefinedTypeName","referencedDeclaration":1580,"src":"1828:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"visibility":"public"},{"id":839,"nodeType":"VariableDeclaration","src":"2200:34:9","nodes":[],"constant":false,"mutability":"mutable","name":"_swapFeePercentage","scope":1080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"2200:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":841,"nodeType":"VariableDeclaration","src":"2344:39:9","nodes":[],"constant":false,"mutability":"mutable","name":"_flashLoanFeePercentage","scope":1080,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"2344:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":845,"nodeType":"EventDefinition","src":"2390:61:9","nodes":[],"anonymous":false,"name":"SwapFeePercentageChanged","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"indexed":false,"mutability":"mutable","name":"newSwapFeePercentage","nodeType":"VariableDeclaration","scope":845,"src":"2421:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2421:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2420:30:9"}},{"id":849,"nodeType":"EventDefinition","src":"2456:71:9","nodes":[],"anonymous":false,"name":"FlashLoanFeePercentageChanged","parameters":{"id":848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"indexed":false,"mutability":"mutable","name":"newFlashLoanFeePercentage","nodeType":"VariableDeclaration","scope":849,"src":"2492:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"2492:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2491:35:9"}},{"id":871,"nodeType":"FunctionDefinition","src":"2533:252:9","nodes":[],"body":{"id":870,"nodeType":"Block","src":"2754:31:9","nodes":[],"statements":[{"expression":{"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":866,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"2764:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":867,"name":"_vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"2772:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"src":"2764:14:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"id":869,"nodeType":"ExpressionStatement","src":"2764:14:9"}]},"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"id":860,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2741:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}],"id":859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2733:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":858,"name":"address","nodeType":"ElementaryTypeName","src":"2733:7:9","typeDescriptions":{}}},"id":861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2733:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2725:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"2725:7:9","typeDescriptions":{}}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2725:22:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":854,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2717:7:9","typeDescriptions":{}}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2717:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":864,"modifierName":{"id":853,"name":"Authentication","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"2702:14:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Authentication_$76_$","typeString":"type(contract Authentication)"}},"nodeType":"ModifierInvocation","src":"2702:47:9"}],"name":"","parameters":{"id":852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":851,"mutability":"mutable","name":"_vault","nodeType":"VariableDeclaration","scope":871,"src":"2545:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"},"typeName":{"id":850,"name":"IVault","nodeType":"UserDefinedTypeName","referencedDeclaration":1580,"src":"2545:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"visibility":"internal"}],"src":"2544:15:9"},"returnParameters":{"id":865,"nodeType":"ParameterList","parameters":[],"src":"2754:0:9"},"scope":1080,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":928,"nodeType":"FunctionDefinition","src":"2791:447:9","nodes":[],"body":{"id":927,"nodeType":"Block","src":"2960:278:9","nodes":[],"statements":[{"expression":{"arguments":[{"expression":{"id":889,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"3006:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3006:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":891,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"3021:7:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3021:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":886,"name":"InputHelpers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"2970:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InputHelpers_$582_$","typeString":"type(library InputHelpers)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ensureInputLengthMatch","nodeType":"MemberAccess","referencedDeclaration":472,"src":"2970:35:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2970:66:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"ExpressionStatement","src":"2970:66:9"},{"body":{"id":925,"nodeType":"Block","src":"3091:141:9","statements":[{"assignments":[907],"declarations":[{"constant":false,"id":907,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":925,"src":"3105:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":906,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"3105:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"}],"id":911,"initialValue":{"baseExpression":{"id":908,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"3120:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":910,"indexExpression":{"id":909,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3127:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3120:9:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"nodeType":"VariableDeclarationStatement","src":"3105:24:9"},{"assignments":[913],"declarations":[{"constant":false,"id":913,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":925,"src":"3143:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"3143:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":917,"initialValue":{"baseExpression":{"id":914,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"3160:7:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":916,"indexExpression":{"id":915,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3168:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3160:10:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3143:27:9"},{"expression":{"arguments":[{"id":921,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"3203:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":922,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"3214:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":918,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"3184:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":746,"src":"3184:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$660_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20_$660_$","typeString":"function (contract IERC20,address,uint256)"}},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3184:37:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":924,"nodeType":"ExpressionStatement","src":"3184:37:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":899,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3067:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":900,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"3071:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3071:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3067:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":926,"initializationExpression":{"assignments":[896],"declarations":[{"constant":false,"id":896,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":926,"src":"3052:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"3052:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":898,"initialValue":{"hexValue":"30","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3064:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3052:13:9"},"loopExpression":{"expression":{"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3086:3:9","subExpression":{"id":903,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"3088:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":905,"nodeType":"ExpressionStatement","src":"3086:3:9"},"nodeType":"ForStatement","src":"3047:185:9"}]},"functionSelector":"6daefab6","implemented":true,"kind":"function","modifiers":[{"id":882,"modifierName":{"id":881,"name":"nonReentrant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"2934:12:9","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2934:12:9"},{"id":884,"modifierName":{"id":883,"name":"authenticate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"2947:12:9","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"2947:12:9"}],"name":"withdrawCollectedFees","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":928,"src":"2831:24:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":872,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"2831:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":873,"nodeType":"ArrayTypeName","src":"2831:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"amounts","nodeType":"VariableDeclaration","scope":928,"src":"2865:26:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":875,"name":"uint256","nodeType":"ElementaryTypeName","src":"2865:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":876,"nodeType":"ArrayTypeName","src":"2865:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":928,"src":"2901:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"2901:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2821:103:9"},"returnParameters":{"id":885,"nodeType":"ParameterList","parameters":[],"src":"2960:0:9"},"scope":1080,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":952,"nodeType":"FunctionDefinition","src":"3244:315:9","nodes":[],"body":{"id":951,"nodeType":"Block","src":"3326:233:9","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"newSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"3345:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":937,"name":"_MAX_PROTOCOL_SWAP_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"3369:33:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3345:57:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":939,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"3404:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"SWAP_FEE_PERCENTAGE_TOO_HIGH","nodeType":"MemberAccess","referencedDeclaration":396,"src":"3404:35:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":935,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3336:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3336:104:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":942,"nodeType":"ExpressionStatement","src":"3336:104:9"},{"expression":{"id":945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":943,"name":"_swapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"3450:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":944,"name":"newSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"3471:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3450:41:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":946,"nodeType":"ExpressionStatement","src":"3450:41:9"},{"eventCall":{"arguments":[{"id":948,"name":"newSwapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"3531:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":947,"name":"SwapFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"3506:24:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3506:46:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":950,"nodeType":"EmitStatement","src":"3501:51:9"}]},"functionSelector":"38e9922e","implemented":true,"kind":"function","modifiers":[{"id":933,"modifierName":{"id":932,"name":"authenticate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"3313:12:9","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3313:12:9"}],"name":"setSwapFeePercentage","parameters":{"id":931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"newSwapFeePercentage","nodeType":"VariableDeclaration","scope":952,"src":"3274:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"3274:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3273:30:9"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"3326:0:9"},"scope":1080,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":976,"nodeType":"FunctionDefinition","src":"3565:396:9","nodes":[],"body":{"id":975,"nodeType":"Block","src":"3657:304:9","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":960,"name":"newFlashLoanFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3689:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":961,"name":"_MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":835,"src":"3718:39:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3689:68:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"expression":{"id":963,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"3771:6:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$403_$","typeString":"type(library Errors)"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH","nodeType":"MemberAccess","referencedDeclaration":399,"src":"3771:41:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":959,"name":"_require","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3667:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint256_$returns$__$","typeString":"function (bool,uint256) pure"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3667:155:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":966,"nodeType":"ExpressionStatement","src":"3667:155:9"},{"expression":{"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":967,"name":"_flashLoanFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"3832:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":968,"name":"newFlashLoanFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3858:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3832:51:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":970,"nodeType":"ExpressionStatement","src":"3832:51:9"},{"eventCall":{"arguments":[{"id":972,"name":"newFlashLoanFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3928:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":971,"name":"FlashLoanFeePercentageChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3898:29:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3898:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"EmitStatement","src":"3893:61:9"}]},"functionSelector":"6b6b9f69","implemented":true,"kind":"function","modifiers":[{"id":957,"modifierName":{"id":956,"name":"authenticate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"3644:12:9","typeDescriptions":{"typeIdentifier":"t_modifier$__$","typeString":"modifier ()"}},"nodeType":"ModifierInvocation","src":"3644:12:9"}],"name":"setFlashLoanFeePercentage","parameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"newFlashLoanFeePercentage","nodeType":"VariableDeclaration","scope":976,"src":"3600:33:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"3600:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3599:35:9"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"3657:0:9"},"scope":1080,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":984,"nodeType":"FunctionDefinition","src":"3967:106:9","nodes":[],"body":{"id":983,"nodeType":"Block","src":"4031:42:9","nodes":[],"statements":[{"expression":{"id":981,"name":"_swapFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"4048:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":980,"id":982,"nodeType":"Return","src":"4041:25:9"}]},"functionSelector":"55c67628","implemented":true,"kind":"function","modifiers":[],"name":"getSwapFeePercentage","parameters":{"id":977,"nodeType":"ParameterList","parameters":[],"src":"3996:2:9"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":984,"src":"4022:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":978,"name":"uint256","nodeType":"ElementaryTypeName","src":"4022:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4021:9:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":992,"nodeType":"FunctionDefinition","src":"4079:116:9","nodes":[],"body":{"id":991,"nodeType":"Block","src":"4148:47:9","nodes":[],"statements":[{"expression":{"id":989,"name":"_flashLoanFeePercentage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"4165:23:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":988,"id":990,"nodeType":"Return","src":"4158:30:9"}]},"functionSelector":"d877845c","implemented":true,"kind":"function","modifiers":[],"name":"getFlashLoanFeePercentage","parameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"4113:2:9"},"returnParameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":992,"src":"4139:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"4139:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4138:9:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1038,"nodeType":"FunctionDefinition","src":"4201:294:9","nodes":[],"body":{"id":1037,"nodeType":"Block","src":"4309:186:9","nodes":[],"statements":[{"expression":{"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1001,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"4319:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":1005,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"4346:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4346:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"4332:13:9","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":1002,"name":"uint256","nodeType":"ElementaryTypeName","src":"4336:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1003,"nodeType":"ArrayTypeName","src":"4336:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":1007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4332:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"4319:41:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1009,"nodeType":"ExpressionStatement","src":"4319:41:9"},{"body":{"id":1035,"nodeType":"Block","src":"4414:75:9","statements":[{"expression":{"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1021,"name":"feeAmounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"4428:10:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":1023,"indexExpression":{"id":1022,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"4439:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4428:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1030,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4472:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}],"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4464:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:9","typeDescriptions":{}}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4464:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":1024,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"4444:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1026,"indexExpression":{"id":1025,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"4451:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4444:9:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":599,"src":"4444:19:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4444:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4428:50:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1034,"nodeType":"ExpressionStatement","src":"4428:50:9"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1014,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"4390:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1015,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":995,"src":"4394:6:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[] memory"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4394:13:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4390:17:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1036,"initializationExpression":{"assignments":[1011],"declarations":[{"constant":false,"id":1011,"mutability":"mutable","name":"i","nodeType":"VariableDeclaration","scope":1036,"src":"4375:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"4375:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1013,"initialValue":{"hexValue":"30","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4387:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4375:13:9"},"loopExpression":{"expression":{"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4409:3:9","subExpression":{"id":1018,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"4411:1:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1020,"nodeType":"ExpressionStatement","src":"4409:3:9"},"nodeType":"ForStatement","src":"4370:119:9"}]},"functionSelector":"e42abf35","implemented":true,"kind":"function","modifiers":[],"name":"getCollectedFeeAmounts","parameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1038,"src":"4233:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":993,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"4233:6:9","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":994,"nodeType":"ArrayTypeName","src":"4233:8:9","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"4232:24:9"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":999,"mutability":"mutable","name":"feeAmounts","nodeType":"VariableDeclaration","scope":1038,"src":"4280:27:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"4280:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":998,"nodeType":"ArrayTypeName","src":"4280:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4279:29:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1047,"nodeType":"FunctionDefinition","src":"4501:101:9","nodes":[],"body":{"id":1046,"nodeType":"Block","src":"4562:40:9","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1043,"name":"_getAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"4579:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$1099_$","typeString":"function () view returns (contract IAuthorizer)"}},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4579:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"functionReturnParameters":1042,"id":1045,"nodeType":"Return","src":"4572:23:9"}]},"functionSelector":"aaabadc5","implemented":true,"kind":"function","modifiers":[],"name":"getAuthorizer","parameters":{"id":1039,"nodeType":"ParameterList","parameters":[],"src":"4523:2:9"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1047,"src":"4549:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"},"typeName":{"id":1040,"name":"IAuthorizer","nodeType":"UserDefinedTypeName","referencedDeclaration":1099,"src":"4549:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"4548:13:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1069,"nodeType":"FunctionDefinition","src":"4608:179:9","nodes":[],"body":{"id":1068,"nodeType":"Block","src":"4702:85:9","nodes":[],"statements":[{"expression":{"arguments":[{"id":1060,"name":"actionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"4747:8:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1061,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"4757:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1064,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4774:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}],"id":1063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4766:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1062,"name":"address","nodeType":"ElementaryTypeName","src":"4766:7:9","typeDescriptions":{}}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4766:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1057,"name":"_getAuthorizer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"4719:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_contract$_IAuthorizer_$1099_$","typeString":"function () view returns (contract IAuthorizer)"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4719:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"canPerform","nodeType":"MemberAccess","referencedDeclaration":1098,"src":"4719:27:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address,address) view external returns (bool)"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4719:61:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1056,"id":1067,"nodeType":"Return","src":"4712:68:9"}]},"baseFunctions":[75],"implemented":true,"kind":"function","modifiers":[],"name":"_canPerform","overrides":{"id":1053,"nodeType":"OverrideSpecifier","overrides":[],"src":"4678:8:9"},"parameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1049,"mutability":"mutable","name":"actionId","nodeType":"VariableDeclaration","scope":1069,"src":"4629:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4629:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1051,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":1069,"src":"4647:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1050,"name":"address","nodeType":"ElementaryTypeName","src":"4647:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4628:35:9"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1069,"src":"4696:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1054,"name":"bool","nodeType":"ElementaryTypeName","src":"4696:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4695:6:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":1079,"nodeType":"FunctionDefinition","src":"4793:107:9","nodes":[],"body":{"id":1078,"nodeType":"Block","src":"4855:45:9","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1074,"name":"vault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"4872:5:9","typeDescriptions":{"typeIdentifier":"t_contract$_IVault_$1580","typeString":"contract IVault"}},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"getAuthorizer","nodeType":"MemberAccess","referencedDeclaration":1140,"src":"4872:19:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_contract$_IAuthorizer_$1099_$","typeString":"function () view external returns (contract IAuthorizer)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4872:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"functionReturnParameters":1073,"id":1077,"nodeType":"Return","src":"4865:28:9"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_getAuthorizer","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[],"src":"4816:2:9"},"returnParameters":{"id":1073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1072,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1079,"src":"4842:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"},"typeName":{"id":1071,"name":"IAuthorizer","nodeType":"UserDefinedTypeName","referencedDeclaration":1099,"src":"4842:11:9","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"4841:13:9"},"scope":1080,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[{"baseName":{"id":823,"name":"Authentication","nodeType":"UserDefinedTypeName","referencedDeclaration":76,"src":"1528:14:9","typeDescriptions":{"typeIdentifier":"t_contract$_Authentication_$76","typeString":"contract Authentication"}},"id":824,"nodeType":"InheritanceSpecifier","src":"1528:14:9"},{"baseName":{"id":825,"name":"ReentrancyGuard","nodeType":"UserDefinedTypeName","referencedDeclaration":716,"src":"1544:15:9","typeDescriptions":{"typeIdentifier":"t_contract$_ReentrancyGuard_$716","typeString":"contract ReentrancyGuard"}},"id":826,"nodeType":"InheritanceSpecifier","src":"1544:15:9"}],"contractDependencies":[76,414,716],"contractKind":"contract","documentation":{"id":822,"nodeType":"StructuredDocumentation","src":"1043:450:9","text":" @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\n Vault performs to reduce its overall bytecode size.\n The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\n sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\n to the Vault's own authorizer."},"fullyImplemented":true,"linearizedBaseContracts":[1080,716,76,414],"name":"ProtocolFeesCollector","scope":1081}],"license":"GPL-3.0-or-later"}},"contracts/vault/interfaces/IAsset.sol":{"id":10,"ast":{"absolutePath":"contracts/vault/interfaces/IAsset.sol","id":1085,"exportedSymbols":{"IAsset":[1084]},"nodeType":"SourceUnit","src":"688:409:10","nodes":[{"id":1082,"nodeType":"PragmaDirective","src":"688:23:10","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":1084,"nodeType":"ContractDefinition","src":"1023:73:10","nodes":[],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"713:309:10","text":" @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\n address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\n types.\n This concept is unrelated to a Pool's Asset Managers."},"fullyImplemented":true,"linearizedBaseContracts":[1084],"name":"IAsset","scope":1085}],"license":"GPL-3.0-or-later"}},"contracts/vault/interfaces/IAuthorizer.sol":{"id":11,"ast":{"absolutePath":"contracts/vault/interfaces/IAuthorizer.sol","id":1100,"exportedSymbols":{"IAuthorizer":[1099]},"nodeType":"SourceUnit","src":"688:311:11","nodes":[{"id":1086,"nodeType":"PragmaDirective","src":"688:23:11","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":1099,"nodeType":"ContractDefinition","src":"713:285:11","nodes":[{"id":1098,"nodeType":"FunctionDefinition","src":"867:129:11","nodes":[],"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"741:121:11","text":" @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`."},"functionSelector":"9be2a884","implemented":false,"kind":"function","modifiers":[],"name":"canPerform","parameters":{"id":1094,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1089,"mutability":"mutable","name":"actionId","nodeType":"VariableDeclaration","scope":1098,"src":"896:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1088,"name":"bytes32","nodeType":"ElementaryTypeName","src":"896:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1091,"mutability":"mutable","name":"account","nodeType":"VariableDeclaration","scope":1098,"src":"922:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1090,"name":"address","nodeType":"ElementaryTypeName","src":"922:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1093,"mutability":"mutable","name":"where","nodeType":"VariableDeclaration","scope":1098,"src":"947:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1092,"name":"address","nodeType":"ElementaryTypeName","src":"947:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"886:80:11"},"returnParameters":{"id":1097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1096,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1098,"src":"990:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1095,"name":"bool","nodeType":"ElementaryTypeName","src":"990:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"989:6:11"},"scope":1099,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[1099],"name":"IAuthorizer","scope":1100}],"license":"GPL-3.0-or-later"}},"contracts/vault/interfaces/IFlashLoanRecipient.sol":{"id":12,"ast":{"absolutePath":"contracts/vault/interfaces/IFlashLoanRecipient.sol","id":1119,"exportedSymbols":{"IFlashLoanRecipient":[1118]},"nodeType":"SourceUnit","src":"688:837:12","nodes":[{"id":1101,"nodeType":"PragmaDirective","src":"688:23:12","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":1102,"nodeType":"ImportDirective","src":"765:43:12","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"../../lib/openzeppelin/IERC20.sol","scope":1119,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":1118,"nodeType":"ContractDefinition","src":"810:714:12","nodes":[{"id":1117,"nodeType":"FunctionDefinition","src":"1347:175:12","nodes":[],"documentation":{"id":1103,"nodeType":"StructuredDocumentation","src":"846:496:12","text":" @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n Vault, or else the entire flash loan will revert.\n `userData` is the same value passed in the `IVault.flashLoan` call."},"functionSelector":"f04f2707","implemented":false,"kind":"function","modifiers":[],"name":"receiveFlashLoan","parameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1106,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1117,"src":"1382:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1104,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"1382:6:12","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1105,"nodeType":"ArrayTypeName","src":"1382:8:12","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1109,"mutability":"mutable","name":"amounts","nodeType":"VariableDeclaration","scope":1117,"src":"1414:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1414:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1108,"nodeType":"ArrayTypeName","src":"1414:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1112,"mutability":"mutable","name":"feeAmounts","nodeType":"VariableDeclaration","scope":1117,"src":"1448:27:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1448:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1111,"nodeType":"ArrayTypeName","src":"1448:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1114,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1117,"src":"1485:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1113,"name":"bytes","nodeType":"ElementaryTypeName","src":"1485:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1372:140:12"},"returnParameters":{"id":1116,"nodeType":"ParameterList","parameters":[],"src":"1521:0:12"},"scope":1118,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[1118],"name":"IFlashLoanRecipient","scope":1119}],"license":"GPL-3.0-or-later"}},"contracts/vault/interfaces/IVault.sol":{"id":13,"ast":{"absolutePath":"contracts/vault/interfaces/IVault.sol","id":1581,"exportedSymbols":{"IVault":[1580]},"nodeType":"SourceUnit","src":"688:37671:13","nodes":[{"id":1120,"nodeType":"PragmaDirective","src":"688:33:13","nodes":[],"literals":["experimental","ABIEncoderV2"]},{"id":1121,"nodeType":"ImportDirective","src":"723:43:13","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"../../lib/openzeppelin/IERC20.sol","scope":1581,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":1122,"nodeType":"ImportDirective","src":"768:21:13","nodes":[],"absolutePath":"contracts/vault/interfaces/IWETH.sol","file":"./IWETH.sol","scope":1581,"sourceUnit":1596,"symbolAliases":[],"unitAlias":""},{"id":1123,"nodeType":"ImportDirective","src":"790:22:13","nodes":[],"absolutePath":"contracts/vault/interfaces/IAsset.sol","file":"./IAsset.sol","scope":1581,"sourceUnit":1085,"symbolAliases":[],"unitAlias":""},{"id":1124,"nodeType":"ImportDirective","src":"813:27:13","nodes":[],"absolutePath":"contracts/vault/interfaces/IAuthorizer.sol","file":"./IAuthorizer.sol","scope":1581,"sourceUnit":1100,"symbolAliases":[],"unitAlias":""},{"id":1125,"nodeType":"ImportDirective","src":"841:35:13","nodes":[],"absolutePath":"contracts/vault/interfaces/IFlashLoanRecipient.sol","file":"./IFlashLoanRecipient.sol","scope":1581,"sourceUnit":1119,"symbolAliases":[],"unitAlias":""},{"id":1126,"nodeType":"ImportDirective","src":"877:38:13","nodes":[],"absolutePath":"contracts/vault/ProtocolFeesCollector.sol","file":"../ProtocolFeesCollector.sol","scope":1581,"sourceUnit":1081,"symbolAliases":[],"unitAlias":""},{"id":1127,"nodeType":"ImportDirective","src":"917:52:13","nodes":[],"absolutePath":"contracts/lib/helpers/ISignaturesValidator.sol","file":"../../lib/helpers/ISignaturesValidator.sol","scope":1581,"sourceUnit":433,"symbolAliases":[],"unitAlias":""},{"id":1128,"nodeType":"ImportDirective","src":"970:52:13","nodes":[],"absolutePath":"contracts/lib/helpers/ITemporarilyPausable.sol","file":"../../lib/helpers/ITemporarilyPausable.sol","scope":1581,"sourceUnit":452,"symbolAliases":[],"unitAlias":""},{"id":1129,"nodeType":"PragmaDirective","src":"1024:23:13","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":1580,"nodeType":"ContractDefinition","src":"1221:37137:13","nodes":[{"id":1140,"nodeType":"FunctionDefinition","src":"2841:61:13","nodes":[],"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"2781:55:13","text":" @dev Returns the Vault's Authorizer."},"functionSelector":"aaabadc5","implemented":false,"kind":"function","modifiers":[],"name":"getAuthorizer","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[],"src":"2863:2:13"},"returnParameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1140,"src":"2889:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"},"typeName":{"id":1137,"name":"IAuthorizer","nodeType":"UserDefinedTypeName","referencedDeclaration":1099,"src":"2889:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"2888:13:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1146,"nodeType":"FunctionDefinition","src":"3088:59:13","nodes":[],"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"2908:175:13","text":" @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n Emits an `AuthorizerChanged` event."},"functionSelector":"058a628f","implemented":false,"kind":"function","modifiers":[],"name":"setAuthorizer","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"newAuthorizer","nodeType":"VariableDeclaration","scope":1146,"src":"3111:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"},"typeName":{"id":1142,"name":"IAuthorizer","nodeType":"UserDefinedTypeName","referencedDeclaration":1099,"src":"3111:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3110:27:13"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"3146:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1151,"nodeType":"EventDefinition","src":"3238:59:13","nodes":[],"anonymous":false,"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"3153:80:13","text":" @dev Emitted when a new authorizer is set by `setAuthorizer`."},"name":"AuthorizerChanged","parameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"indexed":true,"mutability":"mutable","name":"newAuthorizer","nodeType":"VariableDeclaration","scope":1151,"src":"3262:33:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"},"typeName":{"id":1148,"name":"IAuthorizer","nodeType":"UserDefinedTypeName","referencedDeclaration":1099,"src":"3262:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAuthorizer_$1099","typeString":"contract IAuthorizer"}},"visibility":"internal"}],"src":"3261:35:13"}},{"id":1161,"nodeType":"FunctionDefinition","src":"4497:88:13","nodes":[],"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"4393:99:13","text":" @dev Returns true if `user` has approved `relayer` to act as a relayer for them."},"functionSelector":"fec90d72","implemented":false,"kind":"function","modifiers":[],"name":"hasApprovedRelayer","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1161,"src":"4525:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"4525:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"relayer","nodeType":"VariableDeclaration","scope":1161,"src":"4539:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"4539:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4524:31:13"},"returnParameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1161,"src":"4579:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1158,"name":"bool","nodeType":"ElementaryTypeName","src":"4579:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4578:6:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1171,"nodeType":"FunctionDefinition","src":"4774:115:13","nodes":[],"documentation":{"id":1162,"nodeType":"StructuredDocumentation","src":"4591:178:13","text":" @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n Emits a `RelayerApprovalChanged` event."},"functionSelector":"fa6e671d","implemented":false,"kind":"function","modifiers":[],"name":"setRelayerApproval","parameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1164,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1171,"src":"4811:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1163,"name":"address","nodeType":"ElementaryTypeName","src":"4811:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1166,"mutability":"mutable","name":"relayer","nodeType":"VariableDeclaration","scope":1171,"src":"4835:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1165,"name":"address","nodeType":"ElementaryTypeName","src":"4835:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1168,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","scope":1171,"src":"4860:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1167,"name":"bool","nodeType":"ElementaryTypeName","src":"4860:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4801:78:13"},"returnParameters":{"id":1170,"nodeType":"ParameterList","parameters":[],"src":"4888:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1180,"nodeType":"EventDefinition","src":"5004:93:13","nodes":[],"anonymous":false,"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"4895:104:13","text":" @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."},"name":"RelayerApprovalChanged","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"indexed":true,"mutability":"mutable","name":"relayer","nodeType":"VariableDeclaration","scope":1180,"src":"5033:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"5033:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1176,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1180,"src":"5058:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1175,"name":"address","nodeType":"ElementaryTypeName","src":"5058:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1178,"indexed":false,"mutability":"mutable","name":"approved","nodeType":"VariableDeclaration","scope":1180,"src":"5082:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1177,"name":"bool","nodeType":"ElementaryTypeName","src":"5082:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5032:64:13"}},{"id":1192,"nodeType":"FunctionDefinition","src":"5888:107:13","nodes":[],"documentation":{"id":1181,"nodeType":"StructuredDocumentation","src":"5805:78:13","text":" @dev Returns `user`'s Internal Balance for a set of tokens."},"functionSelector":"0f5a6efa","implemented":false,"kind":"function","modifiers":[],"name":"getInternalBalance","parameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1192,"src":"5916:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"5916:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1186,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1192,"src":"5930:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1184,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"5930:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1185,"nodeType":"ArrayTypeName","src":"5930:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"5915:38:13"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1192,"src":"5977:16:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1188,"name":"uint256","nodeType":"ElementaryTypeName","src":"5977:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1189,"nodeType":"ArrayTypeName","src":"5977:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"5976:18:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1199,"nodeType":"FunctionDefinition","src":"6422:72:13","nodes":[],"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"6001:416:13","text":" @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n it lets integrators reuse a user's Vault allowance.\n For each operation, if the caller is not `sender`, it must be an authorized relayer for them."},"functionSelector":"0e8e3e84","implemented":false,"kind":"function","modifiers":[],"name":"manageUserBalance","parameters":{"id":1197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"ops","nodeType":"VariableDeclaration","scope":1199,"src":"6449:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$1210_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.UserBalanceOp[]"},"typeName":{"baseType":{"id":1194,"name":"UserBalanceOp","nodeType":"UserDefinedTypeName","referencedDeclaration":1210,"src":"6449:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_UserBalanceOp_$1210_storage_ptr","typeString":"struct IVault.UserBalanceOp"}},"id":1195,"nodeType":"ArrayTypeName","src":"6449:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserBalanceOp_$1210_storage_$dyn_storage_ptr","typeString":"struct IVault.UserBalanceOp[]"}},"visibility":"internal"}],"src":"6448:28:13"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[],"src":"6493:0:13"},"scope":1580,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":1210,"nodeType":"StructDefinition","src":"6680:165:13","nodes":[],"canonicalName":"IVault.UserBalanceOp","members":[{"constant":false,"id":1201,"mutability":"mutable","name":"kind","nodeType":"VariableDeclaration","scope":1210,"src":"6711:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$1215","typeString":"enum IVault.UserBalanceOpKind"},"typeName":{"id":1200,"name":"UserBalanceOpKind","nodeType":"UserDefinedTypeName","referencedDeclaration":1215,"src":"6711:17:13","typeDescriptions":{"typeIdentifier":"t_enum$_UserBalanceOpKind_$1215","typeString":"enum IVault.UserBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":1203,"mutability":"mutable","name":"asset","nodeType":"VariableDeclaration","scope":1210,"src":"6743:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"},"typeName":{"id":1202,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"6743:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1210,"src":"6765:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"6765:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1207,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1210,"src":"6789:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1206,"name":"address","nodeType":"ElementaryTypeName","src":"6789:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1210,"src":"6813:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"6813:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"name":"UserBalanceOp","scope":1580,"visibility":"public"},{"id":1215,"nodeType":"EnumDefinition","src":"8458:100:13","nodes":[],"canonicalName":"IVault.UserBalanceOpKind","members":[{"id":1211,"name":"DEPOSIT_INTERNAL","nodeType":"EnumValue","src":"8483:16:13"},{"id":1212,"name":"WITHDRAW_INTERNAL","nodeType":"EnumValue","src":"8501:17:13"},{"id":1213,"name":"TRANSFER_INTERNAL","nodeType":"EnumValue","src":"8520:17:13"},{"id":1214,"name":"TRANSFER_EXTERNAL","nodeType":"EnumValue","src":"8539:17:13"}],"name":"UserBalanceOpKind"},{"id":1224,"nodeType":"EventDefinition","src":"8886:87:13","nodes":[],"anonymous":false,"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"8564:317:13","text":" @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n interacting with Pools using Internal Balance.\n Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n address."},"name":"InternalBalanceChanged","parameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"indexed":true,"mutability":"mutable","name":"user","nodeType":"VariableDeclaration","scope":1224,"src":"8915:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"8915:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1220,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1224,"src":"8937:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1219,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"8937:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1222,"indexed":false,"mutability":"mutable","name":"delta","nodeType":"VariableDeclaration","scope":1224,"src":"8959:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1221,"name":"int256","nodeType":"ElementaryTypeName","src":"8959:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"8914:58:13"}},{"id":1235,"nodeType":"EventDefinition","src":"9115:111:13","nodes":[],"anonymous":false,"documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"8979:131:13","text":" @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."},"name":"ExternalBalanceTransfer","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1235,"src":"9145:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1226,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"9145:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1229,"indexed":true,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1235,"src":"9167:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1228,"name":"address","nodeType":"ElementaryTypeName","src":"9167:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1231,"indexed":false,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1235,"src":"9191:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1230,"name":"address","nodeType":"ElementaryTypeName","src":"9191:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1233,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1235,"src":"9210:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1232,"name":"uint256","nodeType":"ElementaryTypeName","src":"9210:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9144:81:13"}},{"id":1239,"nodeType":"EnumDefinition","src":"10306:65:13","nodes":[],"canonicalName":"IVault.PoolSpecialization","members":[{"id":1236,"name":"GENERAL","nodeType":"EnumValue","src":"10332:7:13"},{"id":1237,"name":"MINIMAL_SWAP_INFO","nodeType":"EnumValue","src":"10341:17:13"},{"id":1238,"name":"TWO_TOKEN","nodeType":"EnumValue","src":"10360:9:13"}],"name":"PoolSpecialization"},{"id":1247,"nodeType":"FunctionDefinition","src":"11084:84:13","nodes":[],"documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"10377:702:13","text":" @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n changed.\n The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n depending on the chosen specialization setting. This contract is known as the Pool's contract.\n Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n multiple Pools may share the same contract.\n Emits a `PoolRegistered` event."},"functionSelector":"09b2760f","implemented":false,"kind":"function","modifiers":[],"name":"registerPool","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"specialization","nodeType":"VariableDeclaration","scope":1247,"src":"11106:33:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":1241,"name":"PoolSpecialization","nodeType":"UserDefinedTypeName","referencedDeclaration":1239,"src":"11106:18:13","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11105:35:13"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1247,"src":"11159:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11159:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11158:9:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1256,"nodeType":"EventDefinition","src":"11263:109:13","nodes":[],"anonymous":false,"documentation":{"id":1248,"nodeType":"StructuredDocumentation","src":"11174:84:13","text":" @dev Emitted when a Pool is registered by calling `registerPool`."},"name":"PoolRegistered","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1250,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1256,"src":"11284:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1249,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11284:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1252,"indexed":true,"mutability":"mutable","name":"poolAddress","nodeType":"VariableDeclaration","scope":1256,"src":"11308:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1251,"name":"address","nodeType":"ElementaryTypeName","src":"11308:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1254,"indexed":false,"mutability":"mutable","name":"specialization","nodeType":"VariableDeclaration","scope":1256,"src":"11337:33:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":1253,"name":"PoolSpecialization","nodeType":"UserDefinedTypeName","referencedDeclaration":1239,"src":"11337:18:13","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11283:88:13"}},{"id":1266,"nodeType":"FunctionDefinition","src":"11468:85:13","nodes":[],"documentation":{"id":1257,"nodeType":"StructuredDocumentation","src":"11378:85:13","text":" @dev Returns a Pool's contract address and specialization setting."},"functionSelector":"f6c00927","implemented":false,"kind":"function","modifiers":[],"name":"getPool","parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1266,"src":"11485:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11485:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"11484:16:13"},"returnParameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1262,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1266,"src":"11524:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1261,"name":"address","nodeType":"ElementaryTypeName","src":"11524:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1264,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1266,"src":"11533:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"},"typeName":{"id":1263,"name":"PoolSpecialization","nodeType":"UserDefinedTypeName","referencedDeclaration":1239,"src":"11533:18:13","typeDescriptions":{"typeIdentifier":"t_enum$_PoolSpecialization_$1239","typeString":"enum IVault.PoolSpecialization"}},"visibility":"internal"}],"src":"11523:29:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1278,"nodeType":"FunctionDefinition","src":"12986:135:13","nodes":[],"documentation":{"id":1267,"nodeType":"StructuredDocumentation","src":"11559:1422:13","text":" @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n exit by receiving registered tokens, and can only swap registered tokens.\n Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n ascending order.\n The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n expected to be highly secured smart contracts with sound design principles, and the decision to register an\n Asset Manager should not be made lightly.\n Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n different Asset Manager.\n Emits a `TokensRegistered` event."},"functionSelector":"66a9c7d2","implemented":false,"kind":"function","modifiers":[],"name":"registerTokens","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1269,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1278,"src":"13019:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13019:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1272,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1278,"src":"13043:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1270,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"13043:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1271,"nodeType":"ArrayTypeName","src":"13043:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1275,"mutability":"mutable","name":"assetManagers","nodeType":"VariableDeclaration","scope":1278,"src":"13075:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"13075:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1274,"nodeType":"ArrayTypeName","src":"13075:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13009:102:13"},"returnParameters":{"id":1277,"nodeType":"ParameterList","parameters":[],"src":"13120:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1289,"nodeType":"EventDefinition","src":"13221:89:13","nodes":[],"anonymous":false,"documentation":{"id":1279,"nodeType":"StructuredDocumentation","src":"13127:89:13","text":" @dev Emitted when a Pool registers tokens by calling `registerTokens`."},"name":"TokensRegistered","parameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1289,"src":"13244:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13244:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1284,"indexed":false,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1289,"src":"13268:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1282,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"13268:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1283,"nodeType":"ArrayTypeName","src":"13268:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1287,"indexed":false,"mutability":"mutable","name":"assetManagers","nodeType":"VariableDeclaration","scope":1289,"src":"13285:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"13285:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1286,"nodeType":"ArrayTypeName","src":"13285:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"13243:66:13"}},{"id":1298,"nodeType":"FunctionDefinition","src":"13888:75:13","nodes":[],"documentation":{"id":1290,"nodeType":"StructuredDocumentation","src":"13316:567:13","text":" @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n must be deregistered in the same `deregisterTokens` call.\n A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n Emits a `TokensDeregistered` event."},"functionSelector":"7d3aeb96","implemented":false,"kind":"function","modifiers":[],"name":"deregisterTokens","parameters":{"id":1296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1298,"src":"13914:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1291,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13914:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1298,"src":"13930:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1293,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"13930:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1294,"nodeType":"ArrayTypeName","src":"13930:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"13913:40:13"},"returnParameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"13962:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1306,"nodeType":"EventDefinition","src":"14067:66:13","nodes":[],"anonymous":false,"documentation":{"id":1299,"nodeType":"StructuredDocumentation","src":"13969:93:13","text":" @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`."},"name":"TokensDeregistered","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1301,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1306,"src":"14092:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14092:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1304,"indexed":false,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1306,"src":"14116:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1302,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"14116:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1303,"nodeType":"ArrayTypeName","src":"14116:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"}],"src":"14091:41:13"}},{"id":1322,"nodeType":"FunctionDefinition","src":"15187:239:13","nodes":[],"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"14139:1043:13","text":" @dev Returns detailed information for a Pool's registered token.\n `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n equals the sum of `cash` and `managed`.\n Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n `managed` or `total` balance to be greater than 2^112 - 1.\n `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n change for this purpose, and will update `lastChangeBlock`.\n `assetManager` is the Pool's token Asset Manager."},"functionSelector":"b05f8e48","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokenInfo","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1322,"src":"15213:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15213:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1322,"src":"15229:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1310,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"15229:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"}],"src":"15212:30:13"},"returnParameters":{"id":1321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"cash","nodeType":"VariableDeclaration","scope":1322,"src":"15303:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1313,"name":"uint256","nodeType":"ElementaryTypeName","src":"15303:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"managed","nodeType":"VariableDeclaration","scope":1322,"src":"15329:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1315,"name":"uint256","nodeType":"ElementaryTypeName","src":"15329:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"lastChangeBlock","nodeType":"VariableDeclaration","scope":1322,"src":"15358:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"15358:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"assetManager","nodeType":"VariableDeclaration","scope":1322,"src":"15395:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"15395:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15289:136:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1336,"nodeType":"FunctionDefinition","src":"16265:208:13","nodes":[],"documentation":{"id":1323,"nodeType":"StructuredDocumentation","src":"15432:828:13","text":" @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n the tokens' `balances` changed.\n The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n order as passed to `registerTokens`.\n Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n instead."},"functionSelector":"f94d4668","implemented":false,"kind":"function","modifiers":[],"name":"getPoolTokens","parameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1336,"src":"16288:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16288:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16287:16:13"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1336,"src":"16364:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1327,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"16364:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1328,"nodeType":"ArrayTypeName","src":"16364:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1332,"mutability":"mutable","name":"balances","nodeType":"VariableDeclaration","scope":1336,"src":"16400:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1330,"name":"uint256","nodeType":"ElementaryTypeName","src":"16400:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1331,"nodeType":"ArrayTypeName","src":"16400:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1334,"mutability":"mutable","name":"lastChangeBlock","nodeType":"VariableDeclaration","scope":1336,"src":"16439:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1333,"name":"uint256","nodeType":"ElementaryTypeName","src":"16439:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16350:122:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1348,"nodeType":"FunctionDefinition","src":"18788:156:13","nodes":[],"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"16479:2304:13","text":" @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n Pool shares.\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n these maximums.\n If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n back to the caller (not the sender, which is important for relayers).\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n withdrawn from Internal Balance: attempting to do so will trigger a revert.\n This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n directly to the Pool's contract, as is `recipient`.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"b95cac28","implemented":false,"kind":"function","modifiers":[],"name":"joinPool","parameters":{"id":1346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1348,"src":"18815:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18815:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1348,"src":"18839:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"18839:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1348,"src":"18863:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"18863:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"request","nodeType":"VariableDeclaration","scope":1348,"src":"18890:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$1359_memory_ptr","typeString":"struct IVault.JoinPoolRequest"},"typeName":{"id":1344,"name":"JoinPoolRequest","nodeType":"UserDefinedTypeName","referencedDeclaration":1359,"src":"18890:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_JoinPoolRequest_$1359_storage_ptr","typeString":"struct IVault.JoinPoolRequest"}},"visibility":"internal"}],"src":"18805:121:13"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[],"src":"18943:0:13"},"scope":1580,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":1359,"nodeType":"StructDefinition","src":"18950:145:13","nodes":[],"canonicalName":"IVault.JoinPoolRequest","members":[{"constant":false,"id":1351,"mutability":"mutable","name":"assets","nodeType":"VariableDeclaration","scope":1359,"src":"18983:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":1349,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"18983:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"id":1350,"nodeType":"ArrayTypeName","src":"18983:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":1354,"mutability":"mutable","name":"maxAmountsIn","nodeType":"VariableDeclaration","scope":1359,"src":"19008:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"19008:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1353,"nodeType":"ArrayTypeName","src":"19008:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1356,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1359,"src":"19040:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"19040:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1358,"mutability":"mutable","name":"fromInternalBalance","nodeType":"VariableDeclaration","scope":1359,"src":"19064:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1357,"name":"bool","nodeType":"ElementaryTypeName","src":"19064:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"JoinPoolRequest","scope":1580,"visibility":"public"},{"id":1371,"nodeType":"FunctionDefinition","src":"21595:156:13","nodes":[],"documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"19101:2489:13","text":" @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n `getPoolTokenInfo`).\n If the caller is not `sender`, it must be an authorized relayer for them.\n The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n it just enforces these minimums.\n If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n do so will trigger a revert.\n `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n `tokens` array. This array must match the Pool's registered tokens.\n This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n their own custom logic. This typically requires additional information from the user (such as the expected number\n of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n passed directly to the Pool's contract.\n Emits a `PoolBalanceChanged` event."},"functionSelector":"8bdb3913","implemented":false,"kind":"function","modifiers":[],"name":"exitPool","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1371,"src":"21622:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"21622:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1371,"src":"21646:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1363,"name":"address","nodeType":"ElementaryTypeName","src":"21646:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1371,"src":"21670:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"21670:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"request","nodeType":"VariableDeclaration","scope":1371,"src":"21705:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$1382_memory_ptr","typeString":"struct IVault.ExitPoolRequest"},"typeName":{"id":1367,"name":"ExitPoolRequest","nodeType":"UserDefinedTypeName","referencedDeclaration":1382,"src":"21705:15:13","typeDescriptions":{"typeIdentifier":"t_struct$_ExitPoolRequest_$1382_storage_ptr","typeString":"struct IVault.ExitPoolRequest"}},"visibility":"internal"}],"src":"21612:129:13"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[],"src":"21750:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1382,"nodeType":"StructDefinition","src":"21757:144:13","nodes":[],"canonicalName":"IVault.ExitPoolRequest","members":[{"constant":false,"id":1374,"mutability":"mutable","name":"assets","nodeType":"VariableDeclaration","scope":1382,"src":"21790:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":1372,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"21790:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"id":1373,"nodeType":"ArrayTypeName","src":"21790:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":1377,"mutability":"mutable","name":"minAmountsOut","nodeType":"VariableDeclaration","scope":1382,"src":"21815:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1375,"name":"uint256","nodeType":"ElementaryTypeName","src":"21815:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1376,"nodeType":"ArrayTypeName","src":"21815:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1382,"src":"21848:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1378,"name":"bytes","nodeType":"ElementaryTypeName","src":"21848:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"toInternalBalance","nodeType":"VariableDeclaration","scope":1382,"src":"21872:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1380,"name":"bool","nodeType":"ElementaryTypeName","src":"21872:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"ExitPoolRequest","scope":1580,"visibility":"public"},{"id":1398,"nodeType":"EventDefinition","src":"22028:194:13","nodes":[],"anonymous":false,"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"21907:116:13","text":" @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."},"name":"PoolBalanceChanged","parameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1398,"src":"22062:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22062:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1387,"indexed":true,"mutability":"mutable","name":"liquidityProvider","nodeType":"VariableDeclaration","scope":1398,"src":"22094:33:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"22094:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1390,"indexed":false,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1398,"src":"22137:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1388,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"22137:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1389,"nodeType":"ArrayTypeName","src":"22137:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1393,"indexed":false,"mutability":"mutable","name":"deltas","nodeType":"VariableDeclaration","scope":1398,"src":"22162:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":1391,"name":"int256","nodeType":"ElementaryTypeName","src":"22162:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1392,"nodeType":"ArrayTypeName","src":"22162:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":1396,"indexed":false,"mutability":"mutable","name":"protocolFeeAmounts","nodeType":"VariableDeclaration","scope":1398,"src":"22187:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"22187:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1395,"nodeType":"ArrayTypeName","src":"22187:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22052:169:13"}},{"id":1401,"nodeType":"EnumDefinition","src":"22228:41:13","nodes":[],"canonicalName":"IVault.PoolBalanceChangeKind","members":[{"id":1399,"name":"JOIN","nodeType":"EnumValue","src":"22257:4:13"},{"id":1400,"name":"EXIT","nodeType":"EnumValue","src":"22263:4:13"}],"name":"PoolBalanceChangeKind"},{"id":1404,"nodeType":"EnumDefinition","src":"25854:37:13","nodes":[],"canonicalName":"IVault.SwapKind","members":[{"id":1402,"name":"GIVEN_IN","nodeType":"EnumValue","src":"25870:8:13"},{"id":1403,"name":"GIVEN_OUT","nodeType":"EnumValue","src":"25880:9:13"}],"name":"SwapKind"},{"id":1418,"nodeType":"FunctionDefinition","src":"26489:179:13","nodes":[],"documentation":{"id":1405,"nodeType":"StructuredDocumentation","src":"25897:587:13","text":" @dev Performs a swap with a single Pool.\n If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n taken from the Pool, which must be greater than or equal to `limit`.\n If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n sent to the Pool, which must be less than or equal to `limit`.\n Internal Balance usage and the recipient are determined by the `funds` struct.\n Emits a `Swap` event."},"functionSelector":"52bbbe29","implemented":false,"kind":"function","modifiers":[],"name":"swap","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"singleSwap","nodeType":"VariableDeclaration","scope":1418,"src":"26512:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$1431_memory_ptr","typeString":"struct IVault.SingleSwap"},"typeName":{"id":1406,"name":"SingleSwap","nodeType":"UserDefinedTypeName","referencedDeclaration":1431,"src":"26512:10:13","typeDescriptions":{"typeIdentifier":"t_struct$_SingleSwap_$1431_storage_ptr","typeString":"struct IVault.SingleSwap"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"funds","nodeType":"VariableDeclaration","scope":1418,"src":"26550:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":1408,"name":"FundManagement","nodeType":"UserDefinedTypeName","referencedDeclaration":1486,"src":"26550:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"limit","nodeType":"VariableDeclaration","scope":1418,"src":"26587:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"26587:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":1418,"src":"26610:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"26610:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26502:130:13"},"returnParameters":{"id":1417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1418,"src":"26659:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1415,"name":"uint256","nodeType":"ElementaryTypeName","src":"26659:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26658:9:13"},"scope":1580,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":1431,"nodeType":"StructDefinition","src":"27224:169:13","nodes":[],"canonicalName":"IVault.SingleSwap","members":[{"constant":false,"id":1420,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1431,"src":"27252:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27252:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1422,"mutability":"mutable","name":"kind","nodeType":"VariableDeclaration","scope":1431,"src":"27276:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"},"typeName":{"id":1421,"name":"SwapKind","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"27276:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":1424,"mutability":"mutable","name":"assetIn","nodeType":"VariableDeclaration","scope":1431,"src":"27299:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"},"typeName":{"id":1423,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"27299:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"assetOut","nodeType":"VariableDeclaration","scope":1431,"src":"27323:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"},"typeName":{"id":1425,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"27323:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1431,"src":"27348:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"27348:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1431,"src":"27372:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"27372:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SingleSwap","scope":1580,"visibility":"public"},{"id":1453,"nodeType":"FunctionDefinition","src":"29384:256:13","nodes":[],"documentation":{"id":1432,"nodeType":"StructuredDocumentation","src":"27399:1980:13","text":" @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n the same index in the `assets` array.\n Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n `amountOut` depending on the swap kind.\n Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n or unwrapped from WETH by the Vault.\n Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n the minimum or maximum amount of each token the vault is allowed to transfer.\n `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n equivalent `swap` call.\n Emits `Swap` events."},"functionSelector":"945bcec9","implemented":false,"kind":"function","modifiers":[],"name":"batchSwap","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"mutability":"mutable","name":"kind","nodeType":"VariableDeclaration","scope":1453,"src":"29412:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"},"typeName":{"id":1433,"name":"SwapKind","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"29412:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"swaps","nodeType":"VariableDeclaration","scope":1453,"src":"29435:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$1464_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":1435,"name":"BatchSwapStep","nodeType":"UserDefinedTypeName","referencedDeclaration":1464,"src":"29435:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$1464_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":1436,"nodeType":"ArrayTypeName","src":"29435:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$1464_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"assets","nodeType":"VariableDeclaration","scope":1453,"src":"29473:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":1438,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"29473:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"id":1439,"nodeType":"ArrayTypeName","src":"29473:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":1442,"mutability":"mutable","name":"funds","nodeType":"VariableDeclaration","scope":1453,"src":"29505:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":1441,"name":"FundManagement","nodeType":"UserDefinedTypeName","referencedDeclaration":1486,"src":"29505:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"},{"constant":false,"id":1445,"mutability":"mutable","name":"limits","nodeType":"VariableDeclaration","scope":1453,"src":"29542:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":1443,"name":"int256","nodeType":"ElementaryTypeName","src":"29542:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1444,"nodeType":"ArrayTypeName","src":"29542:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"},{"constant":false,"id":1447,"mutability":"mutable","name":"deadline","nodeType":"VariableDeclaration","scope":1453,"src":"29574:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"29574:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29402:194:13"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1451,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1453,"src":"29623:15:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":1449,"name":"int256","nodeType":"ElementaryTypeName","src":"29623:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1450,"nodeType":"ArrayTypeName","src":"29623:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"29622:17:13"},"scope":1580,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":1464,"nodeType":"StructDefinition","src":"30202:161:13","nodes":[],"canonicalName":"IVault.BatchSwapStep","members":[{"constant":false,"id":1455,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1464,"src":"30233:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30233:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1457,"mutability":"mutable","name":"assetInIndex","nodeType":"VariableDeclaration","scope":1464,"src":"30257:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1456,"name":"uint256","nodeType":"ElementaryTypeName","src":"30257:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1459,"mutability":"mutable","name":"assetOutIndex","nodeType":"VariableDeclaration","scope":1464,"src":"30287:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1458,"name":"uint256","nodeType":"ElementaryTypeName","src":"30287:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1461,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1464,"src":"30318:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"30318:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1464,"src":"30342:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1462,"name":"bytes","nodeType":"ElementaryTypeName","src":"30342:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BatchSwapStep","scope":1580,"visibility":"public"},{"id":1477,"nodeType":"EventDefinition","src":"30466:167:13","nodes":[],"anonymous":false,"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"30369:92:13","text":" @dev Emitted for each individual swap performed by `swap` or `batchSwap`."},"name":"Swap","parameters":{"id":1476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1467,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1477,"src":"30486:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"30486:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1469,"indexed":true,"mutability":"mutable","name":"tokenIn","nodeType":"VariableDeclaration","scope":1477,"src":"30518:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1468,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"30518:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1471,"indexed":true,"mutability":"mutable","name":"tokenOut","nodeType":"VariableDeclaration","scope":1477,"src":"30550:23:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1470,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"30550:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1473,"indexed":false,"mutability":"mutable","name":"amountIn","nodeType":"VariableDeclaration","scope":1477,"src":"30583:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"30583:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1475,"indexed":false,"mutability":"mutable","name":"amountOut","nodeType":"VariableDeclaration","scope":1477,"src":"30609:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1474,"name":"uint256","nodeType":"ElementaryTypeName","src":"30609:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30476:156:13"}},{"id":1486,"nodeType":"StructDefinition","src":"31564:154:13","nodes":[],"canonicalName":"IVault.FundManagement","members":[{"constant":false,"id":1479,"mutability":"mutable","name":"sender","nodeType":"VariableDeclaration","scope":1486,"src":"31596:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"31596:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"fromInternalBalance","nodeType":"VariableDeclaration","scope":1486,"src":"31620:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1480,"name":"bool","nodeType":"ElementaryTypeName","src":"31620:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1486,"src":"31654:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1482,"name":"address","nodeType":"ElementaryTypeName","src":"31654:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"toInternalBalance","nodeType":"VariableDeclaration","scope":1486,"src":"31689:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1484,"name":"bool","nodeType":"ElementaryTypeName","src":"31689:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"FundManagement","scope":1580,"visibility":"public"},{"id":1503,"nodeType":"FunctionDefinition","src":"32756:207:13","nodes":[],"documentation":{"id":1487,"nodeType":"StructuredDocumentation","src":"31724:1027:13","text":" @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n receives are the same that an equivalent `batchSwap` call would receive.\n Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n approve them for the Vault, or even know a user's address.\n Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n eth_call instead of eth_sendTransaction."},"functionSelector":"f84d066e","implemented":false,"kind":"function","modifiers":[],"name":"queryBatchSwap","parameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"kind","nodeType":"VariableDeclaration","scope":1503,"src":"32789:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"},"typeName":{"id":1488,"name":"SwapKind","nodeType":"UserDefinedTypeName","referencedDeclaration":1404,"src":"32789:8:13","typeDescriptions":{"typeIdentifier":"t_enum$_SwapKind_$1404","typeString":"enum IVault.SwapKind"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"swaps","nodeType":"VariableDeclaration","scope":1503,"src":"32812:28:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$1464_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.BatchSwapStep[]"},"typeName":{"baseType":{"id":1490,"name":"BatchSwapStep","nodeType":"UserDefinedTypeName","referencedDeclaration":1464,"src":"32812:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_BatchSwapStep_$1464_storage_ptr","typeString":"struct IVault.BatchSwapStep"}},"id":1491,"nodeType":"ArrayTypeName","src":"32812:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BatchSwapStep_$1464_storage_$dyn_storage_ptr","typeString":"struct IVault.BatchSwapStep[]"}},"visibility":"internal"},{"constant":false,"id":1495,"mutability":"mutable","name":"assets","nodeType":"VariableDeclaration","scope":1503,"src":"32850:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_memory_ptr","typeString":"contract IAsset[]"},"typeName":{"baseType":{"id":1493,"name":"IAsset","nodeType":"UserDefinedTypeName","referencedDeclaration":1084,"src":"32850:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IAsset_$1084","typeString":"contract IAsset"}},"id":1494,"nodeType":"ArrayTypeName","src":"32850:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IAsset_$1084_$dyn_storage_ptr","typeString":"contract IAsset[]"}},"visibility":"internal"},{"constant":false,"id":1497,"mutability":"mutable","name":"funds","nodeType":"VariableDeclaration","scope":1503,"src":"32882:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_memory_ptr","typeString":"struct IVault.FundManagement"},"typeName":{"id":1496,"name":"FundManagement","nodeType":"UserDefinedTypeName","referencedDeclaration":1486,"src":"32882:14:13","typeDescriptions":{"typeIdentifier":"t_struct$_FundManagement_$1486_storage_ptr","typeString":"struct IVault.FundManagement"}},"visibility":"internal"}],"src":"32779:136:13"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"assetDeltas","nodeType":"VariableDeclaration","scope":1503,"src":"32934:27:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_memory_ptr","typeString":"int256[]"},"typeName":{"baseType":{"id":1499,"name":"int256","nodeType":"ElementaryTypeName","src":"32934:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1500,"nodeType":"ArrayTypeName","src":"32934:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_int256_$dyn_storage_ptr","typeString":"int256[]"}},"visibility":"internal"}],"src":"32933:29:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1517,"nodeType":"FunctionDefinition","src":"33598:170:13","nodes":[],"documentation":{"id":1504,"nodeType":"StructuredDocumentation","src":"32989:604:13","text":" @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n and then reverting unless the tokens plus a proportional protocol fee have been returned.\n The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n for each token contract. `tokens` must be sorted in ascending order.\n The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n `receiveFlashLoan` call.\n Emits `FlashLoan` events."},"functionSelector":"5c38449e","implemented":false,"kind":"function","modifiers":[],"name":"flashLoan","parameters":{"id":1515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1506,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1517,"src":"33626:29:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$1118","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":1505,"name":"IFlashLoanRecipient","nodeType":"UserDefinedTypeName","referencedDeclaration":1118,"src":"33626:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$1118","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":1509,"mutability":"mutable","name":"tokens","nodeType":"VariableDeclaration","scope":1517,"src":"33665:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_memory_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1507,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"33665:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1508,"nodeType":"ArrayTypeName","src":"33665:8:13","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$660_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1512,"mutability":"mutable","name":"amounts","nodeType":"VariableDeclaration","scope":1517,"src":"33697:24:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1510,"name":"uint256","nodeType":"ElementaryTypeName","src":"33697:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1511,"nodeType":"ArrayTypeName","src":"33697:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1514,"mutability":"mutable","name":"userData","nodeType":"VariableDeclaration","scope":1517,"src":"33731:21:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1513,"name":"bytes","nodeType":"ElementaryTypeName","src":"33731:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"33616:142:13"},"returnParameters":{"id":1516,"nodeType":"ParameterList","parameters":[],"src":"33767:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1528,"nodeType":"EventDefinition","src":"33867:112:13","nodes":[],"anonymous":false,"documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"33774:88:13","text":" @dev Emitted for each individual flash loan performed by `flashLoan`."},"name":"FlashLoan","parameters":{"id":1527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1520,"indexed":true,"mutability":"mutable","name":"recipient","nodeType":"VariableDeclaration","scope":1528,"src":"33883:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$1118","typeString":"contract IFlashLoanRecipient"},"typeName":{"id":1519,"name":"IFlashLoanRecipient","nodeType":"UserDefinedTypeName","referencedDeclaration":1118,"src":"33883:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IFlashLoanRecipient_$1118","typeString":"contract IFlashLoanRecipient"}},"visibility":"internal"},{"constant":false,"id":1522,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1528,"src":"33922:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1521,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"33922:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1524,"indexed":false,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1528,"src":"33944:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"33944:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1526,"indexed":false,"mutability":"mutable","name":"feeAmount","nodeType":"VariableDeclaration","scope":1528,"src":"33960:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1525,"name":"uint256","nodeType":"ElementaryTypeName","src":"33960:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"33882:96:13"}},{"id":1535,"nodeType":"FunctionDefinition","src":"35414:64:13","nodes":[],"documentation":{"id":1529,"nodeType":"StructuredDocumentation","src":"34975:434:13","text":" @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n Pool Balance management features batching, which means a single contract call can be used to perform multiple\n operations of different kinds, with different Pools and tokens, at once.\n For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."},"functionSelector":"e6c46092","implemented":false,"kind":"function","modifiers":[],"name":"managePoolBalance","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"ops","nodeType":"VariableDeclaration","scope":1535,"src":"35441:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$1544_memory_ptr_$dyn_memory_ptr","typeString":"struct IVault.PoolBalanceOp[]"},"typeName":{"baseType":{"id":1530,"name":"PoolBalanceOp","nodeType":"UserDefinedTypeName","referencedDeclaration":1544,"src":"35441:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_PoolBalanceOp_$1544_storage_ptr","typeString":"struct IVault.PoolBalanceOp"}},"id":1531,"nodeType":"ArrayTypeName","src":"35441:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_PoolBalanceOp_$1544_storage_$dyn_storage_ptr","typeString":"struct IVault.PoolBalanceOp[]"}},"visibility":"internal"}],"src":"35440:28:13"},"returnParameters":{"id":1534,"nodeType":"ParameterList","parameters":[],"src":"35477:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1544,"nodeType":"StructDefinition","src":"35484:130:13","nodes":[],"canonicalName":"IVault.PoolBalanceOp","members":[{"constant":false,"id":1537,"mutability":"mutable","name":"kind","nodeType":"VariableDeclaration","scope":1544,"src":"35515:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$1548","typeString":"enum IVault.PoolBalanceOpKind"},"typeName":{"id":1536,"name":"PoolBalanceOpKind","nodeType":"UserDefinedTypeName","referencedDeclaration":1548,"src":"35515:17:13","typeDescriptions":{"typeIdentifier":"t_enum$_PoolBalanceOpKind_$1548","typeString":"enum IVault.PoolBalanceOpKind"}},"visibility":"internal"},{"constant":false,"id":1539,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1544,"src":"35547:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"35547:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1541,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1544,"src":"35571:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1540,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"35571:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1543,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1544,"src":"35593:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1542,"name":"uint256","nodeType":"ElementaryTypeName","src":"35593:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PoolBalanceOp","scope":1580,"visibility":"public"},{"id":1548,"nodeType":"EnumDefinition","src":"36111:52:13","nodes":[],"canonicalName":"IVault.PoolBalanceOpKind","members":[{"id":1545,"name":"WITHDRAW","nodeType":"EnumValue","src":"36136:8:13"},{"id":1546,"name":"DEPOSIT","nodeType":"EnumValue","src":"36146:7:13"},{"id":1547,"name":"UPDATE","nodeType":"EnumValue","src":"36155:6:13"}],"name":"PoolBalanceOpKind"},{"id":1561,"nodeType":"EventDefinition","src":"36283:186:13","nodes":[],"anonymous":false,"documentation":{"id":1549,"nodeType":"StructuredDocumentation","src":"36169:109:13","text":" @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."},"name":"PoolBalanceManaged","parameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1551,"indexed":true,"mutability":"mutable","name":"poolId","nodeType":"VariableDeclaration","scope":1561,"src":"36317:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"36317:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1553,"indexed":true,"mutability":"mutable","name":"assetManager","nodeType":"VariableDeclaration","scope":1561,"src":"36349:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1552,"name":"address","nodeType":"ElementaryTypeName","src":"36349:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1555,"indexed":true,"mutability":"mutable","name":"token","nodeType":"VariableDeclaration","scope":1561,"src":"36387:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"},"typeName":{"id":1554,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"36387:6:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1557,"indexed":false,"mutability":"mutable","name":"cashDelta","nodeType":"VariableDeclaration","scope":1561,"src":"36417:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1556,"name":"int256","nodeType":"ElementaryTypeName","src":"36417:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1559,"indexed":false,"mutability":"mutable","name":"managedDelta","nodeType":"VariableDeclaration","scope":1561,"src":"36443:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1558,"name":"int256","nodeType":"ElementaryTypeName","src":"36443:6:13","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"36307:161:13"}},{"id":1567,"nodeType":"FunctionDefinition","src":"37415:82:13","nodes":[],"documentation":{"id":1562,"nodeType":"StructuredDocumentation","src":"37346:64:13","text":" @dev Returns the current protocol fee module."},"functionSelector":"d2946c2b","implemented":false,"kind":"function","modifiers":[],"name":"getProtocolFeesCollector","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[],"src":"37448:2:13"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1565,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1567,"src":"37474:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"},"typeName":{"id":1564,"name":"ProtocolFeesCollector","nodeType":"UserDefinedTypeName","referencedDeclaration":1080,"src":"37474:21:13","typeDescriptions":{"typeIdentifier":"t_contract$_ProtocolFeesCollector_$1080","typeString":"contract ProtocolFeesCollector"}},"visibility":"internal"}],"src":"37473:23:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":1573,"nodeType":"FunctionDefinition","src":"38143:41:13","nodes":[],"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"37503:635:13","text":" @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n error in some part of the system.\n The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n While the contract is paused, the following features are disabled:\n - depositing and transferring internal balance\n - transferring external balance (using the Vault's allowance)\n - swaps\n - joining Pools\n - Asset Manager interactions\n Internal Balance can still be withdrawn, and Pools exited."},"functionSelector":"16c38b3c","implemented":false,"kind":"function","modifiers":[],"name":"setPaused","parameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"paused","nodeType":"VariableDeclaration","scope":1573,"src":"38162:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1569,"name":"bool","nodeType":"ElementaryTypeName","src":"38162:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"38161:13:13"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[],"src":"38183:0:13"},"scope":1580,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":1579,"nodeType":"FunctionDefinition","src":"38253:46:13","nodes":[],"documentation":{"id":1574,"nodeType":"StructuredDocumentation","src":"38190:58:13","text":" @dev Returns the Vault's WETH instance."},"functionSelector":"ad5c4648","implemented":false,"kind":"function","modifiers":[],"name":"WETH","parameters":{"id":1575,"nodeType":"ParameterList","parameters":[],"src":"38266:2:13"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1577,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":1579,"src":"38292:5:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$1595","typeString":"contract IWETH"},"typeName":{"id":1576,"name":"IWETH","nodeType":"UserDefinedTypeName","referencedDeclaration":1595,"src":"38292:5:13","typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$1595","typeString":"contract IWETH"}},"visibility":"internal"}],"src":"38291:7:13"},"scope":1580,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":1131,"name":"ISignaturesValidator","nodeType":"UserDefinedTypeName","referencedDeclaration":432,"src":"1241:20:13","typeDescriptions":{"typeIdentifier":"t_contract$_ISignaturesValidator_$432","typeString":"contract ISignaturesValidator"}},"id":1132,"nodeType":"InheritanceSpecifier","src":"1241:20:13"},{"baseName":{"id":1133,"name":"ITemporarilyPausable","nodeType":"UserDefinedTypeName","referencedDeclaration":451,"src":"1263:20:13","typeDescriptions":{"typeIdentifier":"t_contract$_ITemporarilyPausable_$451","typeString":"contract ITemporarilyPausable"}},"id":1134,"nodeType":"InheritanceSpecifier","src":"1263:20:13"}],"contractDependencies":[432,451],"contractKind":"interface","documentation":{"id":1130,"nodeType":"StructuredDocumentation","src":"1049:171:13","text":" @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n don't override one of these declarations."},"fullyImplemented":false,"linearizedBaseContracts":[1580,451,432],"name":"IVault","scope":1581}],"license":"GPL-3.0-or-later"}},"contracts/vault/interfaces/IWETH.sol":{"id":14,"ast":{"absolutePath":"contracts/vault/interfaces/IWETH.sol","id":1596,"exportedSymbols":{"IWETH":[1595]},"nodeType":"SourceUnit","src":"688:393:14","nodes":[{"id":1582,"nodeType":"PragmaDirective","src":"688:23:14","nodes":[],"literals":["solidity","^","0.7",".0"]},{"id":1583,"nodeType":"ImportDirective","src":"713:43:14","nodes":[],"absolutePath":"contracts/lib/openzeppelin/IERC20.sol","file":"../../lib/openzeppelin/IERC20.sol","scope":1596,"sourceUnit":661,"symbolAliases":[],"unitAlias":""},{"id":1595,"nodeType":"ContractDefinition","src":"961:119:14","nodes":[{"id":1589,"nodeType":"FunctionDefinition","src":"993:36:14","nodes":[],"functionSelector":"d0e30db0","implemented":false,"kind":"function","modifiers":[],"name":"deposit","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[],"src":"1009:2:14"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[],"src":"1028:0:14"},"scope":1595,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":1594,"nodeType":"FunctionDefinition","src":"1035:43:14","nodes":[],"functionSelector":"2e1a7d4d","implemented":false,"kind":"function","modifiers":[],"name":"withdraw","parameters":{"id":1592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1591,"mutability":"mutable","name":"amount","nodeType":"VariableDeclaration","scope":1594,"src":"1053:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"1053:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1052:16:14"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"1077:0:14"},"scope":1595,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":1585,"name":"IERC20","nodeType":"UserDefinedTypeName","referencedDeclaration":660,"src":"980:6:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$660","typeString":"contract IERC20"}},"id":1586,"nodeType":"InheritanceSpecifier","src":"980:6:14"}],"contractDependencies":[660],"contractKind":"interface","documentation":{"id":1584,"nodeType":"StructuredDocumentation","src":"758:202:14","text":" @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\n sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals."},"fullyImplemented":false,"linearizedBaseContracts":[1595,660],"name":"IWETH","scope":1596}],"license":"GPL-3.0-or-later"}}},"contracts":{"contracts/lib/helpers/Authentication.sol":{"Authentication":{"abi":[{"type":"function","name":"getActionId","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Building block for performing access control on external functions. This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to only make them callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead.\"},\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/Authentication.sol\":\"Authentication\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalancerErrors.sol\\\";\\nimport \\\"./IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xea892213ec2967f53e26a0dd833bde01e4d9b6e49dd91e6c59ff00044f83c28d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Building block for performing access control on external functions. This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied to external functions to only make them callable by authorized accounts. Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.","methods":{"constructor":{"details":"The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in multi contract systems. There are two main uses for it:  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers    unique. The contract's own address is a good option.  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier    shared by the entire family (and no other contract) should be used instead."},"getActionId(bytes4)":{"details":"Returns the action identifier associated with the external function described by `selector`."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"ewasm":{"wasm":""}}},"contracts/lib/helpers/BalancerErrors.sol":{"Errors":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/BalancerErrors.sol\":\"Errors\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev"},"evm":{"assembly":"    /* \"contracts/lib/helpers/BalancerErrors.sol\":4248:10137  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":4248:10137  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203129a4ef6c3e81edff51f0308919e0ffb01f3d4035a075216f59cc1ebe419dc664736f6c63430007010033\n}\n","legacyAssembly":{".code":[{"begin":4248,"end":10137,"name":"PUSH #[$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":4248,"end":10137,"name":"PUSH [$]","source":1,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"B"},{"begin":4248,"end":10137,"name":"DUP3","source":1},{"begin":4248,"end":10137,"name":"DUP3","source":1},{"begin":4248,"end":10137,"name":"DUP3","source":1},{"begin":4248,"end":10137,"name":"CODECOPY","source":1},{"begin":4248,"end":10137,"name":"DUP1","source":1},{"begin":4248,"end":10137,"name":"MLOAD","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"0"},{"begin":4248,"end":10137,"name":"BYTE","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"73"},{"begin":4248,"end":10137,"name":"EQ","source":1},{"begin":4248,"end":10137,"name":"PUSH [tag]","source":1,"value":"1"},{"begin":4248,"end":10137,"name":"JUMPI","source":1},{"begin":4248,"end":10137,"name":"INVALID","source":1},{"begin":4248,"end":10137,"name":"tag","source":1,"value":"1"},{"begin":4248,"end":10137,"name":"JUMPDEST","source":1},{"begin":4248,"end":10137,"name":"ADDRESS","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"0"},{"begin":4248,"end":10137,"name":"MSTORE","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"73"},{"begin":4248,"end":10137,"name":"DUP2","source":1},{"begin":4248,"end":10137,"name":"MSTORE8","source":1},{"begin":4248,"end":10137,"name":"DUP3","source":1},{"begin":4248,"end":10137,"name":"DUP2","source":1},{"begin":4248,"end":10137,"name":"RETURN","source":1}],".data":{"0":{".auxdata":"a26469706673582212203129a4ef6c3e81edff51f0308919e0ffb01f3d4035a075216f59cc1ebe419dc664736f6c63430007010033",".code":[{"begin":4248,"end":10137,"name":"PUSHDEPLOYADDRESS","source":1},{"begin":4248,"end":10137,"name":"ADDRESS","source":1},{"begin":4248,"end":10137,"name":"EQ","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"80"},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"40"},{"begin":4248,"end":10137,"name":"MSTORE","source":1},{"begin":4248,"end":10137,"name":"PUSH","source":1,"value":"0"},{"begin":4248,"end":10137,"name":"DUP1","source":1},{"begin":4248,"end":10137,"name":"REVERT","source":1}]}}},"bytecode":{"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203129a4ef6c3e81edff51f0308919e0ffb01f3d4035a075216f59cc1ebe419dc664736f6c63430007010033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0x29 LOG4 0xEF PUSH13 0x3E81EDFF51F0308919E0FFB01F RETURNDATASIZE BLOCKHASH CALLDATALOAD LOG0 PUSH22 0x216F59CC1EBE419DC664736F6C634300070100330000 ","sourceMap":"4248:5889:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203129a4ef6c3e81edff51f0308919e0ffb01f3d4035a075216f59cc1ebe419dc664736f6c63430007010033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BALANCE 0x29 LOG4 0xEF PUSH13 0x3E81EDFF51F0308919E0FFB01F RETURNDATASIZE BLOCKHASH CALLDATALOAD LOG0 PUSH22 0x216F59CC1EBE419DC664736F6C634300070100330000 ","sourceMap":"4248:5889:1:-:0;;;;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"external":{},"internal":{}}},"ewasm":{"wasm":""}}},"contracts/lib/helpers/IAuthentication.sol":{"IAuthentication":{"abi":[{"type":"function","name":"getActionId","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/IAuthentication.sol\":\"IAuthentication\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","methods":{"getActionId(bytes4)":{"details":"Returns the action identifier associated with the external function described by `selector`."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3"}},"ewasm":{"wasm":""}}},"contracts/lib/helpers/ISignaturesValidator.sol":{"ISignaturesValidator":{"abi":[{"type":"function","name":"getDomainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getNextNonce","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SignatureValidator helper, used to support meta-transactions.\",\"kind\":\"dev\",\"methods\":{\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/ISignaturesValidator.sol\":\"ISignaturesValidator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Interface for the SignatureValidator helper, used to support meta-transactions.","methods":{"getDomainSeparator()":{"details":"Returns the EIP712 domain separator."},"getNextNonce(address)":{"details":"Returns the next nonce used by an address to sign messages."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getDomainSeparator()":"ed24911d","getNextNonce(address)":"90193b7c"}},"ewasm":{"wasm":""}}},"contracts/lib/helpers/ITemporarilyPausable.sol":{"ITemporarilyPausable":{"abi":[{"type":"function","name":"getPausedState","inputs":[],"outputs":[{"name":"paused","type":"bool","internalType":"bool"},{"name":"pauseWindowEndTime","type":"uint256","internalType":"uint256"},{"name":"bufferPeriodEndTime","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"PausedStateChanged","inputs":[{"name":"paused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the TemporarilyPausable helper.\",\"events\":{\"PausedStateChanged(bool)\":{\"details\":\"Emitted every time the pause state changes by `_setPaused`.\"}},\"kind\":\"dev\",\"methods\":{\"getPausedState()\":{\"details\":\"Returns the current paused state.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/ITemporarilyPausable.sol\":\"ITemporarilyPausable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Interface for the TemporarilyPausable helper.","methods":{"getPausedState()":{"details":"Returns the current paused state."}},"events":{"PausedStateChanged(bool)":{"details":"Emitted every time the pause state changes by `_setPaused`."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getPausedState()":"1c0de051"}},"ewasm":{"wasm":""}}},"contracts/lib/helpers/InputHelpers.sol":{"InputHelpers":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/helpers/InputHelpers.sol\":\"InputHelpers\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./BalancerErrors.sol\\\";\\n\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd58eb6851269729d3ea0d739f812c67c3e750b046ef1653ae12134e668925d28\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev"},"evm":{"assembly":"    /* \"contracts/lib/helpers/InputHelpers.sol\":828:2116  library InputHelpers {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/lib/helpers/InputHelpers.sol\":828:2116  library InputHelpers {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c28460d8f1e4e70f3df6310c37975f40a3b57a6f17a4a40fca6ecacb68645dff64736f6c63430007010033\n}\n","legacyAssembly":{".code":[{"begin":828,"end":2116,"name":"PUSH #[$]","source":5,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":828,"end":2116,"name":"PUSH [$]","source":5,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"B"},{"begin":828,"end":2116,"name":"DUP3","source":5},{"begin":828,"end":2116,"name":"DUP3","source":5},{"begin":828,"end":2116,"name":"DUP3","source":5},{"begin":828,"end":2116,"name":"CODECOPY","source":5},{"begin":828,"end":2116,"name":"DUP1","source":5},{"begin":828,"end":2116,"name":"MLOAD","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"0"},{"begin":828,"end":2116,"name":"BYTE","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"73"},{"begin":828,"end":2116,"name":"EQ","source":5},{"begin":828,"end":2116,"name":"PUSH [tag]","source":5,"value":"1"},{"begin":828,"end":2116,"name":"JUMPI","source":5},{"begin":828,"end":2116,"name":"INVALID","source":5},{"begin":828,"end":2116,"name":"tag","source":5,"value":"1"},{"begin":828,"end":2116,"name":"JUMPDEST","source":5},{"begin":828,"end":2116,"name":"ADDRESS","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"0"},{"begin":828,"end":2116,"name":"MSTORE","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"73"},{"begin":828,"end":2116,"name":"DUP2","source":5},{"begin":828,"end":2116,"name":"MSTORE8","source":5},{"begin":828,"end":2116,"name":"DUP3","source":5},{"begin":828,"end":2116,"name":"DUP2","source":5},{"begin":828,"end":2116,"name":"RETURN","source":5}],".data":{"0":{".auxdata":"a2646970667358221220c28460d8f1e4e70f3df6310c37975f40a3b57a6f17a4a40fca6ecacb68645dff64736f6c63430007010033",".code":[{"begin":828,"end":2116,"name":"PUSHDEPLOYADDRESS","source":5},{"begin":828,"end":2116,"name":"ADDRESS","source":5},{"begin":828,"end":2116,"name":"EQ","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"80"},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"40"},{"begin":828,"end":2116,"name":"MSTORE","source":5},{"begin":828,"end":2116,"name":"PUSH","source":5,"value":"0"},{"begin":828,"end":2116,"name":"DUP1","source":5},{"begin":828,"end":2116,"name":"REVERT","source":5}]}}},"bytecode":{"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c28460d8f1e4e70f3df6310c37975f40a3b57a6f17a4a40fca6ecacb68645dff64736f6c63430007010033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 DUP5 PUSH1 0xD8 CALL 0xE4 0xE7 0xF RETURNDATASIZE 0xF6 BALANCE 0xC CALLDATACOPY SWAP8 0x5F BLOCKHASH LOG3 0xB5 PUSH27 0x6F17A4A40FCA6ECACB68645DFF64736F6C63430007010033000000 ","sourceMap":"828:1288:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c28460d8f1e4e70f3df6310c37975f40a3b57a6f17a4a40fca6ecacb68645dff64736f6c63430007010033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC2 DUP5 PUSH1 0xD8 CALL 0xE4 0xE7 0xF RETURNDATASIZE 0xF6 BALANCE 0xC CALLDATACOPY SWAP8 0x5F BLOCKHASH LOG3 0xB5 PUSH27 0x6F17A4A40FCA6ECACB68645DFF64736F6C63430007010033000000 ","sourceMap":"828:1288:5:-:0;;;;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"external":{},"internal":{"ensureArrayIsSorted(address[] memory)":"infinite","ensureArrayIsSorted(contract IAsset[] memory)":"infinite","ensureArrayIsSorted(contract IERC20[] memory)":"infinite","ensureInputLengthMatch(uint256,uint256)":"infinite","ensureInputLengthMatch(uint256,uint256,uint256)":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/lib/openzeppelin/IERC20.sol":{"IERC20":{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/openzeppelin/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Interface of the ERC20 standard as defined in the EIP.","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"ewasm":{"wasm":""}}},"contracts/lib/openzeppelin/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/openzeppelin/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xfe6da463cd5a6df10b49020a69b0978a4ef65d029e747c515062ec4a3359c464\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"storageLayout":{"storage":[{"astId":672,"contract":"contracts/lib/openzeppelin/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}},"ewasm":{"wasm":""}}},"contracts/lib/openzeppelin/SafeERC20.sol":{"SafeERC20":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/openzeppelin/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x16d3e14c841b54a0f59fac0b899c4fa2f7b15d8d24f562a91edaf5aa140d57f5\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","title":"SafeERC20"},"evm":{"assembly":"    /* \"contracts/lib/openzeppelin/SafeERC20.sol\":861:2496  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":861:2496  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202dc3f87b0f798d180e766dd6785d92ed5d4ef2ce12ef0d35379cc73b79dbd42e64736f6c63430007010033\n}\n","legacyAssembly":{".code":[{"begin":861,"end":2496,"name":"PUSH #[$]","source":8,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":861,"end":2496,"name":"PUSH [$]","source":8,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"B"},{"begin":861,"end":2496,"name":"DUP3","source":8},{"begin":861,"end":2496,"name":"DUP3","source":8},{"begin":861,"end":2496,"name":"DUP3","source":8},{"begin":861,"end":2496,"name":"CODECOPY","source":8},{"begin":861,"end":2496,"name":"DUP1","source":8},{"begin":861,"end":2496,"name":"MLOAD","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"0"},{"begin":861,"end":2496,"name":"BYTE","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"73"},{"begin":861,"end":2496,"name":"EQ","source":8},{"begin":861,"end":2496,"name":"PUSH [tag]","source":8,"value":"1"},{"begin":861,"end":2496,"name":"JUMPI","source":8},{"begin":861,"end":2496,"name":"INVALID","source":8},{"begin":861,"end":2496,"name":"tag","source":8,"value":"1"},{"begin":861,"end":2496,"name":"JUMPDEST","source":8},{"begin":861,"end":2496,"name":"ADDRESS","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"0"},{"begin":861,"end":2496,"name":"MSTORE","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"73"},{"begin":861,"end":2496,"name":"DUP2","source":8},{"begin":861,"end":2496,"name":"MSTORE8","source":8},{"begin":861,"end":2496,"name":"DUP3","source":8},{"begin":861,"end":2496,"name":"DUP2","source":8},{"begin":861,"end":2496,"name":"RETURN","source":8}],".data":{"0":{".auxdata":"a26469706673582212202dc3f87b0f798d180e766dd6785d92ed5d4ef2ce12ef0d35379cc73b79dbd42e64736f6c63430007010033",".code":[{"begin":861,"end":2496,"name":"PUSHDEPLOYADDRESS","source":8},{"begin":861,"end":2496,"name":"ADDRESS","source":8},{"begin":861,"end":2496,"name":"EQ","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"80"},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"40"},{"begin":861,"end":2496,"name":"MSTORE","source":8},{"begin":861,"end":2496,"name":"PUSH","source":8,"value":"0"},{"begin":861,"end":2496,"name":"DUP1","source":8},{"begin":861,"end":2496,"name":"REVERT","source":8}]}}},"bytecode":{"object":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dc3f87b0f798d180e766dd6785d92ed5d4ef2ce12ef0d35379cc73b79dbd42e64736f6c63430007010033","opcodes":"PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xC3 0xF8 PUSH28 0xF798D180E766DD6785D92ED5D4EF2CE12EF0D35379CC73B79DBD42E PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ","sourceMap":"861:1635:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202dc3f87b0f798d180e766dd6785d92ed5d4ef2ce12ef0d35379cc73b79dbd42e64736f6c63430007010033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D 0xC3 0xF8 PUSH28 0xF798D180E766DD6785D92ED5D4EF2CE12EF0D35379CC73B79DBD42E PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ","sourceMap":"861:1635:8:-:0;;;;;;;;","linkReferences":{}},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"external":{},"internal":{"_callOptionalReturn(address,bytes memory)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/vault/ProtocolFeesCollector.sol":{"ProtocolFeesCollector":{"abi":[{"type":"constructor","inputs":[{"name":"_vault","type":"address","internalType":"contract IVault"}],"stateMutability":"nonpayable"},{"type":"function","name":"getActionId","inputs":[{"name":"selector","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getAuthorizer","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAuthorizer"}],"stateMutability":"view"},{"type":"function","name":"getCollectedFeeAmounts","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[{"name":"feeAmounts","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getFlashLoanFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getSwapFeePercentage","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setFlashLoanFeePercentage","inputs":[{"name":"newFlashLoanFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setSwapFeePercentage","inputs":[{"name":"newSwapFeePercentage","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"vault","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IVault"}],"stateMutability":"view"},{"type":"function","name":"withdrawCollectedFees","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"recipient","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"FlashLoanFeePercentageChanged","inputs":[{"name":"newFlashLoanFeePercentage","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SwapFeePercentageChanged","inputs":[{"name":"newSwapFeePercentage","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FlashLoanFeePercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"SwapFeePercentageChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"getActionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getCollectedFeeAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashLoanFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFlashLoanFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFlashLoanFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setSwapFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawCollectedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the Vault performs to reduce its overall bytecode size. The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated to the Vault's own authorizer.\",\"kind\":\"dev\",\"methods\":{\"getActionId(bytes4)\":{\"details\":\"Returns the action identifier associated with the external function described by `selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/ProtocolFeesCollector.sol\":\"ProtocolFeesCollector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalancerErrors.sol\\\";\\nimport \\\"./IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xea892213ec2967f53e26a0dd833bde01e4d9b6e49dd91e6c59ff00044f83c28d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./BalancerErrors.sol\\\";\\n\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd58eb6851269729d3ea0d739f812c67c3e750b046ef1653ae12134e668925d28\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xfe6da463cd5a6df10b49020a69b0978a4ef65d029e747c515062ec4a3359c464\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x16d3e14c841b54a0f59fac0b899c4fa2f7b15d8d24f562a91edaf5aa140d57f5\",\"license\":\"MIT\"},\"contracts/vault/ProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/openzeppelin/IERC20.sol\\\";\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\nimport \\\"../lib/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/openzeppelin/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IAuthorizer.sol\\\";\\n\\n/**\\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\\n * Vault performs to reduce its overall bytecode size.\\n *\\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\\n * to the Vault's own authorizer.\\n */\\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\\n\\n    IVault public immutable vault;\\n\\n    // All fee percentages are 18-decimal fixed point numbers.\\n\\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\\n    // when users join and exit them.\\n    uint256 private _swapFeePercentage;\\n\\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\\n    uint256 private _flashLoanFeePercentage;\\n\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    constructor(IVault _vault)\\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\\n        // identifiers.\\n        Authentication(bytes32(uint256(address(this))))\\n    {\\n        vault = _vault;\\n    }\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external nonReentrant authenticate {\\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n            token.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\\n        _swapFeePercentage = newSwapFeePercentage;\\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\\n    }\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\\n        _require(\\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\\n        );\\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\\n    }\\n\\n    function getSwapFeePercentage() external view returns (uint256) {\\n        return _swapFeePercentage;\\n    }\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256) {\\n        return _flashLoanFeePercentage;\\n    }\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\\n        feeAmounts = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\\n        }\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        return _getAuthorizer().canPerform(actionId, account, address(this));\\n    }\\n\\n    function _getAuthorizer() internal view returns (IAuthorizer) {\\n        return vault.getAuthorizer();\\n    }\\n}\\n\",\"keccak256\":\"0x67a0898b29a356085f4d7a83c52d1c794ebf07b6522133c9b9c7f5faf10d2184\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6886740dcaebfb24a25f914ce5b4299aeab3fe0cc135a1707c0fe4e3d6d02cb6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"../ProtocolFeesCollector.sol\\\";\\n\\nimport \\\"../../lib/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../../lib/helpers/ITemporarilyPausable.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0xc1b1344fcb93f499269d9687514f0a72cc8164cfd3dd3da08a6af1f9e7c60168\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x621a25d9e3f3a4cd9e4493ab330a50a4456b6ea8fc568911fdd5486f78a4d3ab\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the Vault performs to reduce its overall bytecode size. The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated to the Vault's own authorizer.","methods":{"getActionId(bytes4)":{"details":"Returns the action identifier associated with the external function described by `selector`."}}},"storageLayout":{"storage":[{"astId":672,"contract":"contracts/vault/ProtocolFeesCollector.sol:ProtocolFeesCollector","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":839,"contract":"contracts/vault/ProtocolFeesCollector.sol:ProtocolFeesCollector","label":"_swapFeePercentage","offset":0,"slot":"1","type":"t_uint256"},{"astId":841,"contract":"contracts/vault/ProtocolFeesCollector.sol:ProtocolFeesCollector","label":"_flashLoanFeePercentage","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"evm":{"assembly":"    /* \"contracts/vault/ProtocolFeesCollector.sol\":1494:4902  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {... */\n  mstore(0x40, 0xc0)\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":2533:2785  constructor(IVault _vault)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":2741:2745  this */\n  address\n    /* \"contracts/lib/helpers/Authentication.sol\":1929:1975  _actionIdDisambiguator = actionIdDisambiguator */\n  0x80\n  mstore\n    /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2019:2020  1 */\n  0x01\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":2717:2748  bytes32(uint256(address(this))) */\n  0x00\n    /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2124:2146  _status = _NOT_ENTERED */\n  sstore\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":2764:2778  vault = _vault */\n  0x60\n  shl\n  not(sub(shl(0x60, 0x01), 0x01))\n  and\n  0xa0\n  mstore\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":1494:4902  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {... */\n  jump(tag_11)\n    /* \"--CODEGEN--\":176:469   */\ntag_3:\n  0x00\n    /* \"--CODEGEN--\":306:308   */\n  0x20\n    /* \"--CODEGEN--\":294:303   */\n  dup3\n    /* \"--CODEGEN--\":285:292   */\n  dup5\n    /* \"--CODEGEN--\":281:304   */\n  sub\n    /* \"--CODEGEN--\":277:309   */\n  slt\n    /* \"--CODEGEN--\":274:276   */\n  iszero\n  tag_13\n  jumpi\n  dup1\n  dup2\n    /* \"--CODEGEN--\":312:324   */\n  revert\n    /* \"--CODEGEN--\":274:276   */\ntag_13:\n    /* \"--CODEGEN--\":98:111   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"--CODEGEN--\":749:803   */\n  dup2\n  and\n    /* \"--CODEGEN--\":889:939   */\n  dup2\n  eq\n    /* \"--CODEGEN--\":879:881   */\n  tag_14\n  jumpi\n  dup2\n  dup3\n    /* \"--CODEGEN--\":943:955   */\n  revert\n    /* \"--CODEGEN--\":879:881   */\ntag_14:\n    /* \"--CODEGEN--\":364:453   */\n  swap4\n    /* \"--CODEGEN--\":268:469   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\ntag_11:\n    /* \"contracts/vault/ProtocolFeesCollector.sol\":1494:4902  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {... */\n  mload(0x80)\n  shr(0x60, mload(0xa0))\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  assignImmutable(\"0x6d6142e7bc5885f8a3af14e4530d0fef2107c35d29b4827380ff447a51b70068\")\n  assignImmutable(\"0xe4b1702d9298fee62dfeccc57d322a463ad55ca201256d01f62b45b2e1c21c10\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":1494:4902  contract ProtocolFeesCollector is Authentication, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x851c1bb3\n      gt\n      tag_12\n      jumpi\n      dup1\n      0xd877845c\n      gt\n      tag_13\n      jumpi\n      dup1\n      0xd877845c\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xe42abf35\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xfbfa77cf\n      eq\n      tag_11\n      jumpi\n      jump(tag_2)\n    tag_13:\n      dup1\n      0x851c1bb3\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xaaabadc5\n      eq\n      tag_8\n      jumpi\n      jump(tag_2)\n    tag_12:\n      dup1\n      0x38e9922e\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x55c67628\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x6b6b9f69\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x6daefab6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3244:3559  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {... */\n    tag_3:\n      tag_14\n      tag_15\n      calldatasize\n      0x04\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n    tag_14:\n      stop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3967:4073  function getSwapFeePercentage() external view returns (uint256) {... */\n    tag_4:\n      tag_18\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3565:3961  function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {... */\n    tag_5:\n      tag_14\n      tag_23\n      calldatasize\n      0x04\n      tag_16\n      jump\t// in\n    tag_23:\n      tag_24\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2791:3238  function withdrawCollectedFees(... */\n    tag_6:\n      tag_14\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n        /* \"contracts/lib/helpers/Authentication.sol\":2487:2917  function getActionId(bytes4 selector) public view override returns (bytes32) {... */\n    tag_7:\n      tag_18\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4501:4602  function getAuthorizer() external view returns (IAuthorizer) {... */\n    tag_8:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_99\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4079:4195  function getFlashLoanFeePercentage() external view returns (uint256) {... */\n    tag_9:\n      tag_18\n      tag_40\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4201:4495  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {... */\n    tag_10:\n      tag_42\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_20\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":1828:1857  IVault public immutable vault */\n    tag_11:\n      tag_35\n      tag_49\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3244:3559  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {... */\n    tag_17:\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      tag_53\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2175  _authenticateCaller */\n      tag_54\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      jump\t// in\n    tag_53:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3336:3440  _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH) */\n      tag_56\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":1726:1731  50e16 */\n      0x06f05b59d3b20000\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3345:3365  newSwapFeePercentage */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3345:3402  newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE */\n      gt\n      iszero\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":9987:9990  600 */\n      0x0258\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3336:3344  _require */\n      tag_57\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3336:3440  _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH) */\n      jump\t// in\n    tag_56:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3450:3468  _swapFeePercentage */\n      0x01\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3450:3491  _swapFeePercentage = newSwapFeePercentage */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3506:3552  SwapFeePercentageChanged(newSwapFeePercentage) */\n      mload(0x40)\n      0xa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc\n      swap1\n      tag_58\n      swap1\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3471:3491  newSwapFeePercentage */\n      dup4\n      swap1\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3506:3552  SwapFeePercentageChanged(newSwapFeePercentage) */\n      tag_34\n      jump\t// in\n    tag_58:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3244:3559  function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {... */\n      pop\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3967:4073  function getSwapFeePercentage() external view returns (uint256) {... */\n    tag_19:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4048:4066  _swapFeePercentage */\n      sload(0x01)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3967:4073  function getSwapFeePercentage() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3565:3961  function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {... */\n    tag_24:\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      tag_61\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2175  _authenticateCaller */\n      tag_54\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      jump\t// in\n    tag_61:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3667:3822  _require(... */\n      tag_63\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":1811:1815  1e16 */\n      0x2386f26fc10000\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3689:3714  newFlashLoanFeePercentage */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3689:3757  newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE */\n      gt\n      iszero\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":10059:10062  601 */\n      0x0259\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3667:3675  _require */\n      tag_57\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3667:3822  _require(... */\n      jump\t// in\n    tag_63:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3832:3855  _flashLoanFeePercentage */\n      0x02\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3832:3883  _flashLoanFeePercentage = newFlashLoanFeePercentage */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3898:3954  FlashLoanFeePercentageChanged(newFlashLoanFeePercentage) */\n      mload(0x40)\n      0x5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a\n      swap1\n      tag_58\n      swap1\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3858:3883  newFlashLoanFeePercentage */\n      dup4\n      swap1\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3898:3954  FlashLoanFeePercentageChanged(newFlashLoanFeePercentage) */\n      tag_34\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2791:3238  function withdrawCollectedFees(... */\n    tag_28:\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2562:2582  _enterNonReentrant() */\n      tag_66\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2562:2580  _enterNonReentrant */\n      tag_67\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2562:2582  _enterNonReentrant() */\n      jump\t// in\n    tag_66:\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      tag_69\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2175  _authenticateCaller */\n      tag_54\n        /* \"contracts/lib/helpers/Authentication.sol\":2156:2177  _authenticateCaller() */\n      jump\t// in\n    tag_69:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2970:3036  InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length) */\n      tag_71\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3006:3012  tokens */\n      dup5\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3021:3028  amounts */\n      dup4\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2970:3005  InputHelpers.ensureInputLengthMatch */\n      tag_72\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2970:3036  InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length) */\n      jump\t// in\n    tag_71:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3052:3061  uint256 i */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3047:3232  for (uint256 i = 0; i < tokens.length; ++i) {... */\n    tag_73:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3067:3084  i < tokens.length */\n      dup5\n      dup2\n      lt\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3047:3232  for (uint256 i = 0; i < tokens.length; ++i) {... */\n      iszero\n      tag_74\n      jumpi\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3105:3117  IERC20 token */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3120:3126  tokens */\n      dup7\n      dup7\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3127:3128  i */\n      dup4\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3120:3129  tokens[i] */\n      dup2\n      dup2\n      lt\n      tag_76\n      jumpi\n      invalid\n    tag_76:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_77\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_77:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3105:3129  IERC20 token = tokens[i] */\n      swap1\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3143:3157  uint256 amount */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3160:3167  amounts */\n      dup6\n      dup6\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3168:3169  i */\n      dup5\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3160:3170  amounts[i] */\n      dup2\n      dup2\n      lt\n      tag_79\n      jumpi\n      invalid\n    tag_79:\n      0x20\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      calldataload\n      swap2\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3184:3221  token.safeTransfer(recipient, amount) */\n      tag_80\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3184:3202  token.safeTransfer */\n      dup4\n      and\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3203:3212  recipient */\n      dup6\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3160:3170  amounts[i] */\n      dup4\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3184:3202  token.safeTransfer */\n      tag_81\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3184:3221  token.safeTransfer(recipient, amount) */\n      jump\t// in\n    tag_80:\n      pop\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3086:3089  ++i */\n      0x01\n      add\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":3047:3232  for (uint256 i = 0; i < tokens.length; ++i) {... */\n      jump(tag_73)\n    tag_74:\n      pop\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2603:2622  _exitNonReentrant() */\n      tag_82\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2603:2620  _exitNonReentrant */\n      tag_83\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2603:2622  _exitNonReentrant() */\n      jump\t// in\n    tag_82:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":2791:3238  function withdrawCollectedFees(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/lib/helpers/Authentication.sol\":2487:2917  function getActionId(bytes4 selector) public view override returns (bytes32) {... */\n    tag_32:\n        /* \"contracts/lib/helpers/Authentication.sol\":2555:2562  bytes32 */\n      0x00\n        /* \"contracts/lib/helpers/Authentication.sol\":2876:2898  _actionIdDisambiguator */\n      immutable(\"0xe4b1702d9298fee62dfeccc57d322a463ad55ca201256d01f62b45b2e1c21c10\")\n        /* \"contracts/lib/helpers/Authentication.sol\":2900:2908  selector */\n      dup3\n        /* \"contracts/lib/helpers/Authentication.sol\":2859:2909  abi.encodePacked(_actionIdDisambiguator, selector) */\n      add(0x20, mload(0x40))\n      tag_85\n      swap3\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"contracts/lib/helpers/Authentication.sol\":2849:2910  keccak256(abi.encodePacked(_actionIdDisambiguator, selector)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"contracts/lib/helpers/Authentication.sol\":2842:2910  return keccak256(abi.encodePacked(_actionIdDisambiguator, selector)) */\n      swap1\n      pop\n        /* \"contracts/lib/helpers/Authentication.sol\":2487:2917  function getActionId(bytes4 selector) public view override returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4501:4602  function getAuthorizer() external view returns (IAuthorizer) {... */\n    tag_36:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4549:4560  IAuthorizer */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4579:4595  _getAuthorizer() */\n      tag_88\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4579:4593  _getAuthorizer */\n      tag_89\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4579:4595  _getAuthorizer() */\n      jump\t// in\n    tag_88:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4572:4595  return _getAuthorizer() */\n      swap1\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4501:4602  function getAuthorizer() external view returns (IAuthorizer) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4079:4195  function getFlashLoanFeePercentage() external view returns (uint256) {... */\n    tag_40:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4165:4188  _flashLoanFeePercentage */\n      sload(0x02)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4079:4195  function getFlashLoanFeePercentage() external view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4201:4495  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {... */\n    tag_45:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4280:4307  uint256[] memory feeAmounts */\n      0x60\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4346:4352  tokens */\n      dup2\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4346:4359  tokens.length */\n      mload\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4332:4360  new uint256[](tokens.length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_93\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_93:\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4319:4360  feeAmounts = new uint256[](tokens.length) */\n      swap1\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4375:4384  uint256 i */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4370:4489  for (uint256 i = 0; i < tokens.length; ++i) {... */\n    tag_94:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4394:4400  tokens */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4394:4407  tokens.length */\n      mload\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4390:4391  i */\n      dup2\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4390:4407  i < tokens.length */\n      lt\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4370:4489  for (uint256 i = 0; i < tokens.length; ++i) {... */\n      iszero\n      tag_95\n      jumpi\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4444:4450  tokens */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4451:4452  i */\n      dup2\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4444:4453  tokens[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_97\n      jumpi\n      invalid\n    tag_97:\n      0x20\n      mul\n      0x20\n      add\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4444:4463  tokens[i].balanceOf */\n      and\n      0x70a08231\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4472:4476  this */\n      address\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4444:4478  tokens[i].balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_98\n      swap2\n      swap1\n      tag_99\n      jump\t// in\n    tag_98:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_100\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_100:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_102\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_102:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4428:4438  feeAmounts */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4439:4440  i */\n      dup3\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4428:4441  feeAmounts[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_105\n      jumpi\n      invalid\n    tag_105:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      add\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4428:4478  feeAmounts[i] = tokens[i].balanceOf(address(this)) */\n      mstore\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4409:4412  ++i */\n      0x01\n      add\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4370:4489  for (uint256 i = 0; i < tokens.length; ++i) {... */\n      jump(tag_94)\n    tag_95:\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4201:4495  function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":1828:1857  IVault public immutable vault */\n    tag_49:\n      immutable(\"0x6d6142e7bc5885f8a3af14e4530d0fef2107c35d29b4827380ff447a51b70068\")\n      dup2\n      jump\t// out\n        /* \"contracts/lib/helpers/Authentication.sol\":2300:2481  function _authenticateCaller() internal view {... */\n    tag_54:\n        /* \"contracts/lib/helpers/Authentication.sol\":2355:2371  bytes32 actionId */\n      0x00\n        /* \"contracts/lib/helpers/Authentication.sol\":2374:2394  getActionId(msg.sig) */\n      tag_107\n        /* \"contracts/lib/helpers/Authentication.sol\":2386:2393  msg.sig */\n      and(0xffffffff00000000000000000000000000000000000000000000000000000000, calldataload(0x00))\n        /* \"contracts/lib/helpers/Authentication.sol\":2374:2385  getActionId */\n      tag_32\n        /* \"contracts/lib/helpers/Authentication.sol\":2374:2394  getActionId(msg.sig) */\n      jump\t// in\n    tag_107:\n        /* \"contracts/lib/helpers/Authentication.sol\":2355:2394  bytes32 actionId = getActionId(msg.sig) */\n      swap1\n      pop\n        /* \"contracts/lib/helpers/Authentication.sol\":2404:2474  _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED) */\n      tag_108\n        /* \"contracts/lib/helpers/Authentication.sol\":2413:2446  _canPerform(actionId, msg.sender) */\n      tag_109\n        /* \"contracts/lib/helpers/Authentication.sol\":2425:2433  actionId */\n      dup3\n        /* \"contracts/lib/helpers/Authentication.sol\":2435:2445  msg.sender */\n      caller\n        /* \"contracts/lib/helpers/Authentication.sol\":2413:2424  _canPerform */\n      tag_110\n        /* \"contracts/lib/helpers/Authentication.sol\":2413:2446  _canPerform(actionId, msg.sender) */\n      jump\t// in\n    tag_109:\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":6674:6677  401 */\n      0x0191\n        /* \"contracts/lib/helpers/Authentication.sol\":2404:2412  _require */\n      tag_57\n        /* \"contracts/lib/helpers/Authentication.sol\":2404:2474  _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED) */\n      jump\t// in\n    tag_108:\n        /* \"contracts/lib/helpers/Authentication.sol\":2300:2481  function _authenticateCaller() internal view {... */\n      pop\n      jump\t// out\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":866:967  function _require(bool condition, uint256 errorCode) pure {... */\n    tag_57:\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":935:944  condition */\n      dup2\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":930:964  if (!condition) _revert(errorCode) */\n      tag_113\n      jumpi\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":946:964  _revert(errorCode) */\n      tag_113\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":954:963  errorCode */\n      dup2\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":946:953  _revert */\n      tag_114\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":946:964  _revert(errorCode) */\n      jump\t// in\n    tag_113:\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":866:967  function _require(bool condition, uint256 errorCode) pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2635:2906  function _enterNonReentrant() private {... */\n    tag_67:\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2758:2806  _require(_status != _ENTERED, Errors.REENTRANCY) */\n      tag_116\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2062:2063  2 */\n      0x02\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2767:2774  _status */\n      sload(0x00)\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2767:2786  _status != _ENTERED */\n      eq\n      iszero\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":6618:6621  400 */\n      0x0190\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2758:2766  _require */\n      tag_57\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2758:2806  _require(_status != _ENTERED, Errors.REENTRANCY) */\n      jump\t// in\n    tag_116:\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2062:2063  2 */\n      0x02\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2881:2888  _status */\n      0x00\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2881:2899  _status = _ENTERED */\n      sstore\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2635:2906  function _enterNonReentrant() private {... */\n      jump\t// out\n        /* \"contracts/lib/helpers/InputHelpers.sol\":855:986  function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {... */\n    tag_72:\n        /* \"contracts/lib/helpers/InputHelpers.sol\":933:979  _require(a == b, Errors.INPUT_LENGTH_MISMATCH) */\n      tag_113\n        /* \"contracts/lib/helpers/InputHelpers.sol\":947:948  b */\n      dup2\n        /* \"contracts/lib/helpers/InputHelpers.sol\":942:943  a */\n      dup4\n        /* \"contracts/lib/helpers/InputHelpers.sol\":942:948  a == b */\n      eq\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":5002:5005  103 */\n      0x67\n        /* \"contracts/lib/helpers/InputHelpers.sol\":933:941  _require */\n      tag_57\n        /* \"contracts/lib/helpers/InputHelpers.sol\":933:979  _require(a == b, Errors.INPUT_LENGTH_MISMATCH) */\n      jump\t// in\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":885:1099  function safeTransfer(... */\n    tag_81:\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":997:1092  _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_120\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1025:1030  token */\n      dup4\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1056:1079  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1081:1083  to */\n      dup5\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1085:1090  value */\n      dup5\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1033:1091  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_121\n      swap3\n      swap2\n      swap1\n      tag_122\n      jump\t// in\n    tag_121:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":997:1016  _callOptionalReturn */\n      tag_123\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":997:1092  _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      jump\t// in\n    tag_120:\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":885:1099  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2912:3120  function _exitNonReentrant() private {... */\n    tag_83:\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2019:2020  1 */\n      0x01\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":3091:3098  _status */\n      0x00\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":3091:3113  _status = _NOT_ENTERED */\n      sstore\n        /* \"contracts/lib/openzeppelin/ReentrancyGuard.sol\":2912:3120  function _exitNonReentrant() private {... */\n      jump\t// out\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4793:4900  function _getAuthorizer() internal view returns (IAuthorizer) {... */\n    tag_89:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4842:4853  IAuthorizer */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4872:4877  vault */\n      immutable(\"0x6d6142e7bc5885f8a3af14e4530d0fef2107c35d29b4827380ff447a51b70068\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4872:4891  vault.getAuthorizer */\n      and\n      0xaaabadc5\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4872:4893  vault.getAuthorizer() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_126\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_126:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_128\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_128:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_88\n      swap2\n      swap1\n      tag_130\n      jump\t// in\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4608:4787  function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {... */\n    tag_110:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4696:4700  bool */\n      0x00\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4719:4735  _getAuthorizer() */\n      tag_132\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4719:4733  _getAuthorizer */\n      tag_89\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4719:4735  _getAuthorizer() */\n      jump\t// in\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4719:4746  _getAuthorizer().canPerform */\n      and\n      0x9be2a884\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4747:4755  actionId */\n      dup5\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4757:4764  account */\n      dup5\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4774:4778  this */\n      address\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4719:4780  _getAuthorizer().canPerform(actionId, account, address(this)) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_133\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_134\n      jump\t// in\n    tag_133:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_135\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_135:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_137\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_137:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4712:4780  return _getAuthorizer().canPerform(actionId, account, address(this)) */\n      swap1\n      pop\n        /* \"contracts/vault/ProtocolFeesCollector.sol\":4608:4787  function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {... */\n    tag_131:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":1074:4246  function _revert(uint256 errorCode) pure {... */\n    tag_114:\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3593:3659  0x08c379a000000000000000000000000000000000000000000000000000000000 */\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3588:3591  0x0 */\n      0x00\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3581:3660  mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000) */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3799:3865  0x0000000000000000000000000000000000000000000000000000000000000020 */\n      0x20\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3793:3797  0x04 */\n      0x04\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3786:3866  mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020) */\n      mstore\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3941:3942  7 */\n      0x07\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3935:3939  0x24 */\n      0x24\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3928:3943  mstore(0x24, 7) */\n      mstore\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2999:3072  add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))) */\n      0x42414c23000030\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2210:2212  10 */\n      0x0a\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2243:2261  div(errorCode, 10) */\n      dup1\n      dup5\n      div\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2288:2306  mod(errorCode, 10) */\n      dup2\n      dup2\n      mod\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2215:2219  0x30 */\n      0x30\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2284:2313  add(mod(errorCode, 10), 0x30) */\n      swap1\n      dup2\n      add\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3040:3041  8 */\n      0x08\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3036:3050  shl(8, tenths) */\n      shl\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2195:2213  mod(errorCode, 10) */\n      swap6\n      dup4\n      swap1\n      mod\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3025:3051  add(units, shl(8, tenths)) */\n      swap6\n      swap1\n      swap6\n      add\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2336:2354  div(errorCode, 10) */\n      swap1\n      dup3\n      swap1\n      div\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2383:2401  mod(errorCode, 10) */\n      swap2\n      dup3\n      mod\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2379:2408  add(mod(errorCode, 10), 0x30) */\n      swap1\n      swap5\n      add\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3057:3059  16 */\n      0x10\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3053:3070  shl(16, hundreds) */\n      shl\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":3021:3071  add(add(units, shl(8, tenths)), shl(16, hundreds)) */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2999:3072  add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))) */\n      add\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2994:2997  200 */\n      0xc8\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":2990:3073  shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds)))) */\n      shl\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":4008:4012  0x44 */\n      0x44\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":4001:4027  mstore(0x44, revertReason) */\n      mstore\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":4234:4237  100 */\n      0x64\n      swap1\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":4224:4238  revert(0, 100) */\n      revert\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1695:2494  function _callOptionalReturn(address token, bytes memory data) private {... */\n    tag_123:\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1938:1950  bool success */\n      0x00\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1952:1975  bytes memory returndata */\n      0x60\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1979:1984  token */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1979:1989  token.call */\n      and\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1990:1994  data */\n      dup4\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1979:1995  token.call(data) */\n      mload(0x40)\n      tag_142\n      swap2\n      swap1\n      tag_143\n      jump\t// in\n    tag_142:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup7\n      gas\n      call\n      swap2\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_146\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_145)\n    tag_146:\n      0x60\n      swap2\n      pop\n    tag_145:\n      pop\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1937:1995  (bool success, bytes memory returndata) = token.call(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2133:2134  0 */\n      0x00\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2124:2131  success */\n      dup3\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2121:2135  eq(success, 0) */\n      eq\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2118:2120  if */\n      iszero\n      tag_147\n      jumpi\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2175:2191  returndatasize() */\n      returndatasize\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2172:2173  0 */\n      0x00\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2169:2170  0 */\n      dup1\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2154:2192  returndatacopy(0, 0, returndatasize()) */\n      returndatacopy\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2219:2235  returndatasize() */\n      returndatasize\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2216:2217  0 */\n      0x00\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2209:2236  revert(0, returndatasize()) */\n      revert\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2118:2120  if */\n    tag_147:\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2390:2487  _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED) */\n      tag_148\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2399:2409  returndata */\n      dup2\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2399:2416  returndata.length */\n      mload\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2420:2421  0 */\n      0x00\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2399:2421  returndata.length == 0 */\n      eq\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2399:2455  returndata.length == 0 || abi.decode(returndata, (bool)) */\n      dup1\n      tag_150\n      jumpi\n      pop\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2436:2446  returndata */\n      dup2\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2425:2455  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_150\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_150:\n        /* \"contracts/lib/helpers/BalancerErrors.sol\":7763:7766  418 */\n      0x01a2\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2390:2398  _require */\n      tag_57\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":2390:2487  _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED) */\n      jump\t// in\n    tag_148:\n        /* \"contracts/lib/openzeppelin/SafeERC20.sol\":1695:2494  function _callOptionalReturn(address token, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":168:534   */\n    tag_152:\n      0x00\n      dup1\n        /* \"--CODEGEN--\":312:315   */\n      dup4\n        /* \"--CODEGEN--\":305:309   */\n      0x1f\n        /* \"--CODEGEN--\":297:303   */\n      dup5\n        /* \"--CODEGEN--\":293:310   */\n      add\n        /* \"--CODEGEN--\":289:316   */\n      slt\n        /* \"--CODEGEN--\":279:281   */\n      tag_154\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":320:332   */\n      revert\n        /* \"--CODEGEN--\":279:281   */\n    tag_154:\n      pop\n        /* \"--CODEGEN--\":350:370   */\n      dup2\n      calldataload\n        /* \"--CODEGEN--\":390:408   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":379:409   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":376:378   */\n      iszero\n      tag_155\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":412:424   */\n      revert\n        /* \"--CODEGEN--\":376:378   */\n    tag_155:\n        /* \"--CODEGEN--\":456:460   */\n      0x20\n        /* \"--CODEGEN--\":448:454   */\n      dup4\n        /* \"--CODEGEN--\":444:461   */\n      add\n        /* \"--CODEGEN--\":432:461   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":507:510   */\n      dup4\n        /* \"--CODEGEN--\":456:460   */\n      0x20\n      dup1\n        /* \"--CODEGEN--\":491:497   */\n      dup4\n        /* \"--CODEGEN--\":487:504   */\n      mul\n        /* \"--CODEGEN--\":448:454   */\n      dup6\n        /* \"--CODEGEN--\":473:505   */\n      add\n      add\n        /* \"--CODEGEN--\":470:511   */\n      gt\n        /* \"--CODEGEN--\":467:469   */\n      iszero\n      tag_156\n      jumpi\n        /* \"--CODEGEN--\":524:525   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":514:526   */\n      revert\n        /* \"--CODEGEN--\":467:469   */\n    tag_156:\n        /* \"--CODEGEN--\":272:534   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":2154:2312   */\n    tag_157:\n        /* \"--CODEGEN--\":2235:2255   */\n      dup1\n      calldataload\n        /* \"--CODEGEN--\":2260:2307   */\n      tag_131\n        /* \"--CODEGEN--\":2235:2255   */\n      dup2\n        /* \"--CODEGEN--\":2260:2307   */\n      tag_160\n      jump\t// in\n        /* \"--CODEGEN--\":2597:3428   */\n    tag_27:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n        /* \"--CODEGEN--\":2819:2821   */\n      0x60\n        /* \"--CODEGEN--\":2807:2816   */\n      dup7\n        /* \"--CODEGEN--\":2798:2805   */\n      dup9\n        /* \"--CODEGEN--\":2794:2817   */\n      sub\n        /* \"--CODEGEN--\":2790:2822   */\n      slt\n        /* \"--CODEGEN--\":2787:2789   */\n      iszero\n      tag_162\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":2825:2837   */\n      revert\n        /* \"--CODEGEN--\":2787:2789   */\n    tag_162:\n        /* \"--CODEGEN--\":2883:2900   */\n      dup6\n        /* \"--CODEGEN--\":2870:2901   */\n      calldataload\n        /* \"--CODEGEN--\":2921:2939   */\n      0xffffffffffffffff\n      dup1\n        /* \"--CODEGEN--\":2913:2919   */\n      dup3\n        /* \"--CODEGEN--\":2910:2940   */\n      gt\n        /* \"--CODEGEN--\":2907:2909   */\n      iszero\n      tag_163\n      jumpi\n      dup3\n      dup4\n        /* \"--CODEGEN--\":2943:2955   */\n      revert\n        /* \"--CODEGEN--\":2907:2909   */\n    tag_163:\n        /* \"--CODEGEN--\":2981:3075   */\n      tag_164\n        /* \"--CODEGEN--\":3067:3074   */\n      dup10\n        /* \"--CODEGEN--\":3058:3064   */\n      dup4\n        /* \"--CODEGEN--\":3047:3056   */\n      dup11\n        /* \"--CODEGEN--\":3043:3065   */\n      add\n        /* \"--CODEGEN--\":2981:3075   */\n      tag_152\n      jump\t// in\n    tag_164:\n        /* \"--CODEGEN--\":2963:3075   */\n      swap1\n      swap8\n      pop\n      swap6\n      pop\n        /* \"--CODEGEN--\":3140:3142   */\n      0x20\n        /* \"--CODEGEN--\":3125:3143   */\n      dup9\n      add\n        /* \"--CODEGEN--\":3112:3144   */\n      calldataload\n      swap2\n      pop\n        /* \"--CODEGEN--\":3153:3183   */\n      dup1\n      dup3\n      gt\n        /* \"--CODEGEN--\":3150:3152   */\n      iszero\n      tag_165\n      jumpi\n      dup3\n      dup4\n        /* \"--CODEGEN--\":3186:3198   */\n      revert\n        /* \"--CODEGEN--\":3150:3152   */\n    tag_165:\n      pop\n        /* \"--CODEGEN--\":3224:3304   */\n      tag_166\n        /* \"--CODEGEN--\":3296:3303   */\n      dup9\n        /* \"--CODEGEN--\":3287:3293   */\n      dup3\n        /* \"--CODEGEN--\":3276:3285   */\n      dup10\n        /* \"--CODEGEN--\":3272:3294   */\n      add\n        /* \"--CODEGEN--\":3224:3304   */\n      tag_152\n      jump\t// in\n    tag_166:\n        /* \"--CODEGEN--\":3206:3304   */\n      swap1\n      swap5\n      pop\n      swap3\n      pop\n      pop\n        /* \"--CODEGEN--\":3341:3343   */\n      0x40\n        /* \"--CODEGEN--\":3380:3402   */\n      dup7\n      add\n        /* \"--CODEGEN--\":72:92   */\n      calldataload\n        /* \"--CODEGEN--\":97:130   */\n      tag_167\n        /* \"--CODEGEN--\":72:92   */\n      dup2\n        /* \"--CODEGEN--\":97:130   */\n      tag_160\n      jump\t// in\n    tag_167:\n        /* \"--CODEGEN--\":3349:3412   */\n      dup1\n      swap2\n      pop\n      pop\n        /* \"--CODEGEN--\":2781:3428   */\n      swap3\n      swap6\n      pop\n      swap3\n      swap6\n      swap1\n      swap4\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":3435:3840   */\n    tag_44:\n      0x00\n        /* \"--CODEGEN--\":3578:3580   */\n      0x20\n      dup1\n        /* \"--CODEGEN--\":3566:3575   */\n      dup4\n        /* \"--CODEGEN--\":3557:3564   */\n      dup6\n        /* \"--CODEGEN--\":3553:3576   */\n      sub\n        /* \"--CODEGEN--\":3549:3581   */\n      slt\n        /* \"--CODEGEN--\":3546:3548   */\n      iszero\n      tag_169\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":3584:3596   */\n      revert\n        /* \"--CODEGEN--\":3546:3548   */\n    tag_169:\n        /* \"--CODEGEN--\":3642:3659   */\n      dup3\n        /* \"--CODEGEN--\":3629:3660   */\n      calldataload\n        /* \"--CODEGEN--\":3680:3698   */\n      0xffffffffffffffff\n      dup1\n        /* \"--CODEGEN--\":3672:3678   */\n      dup3\n        /* \"--CODEGEN--\":3669:3699   */\n      gt\n        /* \"--CODEGEN--\":3666:3668   */\n      iszero\n      tag_170\n      jumpi\n      dup4\n      dup5\n        /* \"--CODEGEN--\":3702:3714   */\n      revert\n        /* \"--CODEGEN--\":3666:3668   */\n    tag_170:\n        /* \"--CODEGEN--\":3807:3813   */\n      dup2\n        /* \"--CODEGEN--\":3796:3805   */\n      dup6\n        /* \"--CODEGEN--\":3792:3814   */\n      add\n      swap2\n      pop\n        /* \"--CODEGEN--\":699:702   */\n      dup6\n        /* \"--CODEGEN--\":692:696   */\n      0x1f\n        /* \"--CODEGEN--\":684:690   */\n      dup4\n        /* \"--CODEGEN--\":680:697   */\n      add\n        /* \"--CODEGEN--\":676:703   */\n      slt\n        /* \"--CODEGEN--\":666:668   */\n      tag_171\n      jumpi\n      dup4\n      dup5\n        /* \"--CODEGEN--\":707:719   */\n      revert\n        /* \"--CODEGEN--\":666:668   */\n    tag_171:\n        /* \"--CODEGEN--\":754:760   */\n      dup2\n        /* \"--CODEGEN--\":741:761   */\n      calldataload\n        /* \"--CODEGEN--\":3680:3698   */\n      dup2\n        /* \"--CODEGEN--\":11338:11344   */\n      dup2\n        /* \"--CODEGEN--\":11335:11365   */\n      gt\n        /* \"--CODEGEN--\":11332:11334   */\n      iszero\n      tag_172\n      jumpi\n      dup5\n      dup6\n        /* \"--CODEGEN--\":11368:11380   */\n      revert\n        /* \"--CODEGEN--\":11332:11334   */\n    tag_172:\n        /* \"--CODEGEN--\":3578:3580   */\n      dup4\n        /* \"--CODEGEN--\":11405:11411   */\n      dup2\n        /* \"--CODEGEN--\":11401:11418   */\n      mul\n      swap2\n      pop\n        /* \"--CODEGEN--\":776:870   */\n      tag_173\n        /* \"--CODEGEN--\":3578:3580   */\n      dup5\n        /* \"--CODEGEN--\":11401:11418   */\n      dup4\n        /* \"--CODEGEN--\":11466:11481   */\n      add\n        /* \"--CODEGEN--\":776:870   */\n      tag_174\n      jump\t// in\n    tag_173:\n        /* \"--CODEGEN--\":898:919   */\n      dup2\n      dup2\n      mstore\n        /* \"--CODEGEN--\":955:969   */\n      dup5\n      dup2\n      add\n      swap1\n        /* \"--CODEGEN--\":930:947   */\n      dup5\n      dup7\n      add\n        /* \"--CODEGEN--\":1035:1062   */\n      dup5\n      dup7\n      add\n      dup8\n      add\n        /* \"--CODEGEN--\":1032:1068   */\n      dup11\n      lt\n        /* \"--CODEGEN--\":1029:1031   */\n      iszero\n      tag_175\n      jumpi\n      dup8\n      dup9\n        /* \"--CODEGEN--\":1071:1083   */\n      revert\n        /* \"--CODEGEN--\":1029:1031   */\n    tag_175:\n      dup8\n        /* \"--CODEGEN--\":1097:1107   */\n      swap6\n      pop\n        /* \"--CODEGEN--\":1091:1311   */\n    tag_176:\n        /* \"--CODEGEN--\":1116:1122   */\n      dup4\n        /* \"--CODEGEN--\":1113:1114   */\n      dup7\n        /* \"--CODEGEN--\":1110:1123   */\n      lt\n        /* \"--CODEGEN--\":1091:1311   */\n      iszero\n      tag_178\n      jumpi\n        /* \"--CODEGEN--\":1196:1247   */\n      tag_179\n        /* \"--CODEGEN--\":1243:1246   */\n      dup11\n        /* \"--CODEGEN--\":1231:1241   */\n      dup3\n        /* \"--CODEGEN--\":1196:1247   */\n      tag_157\n      jump\t// in\n    tag_179:\n        /* \"--CODEGEN--\":1184:1248   */\n      dup4\n      mstore\n        /* \"--CODEGEN--\":1138:1139   */\n      0x01\n        /* \"--CODEGEN--\":1131:1140   */\n      swap6\n      swap1\n      swap6\n      add\n      swap5\n        /* \"--CODEGEN--\":1262:1276   */\n      swap2\n      dup7\n      add\n      swap2\n        /* \"--CODEGEN--\":1290:1304   */\n      dup7\n      add\n        /* \"--CODEGEN--\":1091:1311   */\n      jump(tag_176)\n    tag_178:\n      pop\n        /* \"--CODEGEN--\":3722:3824   */\n      swap9\n        /* \"--CODEGEN--\":3540:3840   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":3847:4104   */\n    tag_139:\n      0x00\n        /* \"--CODEGEN--\":3959:3961   */\n      0x20\n        /* \"--CODEGEN--\":3947:3956   */\n      dup3\n        /* \"--CODEGEN--\":3938:3945   */\n      dup5\n        /* \"--CODEGEN--\":3934:3957   */\n      sub\n        /* \"--CODEGEN--\":3930:3962   */\n      slt\n        /* \"--CODEGEN--\":3927:3929   */\n      iszero\n      tag_181\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":3965:3977   */\n      revert\n        /* \"--CODEGEN--\":3927:3929   */\n    tag_181:\n        /* \"--CODEGEN--\":1784:1790   */\n      dup2\n        /* \"--CODEGEN--\":1778:1791   */\n      mload\n        /* \"--CODEGEN--\":14474:14479   */\n      dup1\n        /* \"--CODEGEN--\":12547:12560   */\n      iszero\n        /* \"--CODEGEN--\":12540:12561   */\n      iszero\n        /* \"--CODEGEN--\":14452:14457   */\n      dup2\n        /* \"--CODEGEN--\":14449:14481   */\n      eq\n        /* \"--CODEGEN--\":14439:14441   */\n      tag_182\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":14485:14497   */\n      revert\n        /* \"--CODEGEN--\":14439:14441   */\n    tag_182:\n        /* \"--CODEGEN--\":4017:4088   */\n      swap4\n        /* \"--CODEGEN--\":3921:4104   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":4111:4350   */\n    tag_31:\n      0x00\n        /* \"--CODEGEN--\":4214:4216   */\n      0x20\n        /* \"--CODEGEN--\":4202:4211   */\n      dup3\n        /* \"--CODEGEN--\":4193:4200   */\n      dup5\n        /* \"--CODEGEN--\":4189:4212   */\n      sub\n        /* \"--CODEGEN--\":4185:4217   */\n      slt\n        /* \"--CODEGEN--\":4182:4184   */\n      iszero\n      tag_184\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":4220:4232   */\n      revert\n        /* \"--CODEGEN--\":4182:4184   */\n    tag_184:\n        /* \"--CODEGEN--\":1917:1923   */\n      dup2\n        /* \"--CODEGEN--\":1904:1924   */\n      calldataload\n        /* \"--CODEGEN--\":12724:12790   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":14596:14601   */\n      dup2\n        /* \"--CODEGEN--\":12713:12791   */\n      and\n        /* \"--CODEGEN--\":14572:14577   */\n      dup2\n        /* \"--CODEGEN--\":14569:14603   */\n      eq\n        /* \"--CODEGEN--\":14559:14561   */\n      tag_182\n      jumpi\n      dup2\n      dup3\n        /* \"--CODEGEN--\":14607:14619   */\n      revert\n        /* \"--CODEGEN--\":4357:4660   */\n    tag_130:\n      0x00\n        /* \"--CODEGEN--\":4492:4494   */\n      0x20\n        /* \"--CODEGEN--\":4480:4489   */\n      dup3\n        /* \"--CODEGEN--\":4471:4478   */\n      dup5\n        /* \"--CODEGEN--\":4467:4490   */\n      sub\n        /* \"--CODEGEN--\":4463:4495   */\n      slt\n        /* \"--CODEGEN--\":4460:4462   */\n      iszero\n      tag_187\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":4498:4510   */\n      revert\n        /* \"--CODEGEN--\":4460:4462   */\n    tag_187:\n        /* \"--CODEGEN--\":2077:2083   */\n      dup2\n        /* \"--CODEGEN--\":2071:2084   */\n      mload\n        /* \"--CODEGEN--\":2089:2142   */\n      tag_182\n        /* \"--CODEGEN--\":2136:2141   */\n      dup2\n        /* \"--CODEGEN--\":2089:2142   */\n      tag_160\n      jump\t// in\n        /* \"--CODEGEN--\":4667:4936   */\n    tag_78:\n      0x00\n        /* \"--CODEGEN--\":4785:4787   */\n      0x20\n        /* \"--CODEGEN--\":4773:4782   */\n      dup3\n        /* \"--CODEGEN--\":4764:4771   */\n      dup5\n        /* \"--CODEGEN--\":4760:4783   */\n      sub\n        /* \"--CODEGEN--\":4756:4788   */\n      slt\n        /* \"--CODEGEN--\":4753:4755   */\n      iszero\n      tag_190\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":4791:4803   */\n      revert\n        /* \"--CODEGEN--\":4753:4755   */\n    tag_190:\n        /* \"--CODEGEN--\":2248:2254   */\n      dup2\n        /* \"--CODEGEN--\":2235:2255   */\n      calldataload\n        /* \"--CODEGEN--\":2260:2307   */\n      tag_182\n        /* \"--CODEGEN--\":2301:2306   */\n      dup2\n        /* \"--CODEGEN--\":2260:2307   */\n      tag_160\n      jump\t// in\n        /* \"--CODEGEN--\":4943:5184   */\n    tag_16:\n      0x00\n        /* \"--CODEGEN--\":5047:5049   */\n      0x20\n        /* \"--CODEGEN--\":5035:5044   */\n      dup3\n        /* \"--CODEGEN--\":5026:5033   */\n      dup5\n        /* \"--CODEGEN--\":5022:5045   */\n      sub\n        /* \"--CODEGEN--\":5018:5050   */\n      slt\n        /* \"--CODEGEN--\":5015:5017   */\n      iszero\n      tag_193\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":5053:5065   */\n      revert\n        /* \"--CODEGEN--\":5015:5017   */\n    tag_193:\n      pop\n        /* \"--CODEGEN--\":2386:2406   */\n      calldataload\n      swap2\n        /* \"--CODEGEN--\":5009:5184   */\n      swap1\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":5191:5454   */\n    tag_104:\n      0x00\n        /* \"--CODEGEN--\":5306:5308   */\n      0x20\n        /* \"--CODEGEN--\":5294:5303   */\n      dup3\n        /* \"--CODEGEN--\":5285:5292   */\n      dup5\n        /* \"--CODEGEN--\":5281:5304   */\n      sub\n        /* \"--CODEGEN--\":5277:5309   */\n      slt\n        /* \"--CODEGEN--\":5274:5276   */\n      iszero\n      tag_195\n      jumpi\n      dup1\n      dup2\n        /* \"--CODEGEN--\":5312:5324   */\n      revert\n        /* \"--CODEGEN--\":5274:5276   */\n    tag_195:\n      pop\n        /* \"--CODEGEN--\":2534:2547   */\n      mload\n      swap2\n        /* \"--CODEGEN--\":5268:5454   */\n      swap1\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":7855:8242   */\n    tag_86:\n        /* \"--CODEGEN--\":6563:6600   */\n      swap2\n      dup3\n      mstore\n        /* \"--CODEGEN--\":12724:12790   */\n      0xffffffff00000000000000000000000000000000000000000000000000000000\n        /* \"--CODEGEN--\":12713:12791   */\n      and\n        /* \"--CODEGEN--\":8106:8108   */\n      0x20\n        /* \"--CODEGEN--\":8097:8109   */\n      dup3\n      add\n        /* \"--CODEGEN--\":6858:6914   */\n      mstore\n        /* \"--CODEGEN--\":8206:8217   */\n      0x24\n      add\n      swap1\n        /* \"--CODEGEN--\":7997:8242   */\n      jump\t// out\n        /* \"--CODEGEN--\":8249:8520   */\n    tag_143:\n      0x00\n        /* \"--CODEGEN--\":7086:7091   */\n      dup3\n        /* \"--CODEGEN--\":11759:11771   */\n      mload\n      dup2\n        /* \"--CODEGEN--\":13904:14005   */\n    tag_198:\n        /* \"--CODEGEN--\":13918:13924   */\n      dup2\n        /* \"--CODEGEN--\":13915:13916   */\n      dup2\n        /* \"--CODEGEN--\":13912:13925   */\n      lt\n        /* \"--CODEGEN--\":13904:14005   */\n      iszero\n      tag_200\n      jumpi\n        /* \"--CODEGEN--\":7230:7234   */\n      0x20\n        /* \"--CODEGEN--\":13985:13996   */\n      dup2\n      dup7\n      add\n      dup2\n      add\n        /* \"--CODEGEN--\":13979:13997   */\n      mload\n        /* \"--CODEGEN--\":13966:13977   */\n      dup6\n      dup4\n      add\n        /* \"--CODEGEN--\":13959:13998   */\n      mstore\n        /* \"--CODEGEN--\":13933:13943   */\n      add\n        /* \"--CODEGEN--\":13904:14005   */\n      jump(tag_198)\n    tag_200:\n        /* \"--CODEGEN--\":14020:14026   */\n      dup2\n        /* \"--CODEGEN--\":14017:14018   */\n      dup2\n        /* \"--CODEGEN--\":14014:14027   */\n      gt\n        /* \"--CODEGEN--\":14011:14013   */\n      iszero\n      tag_201\n      jumpi\n      dup3\n        /* \"--CODEGEN--\":14076:14082   */\n      dup3\n        /* \"--CODEGEN--\":14071:14074   */\n      dup6\n        /* \"--CODEGEN--\":14067:14083   */\n      add\n        /* \"--CODEGEN--\":14060:14087   */\n      mstore\n        /* \"--CODEGEN--\":14011:14013   */\n    tag_201:\n      pop\n        /* \"--CODEGEN--\":7261:7277   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"--CODEGEN--\":8383:8520   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":8527:8749   */\n    tag_99:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":13095:13149   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"--CODEGEN--\":5714:5751   */\n      dup2\n      mstore\n        /* \"--CODEGEN--\":8654:8656   */\n      0x20\n        /* \"--CODEGEN--\":8639:8657   */\n      add\n      swap1\n        /* \"--CODEGEN--\":8625:8749   */\n      jump\t// out\n        /* \"--CODEGEN--\":8756:9089   */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":13095:13149   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"--CODEGEN--\":5714:5751   */\n      dup3\n      mstore\n        /* \"--CODEGEN--\":9075:9077   */\n      0x20\n        /* \"--CODEGEN--\":9060:9078   */\n      dup3\n      add\n        /* \"--CODEGEN--\":6563:6600   */\n      mstore\n        /* \"--CODEGEN--\":8911:8913   */\n      0x40\n        /* \"--CODEGEN--\":8896:8914   */\n      add\n      swap1\n        /* \"--CODEGEN--\":8882:9089   */\n      jump\t// out\n        /* \"--CODEGEN--\":9096:9466   */\n    tag_47:\n        /* \"--CODEGEN--\":9273:9275   */\n      0x20\n        /* \"--CODEGEN--\":9287:9334   */\n      dup1\n      dup3\n      mstore\n        /* \"--CODEGEN--\":11759:11771   */\n      dup3\n      mload\n        /* \"--CODEGEN--\":9258:9276   */\n      dup3\n      dup3\n      add\n        /* \"--CODEGEN--\":12162:12181   */\n      dup2\n      swap1\n      mstore\n        /* \"--CODEGEN--\":9096:9466   */\n      0x00\n      swap2\n        /* \"--CODEGEN--\":9273:9275   */\n      swap1\n        /* \"--CODEGEN--\":11613:11627   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"--CODEGEN--\":12202:12216   */\n      0x40\n      dup6\n      add\n      swap1\n        /* \"--CODEGEN--\":9096:9466   */\n      dup5\n        /* \"--CODEGEN--\":6202:6462   */\n    tag_205:\n        /* \"--CODEGEN--\":6227:6233   */\n      dup2\n        /* \"--CODEGEN--\":6224:6225   */\n      dup2\n        /* \"--CODEGEN--\":6221:6234   */\n      lt\n        /* \"--CODEGEN--\":6202:6462   */\n      iszero\n      tag_207\n      jumpi\n        /* \"--CODEGEN--\":6288:6301   */\n      dup4\n      mload\n        /* \"--CODEGEN--\":6563:6600   */\n      dup4\n      mstore\n        /* \"--CODEGEN--\":12017:12031   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"--CODEGEN--\":5615:5629   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"--CODEGEN--\":6249:6250   */\n      0x01\n        /* \"--CODEGEN--\":6242:6251   */\n      add\n        /* \"--CODEGEN--\":6202:6462   */\n      jump(tag_205)\n    tag_207:\n      pop\n        /* \"--CODEGEN--\":9340:9456   */\n      swap1\n      swap7\n        /* \"--CODEGEN--\":9244:9466   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":9473:9695   */\n    tag_34:\n        /* \"--CODEGEN--\":6563:6600   */\n      swap1\n      dup2\n      mstore\n        /* \"--CODEGEN--\":9600:9602   */\n      0x20\n        /* \"--CODEGEN--\":9585:9603   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9571:9695   */\n      jump\t// out\n        /* \"--CODEGEN--\":9702:10146   */\n    tag_134:\n        /* \"--CODEGEN--\":6563:6600   */\n      swap3\n      dup4\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":13095:13149   */\n      swap2\n      dup3\n      and\n        /* \"--CODEGEN--\":10049:10051   */\n      0x20\n        /* \"--CODEGEN--\":10034:10052   */\n      dup5\n      add\n        /* \"--CODEGEN--\":5714:5751   */\n      mstore\n        /* \"--CODEGEN--\":13095:13149   */\n      and\n        /* \"--CODEGEN--\":10132:10134   */\n      0x40\n        /* \"--CODEGEN--\":10117:10135   */\n      dup3\n      add\n        /* \"--CODEGEN--\":5714:5751   */\n      mstore\n        /* \"--CODEGEN--\":9885:9887   */\n      0x60\n        /* \"--CODEGEN--\":9870:9888   */\n      add\n      swap1\n        /* \"--CODEGEN--\":9856:10146   */\n      jump\t// out\n        /* \"--CODEGEN--\":10910:11166   */\n    tag_174:\n        /* \"--CODEGEN--\":10972:10974   */\n      0x40\n        /* \"--CODEGEN--\":10966:10975   */\n      mload\n        /* \"--CODEGEN--\":10998:11015   */\n      dup2\n      dup2\n      add\n        /* \"--CODEGEN--\":11073:11091   */\n      0xffffffffffffffff\n        /* \"--CODEGEN--\":11058:11092   */\n      dup2\n      gt\n        /* \"--CODEGEN--\":11094:11116   */\n      dup3\n      dup3\n      lt\n        /* \"--CODEGEN--\":11055:11117   */\n      or\n        /* \"--CODEGEN--\":11052:11054   */\n      iszero\n      tag_214\n      jumpi\n        /* \"--CODEGEN--\":11130:11131   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":11120:11132   */\n      revert\n        /* \"--CODEGEN--\":11052:11054   */\n    tag_214:\n        /* \"--CODEGEN--\":10972:10974   */\n      0x40\n        /* \"--CODEGEN--\":11139:11161   */\n      mstore\n        /* \"--CODEGEN--\":10950:11166   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"--CODEGEN--\":14269:14386   */\n    tag_160:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"--CODEGEN--\":14356:14361   */\n      dup2\n        /* \"--CODEGEN--\":13095:13149   */\n      and\n        /* \"--CODEGEN--\":14331:14336   */\n      dup2\n        /* \"--CODEGEN--\":14328:14363   */\n      eq\n        /* \"--CODEGEN--\":14318:14320   */\n      tag_108\n      jumpi\n        /* \"--CODEGEN--\":14377:14378   */\n      0x00\n      dup1\n        /* \"--CODEGEN--\":14367:14379   */\n      revert\n\n    auxdata: 0xa26469706673582212207c4ff4bf6dc4ad7b87f81021af046283dcd8a1b585ef0a21ac5693fc52d8d0a064736f6c63430007010033\n}\n","legacyAssembly":{".code":[{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"C0"},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"40"},{"begin":1494,"end":4902,"name":"MSTORE","source":9},{"begin":2533,"end":2785,"name":"CALLVALUE","source":9},{"begin":2533,"end":2785,"name":"DUP1","source":9},{"begin":2533,"end":2785,"name":"ISZERO","source":9},{"begin":2533,"end":2785,"name":"PUSH [tag]","source":9,"value":"1"},{"begin":2533,"end":2785,"name":"JUMPI","source":9},{"begin":2533,"end":2785,"name":"PUSH","source":9,"value":"0"},{"begin":2533,"end":2785,"name":"DUP1","source":9},{"begin":2533,"end":2785,"name":"REVERT","source":9},{"begin":2533,"end":2785,"name":"tag","source":9,"value":"1"},{"begin":2533,"end":2785,"name":"JUMPDEST","source":9},{"begin":2533,"end":2785,"name":"POP","source":9},{"begin":2533,"end":2785,"name":"PUSH","source":9,"value":"40"},{"begin":2533,"end":2785,"name":"MLOAD","source":9},{"begin":2533,"end":2785,"name":"PUSHSIZE","source":9},{"begin":2533,"end":2785,"name":"CODESIZE","source":9},{"begin":2533,"end":2785,"name":"SUB","source":9},{"begin":2533,"end":2785,"name":"DUP1","source":9},{"begin":2533,"end":2785,"name":"PUSHSIZE","source":9},{"begin":2533,"end":2785,"name":"DUP4","source":9},{"begin":2533,"end":2785,"name":"CODECOPY","source":9},{"begin":2533,"end":2785,"name":"DUP2","source":9},{"begin":2533,"end":2785,"name":"ADD","source":9},{"begin":2533,"end":2785,"name":"PUSH","source":9,"value":"40"},{"begin":2533,"end":2785,"name":"DUP2","source":9},{"begin":2533,"end":2785,"name":"SWAP1","source":9},{"begin":2533,"end":2785,"name":"MSTORE","source":9},{"begin":2533,"end":2785,"name":"PUSH [tag]","source":9,"value":"2"},{"begin":2533,"end":2785,"name":"SWAP2","source":9},{"begin":2533,"end":2785,"name":"PUSH [tag]","source":9,"value":"3"},{"begin":2533,"end":2785,"name":"JUMP","source":9,"value":"[in]"},{"begin":2533,"end":2785,"name":"tag","source":9,"value":"2"},{"begin":2533,"end":2785,"name":"JUMPDEST","source":9},{"begin":2741,"end":2745,"name":"ADDRESS","source":9},{"begin":1929,"end":1975,"name":"PUSH","source":0,"value":"80"},{"begin":1929,"end":1975,"name":"MSTORE","source":0},{"begin":2019,"end":2020,"name":"PUSH","source":7,"value":"1"},{"begin":2717,"end":2748,"name":"PUSH","source":9,"value":"0"},{"begin":2124,"end":2146,"name":"SSTORE","source":7},{"begin":2764,"end":2778,"name":"PUSH","source":9,"value":"60"},{"begin":2764,"end":2778,"name":"SHL","source":9},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"60"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":-1,"end":-1,"name":"NOT","source":-1},{"begin":2764,"end":2778,"name":"AND","source":9},{"begin":2764,"end":2778,"name":"PUSH","source":9,"value":"A0"},{"begin":2764,"end":2778,"name":"MSTORE","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"11"},{"begin":1494,"end":4902,"name":"JUMP","source":9},{"begin":176,"end":469,"name":"tag","source":-1,"value":"3"},{"begin":176,"end":469,"name":"JUMPDEST","source":-1},{"begin":176,"end":469,"name":"PUSH","source":-1,"value":"0"},{"begin":306,"end":308,"name":"PUSH","source":-1,"value":"20"},{"begin":294,"end":303,"name":"DUP3","source":-1},{"begin":285,"end":292,"name":"DUP5","source":-1},{"begin":281,"end":304,"name":"SUB","source":-1},{"begin":277,"end":309,"name":"SLT","source":-1},{"begin":274,"end":276,"name":"ISZERO","source":-1},{"begin":274,"end":276,"name":"PUSH [tag]","source":-1,"value":"13"},{"begin":274,"end":276,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":312,"end":324,"name":"REVERT","source":-1},{"begin":274,"end":276,"name":"tag","source":-1,"value":"13"},{"begin":274,"end":276,"name":"JUMPDEST","source":-1},{"begin":98,"end":111,"name":"DUP2","source":-1},{"begin":98,"end":111,"name":"MLOAD","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":749,"end":803,"name":"DUP2","source":-1},{"begin":749,"end":803,"name":"AND","source":-1},{"begin":889,"end":939,"name":"DUP2","source":-1},{"begin":889,"end":939,"name":"EQ","source":-1},{"begin":879,"end":881,"name":"PUSH [tag]","source":-1,"value":"14"},{"begin":879,"end":881,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":943,"end":955,"name":"REVERT","source":-1},{"begin":879,"end":881,"name":"tag","source":-1,"value":"14"},{"begin":879,"end":881,"name":"JUMPDEST","source":-1},{"begin":364,"end":453,"name":"SWAP4","source":-1},{"begin":268,"end":469,"name":"SWAP3","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":268,"end":469,"name":"JUMP","source":-1,"value":"[out]"},{"begin":268,"end":469,"name":"tag","source":-1,"value":"11"},{"begin":268,"end":469,"name":"JUMPDEST","source":-1},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"80"},{"begin":1494,"end":4902,"name":"MLOAD","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"A0"},{"begin":1494,"end":4902,"name":"MLOAD","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"60"},{"begin":1494,"end":4902,"name":"SHR","source":9},{"begin":1494,"end":4902,"name":"PUSH #[$]","source":9,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1494,"end":4902,"name":"PUSH [$]","source":9,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"0"},{"begin":1494,"end":4902,"name":"CODECOPY","source":9},{"begin":1494,"end":4902,"name":"ASSIGNIMMUTABLE","source":9,"value":"837"},{"begin":1494,"end":4902,"name":"ASSIGNIMMUTABLE","source":9,"value":"8"},{"begin":1494,"end":4902,"name":"PUSH #[$]","source":9,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"0"},{"begin":1494,"end":4902,"name":"RETURN","source":9}],".data":{"0":{".auxdata":"a26469706673582212207c4ff4bf6dc4ad7b87f81021af046283dcd8a1b585ef0a21ac5693fc52d8d0a064736f6c63430007010033",".code":[{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"80"},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"40"},{"begin":1494,"end":4902,"name":"MSTORE","source":9},{"begin":1494,"end":4902,"name":"CALLVALUE","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"ISZERO","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"1"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"0"},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"REVERT","source":9},{"begin":1494,"end":4902,"name":"tag","source":9,"value":"1"},{"begin":1494,"end":4902,"name":"JUMPDEST","source":9},{"begin":1494,"end":4902,"name":"POP","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"4"},{"begin":1494,"end":4902,"name":"CALLDATASIZE","source":9},{"begin":1494,"end":4902,"name":"LT","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"2"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"0"},{"begin":1494,"end":4902,"name":"CALLDATALOAD","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"E0"},{"begin":1494,"end":4902,"name":"SHR","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"851C1BB3"},{"begin":1494,"end":4902,"name":"GT","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"12"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"D877845C"},{"begin":1494,"end":4902,"name":"GT","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"13"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"D877845C"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"9"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"E42ABF35"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"10"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"FBFA77CF"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"11"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"2"},{"begin":1494,"end":4902,"name":"JUMP","source":9},{"begin":1494,"end":4902,"name":"tag","source":9,"value":"13"},{"begin":1494,"end":4902,"name":"JUMPDEST","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"851C1BB3"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"7"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"AAABADC5"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"8"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"2"},{"begin":1494,"end":4902,"name":"JUMP","source":9},{"begin":1494,"end":4902,"name":"tag","source":9,"value":"12"},{"begin":1494,"end":4902,"name":"JUMPDEST","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"38E9922E"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"3"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"55C67628"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"4"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"6B6B9F69"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"5"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"6DAEFAB6"},{"begin":1494,"end":4902,"name":"EQ","source":9},{"begin":1494,"end":4902,"name":"PUSH [tag]","source":9,"value":"6"},{"begin":1494,"end":4902,"name":"JUMPI","source":9},{"begin":1494,"end":4902,"name":"tag","source":9,"value":"2"},{"begin":1494,"end":4902,"name":"JUMPDEST","source":9},{"begin":1494,"end":4902,"name":"PUSH","source":9,"value":"0"},{"begin":1494,"end":4902,"name":"DUP1","source":9},{"begin":1494,"end":4902,"name":"REVERT","source":9},{"begin":3244,"end":3559,"name":"tag","source":9,"value":"3"},{"begin":3244,"end":3559,"name":"JUMPDEST","source":9},{"begin":3244,"end":3559,"name":"PUSH [tag]","source":9,"value":"14"},{"begin":3244,"end":3559,"name":"PUSH [tag]","source":9,"value":"15"},{"begin":3244,"end":3559,"name":"CALLDATASIZE","source":9},{"begin":3244,"end":3559,"name":"PUSH","source":9,"value":"4"},{"begin":3244,"end":3559,"name":"PUSH [tag]","source":9,"value":"16"},{"begin":3244,"end":3559,"name":"JUMP","source":9,"value":"[in]"},{"begin":3244,"end":3559,"name":"tag","source":9,"value":"15"},{"begin":3244,"end":3559,"name":"JUMPDEST","source":9},{"begin":3244,"end":3559,"name":"PUSH [tag]","source":9,"value":"17"},{"begin":3244,"end":3559,"name":"JUMP","source":9,"value":"[in]"},{"begin":3244,"end":3559,"name":"tag","source":9,"value":"14"},{"begin":3244,"end":3559,"name":"JUMPDEST","source":9},{"begin":3244,"end":3559,"name":"STOP","source":9},{"begin":3967,"end":4073,"name":"tag","source":9,"value":"4"},{"begin":3967,"end":4073,"name":"JUMPDEST","source":9},{"begin":3967,"end":4073,"name":"PUSH [tag]","source":9,"value":"18"},{"begin":3967,"end":4073,"name":"PUSH [tag]","source":9,"value":"19"},{"begin":3967,"end":4073,"name":"JUMP","source":9,"value":"[in]"},{"begin":3967,"end":4073,"name":"tag","source":9,"value":"18"},{"begin":3967,"end":4073,"name":"JUMPDEST","source":9},{"begin":3967,"end":4073,"name":"PUSH","source":9,"value":"40"},{"begin":3967,"end":4073,"name":"MLOAD","source":9},{"begin":3967,"end":4073,"name":"PUSH [tag]","source":9,"value":"20"},{"begin":3967,"end":4073,"name":"SWAP2","source":9},{"begin":3967,"end":4073,"name":"SWAP1","source":9},{"begin":3967,"end":4073,"name":"PUSH [tag]","source":9,"value":"34"},{"begin":3967,"end":4073,"name":"JUMP","source":9,"value":"[in]"},{"begin":3967,"end":4073,"name":"tag","source":9,"value":"20"},{"begin":3967,"end":4073,"name":"JUMPDEST","source":9},{"begin":3967,"end":4073,"name":"PUSH","source":9,"value":"40"},{"begin":3967,"end":4073,"name":"MLOAD","source":9},{"begin":3967,"end":4073,"name":"DUP1","source":9},{"begin":3967,"end":4073,"name":"SWAP2","source":9},{"begin":3967,"end":4073,"name":"SUB","source":9},{"begin":3967,"end":4073,"name":"SWAP1","source":9},{"begin":3967,"end":4073,"name":"RETURN","source":9},{"begin":3565,"end":3961,"name":"tag","source":9,"value":"5"},{"begin":3565,"end":3961,"name":"JUMPDEST","source":9},{"begin":3565,"end":3961,"name":"PUSH [tag]","source":9,"value":"14"},{"begin":3565,"end":3961,"name":"PUSH [tag]","source":9,"value":"23"},{"begin":3565,"end":3961,"name":"CALLDATASIZE","source":9},{"begin":3565,"end":3961,"name":"PUSH","source":9,"value":"4"},{"begin":3565,"end":3961,"name":"PUSH [tag]","source":9,"value":"16"},{"begin":3565,"end":3961,"name":"JUMP","source":9,"value":"[in]"},{"begin":3565,"end":3961,"name":"tag","source":9,"value":"23"},{"begin":3565,"end":3961,"name":"JUMPDEST","source":9},{"begin":3565,"end":3961,"name":"PUSH [tag]","source":9,"value":"24"},{"begin":3565,"end":3961,"name":"JUMP","source":9,"value":"[in]"},{"begin":2791,"end":3238,"name":"tag","source":9,"value":"6"},{"begin":2791,"end":3238,"name":"JUMPDEST","source":9},{"begin":2791,"end":3238,"name":"PUSH [tag]","source":9,"value":"14"},{"begin":2791,"end":3238,"name":"PUSH [tag]","source":9,"value":"26"},{"begin":2791,"end":3238,"name":"CALLDATASIZE","source":9},{"begin":2791,"end":3238,"name":"PUSH","source":9,"value":"4"},{"begin":2791,"end":3238,"name":"PUSH [tag]","source":9,"value":"27"},{"begin":2791,"end":3238,"name":"JUMP","source":9,"value":"[in]"},{"begin":2791,"end":3238,"name":"tag","source":9,"value":"26"},{"begin":2791,"end":3238,"name":"JUMPDEST","source":9},{"begin":2791,"end":3238,"name":"PUSH [tag]","source":9,"value":"28"},{"begin":2791,"end":3238,"name":"JUMP","source":9,"value":"[in]"},{"begin":2487,"end":2917,"name":"tag","source":0,"value":"7"},{"begin":2487,"end":2917,"name":"JUMPDEST","source":0},{"begin":2487,"end":2917,"name":"PUSH [tag]","source":0,"value":"18"},{"begin":2487,"end":2917,"name":"PUSH [tag]","source":0,"value":"30"},{"begin":2487,"end":2917,"name":"CALLDATASIZE","source":0},{"begin":2487,"end":2917,"name":"PUSH","source":0,"value":"4"},{"begin":2487,"end":2917,"name":"PUSH [tag]","source":0,"value":"31"},{"begin":2487,"end":2917,"name":"JUMP","source":0,"value":"[in]"},{"begin":2487,"end":2917,"name":"tag","source":0,"value":"30"},{"begin":2487,"end":2917,"name":"JUMPDEST","source":0},{"begin":2487,"end":2917,"name":"PUSH [tag]","source":0,"value":"32"},{"begin":2487,"end":2917,"name":"JUMP","source":0,"value":"[in]"},{"begin":4501,"end":4602,"name":"tag","source":9,"value":"8"},{"begin":4501,"end":4602,"name":"JUMPDEST","source":9},{"begin":4501,"end":4602,"name":"PUSH [tag]","source":9,"value":"35"},{"begin":4501,"end":4602,"name":"PUSH [tag]","source":9,"value":"36"},{"begin":4501,"end":4602,"name":"JUMP","source":9,"value":"[in]"},{"begin":4501,"end":4602,"name":"tag","source":9,"value":"35"},{"begin":4501,"end":4602,"name":"JUMPDEST","source":9},{"begin":4501,"end":4602,"name":"PUSH","source":9,"value":"40"},{"begin":4501,"end":4602,"name":"MLOAD","source":9},{"begin":4501,"end":4602,"name":"PUSH [tag]","source":9,"value":"20"},{"begin":4501,"end":4602,"name":"SWAP2","source":9},{"begin":4501,"end":4602,"name":"SWAP1","source":9},{"begin":4501,"end":4602,"name":"PUSH [tag]","source":9,"value":"99"},{"begin":4501,"end":4602,"name":"JUMP","source":9,"value":"[in]"},{"begin":4079,"end":4195,"name":"tag","source":9,"value":"9"},{"begin":4079,"end":4195,"name":"JUMPDEST","source":9},{"begin":4079,"end":4195,"name":"PUSH [tag]","source":9,"value":"18"},{"begin":4079,"end":4195,"name":"PUSH [tag]","source":9,"value":"40"},{"begin":4079,"end":4195,"name":"JUMP","source":9,"value":"[in]"},{"begin":4201,"end":4495,"name":"tag","source":9,"value":"10"},{"begin":4201,"end":4495,"name":"JUMPDEST","source":9},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"42"},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"43"},{"begin":4201,"end":4495,"name":"CALLDATASIZE","source":9},{"begin":4201,"end":4495,"name":"PUSH","source":9,"value":"4"},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"44"},{"begin":4201,"end":4495,"name":"JUMP","source":9,"value":"[in]"},{"begin":4201,"end":4495,"name":"tag","source":9,"value":"43"},{"begin":4201,"end":4495,"name":"JUMPDEST","source":9},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"45"},{"begin":4201,"end":4495,"name":"JUMP","source":9,"value":"[in]"},{"begin":4201,"end":4495,"name":"tag","source":9,"value":"42"},{"begin":4201,"end":4495,"name":"JUMPDEST","source":9},{"begin":4201,"end":4495,"name":"PUSH","source":9,"value":"40"},{"begin":4201,"end":4495,"name":"MLOAD","source":9},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"20"},{"begin":4201,"end":4495,"name":"SWAP2","source":9},{"begin":4201,"end":4495,"name":"SWAP1","source":9},{"begin":4201,"end":4495,"name":"PUSH [tag]","source":9,"value":"47"},{"begin":4201,"end":4495,"name":"JUMP","source":9,"value":"[in]"},{"begin":1828,"end":1857,"name":"tag","source":9,"value":"11"},{"begin":1828,"end":1857,"name":"JUMPDEST","source":9},{"begin":1828,"end":1857,"name":"PUSH [tag]","source":9,"value":"35"},{"begin":1828,"end":1857,"name":"PUSH [tag]","source":9,"value":"49"},{"begin":1828,"end":1857,"name":"JUMP","source":9,"value":"[in]"},{"begin":3244,"end":3559,"name":"tag","source":9,"value":"17"},{"begin":3244,"end":3559,"name":"JUMPDEST","source":9},{"begin":2156,"end":2177,"name":"PUSH [tag]","source":0,"value":"53"},{"begin":2156,"end":2175,"name":"PUSH [tag]","source":0,"value":"54"},{"begin":2156,"end":2177,"name":"JUMP","source":0,"value":"[in]"},{"begin":2156,"end":2177,"name":"tag","source":0,"value":"53"},{"begin":2156,"end":2177,"name":"JUMPDEST","source":0},{"begin":3336,"end":3440,"name":"PUSH [tag]","source":9,"value":"56"},{"begin":1726,"end":1731,"name":"PUSH","source":9,"value":"6F05B59D3B20000"},{"begin":3345,"end":3365,"name":"DUP3","source":9},{"begin":3345,"end":3402,"name":"GT","source":9},{"begin":3345,"end":3402,"name":"ISZERO","source":9},{"begin":9987,"end":9990,"name":"PUSH","source":1,"value":"258"},{"begin":3336,"end":3344,"name":"PUSH [tag]","source":9,"value":"57"},{"begin":3336,"end":3440,"name":"JUMP","source":9,"value":"[in]"},{"begin":3336,"end":3440,"name":"tag","source":9,"value":"56"},{"begin":3336,"end":3440,"name":"JUMPDEST","source":9},{"begin":3450,"end":3468,"name":"PUSH","source":9,"value":"1"},{"begin":3450,"end":3491,"name":"DUP2","source":9},{"begin":3450,"end":3491,"name":"SWAP1","source":9},{"begin":3450,"end":3491,"name":"SSTORE","source":9},{"begin":3506,"end":3552,"name":"PUSH","source":9,"value":"40"},{"begin":3506,"end":3552,"name":"MLOAD","source":9},{"begin":3506,"end":3552,"name":"PUSH","source":9,"value":"A9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC"},{"begin":3506,"end":3552,"name":"SWAP1","source":9},{"begin":3506,"end":3552,"name":"PUSH [tag]","source":9,"value":"58"},{"begin":3506,"end":3552,"name":"SWAP1","source":9},{"begin":3471,"end":3491,"name":"DUP4","source":9},{"begin":3471,"end":3491,"name":"SWAP1","source":9},{"begin":3506,"end":3552,"name":"PUSH [tag]","source":9,"value":"34"},{"begin":3506,"end":3552,"name":"JUMP","source":9,"value":"[in]"},{"begin":3506,"end":3552,"name":"tag","source":9,"value":"58"},{"begin":3506,"end":3552,"name":"JUMPDEST","source":9},{"begin":3506,"end":3552,"name":"PUSH","source":9,"value":"40"},{"begin":3506,"end":3552,"name":"MLOAD","source":9},{"begin":3506,"end":3552,"name":"DUP1","source":9},{"begin":3506,"end":3552,"name":"SWAP2","source":9},{"begin":3506,"end":3552,"name":"SUB","source":9},{"begin":3506,"end":3552,"name":"SWAP1","source":9},{"begin":3506,"end":3552,"name":"LOG1","source":9},{"begin":3244,"end":3559,"name":"POP","source":9},{"begin":3244,"end":3559,"name":"JUMP","source":9,"value":"[out]"},{"begin":3967,"end":4073,"name":"tag","source":9,"value":"19"},{"begin":3967,"end":4073,"name":"JUMPDEST","source":9},{"begin":4048,"end":4066,"name":"PUSH","source":9,"value":"1"},{"begin":4048,"end":4066,"name":"SLOAD","source":9},{"begin":3967,"end":4073,"name":"SWAP1","source":9},{"begin":3967,"end":4073,"name":"JUMP","source":9,"value":"[out]"},{"begin":3565,"end":3961,"name":"tag","source":9,"value":"24"},{"begin":3565,"end":3961,"name":"JUMPDEST","source":9},{"begin":2156,"end":2177,"name":"PUSH [tag]","source":0,"value":"61"},{"begin":2156,"end":2175,"name":"PUSH [tag]","source":0,"value":"54"},{"begin":2156,"end":2177,"name":"JUMP","source":0,"value":"[in]"},{"begin":2156,"end":2177,"name":"tag","source":0,"value":"61"},{"begin":2156,"end":2177,"name":"JUMPDEST","source":0},{"begin":3667,"end":3822,"name":"PUSH [tag]","source":9,"value":"63"},{"begin":1811,"end":1815,"name":"PUSH","source":9,"value":"2386F26FC10000"},{"begin":3689,"end":3714,"name":"DUP3","source":9},{"begin":3689,"end":3757,"name":"GT","source":9},{"begin":3689,"end":3757,"name":"ISZERO","source":9},{"begin":10059,"end":10062,"name":"PUSH","source":1,"value":"259"},{"begin":3667,"end":3675,"name":"PUSH [tag]","source":9,"value":"57"},{"begin":3667,"end":3822,"name":"JUMP","source":9,"value":"[in]"},{"begin":3667,"end":3822,"name":"tag","source":9,"value":"63"},{"begin":3667,"end":3822,"name":"JUMPDEST","source":9},{"begin":3832,"end":3855,"name":"PUSH","source":9,"value":"2"},{"begin":3832,"end":3883,"name":"DUP2","source":9},{"begin":3832,"end":3883,"name":"SWAP1","source":9},{"begin":3832,"end":3883,"name":"SSTORE","source":9},{"begin":3898,"end":3954,"name":"PUSH","source":9,"value":"40"},{"begin":3898,"end":3954,"name":"MLOAD","source":9},{"begin":3898,"end":3954,"name":"PUSH","source":9,"value":"5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A"},{"begin":3898,"end":3954,"name":"SWAP1","source":9},{"begin":3898,"end":3954,"name":"PUSH [tag]","source":9,"value":"58"},{"begin":3898,"end":3954,"name":"SWAP1","source":9},{"begin":3858,"end":3883,"name":"DUP4","source":9},{"begin":3858,"end":3883,"name":"SWAP1","source":9},{"begin":3898,"end":3954,"name":"PUSH [tag]","source":9,"value":"34"},{"begin":3898,"end":3954,"name":"JUMP","source":9,"value":"[in]"},{"begin":2791,"end":3238,"name":"tag","source":9,"value":"28"},{"begin":2791,"end":3238,"name":"JUMPDEST","source":9},{"begin":2562,"end":2582,"name":"PUSH [tag]","source":7,"value":"66"},{"begin":2562,"end":2580,"name":"PUSH [tag]","source":7,"value":"67"},{"begin":2562,"end":2582,"name":"JUMP","source":7,"value":"[in]"},{"begin":2562,"end":2582,"name":"tag","source":7,"value":"66"},{"begin":2562,"end":2582,"name":"JUMPDEST","source":7},{"begin":2156,"end":2177,"name":"PUSH [tag]","source":0,"value":"69"},{"begin":2156,"end":2175,"name":"PUSH [tag]","source":0,"value":"54"},{"begin":2156,"end":2177,"name":"JUMP","source":0,"value":"[in]"},{"begin":2156,"end":2177,"name":"tag","source":0,"value":"69"},{"begin":2156,"end":2177,"name":"JUMPDEST","source":0},{"begin":2970,"end":3036,"name":"PUSH [tag]","source":9,"value":"71"},{"begin":3006,"end":3012,"name":"DUP5","source":9},{"begin":3021,"end":3028,"name":"DUP4","source":9},{"begin":2970,"end":3005,"name":"PUSH [tag]","source":9,"value":"72"},{"begin":2970,"end":3036,"name":"JUMP","source":9,"value":"[in]"},{"begin":2970,"end":3036,"name":"tag","source":9,"value":"71"},{"begin":2970,"end":3036,"name":"JUMPDEST","source":9},{"begin":3052,"end":3061,"name":"PUSH","source":9,"value":"0"},{"begin":3047,"end":3232,"name":"tag","source":9,"value":"73"},{"begin":3047,"end":3232,"name":"JUMPDEST","source":9},{"begin":3067,"end":3084,"name":"DUP5","source":9},{"begin":3067,"end":3084,"name":"DUP2","source":9},{"begin":3067,"end":3084,"name":"LT","source":9},{"begin":3047,"end":3232,"name":"ISZERO","source":9},{"begin":3047,"end":3232,"name":"PUSH [tag]","source":9,"value":"74"},{"begin":3047,"end":3232,"name":"JUMPI","source":9},{"begin":3105,"end":3117,"name":"PUSH","source":9,"value":"0"},{"begin":3120,"end":3126,"name":"DUP7","source":9},{"begin":3120,"end":3126,"name":"DUP7","source":9},{"begin":3127,"end":3128,"name":"DUP4","source":9},{"begin":3120,"end":3129,"name":"DUP2","source":9},{"begin":3120,"end":3129,"name":"DUP2","source":9},{"begin":3120,"end":3129,"name":"LT","source":9},{"begin":3120,"end":3129,"name":"PUSH [tag]","source":9,"value":"76"},{"begin":3120,"end":3129,"name":"JUMPI","source":9},{"begin":3120,"end":3129,"name":"INVALID","source":9},{"begin":3120,"end":3129,"name":"tag","source":9,"value":"76"},{"begin":3120,"end":3129,"name":"JUMPDEST","source":9},{"begin":3120,"end":3129,"name":"SWAP1","source":9},{"begin":3120,"end":3129,"name":"POP","source":9},{"begin":3120,"end":3129,"name":"PUSH","source":9,"value":"20"},{"begin":3120,"end":3129,"name":"MUL","source":9},{"begin":3120,"end":3129,"name":"ADD","source":9},{"begin":3120,"end":3129,"name":"PUSH","source":9,"value":"20"},{"begin":3120,"end":3129,"name":"DUP2","source":9},{"begin":3120,"end":3129,"name":"ADD","source":9},{"begin":3120,"end":3129,"name":"SWAP1","source":9},{"begin":3120,"end":3129,"name":"PUSH [tag]","source":9,"value":"77"},{"begin":3120,"end":3129,"name":"SWAP2","source":9},{"begin":3120,"end":3129,"name":"SWAP1","source":9},{"begin":3120,"end":3129,"name":"PUSH [tag]","source":9,"value":"78"},{"begin":3120,"end":3129,"name":"JUMP","source":9,"value":"[in]"},{"begin":3120,"end":3129,"name":"tag","source":9,"value":"77"},{"begin":3120,"end":3129,"name":"JUMPDEST","source":9},{"begin":3105,"end":3129,"name":"SWAP1","source":9},{"begin":3105,"end":3129,"name":"POP","source":9},{"begin":3143,"end":3157,"name":"PUSH","source":9,"value":"0"},{"begin":3160,"end":3167,"name":"DUP6","source":9},{"begin":3160,"end":3167,"name":"DUP6","source":9},{"begin":3168,"end":3169,"name":"DUP5","source":9},{"begin":3160,"end":3170,"name":"DUP2","source":9},{"begin":3160,"end":3170,"name":"DUP2","source":9},{"begin":3160,"end":3170,"name":"LT","source":9},{"begin":3160,"end":3170,"name":"PUSH [tag]","source":9,"value":"79"},{"begin":3160,"end":3170,"name":"JUMPI","source":9},{"begin":3160,"end":3170,"name":"INVALID","source":9},{"begin":3160,"end":3170,"name":"tag","source":9,"value":"79"},{"begin":3160,"end":3170,"name":"JUMPDEST","source":9},{"begin":3160,"end":3170,"name":"PUSH","source":9,"value":"20"},{"begin":3160,"end":3170,"name":"MUL","source":9},{"begin":3160,"end":3170,"name":"SWAP2","source":9},{"begin":3160,"end":3170,"name":"SWAP1","source":9},{"begin":3160,"end":3170,"name":"SWAP2","source":9},{"begin":3160,"end":3170,"name":"ADD","source":9},{"begin":3160,"end":3170,"name":"CALLDATALOAD","source":9},{"begin":3160,"end":3170,"name":"SWAP2","source":9},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3184,"end":3221,"name":"PUSH [tag]","source":9,"value":"80"},{"begin":3184,"end":3221,"name":"SWAP1","source":9},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":3184,"end":3202,"name":"DUP4","source":9},{"begin":3184,"end":3202,"name":"AND","source":9},{"begin":3203,"end":3212,"name":"DUP6","source":9},{"begin":3160,"end":3170,"name":"DUP4","source":9},{"begin":3184,"end":3202,"name":"PUSH [tag]","source":9,"value":"81"},{"begin":3184,"end":3221,"name":"JUMP","source":9,"value":"[in]"},{"begin":3184,"end":3221,"name":"tag","source":9,"value":"80"},{"begin":3184,"end":3221,"name":"JUMPDEST","source":9},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3086,"end":3089,"name":"PUSH","source":9,"value":"1"},{"begin":3086,"end":3089,"name":"ADD","source":9},{"begin":3047,"end":3232,"name":"PUSH [tag]","source":9,"value":"73"},{"begin":3047,"end":3232,"name":"JUMP","source":9},{"begin":3047,"end":3232,"name":"tag","source":9,"value":"74"},{"begin":3047,"end":3232,"name":"JUMPDEST","source":9},{"begin":3047,"end":3232,"name":"POP","source":9},{"begin":2603,"end":2622,"name":"PUSH [tag]","source":7,"value":"82"},{"begin":2603,"end":2620,"name":"PUSH [tag]","source":7,"value":"83"},{"begin":2603,"end":2622,"name":"JUMP","source":7,"value":"[in]"},{"begin":2603,"end":2622,"name":"tag","source":7,"value":"82"},{"begin":2603,"end":2622,"name":"JUMPDEST","source":7},{"begin":2791,"end":3238,"name":"POP","source":9},{"begin":2791,"end":3238,"name":"POP","source":9},{"begin":2791,"end":3238,"name":"POP","source":9},{"begin":2791,"end":3238,"name":"POP","source":9},{"begin":2791,"end":3238,"name":"POP","source":9},{"begin":2791,"end":3238,"name":"JUMP","source":9,"value":"[out]"},{"begin":2487,"end":2917,"name":"tag","source":0,"value":"32"},{"begin":2487,"end":2917,"name":"JUMPDEST","source":0},{"begin":2555,"end":2562,"name":"PUSH","source":0,"value":"0"},{"begin":2876,"end":2898,"name":"PUSHIMMUTABLE","source":0,"value":"8"},{"begin":2900,"end":2908,"name":"DUP3","source":0},{"begin":2859,"end":2909,"name":"PUSH","source":0,"value":"40"},{"begin":2859,"end":2909,"name":"MLOAD","source":0},{"begin":2859,"end":2909,"name":"PUSH","source":0,"value":"20"},{"begin":2859,"end":2909,"name":"ADD","source":0},{"begin":2859,"end":2909,"name":"PUSH [tag]","source":0,"value":"85"},{"begin":2859,"end":2909,"name":"SWAP3","source":0},{"begin":2859,"end":2909,"name":"SWAP2","source":0},{"begin":2859,"end":2909,"name":"SWAP1","source":0},{"begin":2859,"end":2909,"name":"PUSH [tag]","source":0,"value":"86"},{"begin":2859,"end":2909,"name":"JUMP","source":0,"value":"[in]"},{"begin":2859,"end":2909,"name":"tag","source":0,"value":"85"},{"begin":2859,"end":2909,"name":"JUMPDEST","source":0},{"begin":2859,"end":2909,"name":"PUSH","source":0,"value":"40"},{"begin":2859,"end":2909,"name":"MLOAD","source":0},{"begin":2859,"end":2909,"name":"PUSH","source":0,"value":"20"},{"begin":2859,"end":2909,"name":"DUP2","source":0},{"begin":2859,"end":2909,"name":"DUP4","source":0},{"begin":2859,"end":2909,"name":"SUB","source":0},{"begin":2859,"end":2909,"name":"SUB","source":0},{"begin":2859,"end":2909,"name":"DUP2","source":0},{"begin":2859,"end":2909,"name":"MSTORE","source":0},{"begin":2859,"end":2909,"name":"SWAP1","source":0},{"begin":2859,"end":2909,"name":"PUSH","source":0,"value":"40"},{"begin":2859,"end":2909,"name":"MSTORE","source":0},{"begin":2849,"end":2910,"name":"DUP1","source":0},{"begin":2849,"end":2910,"name":"MLOAD","source":0},{"begin":2849,"end":2910,"name":"SWAP1","source":0},{"begin":2849,"end":2910,"name":"PUSH","source":0,"value":"20"},{"begin":2849,"end":2910,"name":"ADD","source":0},{"begin":2849,"end":2910,"name":"KECCAK256","source":0},{"begin":2842,"end":2910,"name":"SWAP1","source":0},{"begin":2842,"end":2910,"name":"POP","source":0},{"begin":2487,"end":2917,"name":"SWAP2","source":0},{"begin":2487,"end":2917,"name":"SWAP1","source":0},{"begin":2487,"end":2917,"name":"POP","source":0},{"begin":2487,"end":2917,"name":"JUMP","source":0,"value":"[out]"},{"begin":4501,"end":4602,"name":"tag","source":9,"value":"36"},{"begin":4501,"end":4602,"name":"JUMPDEST","source":9},{"begin":4549,"end":4560,"name":"PUSH","source":9,"value":"0"},{"begin":4579,"end":4595,"name":"PUSH [tag]","source":9,"value":"88"},{"begin":4579,"end":4593,"name":"PUSH [tag]","source":9,"value":"89"},{"begin":4579,"end":4595,"name":"JUMP","source":9,"value":"[in]"},{"begin":4579,"end":4595,"name":"tag","source":9,"value":"88"},{"begin":4579,"end":4595,"name":"JUMPDEST","source":9},{"begin":4572,"end":4595,"name":"SWAP1","source":9},{"begin":4572,"end":4595,"name":"POP","source":9},{"begin":4501,"end":4602,"name":"SWAP1","source":9},{"begin":4501,"end":4602,"name":"JUMP","source":9,"value":"[out]"},{"begin":4079,"end":4195,"name":"tag","source":9,"value":"40"},{"begin":4079,"end":4195,"name":"JUMPDEST","source":9},{"begin":4165,"end":4188,"name":"PUSH","source":9,"value":"2"},{"begin":4165,"end":4188,"name":"SLOAD","source":9},{"begin":4079,"end":4195,"name":"SWAP1","source":9},{"begin":4079,"end":4195,"name":"JUMP","source":9,"value":"[out]"},{"begin":4201,"end":4495,"name":"tag","source":9,"value":"45"},{"begin":4201,"end":4495,"name":"JUMPDEST","source":9},{"begin":4280,"end":4307,"name":"PUSH","source":9,"value":"60"},{"begin":4346,"end":4352,"name":"DUP2","source":9},{"begin":4346,"end":4359,"name":"MLOAD","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"FFFFFFFFFFFFFFFF"},{"begin":4332,"end":4360,"name":"DUP2","source":9},{"begin":4332,"end":4360,"name":"GT","source":9},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"ISZERO","source":9},{"begin":4332,"end":4360,"name":"PUSH [tag]","source":9,"value":"92"},{"begin":4332,"end":4360,"name":"JUMPI","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"0"},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"REVERT","source":9},{"begin":4332,"end":4360,"name":"tag","source":9,"value":"92"},{"begin":4332,"end":4360,"name":"JUMPDEST","source":9},{"begin":4332,"end":4360,"name":"POP","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"40"},{"begin":4332,"end":4360,"name":"MLOAD","source":9},{"begin":4332,"end":4360,"name":"SWAP1","source":9},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"DUP3","source":9},{"begin":4332,"end":4360,"name":"MSTORE","source":9},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"20"},{"begin":4332,"end":4360,"name":"MUL","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"20"},{"begin":4332,"end":4360,"name":"ADD","source":9},{"begin":4332,"end":4360,"name":"DUP3","source":9},{"begin":4332,"end":4360,"name":"ADD","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"40"},{"begin":4332,"end":4360,"name":"MSTORE","source":9},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"ISZERO","source":9},{"begin":4332,"end":4360,"name":"PUSH [tag]","source":9,"value":"93"},{"begin":4332,"end":4360,"name":"JUMPI","source":9},{"begin":4332,"end":4360,"name":"DUP2","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"20"},{"begin":4332,"end":4360,"name":"ADD","source":9},{"begin":4332,"end":4360,"name":"PUSH","source":9,"value":"20"},{"begin":4332,"end":4360,"name":"DUP3","source":9},{"begin":4332,"end":4360,"name":"MUL","source":9},{"begin":4332,"end":4360,"name":"DUP1","source":9},{"begin":4332,"end":4360,"name":"CALLDATASIZE","source":9},{"begin":4332,"end":4360,"name":"DUP4","source":9},{"begin":4332,"end":4360,"name":"CALLDATACOPY","source":9},{"begin":4332,"end":4360,"name":"ADD","source":9},{"begin":4332,"end":4360,"name":"SWAP1","source":9},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":4332,"end":4360,"name":"tag","source":9,"value":"93"},{"begin":4332,"end":4360,"name":"JUMPDEST","source":9},{"begin":4332,"end":4360,"name":"POP","source":9},{"begin":4319,"end":4360,"name":"SWAP1","source":9},{"begin":4319,"end":4360,"name":"POP","source":9},{"begin":4375,"end":4384,"name":"PUSH","source":9,"value":"0"},{"begin":4370,"end":4489,"name":"tag","source":9,"value":"94"},{"begin":4370,"end":4489,"name":"JUMPDEST","source":9},{"begin":4394,"end":4400,"name":"DUP3","source":9},{"begin":4394,"end":4407,"name":"MLOAD","source":9},{"begin":4390,"end":4391,"name":"DUP2","source":9},{"begin":4390,"end":4407,"name":"LT","source":9},{"begin":4370,"end":4489,"name":"ISZERO","source":9},{"begin":4370,"end":4489,"name":"PUSH [tag]","source":9,"value":"95"},{"begin":4370,"end":4489,"name":"JUMPI","source":9},{"begin":4444,"end":4450,"name":"DUP3","source":9},{"begin":4451,"end":4452,"name":"DUP2","source":9},{"begin":4444,"end":4453,"name":"DUP2","source":9},{"begin":4444,"end":4453,"name":"MLOAD","source":9},{"begin":4444,"end":4453,"name":"DUP2","source":9},{"begin":4444,"end":4453,"name":"LT","source":9},{"begin":4444,"end":4453,"name":"PUSH [tag]","source":9,"value":"97"},{"begin":4444,"end":4453,"name":"JUMPI","source":9},{"begin":4444,"end":4453,"name":"INVALID","source":9},{"begin":4444,"end":4453,"name":"tag","source":9,"value":"97"},{"begin":4444,"end":4453,"name":"JUMPDEST","source":9},{"begin":4444,"end":4453,"name":"PUSH","source":9,"value":"20"},{"begin":4444,"end":4453,"name":"MUL","source":9},{"begin":4444,"end":4453,"name":"PUSH","source":9,"value":"20"},{"begin":4444,"end":4453,"name":"ADD","source":9},{"begin":4444,"end":4453,"name":"ADD","source":9},{"begin":4444,"end":4453,"name":"MLOAD","source":9},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":4444,"end":4463,"name":"AND","source":9},{"begin":4444,"end":4463,"name":"PUSH","source":9,"value":"70A08231"},{"begin":4472,"end":4476,"name":"ADDRESS","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"40"},{"begin":4444,"end":4478,"name":"MLOAD","source":9},{"begin":4444,"end":4478,"name":"DUP3","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"FFFFFFFF"},{"begin":4444,"end":4478,"name":"AND","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"E0"},{"begin":4444,"end":4478,"name":"SHL","source":9},{"begin":4444,"end":4478,"name":"DUP2","source":9},{"begin":4444,"end":4478,"name":"MSTORE","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"4"},{"begin":4444,"end":4478,"name":"ADD","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"98"},{"begin":4444,"end":4478,"name":"SWAP2","source":9},{"begin":4444,"end":4478,"name":"SWAP1","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"99"},{"begin":4444,"end":4478,"name":"JUMP","source":9,"value":"[in]"},{"begin":4444,"end":4478,"name":"tag","source":9,"value":"98"},{"begin":4444,"end":4478,"name":"JUMPDEST","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"20"},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"40"},{"begin":4444,"end":4478,"name":"MLOAD","source":9},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"DUP4","source":9},{"begin":4444,"end":4478,"name":"SUB","source":9},{"begin":4444,"end":4478,"name":"DUP2","source":9},{"begin":4444,"end":4478,"name":"DUP7","source":9},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"EXTCODESIZE","source":9},{"begin":4444,"end":4478,"name":"ISZERO","source":9},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"ISZERO","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"100"},{"begin":4444,"end":4478,"name":"JUMPI","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"0"},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"REVERT","source":9},{"begin":4444,"end":4478,"name":"tag","source":9,"value":"100"},{"begin":4444,"end":4478,"name":"JUMPDEST","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"GAS","source":9},{"begin":4444,"end":4478,"name":"STATICCALL","source":9},{"begin":4444,"end":4478,"name":"ISZERO","source":9},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"ISZERO","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"102"},{"begin":4444,"end":4478,"name":"JUMPI","source":9},{"begin":4444,"end":4478,"name":"RETURNDATASIZE","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"0"},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"RETURNDATACOPY","source":9},{"begin":4444,"end":4478,"name":"RETURNDATASIZE","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"0"},{"begin":4444,"end":4478,"name":"REVERT","source":9},{"begin":4444,"end":4478,"name":"tag","source":9,"value":"102"},{"begin":4444,"end":4478,"name":"JUMPDEST","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"40"},{"begin":4444,"end":4478,"name":"MLOAD","source":9},{"begin":4444,"end":4478,"name":"RETURNDATASIZE","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"1F"},{"begin":4444,"end":4478,"name":"NOT","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"1F"},{"begin":4444,"end":4478,"name":"DUP3","source":9},{"begin":4444,"end":4478,"name":"ADD","source":9},{"begin":4444,"end":4478,"name":"AND","source":9},{"begin":4444,"end":4478,"name":"DUP3","source":9},{"begin":4444,"end":4478,"name":"ADD","source":9},{"begin":4444,"end":4478,"name":"DUP1","source":9},{"begin":4444,"end":4478,"name":"PUSH","source":9,"value":"40"},{"begin":4444,"end":4478,"name":"MSTORE","source":9},{"begin":4444,"end":4478,"name":"POP","source":9},{"begin":4444,"end":4478,"name":"DUP2","source":9},{"begin":4444,"end":4478,"name":"ADD","source":9},{"begin":4444,"end":4478,"name":"SWAP1","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"103"},{"begin":4444,"end":4478,"name":"SWAP2","source":9},{"begin":4444,"end":4478,"name":"SWAP1","source":9},{"begin":4444,"end":4478,"name":"PUSH [tag]","source":9,"value":"104"},{"begin":4444,"end":4478,"name":"JUMP","source":9,"value":"[in]"},{"begin":4444,"end":4478,"name":"tag","source":9,"value":"103"},{"begin":4444,"end":4478,"name":"JUMPDEST","source":9},{"begin":4428,"end":4438,"name":"DUP3","source":9},{"begin":4439,"end":4440,"name":"DUP3","source":9},{"begin":4428,"end":4441,"name":"DUP2","source":9},{"begin":4428,"end":4441,"name":"MLOAD","source":9},{"begin":4428,"end":4441,"name":"DUP2","source":9},{"begin":4428,"end":4441,"name":"LT","source":9},{"begin":4428,"end":4441,"name":"PUSH [tag]","source":9,"value":"105"},{"begin":4428,"end":4441,"name":"JUMPI","source":9},{"begin":4428,"end":4441,"name":"INVALID","source":9},{"begin":4428,"end":4441,"name":"tag","source":9,"value":"105"},{"begin":4428,"end":4441,"name":"JUMPDEST","source":9},{"begin":4428,"end":4441,"name":"PUSH","source":9,"value":"20"},{"begin":4428,"end":4441,"name":"SWAP1","source":9},{"begin":4428,"end":4441,"name":"DUP2","source":9},{"begin":4428,"end":4441,"name":"MUL","source":9},{"begin":4428,"end":4441,"name":"SWAP2","source":9},{"begin":4428,"end":4441,"name":"SWAP1","source":9},{"begin":4428,"end":4441,"name":"SWAP2","source":9},{"begin":4428,"end":4441,"name":"ADD","source":9},{"begin":4428,"end":4441,"name":"ADD","source":9},{"begin":4428,"end":4478,"name":"MSTORE","source":9},{"begin":4409,"end":4412,"name":"PUSH","source":9,"value":"1"},{"begin":4409,"end":4412,"name":"ADD","source":9},{"begin":4370,"end":4489,"name":"PUSH [tag]","source":9,"value":"94"},{"begin":4370,"end":4489,"name":"JUMP","source":9},{"begin":4370,"end":4489,"name":"tag","source":9,"value":"95"},{"begin":4370,"end":4489,"name":"JUMPDEST","source":9},{"begin":4370,"end":4489,"name":"POP","source":9},{"begin":4201,"end":4495,"name":"SWAP2","source":9},{"begin":4201,"end":4495,"name":"SWAP1","source":9},{"begin":4201,"end":4495,"name":"POP","source":9},{"begin":4201,"end":4495,"name":"JUMP","source":9,"value":"[out]"},{"begin":1828,"end":1857,"name":"tag","source":9,"value":"49"},{"begin":1828,"end":1857,"name":"JUMPDEST","source":9},{"begin":1828,"end":1857,"name":"PUSHIMMUTABLE","source":9,"value":"837"},{"begin":1828,"end":1857,"name":"DUP2","source":9},{"begin":1828,"end":1857,"name":"JUMP","source":9,"value":"[out]"},{"begin":2300,"end":2481,"name":"tag","source":0,"value":"54"},{"begin":2300,"end":2481,"name":"JUMPDEST","source":0},{"begin":2355,"end":2371,"name":"PUSH","source":0,"value":"0"},{"begin":2374,"end":2394,"name":"PUSH [tag]","source":0,"value":"107"},{"begin":2386,"end":2393,"name":"PUSH","source":0,"value":"0"},{"begin":2386,"end":2393,"name":"CALLDATALOAD","source":0},{"begin":2386,"end":2393,"name":"PUSH","source":0,"value":"FFFFFFFF00000000000000000000000000000000000000000000000000000000"},{"begin":2386,"end":2393,"name":"AND","source":0},{"begin":2374,"end":2385,"name":"PUSH [tag]","source":0,"value":"32"},{"begin":2374,"end":2394,"name":"JUMP","source":0,"value":"[in]"},{"begin":2374,"end":2394,"name":"tag","source":0,"value":"107"},{"begin":2374,"end":2394,"name":"JUMPDEST","source":0},{"begin":2355,"end":2394,"name":"SWAP1","source":0},{"begin":2355,"end":2394,"name":"POP","source":0},{"begin":2404,"end":2474,"name":"PUSH [tag]","source":0,"value":"108"},{"begin":2413,"end":2446,"name":"PUSH [tag]","source":0,"value":"109"},{"begin":2425,"end":2433,"name":"DUP3","source":0},{"begin":2435,"end":2445,"name":"CALLER","source":0},{"begin":2413,"end":2424,"name":"PUSH [tag]","source":0,"value":"110"},{"begin":2413,"end":2446,"name":"JUMP","source":0,"value":"[in]"},{"begin":2413,"end":2446,"name":"tag","source":0,"value":"109"},{"begin":2413,"end":2446,"name":"JUMPDEST","source":0},{"begin":6674,"end":6677,"name":"PUSH","source":1,"value":"191"},{"begin":2404,"end":2412,"name":"PUSH [tag]","source":0,"value":"57"},{"begin":2404,"end":2474,"name":"JUMP","source":0,"value":"[in]"},{"begin":2404,"end":2474,"name":"tag","source":0,"value":"108"},{"begin":2404,"end":2474,"name":"JUMPDEST","source":0},{"begin":2300,"end":2481,"name":"POP","source":0},{"begin":2300,"end":2481,"name":"JUMP","source":0,"value":"[out]"},{"begin":866,"end":967,"name":"tag","source":1,"value":"57"},{"begin":866,"end":967,"name":"JUMPDEST","source":1},{"begin":935,"end":944,"name":"DUP2","source":1},{"begin":930,"end":964,"name":"PUSH [tag]","source":1,"value":"113"},{"begin":930,"end":964,"name":"JUMPI","source":1},{"begin":946,"end":964,"name":"PUSH [tag]","source":1,"value":"113"},{"begin":954,"end":963,"name":"DUP2","source":1},{"begin":946,"end":953,"name":"PUSH [tag]","source":1,"value":"114"},{"begin":946,"end":964,"name":"JUMP","source":1,"value":"[in]"},{"begin":946,"end":964,"name":"tag","source":1,"value":"113"},{"begin":946,"end":964,"name":"JUMPDEST","source":1},{"begin":866,"end":967,"name":"POP","source":1},{"begin":866,"end":967,"name":"POP","source":1},{"begin":866,"end":967,"name":"JUMP","source":1,"value":"[out]"},{"begin":2635,"end":2906,"name":"tag","source":7,"value":"67"},{"begin":2635,"end":2906,"name":"JUMPDEST","source":7},{"begin":2758,"end":2806,"name":"PUSH [tag]","source":7,"value":"116"},{"begin":2062,"end":2063,"name":"PUSH","source":7,"value":"2"},{"begin":2767,"end":2774,"name":"PUSH","source":7,"value":"0"},{"begin":2767,"end":2774,"name":"SLOAD","source":7},{"begin":2767,"end":2786,"name":"EQ","source":7},{"begin":2767,"end":2786,"name":"ISZERO","source":7},{"begin":6618,"end":6621,"name":"PUSH","source":1,"value":"190"},{"begin":2758,"end":2766,"name":"PUSH [tag]","source":7,"value":"57"},{"begin":2758,"end":2806,"name":"JUMP","source":7,"value":"[in]"},{"begin":2758,"end":2806,"name":"tag","source":7,"value":"116"},{"begin":2758,"end":2806,"name":"JUMPDEST","source":7},{"begin":2062,"end":2063,"name":"PUSH","source":7,"value":"2"},{"begin":2881,"end":2888,"name":"PUSH","source":7,"value":"0"},{"begin":2881,"end":2899,"name":"SSTORE","source":7},{"begin":2635,"end":2906,"name":"JUMP","source":7,"value":"[out]"},{"begin":855,"end":986,"name":"tag","source":5,"value":"72"},{"begin":855,"end":986,"name":"JUMPDEST","source":5},{"begin":933,"end":979,"name":"PUSH [tag]","source":5,"value":"113"},{"begin":947,"end":948,"name":"DUP2","source":5},{"begin":942,"end":943,"name":"DUP4","source":5},{"begin":942,"end":948,"name":"EQ","source":5},{"begin":5002,"end":5005,"name":"PUSH","source":1,"value":"67"},{"begin":933,"end":941,"name":"PUSH [tag]","source":5,"value":"57"},{"begin":933,"end":979,"name":"JUMP","source":5,"value":"[in]"},{"begin":885,"end":1099,"name":"tag","source":8,"value":"81"},{"begin":885,"end":1099,"name":"JUMPDEST","source":8},{"begin":997,"end":1092,"name":"PUSH [tag]","source":8,"value":"120"},{"begin":1025,"end":1030,"name":"DUP4","source":8},{"begin":1056,"end":1079,"name":"PUSH","source":8,"value":"A9059CBB"},{"begin":1056,"end":1079,"name":"PUSH","source":8,"value":"E0"},{"begin":1056,"end":1079,"name":"SHL","source":8},{"begin":1081,"end":1083,"name":"DUP5","source":8},{"begin":1085,"end":1090,"name":"DUP5","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"40"},{"begin":1033,"end":1091,"name":"MLOAD","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"24"},{"begin":1033,"end":1091,"name":"ADD","source":8},{"begin":1033,"end":1091,"name":"PUSH [tag]","source":8,"value":"121"},{"begin":1033,"end":1091,"name":"SWAP3","source":8},{"begin":1033,"end":1091,"name":"SWAP2","source":8},{"begin":1033,"end":1091,"name":"SWAP1","source":8},{"begin":1033,"end":1091,"name":"PUSH [tag]","source":8,"value":"122"},{"begin":1033,"end":1091,"name":"JUMP","source":8,"value":"[in]"},{"begin":1033,"end":1091,"name":"tag","source":8,"value":"121"},{"begin":1033,"end":1091,"name":"JUMPDEST","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"40"},{"begin":1033,"end":1091,"name":"DUP1","source":8},{"begin":1033,"end":1091,"name":"MLOAD","source":8},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1F"},{"begin":-1,"end":-1,"name":"NOT","source":-1},{"begin":1033,"end":1091,"name":"DUP2","source":8},{"begin":1033,"end":1091,"name":"DUP5","source":8},{"begin":1033,"end":1091,"name":"SUB","source":8},{"begin":1033,"end":1091,"name":"ADD","source":8},{"begin":1033,"end":1091,"name":"DUP2","source":8},{"begin":1033,"end":1091,"name":"MSTORE","source":8},{"begin":1033,"end":1091,"name":"SWAP2","source":8},{"begin":1033,"end":1091,"name":"SWAP1","source":8},{"begin":1033,"end":1091,"name":"MSTORE","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"20"},{"begin":1033,"end":1091,"name":"DUP2","source":8},{"begin":1033,"end":1091,"name":"ADD","source":8},{"begin":1033,"end":1091,"name":"DUP1","source":8},{"begin":1033,"end":1091,"name":"MLOAD","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"},{"begin":1033,"end":1091,"name":"AND","source":8},{"begin":1033,"end":1091,"name":"PUSH","source":8,"value":"FFFFFFFF00000000000000000000000000000000000000000000000000000000"},{"begin":1033,"end":1091,"name":"SWAP1","source":8},{"begin":1033,"end":1091,"name":"SWAP4","source":8},{"begin":1033,"end":1091,"name":"AND","source":8},{"begin":1033,"end":1091,"name":"SWAP3","source":8},{"begin":1033,"end":1091,"name":"SWAP1","source":8},{"begin":1033,"end":1091,"name":"SWAP3","source":8},{"begin":1033,"end":1091,"name":"OR","source":8},{"begin":1033,"end":1091,"name":"SWAP1","source":8},{"begin":1033,"end":1091,"name":"SWAP2","source":8},{"begin":1033,"end":1091,"name":"MSTORE","source":8},{"begin":997,"end":1016,"name":"PUSH [tag]","source":8,"value":"123"},{"begin":997,"end":1092,"name":"JUMP","source":8,"value":"[in]"},{"begin":997,"end":1092,"name":"tag","source":8,"value":"120"},{"begin":997,"end":1092,"name":"JUMPDEST","source":8},{"begin":885,"end":1099,"name":"POP","source":8},{"begin":885,"end":1099,"name":"POP","source":8},{"begin":885,"end":1099,"name":"POP","source":8},{"begin":885,"end":1099,"name":"JUMP","source":8,"value":"[out]"},{"begin":2912,"end":3120,"name":"tag","source":7,"value":"83"},{"begin":2912,"end":3120,"name":"JUMPDEST","source":7},{"begin":2019,"end":2020,"name":"PUSH","source":7,"value":"1"},{"begin":3091,"end":3098,"name":"PUSH","source":7,"value":"0"},{"begin":3091,"end":3113,"name":"SSTORE","source":7},{"begin":2912,"end":3120,"name":"JUMP","source":7,"value":"[out]"},{"begin":4793,"end":4900,"name":"tag","source":9,"value":"89"},{"begin":4793,"end":4900,"name":"JUMPDEST","source":9},{"begin":4842,"end":4853,"name":"PUSH","source":9,"value":"0"},{"begin":4872,"end":4877,"name":"PUSHIMMUTABLE","source":9,"value":"837"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":4872,"end":4891,"name":"AND","source":9},{"begin":4872,"end":4891,"name":"PUSH","source":9,"value":"AAABADC5"},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"40"},{"begin":4872,"end":4893,"name":"MLOAD","source":9},{"begin":4872,"end":4893,"name":"DUP2","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"FFFFFFFF"},{"begin":4872,"end":4893,"name":"AND","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"E0"},{"begin":4872,"end":4893,"name":"SHL","source":9},{"begin":4872,"end":4893,"name":"DUP2","source":9},{"begin":4872,"end":4893,"name":"MSTORE","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"4"},{"begin":4872,"end":4893,"name":"ADD","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"20"},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"40"},{"begin":4872,"end":4893,"name":"MLOAD","source":9},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"DUP4","source":9},{"begin":4872,"end":4893,"name":"SUB","source":9},{"begin":4872,"end":4893,"name":"DUP2","source":9},{"begin":4872,"end":4893,"name":"DUP7","source":9},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"EXTCODESIZE","source":9},{"begin":4872,"end":4893,"name":"ISZERO","source":9},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"ISZERO","source":9},{"begin":4872,"end":4893,"name":"PUSH [tag]","source":9,"value":"126"},{"begin":4872,"end":4893,"name":"JUMPI","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"0"},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"REVERT","source":9},{"begin":4872,"end":4893,"name":"tag","source":9,"value":"126"},{"begin":4872,"end":4893,"name":"JUMPDEST","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"GAS","source":9},{"begin":4872,"end":4893,"name":"STATICCALL","source":9},{"begin":4872,"end":4893,"name":"ISZERO","source":9},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"ISZERO","source":9},{"begin":4872,"end":4893,"name":"PUSH [tag]","source":9,"value":"128"},{"begin":4872,"end":4893,"name":"JUMPI","source":9},{"begin":4872,"end":4893,"name":"RETURNDATASIZE","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"0"},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"RETURNDATACOPY","source":9},{"begin":4872,"end":4893,"name":"RETURNDATASIZE","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"0"},{"begin":4872,"end":4893,"name":"REVERT","source":9},{"begin":4872,"end":4893,"name":"tag","source":9,"value":"128"},{"begin":4872,"end":4893,"name":"JUMPDEST","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"40"},{"begin":4872,"end":4893,"name":"MLOAD","source":9},{"begin":4872,"end":4893,"name":"RETURNDATASIZE","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"1F"},{"begin":4872,"end":4893,"name":"NOT","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"1F"},{"begin":4872,"end":4893,"name":"DUP3","source":9},{"begin":4872,"end":4893,"name":"ADD","source":9},{"begin":4872,"end":4893,"name":"AND","source":9},{"begin":4872,"end":4893,"name":"DUP3","source":9},{"begin":4872,"end":4893,"name":"ADD","source":9},{"begin":4872,"end":4893,"name":"DUP1","source":9},{"begin":4872,"end":4893,"name":"PUSH","source":9,"value":"40"},{"begin":4872,"end":4893,"name":"MSTORE","source":9},{"begin":4872,"end":4893,"name":"POP","source":9},{"begin":4872,"end":4893,"name":"DUP2","source":9},{"begin":4872,"end":4893,"name":"ADD","source":9},{"begin":4872,"end":4893,"name":"SWAP1","source":9},{"begin":4872,"end":4893,"name":"PUSH [tag]","source":9,"value":"88"},{"begin":4872,"end":4893,"name":"SWAP2","source":9},{"begin":4872,"end":4893,"name":"SWAP1","source":9},{"begin":4872,"end":4893,"name":"PUSH [tag]","source":9,"value":"130"},{"begin":4872,"end":4893,"name":"JUMP","source":9,"value":"[in]"},{"begin":4608,"end":4787,"name":"tag","source":9,"value":"110"},{"begin":4608,"end":4787,"name":"JUMPDEST","source":9},{"begin":4696,"end":4700,"name":"PUSH","source":9,"value":"0"},{"begin":4719,"end":4735,"name":"PUSH [tag]","source":9,"value":"132"},{"begin":4719,"end":4733,"name":"PUSH [tag]","source":9,"value":"89"},{"begin":4719,"end":4735,"name":"JUMP","source":9,"value":"[in]"},{"begin":4719,"end":4735,"name":"tag","source":9,"value":"132"},{"begin":4719,"end":4735,"name":"JUMPDEST","source":9},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":4719,"end":4746,"name":"AND","source":9},{"begin":4719,"end":4746,"name":"PUSH","source":9,"value":"9BE2A884"},{"begin":4747,"end":4755,"name":"DUP5","source":9},{"begin":4757,"end":4764,"name":"DUP5","source":9},{"begin":4774,"end":4778,"name":"ADDRESS","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"40"},{"begin":4719,"end":4780,"name":"MLOAD","source":9},{"begin":4719,"end":4780,"name":"DUP5","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"FFFFFFFF"},{"begin":4719,"end":4780,"name":"AND","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"E0"},{"begin":4719,"end":4780,"name":"SHL","source":9},{"begin":4719,"end":4780,"name":"DUP2","source":9},{"begin":4719,"end":4780,"name":"MSTORE","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"4"},{"begin":4719,"end":4780,"name":"ADD","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"133"},{"begin":4719,"end":4780,"name":"SWAP4","source":9},{"begin":4719,"end":4780,"name":"SWAP3","source":9},{"begin":4719,"end":4780,"name":"SWAP2","source":9},{"begin":4719,"end":4780,"name":"SWAP1","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"134"},{"begin":4719,"end":4780,"name":"JUMP","source":9,"value":"[in]"},{"begin":4719,"end":4780,"name":"tag","source":9,"value":"133"},{"begin":4719,"end":4780,"name":"JUMPDEST","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"20"},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"40"},{"begin":4719,"end":4780,"name":"MLOAD","source":9},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"DUP4","source":9},{"begin":4719,"end":4780,"name":"SUB","source":9},{"begin":4719,"end":4780,"name":"DUP2","source":9},{"begin":4719,"end":4780,"name":"DUP7","source":9},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"EXTCODESIZE","source":9},{"begin":4719,"end":4780,"name":"ISZERO","source":9},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"ISZERO","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"135"},{"begin":4719,"end":4780,"name":"JUMPI","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"0"},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"REVERT","source":9},{"begin":4719,"end":4780,"name":"tag","source":9,"value":"135"},{"begin":4719,"end":4780,"name":"JUMPDEST","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"GAS","source":9},{"begin":4719,"end":4780,"name":"STATICCALL","source":9},{"begin":4719,"end":4780,"name":"ISZERO","source":9},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"ISZERO","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"137"},{"begin":4719,"end":4780,"name":"JUMPI","source":9},{"begin":4719,"end":4780,"name":"RETURNDATASIZE","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"0"},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"RETURNDATACOPY","source":9},{"begin":4719,"end":4780,"name":"RETURNDATASIZE","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"0"},{"begin":4719,"end":4780,"name":"REVERT","source":9},{"begin":4719,"end":4780,"name":"tag","source":9,"value":"137"},{"begin":4719,"end":4780,"name":"JUMPDEST","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"40"},{"begin":4719,"end":4780,"name":"MLOAD","source":9},{"begin":4719,"end":4780,"name":"RETURNDATASIZE","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"1F"},{"begin":4719,"end":4780,"name":"NOT","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"1F"},{"begin":4719,"end":4780,"name":"DUP3","source":9},{"begin":4719,"end":4780,"name":"ADD","source":9},{"begin":4719,"end":4780,"name":"AND","source":9},{"begin":4719,"end":4780,"name":"DUP3","source":9},{"begin":4719,"end":4780,"name":"ADD","source":9},{"begin":4719,"end":4780,"name":"DUP1","source":9},{"begin":4719,"end":4780,"name":"PUSH","source":9,"value":"40"},{"begin":4719,"end":4780,"name":"MSTORE","source":9},{"begin":4719,"end":4780,"name":"POP","source":9},{"begin":4719,"end":4780,"name":"DUP2","source":9},{"begin":4719,"end":4780,"name":"ADD","source":9},{"begin":4719,"end":4780,"name":"SWAP1","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"138"},{"begin":4719,"end":4780,"name":"SWAP2","source":9},{"begin":4719,"end":4780,"name":"SWAP1","source":9},{"begin":4719,"end":4780,"name":"PUSH [tag]","source":9,"value":"139"},{"begin":4719,"end":4780,"name":"JUMP","source":9,"value":"[in]"},{"begin":4719,"end":4780,"name":"tag","source":9,"value":"138"},{"begin":4719,"end":4780,"name":"JUMPDEST","source":9},{"begin":4712,"end":4780,"name":"SWAP1","source":9},{"begin":4712,"end":4780,"name":"POP","source":9},{"begin":4608,"end":4787,"name":"tag","source":9,"value":"131"},{"begin":4608,"end":4787,"name":"JUMPDEST","source":9},{"begin":4608,"end":4787,"name":"SWAP3","source":9},{"begin":4608,"end":4787,"name":"SWAP2","source":9},{"begin":4608,"end":4787,"name":"POP","source":9},{"begin":4608,"end":4787,"name":"POP","source":9},{"begin":4608,"end":4787,"name":"JUMP","source":9,"value":"[out]"},{"begin":1074,"end":4246,"name":"tag","source":1,"value":"114"},{"begin":1074,"end":4246,"name":"JUMPDEST","source":1},{"begin":3593,"end":3659,"name":"PUSH","source":1,"value":"8C379A000000000000000000000000000000000000000000000000000000000"},{"begin":3588,"end":3591,"name":"PUSH","source":1,"value":"0"},{"begin":3581,"end":3660,"name":"SWAP1","source":1},{"begin":3581,"end":3660,"name":"DUP2","source":1},{"begin":3581,"end":3660,"name":"MSTORE","source":1},{"begin":3799,"end":3865,"name":"PUSH","source":1,"value":"20"},{"begin":3793,"end":3797,"name":"PUSH","source":1,"value":"4"},{"begin":3786,"end":3866,"name":"MSTORE","source":1},{"begin":3941,"end":3942,"name":"PUSH","source":1,"value":"7"},{"begin":3935,"end":3939,"name":"PUSH","source":1,"value":"24"},{"begin":3928,"end":3943,"name":"MSTORE","source":1},{"begin":2999,"end":3072,"name":"PUSH","source":1,"value":"42414C23000030"},{"begin":2210,"end":2212,"name":"PUSH","source":1,"value":"A"},{"begin":2243,"end":2261,"name":"DUP1","source":1},{"begin":2243,"end":2261,"name":"DUP5","source":1},{"begin":2243,"end":2261,"name":"DIV","source":1},{"begin":2288,"end":2306,"name":"DUP2","source":1},{"begin":2288,"end":2306,"name":"DUP2","source":1},{"begin":2288,"end":2306,"name":"MOD","source":1},{"begin":2215,"end":2219,"name":"PUSH","source":1,"value":"30"},{"begin":2284,"end":2313,"name":"SWAP1","source":1},{"begin":2284,"end":2313,"name":"DUP2","source":1},{"begin":2284,"end":2313,"name":"ADD","source":1},{"begin":3040,"end":3041,"name":"PUSH","source":1,"value":"8"},{"begin":3036,"end":3050,"name":"SHL","source":1},{"begin":2195,"end":2213,"name":"SWAP6","source":1},{"begin":2195,"end":2213,"name":"DUP4","source":1},{"begin":2195,"end":2213,"name":"SWAP1","source":1},{"begin":2195,"end":2213,"name":"MOD","source":1},{"begin":3025,"end":3051,"name":"SWAP6","source":1},{"begin":3025,"end":3051,"name":"SWAP1","source":1},{"begin":3025,"end":3051,"name":"SWAP6","source":1},{"begin":3025,"end":3051,"name":"ADD","source":1},{"begin":2336,"end":2354,"name":"SWAP1","source":1},{"begin":2336,"end":2354,"name":"DUP3","source":1},{"begin":2336,"end":2354,"name":"SWAP1","source":1},{"begin":2336,"end":2354,"name":"DIV","source":1},{"begin":2383,"end":2401,"name":"SWAP2","source":1},{"begin":2383,"end":2401,"name":"DUP3","source":1},{"begin":2383,"end":2401,"name":"MOD","source":1},{"begin":2379,"end":2408,"name":"SWAP1","source":1},{"begin":2379,"end":2408,"name":"SWAP5","source":1},{"begin":2379,"end":2408,"name":"ADD","source":1},{"begin":3057,"end":3059,"name":"PUSH","source":1,"value":"10"},{"begin":3053,"end":3070,"name":"SHL","source":1},{"begin":3021,"end":3071,"name":"SWAP4","source":1},{"begin":3021,"end":3071,"name":"SWAP1","source":1},{"begin":3021,"end":3071,"name":"SWAP4","source":1},{"begin":3021,"end":3071,"name":"ADD","source":1},{"begin":2999,"end":3072,"name":"ADD","source":1},{"begin":2994,"end":2997,"name":"PUSH","source":1,"value":"C8"},{"begin":2990,"end":3073,"name":"SHL","source":1},{"begin":4008,"end":4012,"name":"PUSH","source":1,"value":"44"},{"begin":4001,"end":4027,"name":"MSTORE","source":1},{"begin":4234,"end":4237,"name":"PUSH","source":1,"value":"64"},{"begin":4234,"end":4237,"name":"SWAP1","source":1},{"begin":4224,"end":4238,"name":"REVERT","source":1},{"begin":1695,"end":2494,"name":"tag","source":8,"value":"123"},{"begin":1695,"end":2494,"name":"JUMPDEST","source":8},{"begin":1938,"end":1950,"name":"PUSH","source":8,"value":"0"},{"begin":1952,"end":1975,"name":"PUSH","source":8,"value":"60"},{"begin":1979,"end":1984,"name":"DUP4","source":8},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":1979,"end":1989,"name":"AND","source":8},{"begin":1990,"end":1994,"name":"DUP4","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"40"},{"begin":1979,"end":1995,"name":"MLOAD","source":8},{"begin":1979,"end":1995,"name":"PUSH [tag]","source":8,"value":"142"},{"begin":1979,"end":1995,"name":"SWAP2","source":8},{"begin":1979,"end":1995,"name":"SWAP1","source":8},{"begin":1979,"end":1995,"name":"PUSH [tag]","source":8,"value":"143"},{"begin":1979,"end":1995,"name":"JUMP","source":8,"value":"[in]"},{"begin":1979,"end":1995,"name":"tag","source":8,"value":"142"},{"begin":1979,"end":1995,"name":"JUMPDEST","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"0"},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"40"},{"begin":1979,"end":1995,"name":"MLOAD","source":8},{"begin":1979,"end":1995,"name":"DUP1","source":8},{"begin":1979,"end":1995,"name":"DUP4","source":8},{"begin":1979,"end":1995,"name":"SUB","source":8},{"begin":1979,"end":1995,"name":"DUP2","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"0"},{"begin":1979,"end":1995,"name":"DUP7","source":8},{"begin":1979,"end":1995,"name":"GAS","source":8},{"begin":1979,"end":1995,"name":"CALL","source":8},{"begin":1979,"end":1995,"name":"SWAP2","source":8},{"begin":1979,"end":1995,"name":"POP","source":8},{"begin":1979,"end":1995,"name":"POP","source":8},{"begin":1979,"end":1995,"name":"RETURNDATASIZE","source":8},{"begin":1979,"end":1995,"name":"DUP1","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"0"},{"begin":1979,"end":1995,"name":"DUP2","source":8},{"begin":1979,"end":1995,"name":"EQ","source":8},{"begin":1979,"end":1995,"name":"PUSH [tag]","source":8,"value":"146"},{"begin":1979,"end":1995,"name":"JUMPI","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"40"},{"begin":1979,"end":1995,"name":"MLOAD","source":8},{"begin":1979,"end":1995,"name":"SWAP2","source":8},{"begin":1979,"end":1995,"name":"POP","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"1F"},{"begin":1979,"end":1995,"name":"NOT","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"3F"},{"begin":1979,"end":1995,"name":"RETURNDATASIZE","source":8},{"begin":1979,"end":1995,"name":"ADD","source":8},{"begin":1979,"end":1995,"name":"AND","source":8},{"begin":1979,"end":1995,"name":"DUP3","source":8},{"begin":1979,"end":1995,"name":"ADD","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"40"},{"begin":1979,"end":1995,"name":"MSTORE","source":8},{"begin":1979,"end":1995,"name":"RETURNDATASIZE","source":8},{"begin":1979,"end":1995,"name":"DUP3","source":8},{"begin":1979,"end":1995,"name":"MSTORE","source":8},{"begin":1979,"end":1995,"name":"RETURNDATASIZE","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"0"},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"20"},{"begin":1979,"end":1995,"name":"DUP5","source":8},{"begin":1979,"end":1995,"name":"ADD","source":8},{"begin":1979,"end":1995,"name":"RETURNDATACOPY","source":8},{"begin":1979,"end":1995,"name":"PUSH [tag]","source":8,"value":"145"},{"begin":1979,"end":1995,"name":"JUMP","source":8},{"begin":1979,"end":1995,"name":"tag","source":8,"value":"146"},{"begin":1979,"end":1995,"name":"JUMPDEST","source":8},{"begin":1979,"end":1995,"name":"PUSH","source":8,"value":"60"},{"begin":1979,"end":1995,"name":"SWAP2","source":8},{"begin":1979,"end":1995,"name":"POP","source":8},{"begin":1979,"end":1995,"name":"tag","source":8,"value":"145"},{"begin":1979,"end":1995,"name":"JUMPDEST","source":8},{"begin":1979,"end":1995,"name":"POP","source":8},{"begin":1937,"end":1995,"name":"SWAP2","source":8},{"begin":1937,"end":1995,"name":"POP","source":8},{"begin":1937,"end":1995,"name":"SWAP2","source":8},{"begin":1937,"end":1995,"name":"POP","source":8},{"begin":2133,"end":2134,"name":"PUSH","source":8,"value":"0"},{"begin":2124,"end":2131,"name":"DUP3","source":8},{"begin":2121,"end":2135,"name":"EQ","source":8},{"begin":2118,"end":2120,"name":"ISZERO","source":8},{"begin":2118,"end":2120,"name":"PUSH [tag]","source":8,"value":"147"},{"begin":2118,"end":2120,"name":"JUMPI","source":8},{"begin":2175,"end":2191,"name":"RETURNDATASIZE","source":8},{"begin":2172,"end":2173,"name":"PUSH","source":8,"value":"0"},{"begin":2169,"end":2170,"name":"DUP1","source":8},{"begin":2154,"end":2192,"name":"RETURNDATACOPY","source":8},{"begin":2219,"end":2235,"name":"RETURNDATASIZE","source":8},{"begin":2216,"end":2217,"name":"PUSH","source":8,"value":"0"},{"begin":2209,"end":2236,"name":"REVERT","source":8},{"begin":2118,"end":2120,"name":"tag","source":8,"value":"147"},{"begin":2118,"end":2120,"name":"JUMPDEST","source":8},{"begin":2390,"end":2487,"name":"PUSH [tag]","source":8,"value":"148"},{"begin":2399,"end":2409,"name":"DUP2","source":8},{"begin":2399,"end":2416,"name":"MLOAD","source":8},{"begin":2420,"end":2421,"name":"PUSH","source":8,"value":"0"},{"begin":2399,"end":2421,"name":"EQ","source":8},{"begin":2399,"end":2455,"name":"DUP1","source":8},{"begin":2399,"end":2455,"name":"PUSH [tag]","source":8,"value":"150"},{"begin":2399,"end":2455,"name":"JUMPI","source":8},{"begin":2399,"end":2455,"name":"POP","source":8},{"begin":2436,"end":2446,"name":"DUP2","source":8},{"begin":2425,"end":2455,"name":"DUP1","source":8},{"begin":2425,"end":2455,"name":"PUSH","source":8,"value":"20"},{"begin":2425,"end":2455,"name":"ADD","source":8},{"begin":2425,"end":2455,"name":"SWAP1","source":8},{"begin":2425,"end":2455,"name":"MLOAD","source":8},{"begin":2425,"end":2455,"name":"DUP2","source":8},{"begin":2425,"end":2455,"name":"ADD","source":8},{"begin":2425,"end":2455,"name":"SWAP1","source":8},{"begin":2425,"end":2455,"name":"PUSH [tag]","source":8,"value":"150"},{"begin":2425,"end":2455,"name":"SWAP2","source":8},{"begin":2425,"end":2455,"name":"SWAP1","source":8},{"begin":2425,"end":2455,"name":"PUSH [tag]","source":8,"value":"139"},{"begin":2425,"end":2455,"name":"JUMP","source":8,"value":"[in]"},{"begin":2425,"end":2455,"name":"tag","source":8,"value":"150"},{"begin":2425,"end":2455,"name":"JUMPDEST","source":8},{"begin":7763,"end":7766,"name":"PUSH","source":1,"value":"1A2"},{"begin":2390,"end":2398,"name":"PUSH [tag]","source":8,"value":"57"},{"begin":2390,"end":2487,"name":"JUMP","source":8,"value":"[in]"},{"begin":2390,"end":2487,"name":"tag","source":8,"value":"148"},{"begin":2390,"end":2487,"name":"JUMPDEST","source":8},{"begin":1695,"end":2494,"name":"POP","source":8},{"begin":1695,"end":2494,"name":"POP","source":8},{"begin":1695,"end":2494,"name":"POP","source":8},{"begin":1695,"end":2494,"name":"POP","source":8},{"begin":1695,"end":2494,"name":"JUMP","source":8,"value":"[out]"},{"begin":168,"end":534,"name":"tag","source":-1,"value":"152"},{"begin":168,"end":534,"name":"JUMPDEST","source":-1},{"begin":168,"end":534,"name":"PUSH","source":-1,"value":"0"},{"begin":168,"end":534,"name":"DUP1","source":-1},{"begin":312,"end":315,"name":"DUP4","source":-1},{"begin":305,"end":309,"name":"PUSH","source":-1,"value":"1F"},{"begin":297,"end":303,"name":"DUP5","source":-1},{"begin":293,"end":310,"name":"ADD","source":-1},{"begin":289,"end":316,"name":"SLT","source":-1},{"begin":279,"end":281,"name":"PUSH [tag]","source":-1,"value":"154"},{"begin":279,"end":281,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":320,"end":332,"name":"REVERT","source":-1},{"begin":279,"end":281,"name":"tag","source":-1,"value":"154"},{"begin":279,"end":281,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":350,"end":370,"name":"DUP2","source":-1},{"begin":350,"end":370,"name":"CALLDATALOAD","source":-1},{"begin":390,"end":408,"name":"PUSH","source":-1,"value":"FFFFFFFFFFFFFFFF"},{"begin":379,"end":409,"name":"DUP2","source":-1},{"begin":379,"end":409,"name":"GT","source":-1},{"begin":376,"end":378,"name":"ISZERO","source":-1},{"begin":376,"end":378,"name":"PUSH [tag]","source":-1,"value":"155"},{"begin":376,"end":378,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":412,"end":424,"name":"REVERT","source":-1},{"begin":376,"end":378,"name":"tag","source":-1,"value":"155"},{"begin":376,"end":378,"name":"JUMPDEST","source":-1},{"begin":456,"end":460,"name":"PUSH","source":-1,"value":"20"},{"begin":448,"end":454,"name":"DUP4","source":-1},{"begin":444,"end":461,"name":"ADD","source":-1},{"begin":432,"end":461,"name":"SWAP2","source":-1},{"begin":432,"end":461,"name":"POP","source":-1},{"begin":507,"end":510,"name":"DUP4","source":-1},{"begin":456,"end":460,"name":"PUSH","source":-1,"value":"20"},{"begin":456,"end":460,"name":"DUP1","source":-1},{"begin":491,"end":497,"name":"DUP4","source":-1},{"begin":487,"end":504,"name":"MUL","source":-1},{"begin":448,"end":454,"name":"DUP6","source":-1},{"begin":473,"end":505,"name":"ADD","source":-1},{"begin":473,"end":505,"name":"ADD","source":-1},{"begin":470,"end":511,"name":"GT","source":-1},{"begin":467,"end":469,"name":"ISZERO","source":-1},{"begin":467,"end":469,"name":"PUSH [tag]","source":-1,"value":"156"},{"begin":467,"end":469,"name":"JUMPI","source":-1},{"begin":524,"end":525,"name":"PUSH","source":-1,"value":"0"},{"begin":524,"end":525,"name":"DUP1","source":-1},{"begin":514,"end":526,"name":"REVERT","source":-1},{"begin":467,"end":469,"name":"tag","source":-1,"value":"156"},{"begin":467,"end":469,"name":"JUMPDEST","source":-1},{"begin":272,"end":534,"name":"SWAP3","source":-1},{"begin":272,"end":534,"name":"POP","source":-1},{"begin":272,"end":534,"name":"SWAP3","source":-1},{"begin":272,"end":534,"name":"SWAP1","source":-1},{"begin":272,"end":534,"name":"POP","source":-1},{"begin":272,"end":534,"name":"JUMP","source":-1,"value":"[out]"},{"begin":2154,"end":2312,"name":"tag","source":-1,"value":"157"},{"begin":2154,"end":2312,"name":"JUMPDEST","source":-1},{"begin":2235,"end":2255,"name":"DUP1","source":-1},{"begin":2235,"end":2255,"name":"CALLDATALOAD","source":-1},{"begin":2260,"end":2307,"name":"PUSH [tag]","source":-1,"value":"131"},{"begin":2235,"end":2255,"name":"DUP2","source":-1},{"begin":2260,"end":2307,"name":"PUSH [tag]","source":-1,"value":"160"},{"begin":2260,"end":2307,"name":"JUMP","source":-1,"value":"[in]"},{"begin":2597,"end":3428,"name":"tag","source":-1,"value":"27"},{"begin":2597,"end":3428,"name":"JUMPDEST","source":-1},{"begin":2597,"end":3428,"name":"PUSH","source":-1,"value":"0"},{"begin":2597,"end":3428,"name":"DUP1","source":-1},{"begin":2597,"end":3428,"name":"PUSH","source":-1,"value":"0"},{"begin":2597,"end":3428,"name":"DUP1","source":-1},{"begin":2597,"end":3428,"name":"PUSH","source":-1,"value":"0"},{"begin":2819,"end":2821,"name":"PUSH","source":-1,"value":"60"},{"begin":2807,"end":2816,"name":"DUP7","source":-1},{"begin":2798,"end":2805,"name":"DUP9","source":-1},{"begin":2794,"end":2817,"name":"SUB","source":-1},{"begin":2790,"end":2822,"name":"SLT","source":-1},{"begin":2787,"end":2789,"name":"ISZERO","source":-1},{"begin":2787,"end":2789,"name":"PUSH [tag]","source":-1,"value":"162"},{"begin":2787,"end":2789,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":2825,"end":2837,"name":"REVERT","source":-1},{"begin":2787,"end":2789,"name":"tag","source":-1,"value":"162"},{"begin":2787,"end":2789,"name":"JUMPDEST","source":-1},{"begin":2883,"end":2900,"name":"DUP6","source":-1},{"begin":2870,"end":2901,"name":"CALLDATALOAD","source":-1},{"begin":2921,"end":2939,"name":"PUSH","source":-1,"value":"FFFFFFFFFFFFFFFF"},{"begin":2921,"end":2939,"name":"DUP1","source":-1},{"begin":2913,"end":2919,"name":"DUP3","source":-1},{"begin":2910,"end":2940,"name":"GT","source":-1},{"begin":2907,"end":2909,"name":"ISZERO","source":-1},{"begin":2907,"end":2909,"name":"PUSH [tag]","source":-1,"value":"163"},{"begin":2907,"end":2909,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":-1,"end":-1,"name":"DUP4","source":-1},{"begin":2943,"end":2955,"name":"REVERT","source":-1},{"begin":2907,"end":2909,"name":"tag","source":-1,"value":"163"},{"begin":2907,"end":2909,"name":"JUMPDEST","source":-1},{"begin":2981,"end":3075,"name":"PUSH [tag]","source":-1,"value":"164"},{"begin":3067,"end":3074,"name":"DUP10","source":-1},{"begin":3058,"end":3064,"name":"DUP4","source":-1},{"begin":3047,"end":3056,"name":"DUP11","source":-1},{"begin":3043,"end":3065,"name":"ADD","source":-1},{"begin":2981,"end":3075,"name":"PUSH [tag]","source":-1,"value":"152"},{"begin":2981,"end":3075,"name":"JUMP","source":-1,"value":"[in]"},{"begin":2981,"end":3075,"name":"tag","source":-1,"value":"164"},{"begin":2981,"end":3075,"name":"JUMPDEST","source":-1},{"begin":2963,"end":3075,"name":"SWAP1","source":-1},{"begin":2963,"end":3075,"name":"SWAP8","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":2963,"end":3075,"name":"SWAP6","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3140,"end":3142,"name":"PUSH","source":-1,"value":"20"},{"begin":3125,"end":3143,"name":"DUP9","source":-1},{"begin":3125,"end":3143,"name":"ADD","source":-1},{"begin":3112,"end":3144,"name":"CALLDATALOAD","source":-1},{"begin":3112,"end":3144,"name":"SWAP2","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3153,"end":3183,"name":"DUP1","source":-1},{"begin":3153,"end":3183,"name":"DUP3","source":-1},{"begin":3153,"end":3183,"name":"GT","source":-1},{"begin":3150,"end":3152,"name":"ISZERO","source":-1},{"begin":3150,"end":3152,"name":"PUSH [tag]","source":-1,"value":"165"},{"begin":3150,"end":3152,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":-1,"end":-1,"name":"DUP4","source":-1},{"begin":3186,"end":3198,"name":"REVERT","source":-1},{"begin":3150,"end":3152,"name":"tag","source":-1,"value":"165"},{"begin":3150,"end":3152,"name":"JUMPDEST","source":-1},{"begin":3150,"end":3152,"name":"POP","source":-1},{"begin":3224,"end":3304,"name":"PUSH [tag]","source":-1,"value":"166"},{"begin":3296,"end":3303,"name":"DUP9","source":-1},{"begin":3287,"end":3293,"name":"DUP3","source":-1},{"begin":3276,"end":3285,"name":"DUP10","source":-1},{"begin":3272,"end":3294,"name":"ADD","source":-1},{"begin":3224,"end":3304,"name":"PUSH [tag]","source":-1,"value":"152"},{"begin":3224,"end":3304,"name":"JUMP","source":-1,"value":"[in]"},{"begin":3224,"end":3304,"name":"tag","source":-1,"value":"166"},{"begin":3224,"end":3304,"name":"JUMPDEST","source":-1},{"begin":3206,"end":3304,"name":"SWAP1","source":-1},{"begin":3206,"end":3304,"name":"SWAP5","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3206,"end":3304,"name":"SWAP3","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3341,"end":3343,"name":"PUSH","source":-1,"value":"40"},{"begin":3380,"end":3402,"name":"DUP7","source":-1},{"begin":3380,"end":3402,"name":"ADD","source":-1},{"begin":72,"end":92,"name":"CALLDATALOAD","source":-1},{"begin":97,"end":130,"name":"PUSH [tag]","source":-1,"value":"167"},{"begin":72,"end":92,"name":"DUP2","source":-1},{"begin":97,"end":130,"name":"PUSH [tag]","source":-1,"value":"160"},{"begin":97,"end":130,"name":"JUMP","source":-1,"value":"[in]"},{"begin":97,"end":130,"name":"tag","source":-1,"value":"167"},{"begin":97,"end":130,"name":"JUMPDEST","source":-1},{"begin":3349,"end":3412,"name":"DUP1","source":-1},{"begin":3349,"end":3412,"name":"SWAP2","source":-1},{"begin":3349,"end":3412,"name":"POP","source":-1},{"begin":3349,"end":3412,"name":"POP","source":-1},{"begin":2781,"end":3428,"name":"SWAP3","source":-1},{"begin":2781,"end":3428,"name":"SWAP6","source":-1},{"begin":2781,"end":3428,"name":"POP","source":-1},{"begin":2781,"end":3428,"name":"SWAP3","source":-1},{"begin":2781,"end":3428,"name":"SWAP6","source":-1},{"begin":2781,"end":3428,"name":"SWAP1","source":-1},{"begin":2781,"end":3428,"name":"SWAP4","source":-1},{"begin":2781,"end":3428,"name":"POP","source":-1},{"begin":2781,"end":3428,"name":"JUMP","source":-1,"value":"[out]"},{"begin":3435,"end":3840,"name":"tag","source":-1,"value":"44"},{"begin":3435,"end":3840,"name":"JUMPDEST","source":-1},{"begin":3435,"end":3840,"name":"PUSH","source":-1,"value":"0"},{"begin":3578,"end":3580,"name":"PUSH","source":-1,"value":"20"},{"begin":3578,"end":3580,"name":"DUP1","source":-1},{"begin":3566,"end":3575,"name":"DUP4","source":-1},{"begin":3557,"end":3564,"name":"DUP6","source":-1},{"begin":3553,"end":3576,"name":"SUB","source":-1},{"begin":3549,"end":3581,"name":"SLT","source":-1},{"begin":3546,"end":3548,"name":"ISZERO","source":-1},{"begin":3546,"end":3548,"name":"PUSH [tag]","source":-1,"value":"169"},{"begin":3546,"end":3548,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":3584,"end":3596,"name":"REVERT","source":-1},{"begin":3546,"end":3548,"name":"tag","source":-1,"value":"169"},{"begin":3546,"end":3548,"name":"JUMPDEST","source":-1},{"begin":3642,"end":3659,"name":"DUP3","source":-1},{"begin":3629,"end":3660,"name":"CALLDATALOAD","source":-1},{"begin":3680,"end":3698,"name":"PUSH","source":-1,"value":"FFFFFFFFFFFFFFFF"},{"begin":3680,"end":3698,"name":"DUP1","source":-1},{"begin":3672,"end":3678,"name":"DUP3","source":-1},{"begin":3669,"end":3699,"name":"GT","source":-1},{"begin":3666,"end":3668,"name":"ISZERO","source":-1},{"begin":3666,"end":3668,"name":"PUSH [tag]","source":-1,"value":"170"},{"begin":3666,"end":3668,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP4","source":-1},{"begin":-1,"end":-1,"name":"DUP5","source":-1},{"begin":3702,"end":3714,"name":"REVERT","source":-1},{"begin":3666,"end":3668,"name":"tag","source":-1,"value":"170"},{"begin":3666,"end":3668,"name":"JUMPDEST","source":-1},{"begin":3807,"end":3813,"name":"DUP2","source":-1},{"begin":3796,"end":3805,"name":"DUP6","source":-1},{"begin":3792,"end":3814,"name":"ADD","source":-1},{"begin":3792,"end":3814,"name":"SWAP2","source":-1},{"begin":3792,"end":3814,"name":"POP","source":-1},{"begin":699,"end":702,"name":"DUP6","source":-1},{"begin":692,"end":696,"name":"PUSH","source":-1,"value":"1F"},{"begin":684,"end":690,"name":"DUP4","source":-1},{"begin":680,"end":697,"name":"ADD","source":-1},{"begin":676,"end":703,"name":"SLT","source":-1},{"begin":666,"end":668,"name":"PUSH [tag]","source":-1,"value":"171"},{"begin":666,"end":668,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP4","source":-1},{"begin":-1,"end":-1,"name":"DUP5","source":-1},{"begin":707,"end":719,"name":"REVERT","source":-1},{"begin":666,"end":668,"name":"tag","source":-1,"value":"171"},{"begin":666,"end":668,"name":"JUMPDEST","source":-1},{"begin":754,"end":760,"name":"DUP2","source":-1},{"begin":741,"end":761,"name":"CALLDATALOAD","source":-1},{"begin":3680,"end":3698,"name":"DUP2","source":-1},{"begin":11338,"end":11344,"name":"DUP2","source":-1},{"begin":11335,"end":11365,"name":"GT","source":-1},{"begin":11332,"end":11334,"name":"ISZERO","source":-1},{"begin":11332,"end":11334,"name":"PUSH [tag]","source":-1,"value":"172"},{"begin":11332,"end":11334,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP5","source":-1},{"begin":-1,"end":-1,"name":"DUP6","source":-1},{"begin":11368,"end":11380,"name":"REVERT","source":-1},{"begin":11332,"end":11334,"name":"tag","source":-1,"value":"172"},{"begin":11332,"end":11334,"name":"JUMPDEST","source":-1},{"begin":3578,"end":3580,"name":"DUP4","source":-1},{"begin":11405,"end":11411,"name":"DUP2","source":-1},{"begin":11401,"end":11418,"name":"MUL","source":-1},{"begin":11401,"end":11418,"name":"SWAP2","source":-1},{"begin":11401,"end":11418,"name":"POP","source":-1},{"begin":776,"end":870,"name":"PUSH [tag]","source":-1,"value":"173"},{"begin":3578,"end":3580,"name":"DUP5","source":-1},{"begin":11401,"end":11418,"name":"DUP4","source":-1},{"begin":11466,"end":11481,"name":"ADD","source":-1},{"begin":776,"end":870,"name":"PUSH [tag]","source":-1,"value":"174"},{"begin":776,"end":870,"name":"JUMP","source":-1,"value":"[in]"},{"begin":776,"end":870,"name":"tag","source":-1,"value":"173"},{"begin":776,"end":870,"name":"JUMPDEST","source":-1},{"begin":898,"end":919,"name":"DUP2","source":-1},{"begin":898,"end":919,"name":"DUP2","source":-1},{"begin":898,"end":919,"name":"MSTORE","source":-1},{"begin":955,"end":969,"name":"DUP5","source":-1},{"begin":955,"end":969,"name":"DUP2","source":-1},{"begin":955,"end":969,"name":"ADD","source":-1},{"begin":955,"end":969,"name":"SWAP1","source":-1},{"begin":930,"end":947,"name":"DUP5","source":-1},{"begin":930,"end":947,"name":"DUP7","source":-1},{"begin":930,"end":947,"name":"ADD","source":-1},{"begin":1035,"end":1062,"name":"DUP5","source":-1},{"begin":1035,"end":1062,"name":"DUP7","source":-1},{"begin":1035,"end":1062,"name":"ADD","source":-1},{"begin":1035,"end":1062,"name":"DUP8","source":-1},{"begin":1035,"end":1062,"name":"ADD","source":-1},{"begin":1032,"end":1068,"name":"DUP11","source":-1},{"begin":-1,"end":-1,"name":"LT","source":-1},{"begin":1029,"end":1031,"name":"ISZERO","source":-1},{"begin":1029,"end":1031,"name":"PUSH [tag]","source":-1,"value":"175"},{"begin":1029,"end":1031,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP8","source":-1},{"begin":-1,"end":-1,"name":"DUP9","source":-1},{"begin":1071,"end":1083,"name":"REVERT","source":-1},{"begin":1029,"end":1031,"name":"tag","source":-1,"value":"175"},{"begin":1029,"end":1031,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"DUP8","source":-1},{"begin":1097,"end":1107,"name":"SWAP6","source":-1},{"begin":1097,"end":1107,"name":"POP","source":-1},{"begin":1091,"end":1311,"name":"tag","source":-1,"value":"176"},{"begin":1091,"end":1311,"name":"JUMPDEST","source":-1},{"begin":1116,"end":1122,"name":"DUP4","source":-1},{"begin":1113,"end":1114,"name":"DUP7","source":-1},{"begin":1110,"end":1123,"name":"LT","source":-1},{"begin":1091,"end":1311,"name":"ISZERO","source":-1},{"begin":1091,"end":1311,"name":"PUSH [tag]","source":-1,"value":"178"},{"begin":1091,"end":1311,"name":"JUMPI","source":-1},{"begin":1196,"end":1247,"name":"PUSH [tag]","source":-1,"value":"179"},{"begin":1243,"end":1246,"name":"DUP11","source":-1},{"begin":1231,"end":1241,"name":"DUP3","source":-1},{"begin":1196,"end":1247,"name":"PUSH [tag]","source":-1,"value":"157"},{"begin":1196,"end":1247,"name":"JUMP","source":-1,"value":"[in]"},{"begin":1196,"end":1247,"name":"tag","source":-1,"value":"179"},{"begin":1196,"end":1247,"name":"JUMPDEST","source":-1},{"begin":1184,"end":1248,"name":"DUP4","source":-1},{"begin":1184,"end":1248,"name":"MSTORE","source":-1},{"begin":1138,"end":1139,"name":"PUSH","source":-1,"value":"1"},{"begin":1131,"end":1140,"name":"SWAP6","source":-1},{"begin":1131,"end":1140,"name":"SWAP1","source":-1},{"begin":1131,"end":1140,"name":"SWAP6","source":-1},{"begin":1131,"end":1140,"name":"ADD","source":-1},{"begin":1131,"end":1140,"name":"SWAP5","source":-1},{"begin":1262,"end":1276,"name":"SWAP2","source":-1},{"begin":1262,"end":1276,"name":"DUP7","source":-1},{"begin":1262,"end":1276,"name":"ADD","source":-1},{"begin":1262,"end":1276,"name":"SWAP2","source":-1},{"begin":1290,"end":1304,"name":"DUP7","source":-1},{"begin":1290,"end":1304,"name":"ADD","source":-1},{"begin":1091,"end":1311,"name":"PUSH [tag]","source":-1,"value":"176"},{"begin":1091,"end":1311,"name":"JUMP","source":-1},{"begin":1091,"end":1311,"name":"tag","source":-1,"value":"178"},{"begin":1091,"end":1311,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3722,"end":3824,"name":"SWAP9","source":-1},{"begin":3540,"end":3840,"name":"SWAP8","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3540,"end":3840,"name":"JUMP","source":-1,"value":"[out]"},{"begin":3847,"end":4104,"name":"tag","source":-1,"value":"139"},{"begin":3847,"end":4104,"name":"JUMPDEST","source":-1},{"begin":3847,"end":4104,"name":"PUSH","source":-1,"value":"0"},{"begin":3959,"end":3961,"name":"PUSH","source":-1,"value":"20"},{"begin":3947,"end":3956,"name":"DUP3","source":-1},{"begin":3938,"end":3945,"name":"DUP5","source":-1},{"begin":3934,"end":3957,"name":"SUB","source":-1},{"begin":3930,"end":3962,"name":"SLT","source":-1},{"begin":3927,"end":3929,"name":"ISZERO","source":-1},{"begin":3927,"end":3929,"name":"PUSH [tag]","source":-1,"value":"181"},{"begin":3927,"end":3929,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":3965,"end":3977,"name":"REVERT","source":-1},{"begin":3927,"end":3929,"name":"tag","source":-1,"value":"181"},{"begin":3927,"end":3929,"name":"JUMPDEST","source":-1},{"begin":1784,"end":1790,"name":"DUP2","source":-1},{"begin":1778,"end":1791,"name":"MLOAD","source":-1},{"begin":14474,"end":14479,"name":"DUP1","source":-1},{"begin":12547,"end":12560,"name":"ISZERO","source":-1},{"begin":12540,"end":12561,"name":"ISZERO","source":-1},{"begin":14452,"end":14457,"name":"DUP2","source":-1},{"begin":14449,"end":14481,"name":"EQ","source":-1},{"begin":14439,"end":14441,"name":"PUSH [tag]","source":-1,"value":"182"},{"begin":14439,"end":14441,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":14485,"end":14497,"name":"REVERT","source":-1},{"begin":14439,"end":14441,"name":"tag","source":-1,"value":"182"},{"begin":14439,"end":14441,"name":"JUMPDEST","source":-1},{"begin":4017,"end":4088,"name":"SWAP4","source":-1},{"begin":3921,"end":4104,"name":"SWAP3","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":3921,"end":4104,"name":"JUMP","source":-1,"value":"[out]"},{"begin":4111,"end":4350,"name":"tag","source":-1,"value":"31"},{"begin":4111,"end":4350,"name":"JUMPDEST","source":-1},{"begin":4111,"end":4350,"name":"PUSH","source":-1,"value":"0"},{"begin":4214,"end":4216,"name":"PUSH","source":-1,"value":"20"},{"begin":4202,"end":4211,"name":"DUP3","source":-1},{"begin":4193,"end":4200,"name":"DUP5","source":-1},{"begin":4189,"end":4212,"name":"SUB","source":-1},{"begin":4185,"end":4217,"name":"SLT","source":-1},{"begin":4182,"end":4184,"name":"ISZERO","source":-1},{"begin":4182,"end":4184,"name":"PUSH [tag]","source":-1,"value":"184"},{"begin":4182,"end":4184,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":4220,"end":4232,"name":"REVERT","source":-1},{"begin":4182,"end":4184,"name":"tag","source":-1,"value":"184"},{"begin":4182,"end":4184,"name":"JUMPDEST","source":-1},{"begin":1917,"end":1923,"name":"DUP2","source":-1},{"begin":1904,"end":1924,"name":"CALLDATALOAD","source":-1},{"begin":12724,"end":12790,"name":"PUSH","source":-1,"value":"FFFFFFFF00000000000000000000000000000000000000000000000000000000"},{"begin":14596,"end":14601,"name":"DUP2","source":-1},{"begin":12713,"end":12791,"name":"AND","source":-1},{"begin":14572,"end":14577,"name":"DUP2","source":-1},{"begin":14569,"end":14603,"name":"EQ","source":-1},{"begin":14559,"end":14561,"name":"PUSH [tag]","source":-1,"value":"182"},{"begin":14559,"end":14561,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":14607,"end":14619,"name":"REVERT","source":-1},{"begin":4357,"end":4660,"name":"tag","source":-1,"value":"130"},{"begin":4357,"end":4660,"name":"JUMPDEST","source":-1},{"begin":4357,"end":4660,"name":"PUSH","source":-1,"value":"0"},{"begin":4492,"end":4494,"name":"PUSH","source":-1,"value":"20"},{"begin":4480,"end":4489,"name":"DUP3","source":-1},{"begin":4471,"end":4478,"name":"DUP5","source":-1},{"begin":4467,"end":4490,"name":"SUB","source":-1},{"begin":4463,"end":4495,"name":"SLT","source":-1},{"begin":4460,"end":4462,"name":"ISZERO","source":-1},{"begin":4460,"end":4462,"name":"PUSH [tag]","source":-1,"value":"187"},{"begin":4460,"end":4462,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":4498,"end":4510,"name":"REVERT","source":-1},{"begin":4460,"end":4462,"name":"tag","source":-1,"value":"187"},{"begin":4460,"end":4462,"name":"JUMPDEST","source":-1},{"begin":2077,"end":2083,"name":"DUP2","source":-1},{"begin":2071,"end":2084,"name":"MLOAD","source":-1},{"begin":2089,"end":2142,"name":"PUSH [tag]","source":-1,"value":"182"},{"begin":2136,"end":2141,"name":"DUP2","source":-1},{"begin":2089,"end":2142,"name":"PUSH [tag]","source":-1,"value":"160"},{"begin":2089,"end":2142,"name":"JUMP","source":-1,"value":"[in]"},{"begin":4667,"end":4936,"name":"tag","source":-1,"value":"78"},{"begin":4667,"end":4936,"name":"JUMPDEST","source":-1},{"begin":4667,"end":4936,"name":"PUSH","source":-1,"value":"0"},{"begin":4785,"end":4787,"name":"PUSH","source":-1,"value":"20"},{"begin":4773,"end":4782,"name":"DUP3","source":-1},{"begin":4764,"end":4771,"name":"DUP5","source":-1},{"begin":4760,"end":4783,"name":"SUB","source":-1},{"begin":4756,"end":4788,"name":"SLT","source":-1},{"begin":4753,"end":4755,"name":"ISZERO","source":-1},{"begin":4753,"end":4755,"name":"PUSH [tag]","source":-1,"value":"190"},{"begin":4753,"end":4755,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":4791,"end":4803,"name":"REVERT","source":-1},{"begin":4753,"end":4755,"name":"tag","source":-1,"value":"190"},{"begin":4753,"end":4755,"name":"JUMPDEST","source":-1},{"begin":2248,"end":2254,"name":"DUP2","source":-1},{"begin":2235,"end":2255,"name":"CALLDATALOAD","source":-1},{"begin":2260,"end":2307,"name":"PUSH [tag]","source":-1,"value":"182"},{"begin":2301,"end":2306,"name":"DUP2","source":-1},{"begin":2260,"end":2307,"name":"PUSH [tag]","source":-1,"value":"160"},{"begin":2260,"end":2307,"name":"JUMP","source":-1,"value":"[in]"},{"begin":4943,"end":5184,"name":"tag","source":-1,"value":"16"},{"begin":4943,"end":5184,"name":"JUMPDEST","source":-1},{"begin":4943,"end":5184,"name":"PUSH","source":-1,"value":"0"},{"begin":5047,"end":5049,"name":"PUSH","source":-1,"value":"20"},{"begin":5035,"end":5044,"name":"DUP3","source":-1},{"begin":5026,"end":5033,"name":"DUP5","source":-1},{"begin":5022,"end":5045,"name":"SUB","source":-1},{"begin":5018,"end":5050,"name":"SLT","source":-1},{"begin":5015,"end":5017,"name":"ISZERO","source":-1},{"begin":5015,"end":5017,"name":"PUSH [tag]","source":-1,"value":"193"},{"begin":5015,"end":5017,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":5053,"end":5065,"name":"REVERT","source":-1},{"begin":5015,"end":5017,"name":"tag","source":-1,"value":"193"},{"begin":5015,"end":5017,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":2386,"end":2406,"name":"CALLDATALOAD","source":-1},{"begin":2386,"end":2406,"name":"SWAP2","source":-1},{"begin":5009,"end":5184,"name":"SWAP1","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":5009,"end":5184,"name":"JUMP","source":-1,"value":"[out]"},{"begin":5191,"end":5454,"name":"tag","source":-1,"value":"104"},{"begin":5191,"end":5454,"name":"JUMPDEST","source":-1},{"begin":5191,"end":5454,"name":"PUSH","source":-1,"value":"0"},{"begin":5306,"end":5308,"name":"PUSH","source":-1,"value":"20"},{"begin":5294,"end":5303,"name":"DUP3","source":-1},{"begin":5285,"end":5292,"name":"DUP5","source":-1},{"begin":5281,"end":5304,"name":"SUB","source":-1},{"begin":5277,"end":5309,"name":"SLT","source":-1},{"begin":5274,"end":5276,"name":"ISZERO","source":-1},{"begin":5274,"end":5276,"name":"PUSH [tag]","source":-1,"value":"195"},{"begin":5274,"end":5276,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP1","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":5312,"end":5324,"name":"REVERT","source":-1},{"begin":5274,"end":5276,"name":"tag","source":-1,"value":"195"},{"begin":5274,"end":5276,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":2534,"end":2547,"name":"MLOAD","source":-1},{"begin":2534,"end":2547,"name":"SWAP2","source":-1},{"begin":5268,"end":5454,"name":"SWAP1","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":5268,"end":5454,"name":"JUMP","source":-1,"value":"[out]"},{"begin":7855,"end":8242,"name":"tag","source":-1,"value":"86"},{"begin":7855,"end":8242,"name":"JUMPDEST","source":-1},{"begin":6563,"end":6600,"name":"SWAP2","source":-1},{"begin":6563,"end":6600,"name":"DUP3","source":-1},{"begin":6563,"end":6600,"name":"MSTORE","source":-1},{"begin":12724,"end":12790,"name":"PUSH","source":-1,"value":"FFFFFFFF00000000000000000000000000000000000000000000000000000000"},{"begin":12713,"end":12791,"name":"AND","source":-1},{"begin":8106,"end":8108,"name":"PUSH","source":-1,"value":"20"},{"begin":8097,"end":8109,"name":"DUP3","source":-1},{"begin":8097,"end":8109,"name":"ADD","source":-1},{"begin":6858,"end":6914,"name":"MSTORE","source":-1},{"begin":8206,"end":8217,"name":"PUSH","source":-1,"value":"24"},{"begin":8206,"end":8217,"name":"ADD","source":-1},{"begin":8206,"end":8217,"name":"SWAP1","source":-1},{"begin":7997,"end":8242,"name":"JUMP","source":-1,"value":"[out]"},{"begin":8249,"end":8520,"name":"tag","source":-1,"value":"143"},{"begin":8249,"end":8520,"name":"JUMPDEST","source":-1},{"begin":8249,"end":8520,"name":"PUSH","source":-1,"value":"0"},{"begin":7086,"end":7091,"name":"DUP3","source":-1},{"begin":11759,"end":11771,"name":"MLOAD","source":-1},{"begin":-1,"end":-1,"name":"DUP2","source":-1},{"begin":13904,"end":14005,"name":"tag","source":-1,"value":"198"},{"begin":13904,"end":14005,"name":"JUMPDEST","source":-1},{"begin":13918,"end":13924,"name":"DUP2","source":-1},{"begin":13915,"end":13916,"name":"DUP2","source":-1},{"begin":13912,"end":13925,"name":"LT","source":-1},{"begin":13904,"end":14005,"name":"ISZERO","source":-1},{"begin":13904,"end":14005,"name":"PUSH [tag]","source":-1,"value":"200"},{"begin":13904,"end":14005,"name":"JUMPI","source":-1},{"begin":7230,"end":7234,"name":"PUSH","source":-1,"value":"20"},{"begin":13985,"end":13996,"name":"DUP2","source":-1},{"begin":13985,"end":13996,"name":"DUP7","source":-1},{"begin":13985,"end":13996,"name":"ADD","source":-1},{"begin":13985,"end":13996,"name":"DUP2","source":-1},{"begin":13985,"end":13996,"name":"ADD","source":-1},{"begin":13979,"end":13997,"name":"MLOAD","source":-1},{"begin":13966,"end":13977,"name":"DUP6","source":-1},{"begin":13966,"end":13977,"name":"DUP4","source":-1},{"begin":13966,"end":13977,"name":"ADD","source":-1},{"begin":13959,"end":13998,"name":"MSTORE","source":-1},{"begin":13933,"end":13943,"name":"ADD","source":-1},{"begin":13904,"end":14005,"name":"PUSH [tag]","source":-1,"value":"198"},{"begin":13904,"end":14005,"name":"JUMP","source":-1},{"begin":13904,"end":14005,"name":"tag","source":-1,"value":"200"},{"begin":13904,"end":14005,"name":"JUMPDEST","source":-1},{"begin":14020,"end":14026,"name":"DUP2","source":-1},{"begin":14017,"end":14018,"name":"DUP2","source":-1},{"begin":14014,"end":14027,"name":"GT","source":-1},{"begin":14011,"end":14013,"name":"ISZERO","source":-1},{"begin":14011,"end":14013,"name":"PUSH [tag]","source":-1,"value":"201"},{"begin":14011,"end":14013,"name":"JUMPI","source":-1},{"begin":-1,"end":-1,"name":"DUP3","source":-1},{"begin":14076,"end":14082,"name":"DUP3","source":-1},{"begin":14071,"end":14074,"name":"DUP6","source":-1},{"begin":14067,"end":14083,"name":"ADD","source":-1},{"begin":14060,"end":14087,"name":"MSTORE","source":-1},{"begin":14011,"end":14013,"name":"tag","source":-1,"value":"201"},{"begin":14011,"end":14013,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":7261,"end":7277,"name":"SWAP2","source":-1},{"begin":7261,"end":7277,"name":"SWAP1","source":-1},{"begin":7261,"end":7277,"name":"SWAP2","source":-1},{"begin":7261,"end":7277,"name":"ADD","source":-1},{"begin":7261,"end":7277,"name":"SWAP3","source":-1},{"begin":8383,"end":8520,"name":"SWAP2","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":8383,"end":8520,"name":"JUMP","source":-1,"value":"[out]"},{"begin":8527,"end":8749,"name":"tag","source":-1,"value":"99"},{"begin":8527,"end":8749,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":13095,"end":13149,"name":"SWAP2","source":-1},{"begin":13095,"end":13149,"name":"SWAP1","source":-1},{"begin":13095,"end":13149,"name":"SWAP2","source":-1},{"begin":13095,"end":13149,"name":"AND","source":-1},{"begin":5714,"end":5751,"name":"DUP2","source":-1},{"begin":5714,"end":5751,"name":"MSTORE","source":-1},{"begin":8654,"end":8656,"name":"PUSH","source":-1,"value":"20"},{"begin":8639,"end":8657,"name":"ADD","source":-1},{"begin":8639,"end":8657,"name":"SWAP1","source":-1},{"begin":8625,"end":8749,"name":"JUMP","source":-1,"value":"[out]"},{"begin":8756,"end":9089,"name":"tag","source":-1,"value":"122"},{"begin":8756,"end":9089,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":13095,"end":13149,"name":"SWAP3","source":-1},{"begin":13095,"end":13149,"name":"SWAP1","source":-1},{"begin":13095,"end":13149,"name":"SWAP3","source":-1},{"begin":13095,"end":13149,"name":"AND","source":-1},{"begin":5714,"end":5751,"name":"DUP3","source":-1},{"begin":5714,"end":5751,"name":"MSTORE","source":-1},{"begin":9075,"end":9077,"name":"PUSH","source":-1,"value":"20"},{"begin":9060,"end":9078,"name":"DUP3","source":-1},{"begin":9060,"end":9078,"name":"ADD","source":-1},{"begin":6563,"end":6600,"name":"MSTORE","source":-1},{"begin":8911,"end":8913,"name":"PUSH","source":-1,"value":"40"},{"begin":8896,"end":8914,"name":"ADD","source":-1},{"begin":8896,"end":8914,"name":"SWAP1","source":-1},{"begin":8882,"end":9089,"name":"JUMP","source":-1,"value":"[out]"},{"begin":9096,"end":9466,"name":"tag","source":-1,"value":"47"},{"begin":9096,"end":9466,"name":"JUMPDEST","source":-1},{"begin":9273,"end":9275,"name":"PUSH","source":-1,"value":"20"},{"begin":9287,"end":9334,"name":"DUP1","source":-1},{"begin":9287,"end":9334,"name":"DUP3","source":-1},{"begin":9287,"end":9334,"name":"MSTORE","source":-1},{"begin":11759,"end":11771,"name":"DUP3","source":-1},{"begin":11759,"end":11771,"name":"MLOAD","source":-1},{"begin":9258,"end":9276,"name":"DUP3","source":-1},{"begin":9258,"end":9276,"name":"DUP3","source":-1},{"begin":9258,"end":9276,"name":"ADD","source":-1},{"begin":12162,"end":12181,"name":"DUP2","source":-1},{"begin":12162,"end":12181,"name":"SWAP1","source":-1},{"begin":12162,"end":12181,"name":"MSTORE","source":-1},{"begin":9096,"end":9466,"name":"PUSH","source":-1,"value":"0"},{"begin":9096,"end":9466,"name":"SWAP2","source":-1},{"begin":9273,"end":9275,"name":"SWAP1","source":-1},{"begin":11613,"end":11627,"name":"DUP5","source":-1},{"begin":11613,"end":11627,"name":"DUP3","source":-1},{"begin":11613,"end":11627,"name":"ADD","source":-1},{"begin":11613,"end":11627,"name":"SWAP1","source":-1},{"begin":12202,"end":12216,"name":"PUSH","source":-1,"value":"40"},{"begin":12202,"end":12216,"name":"DUP6","source":-1},{"begin":12202,"end":12216,"name":"ADD","source":-1},{"begin":12202,"end":12216,"name":"SWAP1","source":-1},{"begin":9096,"end":9466,"name":"DUP5","source":-1},{"begin":6202,"end":6462,"name":"tag","source":-1,"value":"205"},{"begin":6202,"end":6462,"name":"JUMPDEST","source":-1},{"begin":6227,"end":6233,"name":"DUP2","source":-1},{"begin":6224,"end":6225,"name":"DUP2","source":-1},{"begin":6221,"end":6234,"name":"LT","source":-1},{"begin":6202,"end":6462,"name":"ISZERO","source":-1},{"begin":6202,"end":6462,"name":"PUSH [tag]","source":-1,"value":"207"},{"begin":6202,"end":6462,"name":"JUMPI","source":-1},{"begin":6288,"end":6301,"name":"DUP4","source":-1},{"begin":6288,"end":6301,"name":"MLOAD","source":-1},{"begin":6563,"end":6600,"name":"DUP4","source":-1},{"begin":6563,"end":6600,"name":"MSTORE","source":-1},{"begin":12017,"end":12031,"name":"SWAP3","source":-1},{"begin":12017,"end":12031,"name":"DUP5","source":-1},{"begin":12017,"end":12031,"name":"ADD","source":-1},{"begin":12017,"end":12031,"name":"SWAP3","source":-1},{"begin":5615,"end":5629,"name":"SWAP2","source":-1},{"begin":5615,"end":5629,"name":"DUP5","source":-1},{"begin":5615,"end":5629,"name":"ADD","source":-1},{"begin":5615,"end":5629,"name":"SWAP2","source":-1},{"begin":6249,"end":6250,"name":"PUSH","source":-1,"value":"1"},{"begin":6242,"end":6251,"name":"ADD","source":-1},{"begin":6202,"end":6462,"name":"PUSH [tag]","source":-1,"value":"205"},{"begin":6202,"end":6462,"name":"JUMP","source":-1},{"begin":6202,"end":6462,"name":"tag","source":-1,"value":"207"},{"begin":6202,"end":6462,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":9340,"end":9456,"name":"SWAP1","source":-1},{"begin":9340,"end":9456,"name":"SWAP7","source":-1},{"begin":9244,"end":9466,"name":"SWAP6","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":9244,"end":9466,"name":"JUMP","source":-1,"value":"[out]"},{"begin":9473,"end":9695,"name":"tag","source":-1,"value":"34"},{"begin":9473,"end":9695,"name":"JUMPDEST","source":-1},{"begin":6563,"end":6600,"name":"SWAP1","source":-1},{"begin":6563,"end":6600,"name":"DUP2","source":-1},{"begin":6563,"end":6600,"name":"MSTORE","source":-1},{"begin":9600,"end":9602,"name":"PUSH","source":-1,"value":"20"},{"begin":9585,"end":9603,"name":"ADD","source":-1},{"begin":9585,"end":9603,"name":"SWAP1","source":-1},{"begin":9571,"end":9695,"name":"JUMP","source":-1,"value":"[out]"},{"begin":9702,"end":10146,"name":"tag","source":-1,"value":"134"},{"begin":9702,"end":10146,"name":"JUMPDEST","source":-1},{"begin":6563,"end":6600,"name":"SWAP3","source":-1},{"begin":6563,"end":6600,"name":"DUP4","source":-1},{"begin":6563,"end":6600,"name":"MSTORE","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":13095,"end":13149,"name":"SWAP2","source":-1},{"begin":13095,"end":13149,"name":"DUP3","source":-1},{"begin":13095,"end":13149,"name":"AND","source":-1},{"begin":10049,"end":10051,"name":"PUSH","source":-1,"value":"20"},{"begin":10034,"end":10052,"name":"DUP5","source":-1},{"begin":10034,"end":10052,"name":"ADD","source":-1},{"begin":5714,"end":5751,"name":"MSTORE","source":-1},{"begin":13095,"end":13149,"name":"AND","source":-1},{"begin":10132,"end":10134,"name":"PUSH","source":-1,"value":"40"},{"begin":10117,"end":10135,"name":"DUP3","source":-1},{"begin":10117,"end":10135,"name":"ADD","source":-1},{"begin":5714,"end":5751,"name":"MSTORE","source":-1},{"begin":9885,"end":9887,"name":"PUSH","source":-1,"value":"60"},{"begin":9870,"end":9888,"name":"ADD","source":-1},{"begin":9870,"end":9888,"name":"SWAP1","source":-1},{"begin":9856,"end":10146,"name":"JUMP","source":-1,"value":"[out]"},{"begin":10910,"end":11166,"name":"tag","source":-1,"value":"174"},{"begin":10910,"end":11166,"name":"JUMPDEST","source":-1},{"begin":10972,"end":10974,"name":"PUSH","source":-1,"value":"40"},{"begin":10966,"end":10975,"name":"MLOAD","source":-1},{"begin":10998,"end":11015,"name":"DUP2","source":-1},{"begin":10998,"end":11015,"name":"DUP2","source":-1},{"begin":10998,"end":11015,"name":"ADD","source":-1},{"begin":11073,"end":11091,"name":"PUSH","source":-1,"value":"FFFFFFFFFFFFFFFF"},{"begin":11058,"end":11092,"name":"DUP2","source":-1},{"begin":11058,"end":11092,"name":"GT","source":-1},{"begin":11094,"end":11116,"name":"DUP3","source":-1},{"begin":11094,"end":11116,"name":"DUP3","source":-1},{"begin":11094,"end":11116,"name":"LT","source":-1},{"begin":11055,"end":11117,"name":"OR","source":-1},{"begin":11052,"end":11054,"name":"ISZERO","source":-1},{"begin":11052,"end":11054,"name":"PUSH [tag]","source":-1,"value":"214"},{"begin":11052,"end":11054,"name":"JUMPI","source":-1},{"begin":11130,"end":11131,"name":"PUSH","source":-1,"value":"0"},{"begin":11130,"end":11131,"name":"DUP1","source":-1},{"begin":11120,"end":11132,"name":"REVERT","source":-1},{"begin":11052,"end":11054,"name":"tag","source":-1,"value":"214"},{"begin":11052,"end":11054,"name":"JUMPDEST","source":-1},{"begin":10972,"end":10974,"name":"PUSH","source":-1,"value":"40"},{"begin":11139,"end":11161,"name":"MSTORE","source":-1},{"begin":10950,"end":11166,"name":"SWAP2","source":-1},{"begin":10950,"end":11166,"name":"SWAP1","source":-1},{"begin":-1,"end":-1,"name":"POP","source":-1},{"begin":10950,"end":11166,"name":"JUMP","source":-1,"value":"[out]"},{"begin":14269,"end":14386,"name":"tag","source":-1,"value":"160"},{"begin":14269,"end":14386,"name":"JUMPDEST","source":-1},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"1"},{"begin":-1,"end":-1,"name":"PUSH","source":-1,"value":"A0"},{"begin":-1,"end":-1,"name":"SHL","source":-1},{"begin":-1,"end":-1,"name":"SUB","source":-1},{"begin":14356,"end":14361,"name":"DUP2","source":-1},{"begin":13095,"end":13149,"name":"AND","source":-1},{"begin":14331,"end":14336,"name":"DUP2","source":-1},{"begin":14328,"end":14363,"name":"EQ","source":-1},{"begin":14318,"end":14320,"name":"PUSH [tag]","source":-1,"value":"108"},{"begin":14318,"end":14320,"name":"JUMPI","source":-1},{"begin":14377,"end":14378,"name":"PUSH","source":-1,"value":"0"},{"begin":14377,"end":14378,"name":"DUP1","source":-1},{"begin":14367,"end":14379,"name":"REVERT","source":-1}]}}},"bytecode":{"object":"60c060405234801561001057600080fd5b50604051610be6380380610be683398101604081905261002f9161004d565b30608052600160005560601b6001600160601b03191660a05261007b565b60006020828403121561005e578081fd5b81516001600160a01b0381168114610074578182fd5b9392505050565b60805160a05160601c610b406100a66000398061041352806105495250806102a75250610b406000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063851c1bb311610076578063d877845c1161005b578063d877845c14610129578063e42abf3514610131578063fbfa77cf14610151576100a3565b8063851c1bb314610101578063aaabadc514610114576100a3565b806338e9922e146100a857806355c67628146100bd5780636b6b9f69146100db5780636daefab6146100ee575b600080fd5b6100bb6100b636600461099c565b610159565b005b6100c56101b8565b6040516100d29190610aa6565b60405180910390f35b6100bb6100e936600461099c565b6101be565b6100bb6100fc3660046107d1565b610211565b6100c561010f366004610924565b6102a3565b61011c6102f5565b6040516100d29190610a35565b6100c5610304565b61014461013f366004610852565b61030a565b6040516100d29190610a62565b61011c610411565b610161610435565b6101786706f05b59d3b2000082111561025861047e565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906101ad908390610aa6565b60405180910390a150565b60015490565b6101c6610435565b6101dc662386f26fc1000082111561025961047e565b60028190556040517f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a906101ad908390610aa6565b610219610490565b610221610435565b61022b84836104a9565b60005b8481101561029357600086868381811061024457fe5b90506020020160208101906102599190610980565b9050600085858481811061026957fe5b6020029190910135915061028990506001600160a01b03831685836104b6565b505060010161022e565b5061029c61053e565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102d89291906109cc565b604051602081830303815290604052805190602001209050919050565b60006102ff610545565b905090565b60025490565b6060815167ffffffffffffffff8111801561032457600080fd5b5060405190808252806020026020018201604052801561034e578160200160208202803683370190505b50905060005b825181101561040b5782818151811061036957fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161039c9190610a35565b60206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec91906109b4565b8282815181106103f857fe5b6020908102919091010152600101610354565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104646000357fffffffff00000000000000000000000000000000000000000000000000000000166102a3565b905061047b61047382336105d8565b61019161047e565b50565b8161048c5761048c8161066a565b5050565b6104a26002600054141561019061047e565b6002600055565b61048c818314606761047e565b6105398363a9059cbb60e01b84846040516024016104d5929190610a49565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526106d7565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610964565b60006105e2610545565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b815260040161061193929190610aaf565b60206040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066191906108fd565b90505b92915050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006060836001600160a01b0316836040516106f391906109fc565b6000604051808303816000865af19150503d8060008114610730576040519150601f19603f3d011682016040523d82523d6000602084013e610735565b606091505b5091509150600082141561074d573d6000803e3d6000fd5b61077781516000148061076f57508180602001905181019061076f91906108fd565b6101a261047e565b50505050565b60008083601f84011261078e578182fd5b50813567ffffffffffffffff8111156107a5578182fd5b60208301915083602080830285010111156107bf57600080fd5b9250929050565b803561066481610af5565b6000806000806000606086880312156107e8578081fd5b853567ffffffffffffffff808211156107ff578283fd5b61080b89838a0161077d565b90975095506020880135915080821115610823578283fd5b506108308882890161077d565b909450925050604086013561084481610af5565b809150509295509295909350565b60006020808385031215610864578182fd5b823567ffffffffffffffff8082111561087b578384fd5b818501915085601f83011261088e578384fd5b81358181111561089c578485fd5b83810291506108ac848301610ace565b8181528481019084860184860187018a10156108c6578788fd5b8795505b838610156108f0576108dc8a826107c6565b8352600195909501949186019186016108ca565b5098975050505050505050565b60006020828403121561090e578081fd5b8151801515811461091d578182fd5b9392505050565b600060208284031215610935578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461091d578182fd5b600060208284031215610975578081fd5b815161091d81610af5565b600060208284031215610991578081fd5b813561091d81610af5565b6000602082840312156109ad578081fd5b5035919050565b6000602082840312156109c5578081fd5b5051919050565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b60008251815b81811015610a1c5760208186018101518583015201610a02565b81811115610a2a5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610a9a57835183529284019291840191600101610a7e565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b60405181810167ffffffffffffffff81118282101715610aed57600080fd5b604052919050565b6001600160a01b038116811461047b57600080fdfea26469706673582212207c4ff4bf6dc4ad7b87f81021af046283dcd8a1b585ef0a21ac5693fc52d8d0a064736f6c63430007010033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xBE6 CODESIZE SUB DUP1 PUSH2 0xBE6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x4D JUMP JUMPDEST ADDRESS PUSH1 0x80 MSTORE PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE PUSH2 0x7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x5E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x74 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH2 0xB40 PUSH2 0xA6 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x413 MSTORE DUP1 PUSH2 0x549 MSTORE POP DUP1 PUSH2 0x2A7 MSTORE POP PUSH2 0xB40 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x851C1BB3 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xD877845C GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD877845C EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0xE42ABF35 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x151 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x114 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x38E9922E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x55C67628 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x6B6B9F69 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x6DAEFAB6 EQ PUSH2 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0x99C JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x99C JUMP JUMPDEST PUSH2 0x1BE JUMP JUMPDEST PUSH2 0xBB PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x211 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x304 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xA62 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x411 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x178 PUSH8 0x6F05B59D3B20000 DUP3 GT ISZERO PUSH2 0x258 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC SWAP1 PUSH2 0x1AD SWAP1 DUP4 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x1DC PUSH7 0x2386F26FC10000 DUP3 GT ISZERO PUSH2 0x259 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A SWAP1 PUSH2 0x1AD SWAP1 DUP4 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x490 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x22B DUP5 DUP4 PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x244 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0x980 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x269 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP PUSH2 0x289 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 DUP4 PUSH2 0x4B6 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP PUSH2 0x29C PUSH2 0x53E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D8 SWAP3 SWAP2 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF PUSH2 0x545 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x34E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x40B JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39C SWAP2 SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0x9B4 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x354 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x464 PUSH1 0x0 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x2A3 JUMP JUMPDEST SWAP1 POP PUSH2 0x47B PUSH2 0x473 DUP3 CALLER PUSH2 0x5D8 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x47E JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH2 0x48C JUMPI PUSH2 0x48C DUP2 PUSH2 0x66A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4A2 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x190 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x48C DUP2 DUP4 EQ PUSH1 0x67 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x539 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4D5 SWAP3 SWAP2 SWAP1 PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x6D7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAAABADC5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x964 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E2 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BE2A884 DUP5 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x661 SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 MSTORE PUSH1 0x7 PUSH1 0x24 MSTORE PUSH7 0x42414C23000030 PUSH1 0xA DUP1 DUP5 DIV DUP2 DUP2 MOD PUSH1 0x30 SWAP1 DUP2 ADD PUSH1 0x8 SHL SWAP6 DUP4 SWAP1 MOD SWAP6 SWAP1 SWAP6 ADD SWAP1 DUP3 SWAP1 DIV SWAP2 DUP3 MOD SWAP1 SWAP5 ADD PUSH1 0x10 SHL SWAP4 SWAP1 SWAP4 ADD ADD PUSH1 0xC8 SHL PUSH1 0x44 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x6F3 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x735 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x74D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x777 DUP2 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x76F JUMPI POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x76F SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x1A2 PUSH2 0x47E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x78E JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7A5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x664 DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7FF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x80B DUP10 DUP4 DUP11 ADD PUSH2 0x77D JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x823 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x830 DUP9 DUP3 DUP10 ADD PUSH2 0x77D JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x844 DUP2 PUSH2 0xAF5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x864 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x87B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x89C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP2 MUL SWAP2 POP PUSH2 0x8AC DUP5 DUP4 ADD PUSH2 0xACE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x8C6 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x8F0 JUMPI PUSH2 0x8DC DUP11 DUP3 PUSH2 0x7C6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x8CA JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x91D JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x935 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x91D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x975 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x91D DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x991 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x91D DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AD JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9C5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA1C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xA02 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA2A JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA9A JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA7E JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x4FF4BF6DC4AD7B87F81021AF046283DCD8A1B585EF0A21AC5693FC52D8 0xD0 LOG0 PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ","sourceMap":"1494:3408:9:-:0;;;2533:252;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2741:4;1929:46:0;;2019:1:7;2717:31:9;2124:22:7;2764:14:9::1;::::0;-1:-1:-1;;;;;;2764:14:9;::::1;::::0;1494:3408;;176:293:-1;;306:2;294:9;285:7;281:23;277:32;274:2;;;-1:-1;;312:12;274:2;98:13;;-1:-1;;;;;749:54;;889:50;;879:2;;-1:-1;;943:12;879:2;364:89;268:201;-1:-1;;;268:201::o;:::-;1494:3408:9;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"608060405234801561001057600080fd5b50600436106100a35760003560e01c8063851c1bb311610076578063d877845c1161005b578063d877845c14610129578063e42abf3514610131578063fbfa77cf14610151576100a3565b8063851c1bb314610101578063aaabadc514610114576100a3565b806338e9922e146100a857806355c67628146100bd5780636b6b9f69146100db5780636daefab6146100ee575b600080fd5b6100bb6100b636600461099c565b610159565b005b6100c56101b8565b6040516100d29190610aa6565b60405180910390f35b6100bb6100e936600461099c565b6101be565b6100bb6100fc3660046107d1565b610211565b6100c561010f366004610924565b6102a3565b61011c6102f5565b6040516100d29190610a35565b6100c5610304565b61014461013f366004610852565b61030a565b6040516100d29190610a62565b61011c610411565b610161610435565b6101786706f05b59d3b2000082111561025861047e565b60018190556040517fa9ba3ffe0b6c366b81232caab38605a0699ad5398d6cce76f91ee809e322dafc906101ad908390610aa6565b60405180910390a150565b60015490565b6101c6610435565b6101dc662386f26fc1000082111561025961047e565b60028190556040517f5a0b7386237e7f07fa741efc64e59c9387d2cccafec760efed4d53387f20e19a906101ad908390610aa6565b610219610490565b610221610435565b61022b84836104a9565b60005b8481101561029357600086868381811061024457fe5b90506020020160208101906102599190610980565b9050600085858481811061026957fe5b6020029190910135915061028990506001600160a01b03831685836104b6565b505060010161022e565b5061029c61053e565b5050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000826040516020016102d89291906109cc565b604051602081830303815290604052805190602001209050919050565b60006102ff610545565b905090565b60025490565b6060815167ffffffffffffffff8111801561032457600080fd5b5060405190808252806020026020018201604052801561034e578160200160208202803683370190505b50905060005b825181101561040b5782818151811061036957fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161039c9190610a35565b60206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec91906109b4565b8282815181106103f857fe5b6020908102919091010152600101610354565b50919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006104646000357fffffffff00000000000000000000000000000000000000000000000000000000166102a3565b905061047b61047382336105d8565b61019161047e565b50565b8161048c5761048c8161066a565b5050565b6104a26002600054141561019061047e565b6002600055565b61048c818314606761047e565b6105398363a9059cbb60e01b84846040516024016104d5929190610a49565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526106d7565b505050565b6001600055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610964565b60006105e2610545565b6001600160a01b0316639be2a8848484306040518463ffffffff1660e01b815260040161061193929190610aaf565b60206040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066191906108fd565b90505b92915050565b7f08c379a0000000000000000000000000000000000000000000000000000000006000908152602060045260076024526642414c23000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006060836001600160a01b0316836040516106f391906109fc565b6000604051808303816000865af19150503d8060008114610730576040519150601f19603f3d011682016040523d82523d6000602084013e610735565b606091505b5091509150600082141561074d573d6000803e3d6000fd5b61077781516000148061076f57508180602001905181019061076f91906108fd565b6101a261047e565b50505050565b60008083601f84011261078e578182fd5b50813567ffffffffffffffff8111156107a5578182fd5b60208301915083602080830285010111156107bf57600080fd5b9250929050565b803561066481610af5565b6000806000806000606086880312156107e8578081fd5b853567ffffffffffffffff808211156107ff578283fd5b61080b89838a0161077d565b90975095506020880135915080821115610823578283fd5b506108308882890161077d565b909450925050604086013561084481610af5565b809150509295509295909350565b60006020808385031215610864578182fd5b823567ffffffffffffffff8082111561087b578384fd5b818501915085601f83011261088e578384fd5b81358181111561089c578485fd5b83810291506108ac848301610ace565b8181528481019084860184860187018a10156108c6578788fd5b8795505b838610156108f0576108dc8a826107c6565b8352600195909501949186019186016108ca565b5098975050505050505050565b60006020828403121561090e578081fd5b8151801515811461091d578182fd5b9392505050565b600060208284031215610935578081fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461091d578182fd5b600060208284031215610975578081fd5b815161091d81610af5565b600060208284031215610991578081fd5b813561091d81610af5565b6000602082840312156109ad578081fd5b5035919050565b6000602082840312156109c5578081fd5b5051919050565b9182527fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b60008251815b81811015610a1c5760208186018101518583015201610a02565b81811115610a2a5782828501525b509190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015610a9a57835183529284019291840191600101610a7e565b50909695505050505050565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b60405181810167ffffffffffffffff81118282101715610aed57600080fd5b604052919050565b6001600160a01b038116811461047b57600080fdfea26469706673582212207c4ff4bf6dc4ad7b87f81021af046283dcd8a1b585ef0a21ac5693fc52d8d0a064736f6c63430007010033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x851C1BB3 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xD877845C GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xD877845C EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0xE42ABF35 EQ PUSH2 0x131 JUMPI DUP1 PUSH4 0xFBFA77CF EQ PUSH2 0x151 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x851C1BB3 EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0xAAABADC5 EQ PUSH2 0x114 JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x38E9922E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x55C67628 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x6B6B9F69 EQ PUSH2 0xDB JUMPI DUP1 PUSH4 0x6DAEFAB6 EQ PUSH2 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0x99C JUMP JUMPDEST PUSH2 0x159 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBB PUSH2 0xE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x99C JUMP JUMPDEST PUSH2 0x1BE JUMP JUMPDEST PUSH2 0xBB PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0x7D1 JUMP JUMPDEST PUSH2 0x211 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x924 JUMP JUMPDEST PUSH2 0x2A3 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x2F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x304 JUMP JUMPDEST PUSH2 0x144 PUSH2 0x13F CALLDATASIZE PUSH1 0x4 PUSH2 0x852 JUMP JUMPDEST PUSH2 0x30A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xA62 JUMP JUMPDEST PUSH2 0x11C PUSH2 0x411 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x178 PUSH8 0x6F05B59D3B20000 DUP3 GT ISZERO PUSH2 0x258 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xA9BA3FFE0B6C366B81232CAAB38605A0699AD5398D6CCE76F91EE809E322DAFC SWAP1 PUSH2 0x1AD SWAP1 DUP4 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x1DC PUSH7 0x2386F26FC10000 DUP3 GT ISZERO PUSH2 0x259 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x5A0B7386237E7F07FA741EFC64E59C9387D2CCCAFEC760EFED4D53387F20E19A SWAP1 PUSH2 0x1AD SWAP1 DUP4 SWAP1 PUSH2 0xAA6 JUMP JUMPDEST PUSH2 0x219 PUSH2 0x490 JUMP JUMPDEST PUSH2 0x221 PUSH2 0x435 JUMP JUMPDEST PUSH2 0x22B DUP5 DUP4 PUSH2 0x4A9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x244 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x259 SWAP2 SWAP1 PUSH2 0x980 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x269 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP PUSH2 0x289 SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP6 DUP4 PUSH2 0x4B6 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x22E JUMP JUMPDEST POP PUSH2 0x29C PUSH2 0x53E JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D8 SWAP3 SWAP2 SWAP1 PUSH2 0x9CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2FF PUSH2 0x545 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x324 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x34E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x40B JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x369 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x39C SWAP2 SWAP1 PUSH2 0xA35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EC SWAP2 SWAP1 PUSH2 0x9B4 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x354 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x464 PUSH1 0x0 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x2A3 JUMP JUMPDEST SWAP1 POP PUSH2 0x47B PUSH2 0x473 DUP3 CALLER PUSH2 0x5D8 JUMP JUMPDEST PUSH2 0x191 PUSH2 0x47E JUMP JUMPDEST POP JUMP JUMPDEST DUP2 PUSH2 0x48C JUMPI PUSH2 0x48C DUP2 PUSH2 0x66A JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4A2 PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x190 PUSH2 0x47E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH2 0x48C DUP2 DUP4 EQ PUSH1 0x67 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x539 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4D5 SWAP3 SWAP2 SWAP1 PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x6D7 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAAABADC5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FF SWAP2 SWAP1 PUSH2 0x964 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E2 PUSH2 0x545 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BE2A884 DUP5 DUP5 ADDRESS PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x611 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x661 SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 MSTORE PUSH1 0x7 PUSH1 0x24 MSTORE PUSH7 0x42414C23000030 PUSH1 0xA DUP1 DUP5 DIV DUP2 DUP2 MOD PUSH1 0x30 SWAP1 DUP2 ADD PUSH1 0x8 SHL SWAP6 DUP4 SWAP1 MOD SWAP6 SWAP1 SWAP6 ADD SWAP1 DUP3 SWAP1 DIV SWAP2 DUP3 MOD SWAP1 SWAP5 ADD PUSH1 0x10 SHL SWAP4 SWAP1 SWAP4 ADD ADD PUSH1 0xC8 SHL PUSH1 0x44 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x6F3 SWAP2 SWAP1 PUSH2 0x9FC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x730 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x735 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 EQ ISZERO PUSH2 0x74D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x777 DUP2 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x76F JUMPI POP DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x76F SWAP2 SWAP1 PUSH2 0x8FD JUMP JUMPDEST PUSH2 0x1A2 PUSH2 0x47E JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x78E JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7A5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x664 DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7E8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7FF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x80B DUP10 DUP4 DUP11 ADD PUSH2 0x77D JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x823 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x830 DUP9 DUP3 DUP10 ADD PUSH2 0x77D JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x844 DUP2 PUSH2 0xAF5 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x864 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x87B JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x88E JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x89C JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 DUP2 MUL SWAP2 POP PUSH2 0x8AC DUP5 DUP4 ADD PUSH2 0xACE JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP5 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0x8C6 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x8F0 JUMPI PUSH2 0x8DC DUP11 DUP3 PUSH2 0x7C6 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x8CA JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x91D JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x935 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x91D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x975 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x91D DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x991 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x91D DUP2 PUSH2 0xAF5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9AD JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9C5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x24 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA1C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xA02 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xA2A JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xA9A JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xA7E JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xAED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x47B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x4FF4BF6DC4AD7B87F81021AF046283DCD8A1B585EF0A21AC5693FC52D8 0xD0 LOG0 PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ","sourceMap":"1494:3408:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3244:315;;;;;;:::i;:::-;;:::i;:::-;;3967:106;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3565:396;;;;;;:::i;:::-;;:::i;2791:447::-;;;;;;:::i;:::-;;:::i;2487:430:0:-;;;;;;:::i;:::-;;:::i;4501:101:9:-;;;:::i;:::-;;;;;;;:::i;4079:116::-;;;:::i;4201:294::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1828:29::-;;;:::i;3244:315::-;2156:21:0;:19;:21::i;:::-;3336:104:9::1;1726:5;3345:20;:57;;9987:3:1;3336:8:9;:104::i;:::-;3450:18;:41:::0;;;3506:46:::1;::::0;::::1;::::0;::::1;::::0;3471:20;;3506:46:::1;:::i;:::-;;;;;;;;3244:315:::0;:::o;3967:106::-;4048:18;;3967:106;:::o;3565:396::-;2156:21:0;:19;:21::i;:::-;3667:155:9::1;1811:4;3689:25;:68;;10059:3:1;3667:8:9;:155::i;:::-;3832:23;:51:::0;;;3898:56:::1;::::0;::::1;::::0;::::1;::::0;3858:25;;3898:56:::1;:::i;2791:447::-:0;2562:20:7;:18;:20::i;:::-;2156:21:0::1;:19;:21::i;:::-;2970:66:9::2;3006:6:::0;3021:7;2970:35:::2;:66::i;:::-;3052:9;3047:185;3067:17:::0;;::::2;3047:185;;;3105:12;3120:6;;3127:1;3120:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;3105:24;;3143:14;3160:7;;3168:1;3160:10;;;;;;;;;::::0;;;::::2;;::::0;-1:-1:-1;3184:37:9::2;::::0;-1:-1:-1;;;;;;3184:18:9;::::2;3203:9:::0;3160:10;3184:18:::2;:37::i;:::-;-1:-1:-1::0;;3086:3:9::2;;3047:185;;;;2603:19:7::0;:17;:19::i;:::-;2791:447:9;;;;;:::o;2487:430:0:-;2555:7;2876:22;2900:8;2859:50;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2849:61;;;;;;2842:68;;2487:430;;;:::o;4501:101:9:-;4549:11;4579:16;:14;:16::i;:::-;4572:23;;4501:101;:::o;4079:116::-;4165:23;;4079:116;:::o;4201:294::-;4280:27;4346:6;:13;4332:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4332:28:9;;4319:41;;4375:9;4370:119;4394:6;:13;4390:1;:17;4370:119;;;4444:6;4451:1;4444:9;;;;;;;;;;;;;;-1:-1:-1;;;;;4444:19:9;;4472:4;4444:34;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4428:10;4439:1;4428:13;;;;;;;;;;;;;;;;;:50;4409:3;;4370:119;;;;4201:294;;;:::o;1828:29::-;;;:::o;2300:181:0:-;2355:16;2374:20;2386:7;;;;2374:11;:20::i;:::-;2355:39;;2404:70;2413:33;2425:8;2435:10;2413:11;:33::i;:::-;6674:3:1;2404:8:0;:70::i;:::-;2300:181;:::o;866:101:1:-;935:9;930:34;;946:18;954:9;946:7;:18::i;:::-;866:101;;:::o;2635:271:7:-;2758:48;2062:1;2767:7;;:19;;6618:3:1;2758:8:7;:48::i;:::-;2062:1;2881:7;:18;2635:271::o;855:131:5:-;933:46;947:1;942;:6;5002:3:1;933:8:5;:46::i;885:214:8:-;997:95;1025:5;1056:23;;;1081:2;1085:5;1033:58;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1033:58:8;;;;;;;;;;;;;;;;;;;;;;;;;;;997:19;:95::i;:::-;885:214;;;:::o;2912:208:7:-;2019:1;3091:7;:22;2912:208::o;4793:107:9:-;4842:11;4872:5;-1:-1:-1;;;;;4872:19:9;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;4608:179::-;4696:4;4719:16;:14;:16::i;:::-;-1:-1:-1;;;;;4719:27:9;;4747:8;4757:7;4774:4;4719:61;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4712:68;;4608:179;;;;;:::o;1074:3172:1:-;3593:66;3588:3;3581:79;;;3799:66;3793:4;3786:80;3941:1;3935:4;3928:15;2999:73;2210:2;2243:18;;;2288;;;2215:4;2284:29;;;3040:1;3036:14;2195:18;;;;3025:26;;;;2336:18;;;;2383;;;2379:29;;;3057:2;3053:17;3021:50;;;;2999:73;2994:3;2990:83;4008:4;4001:26;4234:3;;4224:14;1695:799:8;1938:12;1952:23;1979:5;-1:-1:-1;;;;;1979:10:8;1990:4;1979:16;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1937:58;;;;2133:1;2124:7;2121:14;2118:2;;;2175:16;2172:1;2169;2154:38;2219:16;2216:1;2209:27;2118:2;2390:97;2399:10;:17;2420:1;2399:22;:56;;;;2436:10;2425:30;;;;;;;;;;;;:::i;:::-;7763:3:1;2390:8:8;:97::i;:::-;1695:799;;;;:::o;168:366:-1:-;;;312:3;305:4;297:6;293:17;289:27;279:2;;-1:-1;;320:12;279:2;-1:-1;350:20;;390:18;379:30;;376:2;;;-1:-1;;412:12;376:2;456:4;448:6;444:17;432:29;;507:3;456:4;;491:6;487:17;448:6;473:32;;470:41;467:2;;;524:1;;514:12;467:2;272:262;;;;;:::o;2154:158::-;2235:20;;2260:47;2235:20;2260:47;:::i;2597:831::-;;;;;;2819:2;2807:9;2798:7;2794:23;2790:32;2787:2;;;-1:-1;;2825:12;2787:2;2883:17;2870:31;2921:18;;2913:6;2910:30;2907:2;;;-1:-1;;2943:12;2907:2;2981:94;3067:7;3058:6;3047:9;3043:22;2981:94;:::i;:::-;2963:112;;-1:-1;2963:112;-1:-1;3140:2;3125:18;;3112:32;;-1:-1;3153:30;;;3150:2;;;-1:-1;;3186:12;3150:2;;3224:80;3296:7;3287:6;3276:9;3272:22;3224:80;:::i;:::-;3206:98;;-1:-1;3206:98;-1:-1;;3341:2;3380:22;;72:20;97:33;72:20;97:33;:::i;:::-;3349:63;;;;2781:647;;;;;;;;:::o;3435:405::-;;3578:2;;3566:9;3557:7;3553:23;3549:32;3546:2;;;-1:-1;;3584:12;3546:2;3642:17;3629:31;3680:18;;3672:6;3669:30;3666:2;;;-1:-1;;3702:12;3666:2;3807:6;3796:9;3792:22;;;699:3;692:4;684:6;680:17;676:27;666:2;;-1:-1;;707:12;666:2;754:6;741:20;3680:18;11338:6;11335:30;11332:2;;;-1:-1;;11368:12;11332:2;3578;11405:6;11401:17;;;776:94;3578:2;11401:17;11466:15;776:94;:::i;:::-;898:21;;;955:14;;;;930:17;;;1035:27;;;;;1032:36;-1:-1;1029:2;;;-1:-1;;1071:12;1029:2;-1:-1;1097:10;;1091:220;1116:6;1113:1;1110:13;1091:220;;;1196:51;1243:3;1231:10;1196:51;:::i;:::-;1184:64;;1138:1;1131:9;;;;;1262:14;;;;1290;;1091:220;;;-1:-1;3722:102;3540:300;-1:-1;;;;;;;;3540:300::o;3847:257::-;;3959:2;3947:9;3938:7;3934:23;3930:32;3927:2;;;-1:-1;;3965:12;3927:2;1784:6;1778:13;14474:5;12547:13;12540:21;14452:5;14449:32;14439:2;;-1:-1;;14485:12;14439:2;4017:71;3921:183;-1:-1;;;3921:183::o;4111:239::-;;4214:2;4202:9;4193:7;4189:23;4185:32;4182:2;;;-1:-1;;4220:12;4182:2;1917:6;1904:20;12724:66;14596:5;12713:78;14572:5;14569:34;14559:2;;-1:-1;;14607:12;4357:303;;4492:2;4480:9;4471:7;4467:23;4463:32;4460:2;;;-1:-1;;4498:12;4460:2;2077:6;2071:13;2089:53;2136:5;2089:53;:::i;4667:269::-;;4785:2;4773:9;4764:7;4760:23;4756:32;4753:2;;;-1:-1;;4791:12;4753:2;2248:6;2235:20;2260:47;2301:5;2260:47;:::i;4943:241::-;;5047:2;5035:9;5026:7;5022:23;5018:32;5015:2;;;-1:-1;;5053:12;5015:2;-1:-1;2386:20;;5009:175;-1:-1;5009:175::o;5191:263::-;;5306:2;5294:9;5285:7;5281:23;5277:32;5274:2;;;-1:-1;;5312:12;5274:2;-1:-1;2534:13;;5268:186;-1:-1;5268:186::o;7855:387::-;6563:37;;;12724:66;12713:78;8106:2;8097:12;;6858:56;8206:11;;;7997:245::o;8249:271::-;;7086:5;11759:12;-1:-1;13904:101;13918:6;13915:1;13912:13;13904:101;;;7230:4;13985:11;;;;;13979:18;13966:11;;;13959:39;13933:10;13904:101;;;14020:6;14017:1;14014:13;14011:2;;;-1:-1;14076:6;14071:3;14067:16;14060:27;14011:2;-1:-1;7261:16;;;;;8383:137;-1:-1;;8383:137::o;8527:222::-;-1:-1;;;;;13095:54;;;;5714:37;;8654:2;8639:18;;8625:124::o;8756:333::-;-1:-1;;;;;13095:54;;;;5714:37;;9075:2;9060:18;;6563:37;8911:2;8896:18;;8882:207::o;9096:370::-;9273:2;9287:47;;;11759:12;;9258:18;;;12162:19;;;9096:370;;9273:2;11613:14;;;;12202;;;;9096:370;6202:260;6227:6;6224:1;6221:13;6202:260;;;6288:13;;6563:37;;12017:14;;;;5615;;;;6249:1;6242:9;6202:260;;;-1:-1;9340:116;;9244:222;-1:-1;;;;;;9244:222::o;9473:::-;6563:37;;;9600:2;9585:18;;9571:124::o;9702:444::-;6563:37;;;-1:-1;;;;;13095:54;;;10049:2;10034:18;;5714:37;13095:54;10132:2;10117:18;;5714:37;9885:2;9870:18;;9856:290::o;10910:256::-;10972:2;10966:9;10998:17;;;11073:18;11058:34;;11094:22;;;11055:62;11052:2;;;11130:1;;11120:12;11052:2;10972;11139:22;10950:216;;-1:-1;10950:216::o;14269:117::-;-1:-1;;;;;14356:5;13095:54;14331:5;14328:35;14318:2;;14377:1;;14367:12","linkReferences":{},"immutableReferences":{"8":[{"start":679,"length":32}],"837":[{"start":1043,"length":32},{"start":1353,"length":32}]}},"methodIdentifiers":{"getActionId(bytes4)":"851c1bb3","getAuthorizer()":"aaabadc5","getCollectedFeeAmounts(address[])":"e42abf35","getFlashLoanFeePercentage()":"d877845c","getSwapFeePercentage()":"55c67628","setFlashLoanFeePercentage(uint256)":"6b6b9f69","setSwapFeePercentage(uint256)":"38e9922e","vault()":"fbfa77cf","withdrawCollectedFees(address[],uint256[],address)":"6daefab6"},"gasEstimates":{"creation":{"codeDepositCost":"576000","executionCost":"infinite","totalCost":"infinite"},"external":{"getActionId(bytes4)":"infinite","getAuthorizer()":"infinite","getCollectedFeeAmounts(address[])":"infinite","getFlashLoanFeePercentage()":"1050","getSwapFeePercentage()":"1051","setFlashLoanFeePercentage(uint256)":"infinite","setSwapFeePercentage(uint256)":"infinite","vault()":"infinite","withdrawCollectedFees(address[],uint256[],address)":"infinite"},"internal":{"_canPerform(bytes32,address)":"infinite","_getAuthorizer()":"infinite"}}},"ewasm":{"wasm":""}}},"contracts/vault/interfaces/IAsset.sol":{"IAsset":{"abi":[],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/interfaces/IAsset.sol\":\"IAsset\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like types. This concept is unrelated to a Pool's Asset Managers."},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}}},"ewasm":{"wasm":""}}},"contracts/vault/interfaces/IAuthorizer.sol":{"IAuthorizer":{"abi":[{"type":"function","name":"canPerform","inputs":[{"name":"actionId","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"},{"name":"where","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"}],\"name\":\"canPerform\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canPerform(bytes32,address,address)\":{\"details\":\"Returns true if `account` can perform the action described by `actionId` in the contract `where`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/interfaces/IAuthorizer.sol\":\"IAuthorizer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","methods":{"canPerform(bytes32,address,address)":{"details":"Returns true if `account` can perform the action described by `actionId` in the contract `where`."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"canPerform(bytes32,address,address)":"9be2a884"}},"ewasm":{"wasm":""}}},"contracts/vault/interfaces/IFlashLoanRecipient.sol":{"IFlashLoanRecipient":{"abi":[{"type":"function","name":"receiveFlashLoan","inputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"feeAmounts","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/interfaces/IFlashLoanRecipient.sol\":\"IFlashLoanRecipient\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6886740dcaebfb24a25f914ce5b4299aeab3fe0cc135a1707c0fe4e3d6d02cb6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","methods":{"receiveFlashLoan(address[],uint256[],uint256[],bytes)":{"details":"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"receiveFlashLoan(address[],uint256[],uint256[],bytes)":"f04f2707"}},"ewasm":{"wasm":""}}},"contracts/vault/interfaces/IVault.sol":{"IVault":{"abi":[{"type":"function","name":"WETH","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IWETH"}],"stateMutability":"view"},{"type":"function","name":"batchSwap","inputs":[{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"swaps","type":"tuple[]","internalType":"struct IVault.BatchSwapStep[]","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"assetInIndex","type":"uint256","internalType":"uint256"},{"name":"assetOutIndex","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]},{"name":"limits","type":"int256[]","internalType":"int256[]"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"int256[]","internalType":"int256[]"}],"stateMutability":"payable"},{"type":"function","name":"deregisterTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"exitPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"request","type":"tuple","internalType":"struct IVault.ExitPoolRequest","components":[{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"minAmountsOut","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"flashLoan","inputs":[{"name":"recipient","type":"address","internalType":"contract IFlashLoanRecipient"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getAuthorizer","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAuthorizer"}],"stateMutability":"view"},{"type":"function","name":"getDomainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getInternalBalance","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getNextNonce","inputs":[{"name":"user","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPausedState","inputs":[],"outputs":[{"name":"paused","type":"bool","internalType":"bool"},{"name":"pauseWindowEndTime","type":"uint256","internalType":"uint256"},{"name":"bufferPeriodEndTime","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"uint8","internalType":"enum IVault.PoolSpecialization"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokenInfo","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"token","type":"address","internalType":"contract IERC20"}],"outputs":[{"name":"cash","type":"uint256","internalType":"uint256"},{"name":"managed","type":"uint256","internalType":"uint256"},{"name":"lastChangeBlock","type":"uint256","internalType":"uint256"},{"name":"assetManager","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getPoolTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"balances","type":"uint256[]","internalType":"uint256[]"},{"name":"lastChangeBlock","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getProtocolFeesCollector","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ProtocolFeesCollector"}],"stateMutability":"view"},{"type":"function","name":"hasApprovedRelayer","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"relayer","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"joinPool","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"request","type":"tuple","internalType":"struct IVault.JoinPoolRequest","components":[{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"maxAmountsIn","type":"uint256[]","internalType":"uint256[]"},{"name":"userData","type":"bytes","internalType":"bytes"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"managePoolBalance","inputs":[{"name":"ops","type":"tuple[]","internalType":"struct IVault.PoolBalanceOp[]","components":[{"name":"kind","type":"uint8","internalType":"enum IVault.PoolBalanceOpKind"},{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"token","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint256","internalType":"uint256"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"manageUserBalance","inputs":[{"name":"ops","type":"tuple[]","internalType":"struct IVault.UserBalanceOp[]","components":[{"name":"kind","type":"uint8","internalType":"enum IVault.UserBalanceOpKind"},{"name":"asset","type":"address","internalType":"contract IAsset"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address payable"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"queryBatchSwap","inputs":[{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"swaps","type":"tuple[]","internalType":"struct IVault.BatchSwapStep[]","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"assetInIndex","type":"uint256","internalType":"uint256"},{"name":"assetOutIndex","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"assets","type":"address[]","internalType":"contract IAsset[]"},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]}],"outputs":[{"name":"assetDeltas","type":"int256[]","internalType":"int256[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerPool","inputs":[{"name":"specialization","type":"uint8","internalType":"enum IVault.PoolSpecialization"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerTokens","inputs":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"assetManagers","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setAuthorizer","inputs":[{"name":"newAuthorizer","type":"address","internalType":"contract IAuthorizer"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setPaused","inputs":[{"name":"paused","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRelayerApproval","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"relayer","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"swap","inputs":[{"name":"singleSwap","type":"tuple","internalType":"struct IVault.SingleSwap","components":[{"name":"poolId","type":"bytes32","internalType":"bytes32"},{"name":"kind","type":"uint8","internalType":"enum IVault.SwapKind"},{"name":"assetIn","type":"address","internalType":"contract IAsset"},{"name":"assetOut","type":"address","internalType":"contract IAsset"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"userData","type":"bytes","internalType":"bytes"}]},{"name":"funds","type":"tuple","internalType":"struct IVault.FundManagement","components":[{"name":"sender","type":"address","internalType":"address"},{"name":"fromInternalBalance","type":"bool","internalType":"bool"},{"name":"recipient","type":"address","internalType":"address payable"},{"name":"toInternalBalance","type":"bool","internalType":"bool"}]},{"name":"limit","type":"uint256","internalType":"uint256"},{"name":"deadline","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"event","name":"AuthorizerChanged","inputs":[{"name":"newAuthorizer","type":"address","indexed":true,"internalType":"contract IAuthorizer"}],"anonymous":false},{"type":"event","name":"ExternalBalanceTransfer","inputs":[{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"recipient","type":"address","indexed":false,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FlashLoan","inputs":[{"name":"recipient","type":"address","indexed":true,"internalType":"contract IFlashLoanRecipient"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"feeAmount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"InternalBalanceChanged","inputs":[{"name":"user","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"delta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"PausedStateChanged","inputs":[{"name":"paused","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"PoolBalanceChanged","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"liquidityProvider","type":"address","indexed":true,"internalType":"address"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"},{"name":"deltas","type":"int256[]","indexed":false,"internalType":"int256[]"},{"name":"protocolFeeAmounts","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"PoolBalanceManaged","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"assetManager","type":"address","indexed":true,"internalType":"address"},{"name":"token","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"cashDelta","type":"int256","indexed":false,"internalType":"int256"},{"name":"managedDelta","type":"int256","indexed":false,"internalType":"int256"}],"anonymous":false},{"type":"event","name":"PoolRegistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"poolAddress","type":"address","indexed":true,"internalType":"address"},{"name":"specialization","type":"uint8","indexed":false,"internalType":"enum IVault.PoolSpecialization"}],"anonymous":false},{"type":"event","name":"RelayerApprovalChanged","inputs":[{"name":"relayer","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"Swap","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokenIn","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"tokenOut","type":"address","indexed":true,"internalType":"contract IERC20"},{"name":"amountIn","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amountOut","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TokensDeregistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"}],"anonymous":false},{"type":"event","name":"TokensRegistered","inputs":[{"name":"poolId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"tokens","type":"address[]","indexed":false,"internalType":"contract IERC20[]"},{"name":"assetManagers","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"AuthorizerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternalBalanceTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"name\":\"InternalBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PausedStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"deltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"protocolFeeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"PoolBalanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cashDelta\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"managedDelta\",\"type\":\"int256\"}],\"name\":\"PoolBalanceManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RelayerApprovalChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"TokensDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"TokensRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"int256[]\",\"name\":\"limits\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"batchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"deregisterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.ExitPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFlashLoanRecipient\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthorizer\",\"outputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getInternalBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPausedState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseWindowEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bufferPeriodEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastChangeBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocolFeesCollector\",\"outputs\":[{\"internalType\":\"contract ProtocolFeesCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"hasApprovedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.JoinPoolRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.PoolBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IVault.PoolBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"managePoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IVault.UserBalanceOpKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct IVault.UserBalanceOp[]\",\"name\":\"ops\",\"type\":\"tuple[]\"}],\"name\":\"manageUserBalance\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"assetInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.BatchSwapStep[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAsset[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"queryBatchSwap\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"assetDeltas\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IVault.PoolSpecialization\",\"name\":\"specialization\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"assetManagers\",\"type\":\"address[]\"}],\"name\":\"registerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAuthorizer\",\"name\":\"newAuthorizer\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setRelayerApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"enum IVault.SwapKind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetIn\",\"type\":\"address\"},{\"internalType\":\"contract IAsset\",\"name\":\"assetOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SingleSwap\",\"name\":\"singleSwap\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.\",\"events\":{\"AuthorizerChanged(address)\":{\"details\":\"Emitted when a new authorizer is set by `setAuthorizer`.\"},\"ExternalBalanceTransfer(address,address,address,uint256)\":{\"details\":\"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\"},\"FlashLoan(address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual flash loan performed by `flashLoan`.\"},\"InternalBalanceChanged(address,address,int256)\":{\"details\":\"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address.\"},\"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])\":{\"details\":\"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\"},\"PoolBalanceManaged(bytes32,address,address,int256,int256)\":{\"details\":\"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\"},\"PoolRegistered(bytes32,address,uint8)\":{\"details\":\"Emitted when a Pool is registered by calling `registerPool`.\"},\"RelayerApprovalChanged(address,address,bool)\":{\"details\":\"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\"},\"Swap(bytes32,address,address,uint256,uint256)\":{\"details\":\"Emitted for each individual swap performed by `swap` or `batchSwap`.\"},\"TokensDeregistered(bytes32,address[])\":{\"details\":\"Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\"},\"TokensRegistered(bytes32,address[],address[])\":{\"details\":\"Emitted when a Pool registers tokens by calling `registerTokens`.\"}},\"kind\":\"dev\",\"methods\":{\"WETH()\":{\"details\":\"Returns the Vault's WETH instance.\"},\"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)\":{\"details\":\"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events.\"},\"deregisterTokens(bytes32,address[])\":{\"details\":\"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event.\"},\"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event.\"},\"flashLoan(address,address[],uint256[],bytes)\":{\"details\":\"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events.\"},\"getAuthorizer()\":{\"details\":\"Returns the Vault's Authorizer.\"},\"getDomainSeparator()\":{\"details\":\"Returns the EIP712 domain separator.\"},\"getInternalBalance(address,address[])\":{\"details\":\"Returns `user`'s Internal Balance for a set of tokens.\"},\"getNextNonce(address)\":{\"details\":\"Returns the next nonce used by an address to sign messages.\"},\"getPausedState()\":{\"details\":\"Returns the current paused state.\"},\"getPool(bytes32)\":{\"details\":\"Returns a Pool's contract address and specialization setting.\"},\"getPoolTokenInfo(bytes32,address)\":{\"details\":\"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead.\"},\"getProtocolFeesCollector()\":{\"details\":\"Returns the current protocol fee module.\"},\"hasApprovedRelayer(address,address)\":{\"details\":\"Returns true if `user` has approved `relayer` to act as a relayer for them.\"},\"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))\":{\"details\":\"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event.\"},\"managePoolBalance((uint8,bytes32,address,uint256)[])\":{\"details\":\"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\"},\"manageUserBalance((uint8,address,uint256,address,address)[])\":{\"details\":\"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\"},\"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))\":{\"details\":\"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction.\"},\"registerPool(uint8)\":{\"details\":\"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event.\"},\"registerTokens(bytes32,address[],address[])\":{\"details\":\"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event.\"},\"setAuthorizer(address)\":{\"details\":\"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event.\"},\"setPaused(bool)\":{\"details\":\"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited.\"},\"setRelayerApproval(address,address,bool)\":{\"details\":\"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event.\"},\"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)\":{\"details\":\"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BalancerErrors.sol\\\";\\nimport \\\"./IAuthentication.sol\\\";\\n\\n/**\\n * @dev Building block for performing access control on external functions.\\n *\\n * This contract is used via the `authenticate` modifier (or the `_authenticateCaller` function), which can be applied\\n * to external functions to only make them callable by authorized accounts.\\n *\\n * Derived contracts must implement the `_canPerform` function, which holds the actual access control logic.\\n */\\nabstract contract Authentication is IAuthentication {\\n    bytes32 private immutable _actionIdDisambiguator;\\n\\n    /**\\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\\n     * multi contract systems.\\n     *\\n     * There are two main uses for it:\\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\\n     *    unique. The contract's own address is a good option.\\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\\n     *    shared by the entire family (and no other contract) should be used instead.\\n     */\\n    constructor(bytes32 actionIdDisambiguator) {\\n        _actionIdDisambiguator = actionIdDisambiguator;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        bytes32 actionId = getActionId(msg.sig);\\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\\n    }\\n\\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\\n        // multiple contracts.\\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\\n    }\\n\\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xea892213ec2967f53e26a0dd833bde01e4d9b6e49dd91e6c59ff00044f83c28d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/BalancerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\",\"keccak256\":\"0x4fccd72b44004509b27032aa9e9e91a24becaa67d65b79564e41cb99758f80d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd687ced203d2c6da8189792e1719a5182faf45956129388b231ee76740b99a6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2fe46b13b7c8bfc6f5c539c0b73d6325813f383f551b71fb6bca8dafd06964e1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0xb3e5b7c63f80b80ef3f0138eac56c397a439bf6b667fc06d5061aa869828b562\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./BalancerErrors.sol\\\";\\n\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd58eb6851269729d3ea0d739f812c67c3e750b046ef1653ae12134e668925d28\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce bytecode size.\\n// Modifier code is inlined by the compiler, which causes its code to appear multiple times in the codebase. By using\\n// private functions, we achieve the same end result with slightly higher runtime gas costs, but reduced bytecode size.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _enterNonReentrant();\\n        _;\\n        _exitNonReentrant();\\n    }\\n\\n    function _enterNonReentrant() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        _require(_status != _ENTERED, Errors.REENTRANCY);\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _exitNonReentrant() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xfe6da463cd5a6df10b49020a69b0978a4ef65d029e747c515062ec4a3359c464\",\"license\":\"MIT\"},\"contracts/lib/openzeppelin/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Based on the ReentrancyGuard library from OpenZeppelin Contracts, altered to reduce gas costs.\\n// The `safeTransfer` and `safeTransferFrom` functions assume that `token` is a contract (an account with code), and\\n// work differently from the OpenZeppelin version if it is not.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(address(token), abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     *\\n     * WARNING: `token` is assumed to be a contract: calls to EOAs will *not* revert.\\n     */\\n    function _callOptionalReturn(address token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n        (bool success, bytes memory returndata) = token.call(data);\\n\\n        // If the low-level call didn't succeed we return whatever was returned from it.\\n        assembly {\\n            if eq(success, 0) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        // Finally we check the returndata size is either zero or true - note that this check will always pass for EOAs\\n        _require(returndata.length == 0 || abi.decode(returndata, (bool)), Errors.SAFE_ERC20_CALL_FAILED);\\n    }\\n}\\n\",\"keccak256\":\"0x16d3e14c841b54a0f59fac0b899c4fa2f7b15d8d24f562a91edaf5aa140d57f5\",\"license\":\"MIT\"},\"contracts/vault/ProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/openzeppelin/IERC20.sol\\\";\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\nimport \\\"../lib/openzeppelin/ReentrancyGuard.sol\\\";\\nimport \\\"../lib/openzeppelin/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IAuthorizer.sol\\\";\\n\\n/**\\n * @dev This an auxiliary contract to the Vault, deployed by it during construction. It offloads some of the tasks the\\n * Vault performs to reduce its overall bytecode size.\\n *\\n * The current values for all protocol fee percentages are stored here, and any tokens charged as protocol fees are\\n * sent to this contract, where they may be withdrawn by authorized entities. All authorization tasks are delegated\\n * to the Vault's own authorizer.\\n */\\ncontract ProtocolFeesCollector is Authentication, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Absolute maximum fee percentages (1e18 = 100%, 1e16 = 1%).\\n    uint256 private constant _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE = 50e16; // 50%\\n    uint256 private constant _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE = 1e16; // 1%\\n\\n    IVault public immutable vault;\\n\\n    // All fee percentages are 18-decimal fixed point numbers.\\n\\n    // The swap fee is charged whenever a swap occurs, as a percentage of the fee charged by the Pool. These are not\\n    // actually charged on each individual swap: the `Vault` relies on the Pools being honest and reporting fees due\\n    // when users join and exit them.\\n    uint256 private _swapFeePercentage;\\n\\n    // The flash loan fee is charged whenever a flash loan occurs, as a percentage of the tokens lent.\\n    uint256 private _flashLoanFeePercentage;\\n\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    constructor(IVault _vault)\\n        // The ProtocolFeesCollector is a singleton, so it simply uses its own address to disambiguate action\\n        // identifiers.\\n        Authentication(bytes32(uint256(address(this))))\\n    {\\n        vault = _vault;\\n    }\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external nonReentrant authenticate {\\n        InputHelpers.ensureInputLengthMatch(tokens.length, amounts.length);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n            uint256 amount = amounts[i];\\n            token.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external authenticate {\\n        _require(newSwapFeePercentage <= _MAX_PROTOCOL_SWAP_FEE_PERCENTAGE, Errors.SWAP_FEE_PERCENTAGE_TOO_HIGH);\\n        _swapFeePercentage = newSwapFeePercentage;\\n        emit SwapFeePercentageChanged(newSwapFeePercentage);\\n    }\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external authenticate {\\n        _require(\\n            newFlashLoanFeePercentage <= _MAX_PROTOCOL_FLASH_LOAN_FEE_PERCENTAGE,\\n            Errors.FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH\\n        );\\n        _flashLoanFeePercentage = newFlashLoanFeePercentage;\\n        emit FlashLoanFeePercentageChanged(newFlashLoanFeePercentage);\\n    }\\n\\n    function getSwapFeePercentage() external view returns (uint256) {\\n        return _swapFeePercentage;\\n    }\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256) {\\n        return _flashLoanFeePercentage;\\n    }\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts) {\\n        feeAmounts = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            feeAmounts[i] = tokens[i].balanceOf(address(this));\\n        }\\n    }\\n\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\\n        return _getAuthorizer().canPerform(actionId, account, address(this));\\n    }\\n\\n    function _getAuthorizer() internal view returns (IAuthorizer) {\\n        return vault.getAuthorizer();\\n    }\\n}\\n\",\"keccak256\":\"0x67a0898b29a356085f4d7a83c52d1c794ebf07b6522133c9b9c7f5faf10d2184\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x70ecf1d48c285d78718bd2e159345677038ed8a81c74444bedd6a5c61af9aff6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x792871e208bba1dad291f8d1cffad86f4afa5e2360816bd9c43481f7297155f5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6886740dcaebfb24a25f914ce5b4299aeab3fe0cc135a1707c0fe4e3d6d02cb6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"../ProtocolFeesCollector.sol\\\";\\n\\nimport \\\"../../lib/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../../lib/helpers/ITemporarilyPausable.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (ProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0xc1b1344fcb93f499269d9687514f0a72cc8164cfd3dd3da08a6af1f9e7c60168\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x621a25d9e3f3a4cd9e4493ab330a50a4456b6ea8fc568911fdd5486f78a4d3ab\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Full external interface for the Vault core contract - no external or public methods exist in the contract that don't override one of these declarations.","methods":{"WETH()":{"details":"Returns the Vault's WETH instance."},"batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)":{"details":"Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either the amount of tokens sent to or received from the Pool, depending on the `kind` value. Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same index in the `assets` array. Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or `amountOut` depending on the swap kind. Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`. The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses, or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault. Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies the minimum or maximum amount of each token the vault is allowed to transfer. `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the equivalent `swap` call. Emits `Swap` events."},"deregisterTokens(bytes32,address[])":{"details":"Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be deregistered in the same `deregisterTokens` call. A deregistered token can be re-registered later on, possibly with a different Asset Manager. Emits a `TokensDeregistered` event."},"exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))":{"details":"Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see `getPoolTokenInfo`). If the caller is not `sender`, it must be an authorized relayer for them. The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault: it just enforces these minimums. If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit. `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be exited. If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise, an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to do so will trigger a revert. `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the `tokens` array. This array must match the Pool's registered tokens. This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract. Emits a `PoolBalanceChanged` event."},"flashLoan(address,address[],uint256[],bytes)":{"details":"Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it, and then reverting unless the tokens plus a proportional protocol fee have been returned. The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount for each token contract. `tokens` must be sorted in ascending order. The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the `receiveFlashLoan` call. Emits `FlashLoan` events."},"getAuthorizer()":{"details":"Returns the Vault's Authorizer."},"getDomainSeparator()":{"details":"Returns the EIP712 domain separator."},"getInternalBalance(address,address[])":{"details":"Returns `user`'s Internal Balance for a set of tokens."},"getNextNonce(address)":{"details":"Returns the next nonce used by an address to sign messages."},"getPausedState()":{"details":"Returns the current paused state."},"getPool(bytes32)":{"details":"Returns a Pool's contract address and specialization setting."},"getPoolTokenInfo(bytes32,address)":{"details":"Returns detailed information for a Pool's registered token. `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of `cash` and `managed`. Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`, `managed` or `total` balance to be greater than 2^112 - 1. `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a change for this purpose, and will update `lastChangeBlock`. `assetManager` is the Pool's token Asset Manager."},"getPoolTokens(bytes32)":{"details":"Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of the tokens' `balances` changed. The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order. If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same order as passed to `registerTokens`. Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo` instead."},"getProtocolFeesCollector()":{"details":"Returns the current protocol fee module."},"hasApprovedRelayer(address,address)":{"details":"Returns true if `user` has approved `relayer` to act as a relayer for them."},"joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))":{"details":"Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized Pool shares. If the caller is not `sender`, it must be an authorized relayer for them. The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces these maximums. If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent back to the caller (not the sender, which is important for relayers). `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final `assets` array might not be sorted. Pools with no registered tokens cannot be joined. If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be withdrawn from Internal Balance: attempting to do so will trigger a revert. This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement their own custom logic. This typically requires additional information from the user (such as the expected number of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed directly to the Pool's contract, as is `recipient`. Emits a `PoolBalanceChanged` event."},"managePoolBalance((uint8,bytes32,address,uint256)[])":{"details":"Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates. Pool Balance management features batching, which means a single contract call can be used to perform multiple operations of different kinds, with different Pools and tokens, at once. For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`."},"manageUserBalance((uint8,address,uint256,address,address)[])":{"details":"Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer) and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as it lets integrators reuse a user's Vault allowance. For each operation, if the caller is not `sender`, it must be an authorized relayer for them."},"queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))":{"details":"Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result. Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH) the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it receives are the same that an equivalent `batchSwap` call would receive. Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens, approve them for the Vault, or even know a user's address. Note that this function is not 'view' (due to implementation details): the client code must explicitly execute eth_call instead of eth_sendTransaction."},"registerPool(uint8)":{"details":"Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed. The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`, depending on the chosen specialization setting. This contract is known as the Pool's contract. Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words, multiple Pools may share the same contract. Emits a `PoolRegistered` event."},"registerTokens(bytes32,address[],address[])":{"details":"Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract. Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens, exit by receiving registered tokens, and can only swap registered tokens. Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in ascending order. The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`, depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore expected to be highly secured smart contracts with sound design principles, and the decision to register an Asset Manager should not be made lightly. Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset Manager is set, it cannot be changed except by deregistering the associated token and registering again with a different Asset Manager. Emits a `TokensRegistered` event."},"setAuthorizer(address)":{"details":"Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this. Emits an `AuthorizerChanged` event."},"setPaused(bool)":{"details":"Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an error in some part of the system. The Vault can only be paused during an initial time period, after which pausing is forever disabled. While the contract is paused, the following features are disabled: - depositing and transferring internal balance - transferring external balance (using the Vault's allowance) - swaps - joining Pools - Asset Manager interactions Internal Balance can still be withdrawn, and Pools exited."},"setRelayerApproval(address,address,bool)":{"details":"Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise. Emits a `RelayerApprovalChanged` event."},"swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)":{"details":"Performs a swap with a single Pool. If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens taken from the Pool, which must be greater than or equal to `limit`. If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens sent to the Pool, which must be less than or equal to `limit`. Internal Balance usage and the recipient are determined by the `funds` struct. Emits a `Swap` event."}},"events":{"AuthorizerChanged(address)":{"details":"Emitted when a new authorizer is set by `setAuthorizer`."},"ExternalBalanceTransfer(address,address,address,uint256)":{"details":"Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account."},"FlashLoan(address,address,uint256,uint256)":{"details":"Emitted for each individual flash loan performed by `flashLoan`."},"InternalBalanceChanged(address,address,int256)":{"details":"Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through interacting with Pools using Internal Balance. Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH address."},"PoolBalanceChanged(bytes32,address,address[],int256[],uint256[])":{"details":"Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively."},"PoolBalanceManaged(bytes32,address,address,int256,int256)":{"details":"Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`."},"PoolRegistered(bytes32,address,uint8)":{"details":"Emitted when a Pool is registered by calling `registerPool`."},"RelayerApprovalChanged(address,address,bool)":{"details":"Emitted every time a relayer is approved or disapproved by `setRelayerApproval`."},"Swap(bytes32,address,address,uint256,uint256)":{"details":"Emitted for each individual swap performed by `swap` or `batchSwap`."},"TokensDeregistered(bytes32,address[])":{"details":"Emitted when a Pool deregisters tokens by calling `deregisterTokens`."},"TokensRegistered(bytes32,address[],address[])":{"details":"Emitted when a Pool registers tokens by calling `registerTokens`."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"WETH()":"ad5c4648","batchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool),int256[],uint256)":"945bcec9","deregisterTokens(bytes32,address[])":"7d3aeb96","exitPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"8bdb3913","flashLoan(address,address[],uint256[],bytes)":"5c38449e","getAuthorizer()":"aaabadc5","getDomainSeparator()":"ed24911d","getInternalBalance(address,address[])":"0f5a6efa","getNextNonce(address)":"90193b7c","getPausedState()":"1c0de051","getPool(bytes32)":"f6c00927","getPoolTokenInfo(bytes32,address)":"b05f8e48","getPoolTokens(bytes32)":"f94d4668","getProtocolFeesCollector()":"d2946c2b","hasApprovedRelayer(address,address)":"fec90d72","joinPool(bytes32,address,address,(address[],uint256[],bytes,bool))":"b95cac28","managePoolBalance((uint8,bytes32,address,uint256)[])":"e6c46092","manageUserBalance((uint8,address,uint256,address,address)[])":"0e8e3e84","queryBatchSwap(uint8,(bytes32,uint256,uint256,uint256,bytes)[],address[],(address,bool,address,bool))":"f84d066e","registerPool(uint8)":"09b2760f","registerTokens(bytes32,address[],address[])":"66a9c7d2","setAuthorizer(address)":"058a628f","setPaused(bool)":"16c38b3c","setRelayerApproval(address,address,bool)":"fa6e671d","swap((bytes32,uint8,address,address,uint256,bytes),(address,bool,address,bool),uint256,uint256)":"52bbbe29"}},"ewasm":{"wasm":""}}},"contracts/vault/interfaces/IWETH.sol":{"IWETH":{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"deposit","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"sender","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"withdraw","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"metadata":"{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the WETH token contract used internally for wrapping and unwrapping, to support sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/interfaces/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1500},\"remappings\":[]},\"sources\":{\"contracts/lib/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd828a935a72a6d182912abba290e4debb8c684c36fd756088f7acb30e0b2bb76\",\"license\":\"MIT\"},\"contracts/vault/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the WETH token contract used internally for wrapping and unwrapping, to support\\n * sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x621a25d9e3f3a4cd9e4493ab330a50a4456b6ea8fc568911fdd5486f78a4d3ab\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","userdoc":{"version":1,"kind":"user"},"devdoc":{"version":1,"kind":"dev","details":"Interface for the WETH token contract used internally for wrapping and unwrapping, to support sending and receiving ETH in joins, swaps, and internal balance deposits and withdrawals.","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}}},"evm":{"assembly":"","bytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"","opcodes":"","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","deposit()":"d0e30db0","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","withdraw(uint256)":"2e1a7d4d"}},"ewasm":{"wasm":""}}}}}],"expires_at":18446744073709551615}